{
  "versions": [
    {
      "name": "all",
      "selected": false
    },
    {
      "name": "2.1.0",
      "selected": false
    },
    {
      "name": "2.2.0",
      "selected": false
    },
    {
      "name": "2.3.0",
      "selected": false
    },
    {
      "name": "2.4.0",
      "selected": false
    },
    {
      "name": "2.5.0",
      "selected": false
    },
    {
      "name": "2.6.0",
      "selected": false
    },
    {
      "name": "2.7.0",
      "selected": false
    },
    {
      "name": "3.0",
      "selected": false
    },
    {
      "name": "3.1",
      "selected": false
    },
    {
      "name": "3.2",
      "selected": false
    },
    {
      "name": "3.3",
      "selected": true
    }
  ],
  "statistics": {
    "total": 726,
    "start_offset": 1,
    "end_offset": 100,
    "elapsed_time": 0.06800222396850586
  },
  "conditions": [
    {
      "name": "version",
      "value": "3.3",
      "icon_url": "https://rurema.clear-code.com/images/version-icon.png"
    },
    {
      "name": "query",
      "value": "Array",
      "icon_url": "https://rurema.clear-code.com/images/query-icon.png"
    }
  ],
  "corrections": [
    {
      "value": "array fill",
      "score": 22214
    },
    {
      "value": "array []",
      "score": 14810
    },
    {
      "value": "array sample",
      "score": 14806
    },
    {
      "value": "array new",
      "score": 11106
    },
    {
      "value": "array []=",
      "score": 11106
    }
  ],
  "suggestions": [],
  "entries": [
    {
      "signature": "Array",
      "score": 114001.0,
      "metadata": {
        "type": "class",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列クラスです。\n配列は任意の Ruby オブジェクトを要素として持つことができます。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/class/Array.html",
          "description": "配列クラスです。\n配列は任意の Ruby オブジェクトを要素として持つことができます。\n\n一般的には配列は配列式を使って\n\n//emlist[例][ruby]{\n[1, 2, 3]\n//}\n\nのように生成します。",
          "snippets": []
        }
      ],
      "related_entries": []
    },
    {
      "signature": "Array#difference(*other_arrays) -> Array",
      "score": 63622.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "自身から other_arrays の要素を取り除いた配列を生成して返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/difference.html",
          "description": "自身から other_arrays の要素を取り除いた配列を生成して返します。\n\n要素の同一性は Object#hash と Object#eql? により評価されます。\nself 中で重複していて、other_arrays中に存在していなかった要素は、その重複が保持されます。\n新しい配列における要素の順は self における要素の順と同じです。\n\n//emlist[例][ruby]{\n[ 1, 1, 2, 2, 3, 3, 4, 5 ].difference([ 1, 2, 4 ])       # => [ 3, 3, 5 ]\n[ 1, 'c', :s, 'yep' ].difference([ 1 ], [ 'a', 'c' ])    # => [:s, \"yep\"]\n//}\n\n集合のような振る舞いが必要なら Set も参照してください。\n\n@see Array#-",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Set",
          "label": "Set",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Set/"
        }
      ]
    },
    {
      "signature": "Array#intersection(*other_arrays) -> Array",
      "score": 63622.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "自身と引数に渡された配列の共通要素を新しい配列として返します。\n要素が重複する場合は、そのうちの1つのみを返します。\n要素の順序は自身の順序を維持します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/intersection.html",
          "description": "自身と引数に渡された配列の共通要素を新しい配列として返します。\n要素が重複する場合は、そのうちの1つのみを返します。\n要素の順序は自身の順序を維持します。\n\n@param other_arrays 自身と共通要素を取りたい配列を指定します。\n                    配列以外のオブジェクトを指定した場合は to_ary\n                    メソッドによる暗黙の型変換を試みます。\n\n@raise TypeError 引数に配列以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\nintersectionはObject#hashとObject#eql?を使って比較を行います。\n\n//emlist[例][ruby]{\n[1, 1, 3, 5].intersection([3, 2, 1])                  # => [1, 3]\n[\"a\", \"b\", \"z\"].intersection([\"a\", \"b\", \"c\"], [\"b\"])  # => [\"b\"]\n[\"a\"].intersection                                    # => [\"a\"]\n//}\n\n@see Set#intersection, Array#&",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#union(*other_arrays) -> Array",
      "score": 63622.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "集合の和演算です。self と other_arrays の配列にどれかに含まれる要素を\n全て含む新しい配列を返します。重複する要素は取り除かれます。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/union.html",
          "description": "集合の和演算です。self と other_arrays の配列にどれかに含まれる要素を\n全て含む新しい配列を返します。重複する要素は取り除かれます。\n\n要素の重複判定は、Object#eql? と Object#hash により行われます。\n\n@param other_arrays 0個以上の配列を指定します。\n\n//emlist[例][ruby]{\n[\"a\", \"b\", \"c\"].union([ \"c\", \"d\", \"a\" ])    #=> [\"a\", \"b\", \"c\", \"d\"]\n[\"a\"].union([\"e\", \"b\"], [\"a\", \"c\", \"b\"])    #=> [\"a\", \"e\", \"b\", \"c\"]\n[\"a\"].union # => [\"a\"]\n//}\n\n@see Array#|",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#pop(n) -> Array",
      "score": 63538.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "自身の末尾から要素を取り除いてそれを返します。\n引数を指定した場合はその個数だけ取り除き、それを配列で返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/pop.html",
          "description": "自身の末尾から要素を取り除いてそれを返します。\n引数を指定した場合はその個数だけ取り除き、それを配列で返します。\n\n空配列の場合、n が指定されていない場合は nil を、\n指定されている場合は空配列を返します。\nまた、n が自身の要素数より少ない場合はその要素数の配列を\n返します。どちらの場合も自身は空配列となります。\n\n返す値と副作用の両方を利用して、個数を指定して配列を 2 分する簡単な方法として使えます。\n\n@param n 自身から取り除きたい要素の個数を整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\narray = [1, [2, 3], 4]\np array.pop      # => 4\np array.pop      # => [2, 3]\np array          # => [1]\n\np array.pop      # => 1\np array.pop      # => nil\np array          # => []\narray = [1, 2, 3]\np array.pop(2)   #=> [2, 3]\np array          #=> [1]\n//}\n\n@see Array#push, Array#shift, Array#unshift",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#to_a -> Array",
      "score": 63490.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "self を返します。ただし、Array のサブクラスのインスタンスに対して呼ばれた時は、\n自身を Array に変換したものを返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/to_a.html",
          "description": "self を返します。ただし、Array のサブクラスのインスタンスに対して呼ばれた時は、\n自身を Array に変換したものを返します。\n\n//emlist[例][ruby]{\nclass SubArray < Array; end\nary1 = Array([1, 2, 3, 4])\nary2 = SubArray([1, 2, 3, 4])\n\nary1.to_a        # => [1, 2, 3, 4]\nary1.to_a.class  # => Array\n\nary2.to_a        # => [1, 2, 3, 4]\nary2.to_a.class  # => Array\n//}\n\n@see Array#to_ary",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#slice(pos, len) -> Array | nil",
      "score": 63415.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された自身の部分配列を返します。Array#[]  と同じです。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/slice.html",
          "description": "指定された自身の部分配列を返します。Array#[]  と同じです。\n\n@param pos Array#[]  と同じです。\n\n@param len Array#[]  と同じです。\n\n@param range Array#[]  と同じです。\n\n//emlist[例][ruby]{\np [0, 1, 2].slice(0, 2)    #=> [0, 1]\np [0, 1, 2].slice(2..3)    #=> [2]\np [0, 1, 2].slice(10, 1)   #=> nil\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#slice(range) -> Array | nil",
      "score": 63415.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された自身の部分配列を返します。Array#[]  と同じです。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/slice.html",
          "description": "指定された自身の部分配列を返します。Array#[]  と同じです。\n\n@param pos Array#[]  と同じです。\n\n@param len Array#[]  と同じです。\n\n@param range Array#[]  と同じです。\n\n//emlist[例][ruby]{\np [0, 1, 2].slice(0, 2)    #=> [0, 1]\np [0, 1, 2].slice(2..3)    #=> [2]\np [0, 1, 2].slice(10, 1)   #=> nil\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array.new(ary) -> Array",
      "score": 63403.0,
      "metadata": {
        "type": "singleton-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された配列 ary を複製して返します。\nArray#dup 同様 要素を複製しない浅い複製です。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/s/new.html",
          "description": "指定された配列 ary を複製して返します。\nArray#dup 同様 要素を複製しない浅い複製です。\n\n@param ary 複製したい配列を指定します。\n\n//emlist[例][ruby]{\np Array.new([1,2,3]) # => [1,2,3]\n\na = [\"a\", \"b\", \"c\"]\nb = Array.new(a)\na.each{|s| s.capitalize! }\np a                        #=> [\"A\", \"B\", \"C\"]\np b                        #=> [\"A\", \"B\", \"C\"]   (b は a と要素を共有する)\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array.try_convert(obj) -> Array | nil",
      "score": 63376.0,
      "metadata": {
        "type": "singleton-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "to_ary メソッドを用いて obj を配列に変換しようとします。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/s/try_convert.html",
          "description": "to_ary メソッドを用いて obj を配列に変換しようとします。\n\n何らかの理由で変換できないときには nil を返します。\nこのメソッドは引数が配列であるかどうかを調べるために使えます。\n\n//emlist[例][ruby]{\nArray.try_convert([1])   # => [1]\nArray.try_convert(\"1\")   # => nil\n\nif tmp = Array.try_convert(arg)\n  # the argument is an array\nelsif tmp = String.try_convert(arg)\n  # the argument is a string\nend\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#shift(n) -> Array",
      "score": 63358.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の先頭の要素を取り除いてそれを返します。\n引数を指定した場合はその個数だけ取り除き、それを配列で返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/shift.html",
          "description": "配列の先頭の要素を取り除いてそれを返します。\n引数を指定した場合はその個数だけ取り除き、それを配列で返します。\n\n空配列の場合、n が指定されていない場合は nil を、\n指定されている場合は空配列を返します。\nまた、n が自身の要素数より少ない場合はその要素数の配列を\n返します。どちらの場合も自身は空配列となります。\n\n返す値と副作用の両方を利用して、個数を指定して配列を 2 分する簡単な方法として使えます。\n\n@param n 自身から取り除きたい要素の個数を非負整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n@raise ArgumentError 引数に負の数を指定した場合に発生します。\n\n\n\n//emlist[例][ruby]{\na = [0, 1, 2, 3, 4]\np a.shift            #=> 0\np a                  #=> [1, 2, 3, 4]\n\np [].shift           #=> nil\np [].shift(1)        #=> []\n//}\n\n@see Array#push, Array#pop, Array#unshift",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array.[](*item) -> Array",
      "score": 63358.0,
      "metadata": {
        "type": "singleton-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "引数 item を要素として持つ配列を生成して返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/s/=5b=5d.html",
          "description": "引数 item を要素として持つ配列を生成して返します。\n\nArray のサブクラスを作成したしたときに、そのサブクラスのインスタンスを作成\nしやすくするために用意されている。\n\n@param item 配列の要素を指定します。\n\n//emlist[例][ruby]{\nArray[1, 2, 3] #=> [1, 2, 3]\n\nclass SubArray < Array\n  # ...\nend\np SubArray[1, 2, 3] # => [1, 2, 3]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Array/"
        }
      ]
    },
    {
      "signature": "Array.new(size) {|index| ... } -> Array",
      "score": 63358.0,
      "metadata": {
        "type": "singleton-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "長さ size の配列を生成し、各要素のインデックスを引数としてブロックを実行し、\n各要素の値をブロックの評価結果に設定します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/s/new.html",
          "description": "長さ size の配列を生成し、各要素のインデックスを引数としてブロックを実行し、\n各要素の値をブロックの評価結果に設定します。\n\nブロックは要素毎に実行されるので、全要素をあるオブジェクトの複製にすることができます。\n\n@param size 配列の長さを数値で指定します。\n\n//emlist[例][ruby]{\nary = Array.new(3){|index| \"hoge#{index}\"}\np ary                      #=> [\"hoge0\", \"hoge1\", \"hoge2\"]\n//}\n\n//emlist[例][ruby]{\nary = Array.new(3){ \"foo\" }\np ary                      #=> [\"foo\", \"foo\", \"foo\"]\nary[0].capitalize!\np ary                      #=> [\"Foo\", \"foo\", \"foo\"]  (各要素は違うオブジェクトである)\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array.new(size = 0, val = nil) -> Array",
      "score": 63343.0,
      "metadata": {
        "type": "singleton-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "長さ size の配列を生成し、各要素を val で初期化して返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/s/new.html",
          "description": "長さ size の配列を生成し、各要素を val で初期化して返します。\n\n要素毎に val が複製されるわけではないことに注意してください。\n全要素が同じオブジェクト val を参照します。\n後述の例では、配列の各要素は全て同一の文字列を指します。\n\n@param size 配列の長さを数値で指定します。\n\n@param val 配列の要素の値を指定します。\n\n//emlist[例][ruby]{\nary = Array.new(3, \"foo\")\np ary                     #=> [\"foo\", \"foo\", \"foo\"]\nary[0].capitalize!\np ary                     #=> [\"Foo\", \"Foo\", \"Foo\"]  (各要素は同一のオブジェクトである)\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#&(other) -> Array",
      "score": 63340.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "集合の積演算です。両方の配列に含まれる要素からなる新しい配列を返\nします。重複する要素は取り除かれます。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/=26.html",
          "description": "集合の積演算です。両方の配列に含まれる要素からなる新しい配列を返\nします。重複する要素は取り除かれます。\n\n要素の重複判定は、Object#eql? により行われます。\n\n新しい配列における要素の順は self における要素の順と同じです。\n\n@param other 配列を指定します。\n             配列以外のオブジェクトを指定した場合は to_ary メソッドによ\n             る暗黙の型変換を試みます。\n\n@raise TypeError 引数に配列以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\n[1, 1, 2, 3] & [3, 1, 4] #=> [1, 3]\n//}\n\n@see Array#|, Array#intersection",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#drop(n) -> Array",
      "score": 63340.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の先頭の n 要素を捨てて、\n残りの要素を配列として返します。\nこのメソッドは自身を破壊的に変更しません。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/drop.html",
          "description": "配列の先頭の n 要素を捨てて、\n残りの要素を配列として返します。\nこのメソッドは自身を破壊的に変更しません。\n\n@param n 捨てる要素数。\n\n//emlist[例][ruby]{\na = [1, 2, 3, 4, 5, 0]\na.drop(3)             # => [4, 5, 0]\n\n# 変数aの値は変化しない\na                     # => [1, 2, 3, 4, 5, 0]\n//}\n\n@see Enumerable#drop, Array#drop_while, Array#shift",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#|(other) -> Array",
      "score": 63340.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "集合の和演算です。両方の配列にいずれかに含まれる要素を全て含む新し\nい配列を返します。重複する要素は取り除かれます。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/=7c.html",
          "description": "集合の和演算です。両方の配列にいずれかに含まれる要素を全て含む新し\nい配列を返します。重複する要素は取り除かれます。\n\n要素の重複判定は、Object#eql? と Object#hash により行われます。\n\n新しい配列における要素の順は self における要素の順と同じです。\n\n@param other 配列を指定します。\n             配列以外のオブジェクトを指定した場合は to_ary メソッドによ\n             る暗黙の型変換を試みます。\n\n@raise TypeError 引数に配列以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\n[1, 1, 4, 2, 3] | [5, 4, 5]  #=> [1, 4, 2, 3, 5]\n//}\n\n@see Array#&\n@see Array#union",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#concat(*other_arrays) -> self",
      "score": 63328.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "other_arrays の要素を自身の末尾に破壊的に連結します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/concat.html",
          "description": "other_arrays の要素を自身の末尾に破壊的に連結します。\n\n@param other_arrays 自身と連結したい配列を指定します。\n\n//emlist[例][ruby]{\n[ \"a\", \"b\" ].concat( [\"c\", \"d\"] ) #=> [ \"a\", \"b\", \"c\", \"d\" ]\n[ \"a\" ].concat( [\"b\"], [\"c\", \"d\"] ) #=> [ \"a\", \"b\", \"c\", \"d\" ]\n[ \"a\" ].concat #=> [ \"a\" ]\n\na = [ 1, 2, 3 ]\na.concat( [ 4, 5 ] )\na                                 #=> [ 1, 2, 3, 4, 5 ]\n\na = [ 1, 2 ]\na.concat(a, a)                    #=> [1, 2, 1, 2, 1, 2]\n//}\n\n@see Array#+",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#first(n) -> Array",
      "score": 63325.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "先頭の n 要素を配列で返します。n は 0 以上でなければなりません。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/first.html",
          "description": "先頭の n 要素を配列で返します。n は 0 以上でなければなりません。\n\n@param n 取得したい要素の個数を整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n@raise ArgumentError n が負値の場合発生します。\n\n//emlist[例][ruby]{\nary =  [0, 1, 2]\np ary.first(0)\np ary.first(1)\np ary.first(2)\np ary.first(3)\np ary.first(4)\n# => []\n#    [0]\n#    [0, 1]\n#    [0, 1, 2]\n#    [0, 1, 2]\n//}\n\n@see Array#last",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#last(n) -> Array",
      "score": 63325.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "末尾の n 要素を配列で返します。n は 0 以上でなければなりません。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/last.html",
          "description": "末尾の n 要素を配列で返します。n は 0 以上でなければなりません。\n\n@param n 取得したい要素の個数を整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n@raise ArgumentError n が負値の場合発生します。\n\n//emlist[例][ruby]{\nary =  [0, 1, 2]\np ary.last(0)\np ary.last(1)\np ary.last(2)\np ary.last(3)\np ary.last(4)\n# => []\n#    [2]\n#    [1, 2]\n#    [0, 1, 2]\n#    [0, 1, 2]\n//}\n\n@see Array#first",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#shuffle -> Array",
      "score": 63325.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の要素をランダムシャッフルして，その結果を配列として返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/shuffle.html",
          "description": "配列の要素をランダムシャッフルして，その結果を配列として返します。\n\n引数に Random オブジェクトを渡すことでそのオブジェクトが\n生成する擬似乱数列を用いることができます。\n\n//emlist[例][ruby]{\na = [ 1, 2, 3 ]           #=> [1, 2, 3]\na.shuffle                 #=> [2, 3, 1]\nrng = Random.new\nrng2 = rng.dup # RNGを複製\n# 以下の2つは同じ結果を返す\n[1,2,3].shuffle(random: rng)\n[1,2,3].shuffle(random: rng2)\n//}\n\n@see Array#shuffle!",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Random",
          "label": "Random",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Random/"
        }
      ]
    },
    {
      "signature": "Array#shuffle(random: Random) -> Array",
      "score": 63325.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の要素をランダムシャッフルして，その結果を配列として返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/shuffle.html",
          "description": "配列の要素をランダムシャッフルして，その結果を配列として返します。\n\n引数に Random オブジェクトを渡すことでそのオブジェクトが\n生成する擬似乱数列を用いることができます。\n\n//emlist[例][ruby]{\na = [ 1, 2, 3 ]           #=> [1, 2, 3]\na.shuffle                 #=> [2, 3, 1]\nrng = Random.new\nrng2 = rng.dup # RNGを複製\n# 以下の2つは同じ結果を返す\n[1,2,3].shuffle(random: rng)\n[1,2,3].shuffle(random: rng2)\n//}\n\n@see Array#shuffle!",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Random",
          "label": "Random",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Random/"
        }
      ]
    },
    {
      "signature": "Array#sort -> Array",
      "score": 63325.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の内容をソートします。要素同士の比較は <=> 演算子を使って行います。sort はソートされた配列を生成して返します。\nsort! は self を破壊的にソートし、self を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/sort.html",
          "description": "配列の内容をソートします。要素同士の比較は <=> 演算子を使って行います。sort はソートされた配列を生成して返します。\nsort! は self を破壊的にソートし、self を返します。\n\nブロックとともに呼び出された時には、要素同士の比較をブロックを用いて行います。\nブロックに2つの要素を引数として与えて評価し、その結果で比較します。\nブロックは <=> 演算子と同様に整数を返すことが期待されています。つまり、\nブロックは第1引数が大きいなら正の整数、両者が等しいなら0、そして第1引数の方が小さいなら\n負の整数を返さなければいけません。両者を比較できない時は nil を返します。\n\n//emlist[例][ruby]{\nary1 = [ \"d\", \"a\", \"e\", \"c\", \"b\" ]\np ary1.sort                             #=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n\nary2 = [\"9\", \"7\", \"10\", \"11\", \"8\"]\np ary2.sort                             #=> [\"10\", \"11\", \"7\", \"8\", \"9\"] (文字列としてソートするとこうなる)\np ary2.sort{|a, b| a.to_i <=> b.to_i }  #=> [\"7\", \"8\", \"9\", \"10\", \"11\"] (ブロックを使って数字としてソート)\n\n# sort_by を使っても良い\np ary2.sort_by{|x| x.to_i }             #=> [\"7\", \"8\", \"9\", \"10\", \"11\"]\n//}\n\n@see Enumerable#sort_by\n     , Array#sort_by!",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#sort {|a, b| ... } -> Array",
      "score": 63325.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の内容をソートします。要素同士の比較は <=> 演算子を使って行います。sort はソートされた配列を生成して返します。\nsort! は self を破壊的にソートし、self を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/sort.html",
          "description": "配列の内容をソートします。要素同士の比較は <=> 演算子を使って行います。sort はソートされた配列を生成して返します。\nsort! は self を破壊的にソートし、self を返します。\n\nブロックとともに呼び出された時には、要素同士の比較をブロックを用いて行います。\nブロックに2つの要素を引数として与えて評価し、その結果で比較します。\nブロックは <=> 演算子と同様に整数を返すことが期待されています。つまり、\nブロックは第1引数が大きいなら正の整数、両者が等しいなら0、そして第1引数の方が小さいなら\n負の整数を返さなければいけません。両者を比較できない時は nil を返します。\n\n//emlist[例][ruby]{\nary1 = [ \"d\", \"a\", \"e\", \"c\", \"b\" ]\np ary1.sort                             #=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\n\nary2 = [\"9\", \"7\", \"10\", \"11\", \"8\"]\np ary2.sort                             #=> [\"10\", \"11\", \"7\", \"8\", \"9\"] (文字列としてソートするとこうなる)\np ary2.sort{|a, b| a.to_i <=> b.to_i }  #=> [\"7\", \"8\", \"9\", \"10\", \"11\"] (ブロックを使って数字としてソート)\n\n# sort_by を使っても良い\np ary2.sort_by{|x| x.to_i }             #=> [\"7\", \"8\", \"9\", \"10\", \"11\"]\n//}\n\n@see Enumerable#sort_by\n     , Array#sort_by!",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#-(other) -> Array",
      "score": 63322.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "自身から other の要素を取り除いた配列を生成して返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/=2d.html",
          "description": "自身から other の要素を取り除いた配列を生成して返します。\n\n要素の同一性は Object#eql? により評価されます。\nself 中で重複していて、other中に存在していなかった要素は、その重複が保持されます。\n\n@param other 自身から取り除きたい要素の配列を指定します。\n             配列以外のオブジェクトを指定した場合は to_ary メソッドによ\n             る暗黙の型変換を試みます。\n\n@raise TypeError 引数に配列以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\n[1, 2, 1, 3, 1, 4] - [4, 2]    # => [1, 1, 3, 1]\n\n[1, 2, 1, 3, 1, 4] - [1, 4]    # => [2, 3]\n//}\n\n\n@see Array#difference",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#assoc(key) -> Array | nil",
      "score": 63322.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の配列を検索して、その 0 番目の要素が key に == で等しい\n最初の要素を返します。該当する要素がなければ nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/assoc.html",
          "description": "配列の配列を検索して、その 0 番目の要素が key に == で等しい\n最初の要素を返します。該当する要素がなければ nil を返します。\n\n@param key 検索するオブジェクトを指定します。\n\n//emlist[例][ruby]{\nary = [[1,15], [2,25], [3,35]]\np ary.assoc(2)           # => [2, 25]\np ary.assoc(100)         # => nil\np ary.assoc(15)          # => nil\n//}\n\n@see Array#rassoc",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#drop_while {|element| ... } -> Array",
      "score": 63322.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "ブロックを評価して最初に偽となった要素の手前の要素まで捨て、\n残りの要素を配列として返します。\nこのメソッドは自身を破壊的に変更しません。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/drop_while.html",
          "description": "ブロックを評価して最初に偽となった要素の手前の要素まで捨て、\n残りの要素を配列として返します。\nこのメソッドは自身を破壊的に変更しません。\n\nブロックを指定しなかった場合は、Enumerator を返します。\n\n//emlist[例][ruby]{\na = [1, 2, 3, 4, 5, 0]\na.drop_while {|i| i < 3 }   # => [3, 4, 5, 0]\n\n# 変数aの値は変化しない\na                           # => [1, 2, 3, 4, 5, 0]\n//}\n\n@see Enumerable#drop_while, Array#drop",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#rassoc(obj) -> Array | nil",
      "score": 63322.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "自身が配列の配列であると仮定して、要素の配列でインデックス\n1 の要素が obj に等しいものを検索し見つかった最初の要素を返\nします。該当する要素がなければ nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/rassoc.html",
          "description": "自身が配列の配列であると仮定して、要素の配列でインデックス\n1 の要素が obj に等しいものを検索し見つかった最初の要素を返\nします。該当する要素がなければ nil を返します。\n\n比較は == 演算子を使って行われます。\n\n@param obj 検索するオブジェクトを指定します。\n\n//emlist[例][ruby]{\na = [[15,1], [25,2], [35,3]]\np a.rassoc(2)    # => [25, 2]\n//}\n\n@see Array#assoc",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#rotate(cnt = 1) -> Array",
      "score": 63322.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "cnt で指定したインデックスの要素が先頭になる配列を新しく作成します。\ncnt より前の要素は末尾に移動します。cnt に負の数を指定した場合、逆の操\n作を行います。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/rotate.html",
          "description": "cnt で指定したインデックスの要素が先頭になる配列を新しく作成します。\ncnt より前の要素は末尾に移動します。cnt に負の数を指定した場合、逆の操\n作を行います。\n\n@param cnt 先頭にする要素のインデックスを指定します。指定しなかった場合\n           は 1 になります。\n           整数以外のオブジェクトを指定した場合は to_int メソッドによる\n           暗黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\na = [ \"a\", \"b\", \"c\", \"d\" ]\na.rotate         # => [\"b\", \"c\", \"d\", \"a\"]\na                # => [\"a\", \"b\", \"c\", \"d\"]\na.rotate(2)      # => [\"c\", \"d\", \"a\", \"b\"]\na.rotate(-1)     # => [\"d\", \"a\", \"b\", \"c\"]\na.rotate(-3)     # => [\"b\", \"c\", \"d\", \"a\"]\n//}\n\n@see Array#rotate!",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#transpose -> Array",
      "score": 63322.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "自身を行列と見立てて、行列の転置(行と列の入れ換え)を行いま\nす。転置した配列を生成して返します。空の配列に対しては空の配列を生\n成して返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/transpose.html",
          "description": "自身を行列と見立てて、行列の転置(行と列の入れ換え)を行いま\nす。転置した配列を生成して返します。空の配列に対しては空の配列を生\n成して返します。\n\nそれ以外の一次元の配列に対しては、例外\nTypeError が発生します。各要素のサイズが不揃いな配列に対して\nは、例外 IndexError が発生します。\n\n//emlist[例][ruby]{\np [[1,2],\n   [3,4],\n   [5,6]].transpose\n# => [[1, 3, 5], [2, 4, 6]]\n\np [].transpose\n# => []\n\np [1,2,3].transpose\n\n# => -:1:in `transpose': cannot convert Fixnum into Array (TypeError)\n#       from -:1\n\np [[1,2],\n   [3,4,5],\n   [6,7]].transpose\n# => -:3:in `transpose': element size differ (3 should be 2) (IndexError)\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "IndexError",
          "label": "IndexError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IndexError/"
        },
        {
          "key": "TypeError",
          "label": "TypeError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:TypeError/"
        }
      ]
    },
    {
      "signature": "Array#*(times) -> Array",
      "score": 63310.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の内容を times 回 繰り返した新しい配列を作成して返します。\n値はコピーされないことに注意してください。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/=2a.html",
          "description": "配列の内容を times 回 繰り返した新しい配列を作成して返します。\n値はコピーされないことに注意してください。\n\n@param times 繰り返したい回数を整数で指定します。\n             整数以外のオブジェクトを指定した場合は to_int メソッドによ\n             る暗黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n@raise ArgumentError 引数に負の数を指定した場合に発生します。\n\n//emlist[例][ruby]{\np [1, 2, 3] * 3  #=> [1, 2, 3, 1, 2, 3, 1, 2, 3]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#[](range) -> Array | nil",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "Range オブジェクト range の範囲にある要素からなる部分配列を返します。\nrange の begin が自身の範囲外となる時は nil を返します。ただし、begin が配列の長さに等しいときは空の配列を返します。\nrange の begin が end より後にある場合には空の配列を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/=5b=5d.html",
          "description": "Range オブジェクト range の範囲にある要素からなる部分配列を返します。\nrange の begin が自身の範囲外となる時は nil を返します。ただし、begin が配列の長さに等しいときは空の配列を返します。\nrange の begin が end より後にある場合には空の配列を返します。\n\n@param range 生成したい部分配列の範囲を Range オブジェクトで指定します。\n             range の begin や end の値が負の時には末尾からのインデックスと見倣します。末尾\n             の要素が -1 番目になります。\n             end の値が配列の範囲を越える時には、越えた分は無視されます。\n\n//emlist[例][ruby]{\na = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\na[0..1]   #=> [\"a\", \"b\"]\na[0...1]  #=> [\"a\"]\na[0..-1]  #=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\na[-2..-1] #=> [\"d\", \"e\"]\na[-2..4]  #=> [\"d\", \"e\"]  (start は末尾から -2 番目、end は先頭から (4+1) 番目となる。)\na[0..10]  #=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\na[10..11] #=> nil\na[2..1]   #=> []\na[-1..-2] #=> []\n\n# 特殊なケース。begin が自身の長さと同じ場合には以下のようになります。\na[5]      #=> nil\na[5..10]  #=> []\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Range/"
        }
      ]
    },
    {
      "signature": "Array#[](start, length) -> Array | nil",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "start 番目から length 個の要素を含む部分配列を返します。\nstart が自身の範囲外となる時は nil を返します。ただし、start が配列の長さに等しいときは空の配列を返します。\nlength が負の時は nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/=5b=5d.html",
          "description": "start 番目から length 個の要素を含む部分配列を返します。\nstart が自身の範囲外となる時は nil を返します。ただし、start が配列の長さに等しいときは空の配列を返します。\nlength が負の時は nil を返します。\n\n@param start 生成したい部分配列の先頭のインデックスを整数で指定します。\n             start の値が負の時には末尾からのインデックスと見倣します。\n             末尾の要素が -1 番目になります。\n             整数以外のオブジェクトを指定した場合は to_int メソッドによ\n             る暗黙の型変換を試みます。\n\n@param length 生成したい部分配列の長さを整数で指定します。\n              length が start 番目からの配列の長さより長い時には、越え\n              た分の長さは無視されます。\n              整数以外のオブジェクトを指定した場合は to_int メソッドに\n              よる暗黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\na = [ \"a\", \"b\", \"c\", \"d\", \"e\" ]\na[0, 1]    #=> [\"a\"]\na[-1, 1]   #=> [\"e\"]\na[0, 10]   #=> [\"a\", \"b\", \"c\", \"d\", \"e\"]\na[0, 0]    #=> []\na[0, -1]   #=> nil\na[10, 1]   #=> nil\n\n# 特殊なケース。start が自身の長さと同じ場合には以下のようになります。\na[5]       #=> nil\na[5, 1]    #=> []\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#clone -> Array",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "レシーバと同じ内容を持つ新しい配列を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/clone.html",
          "description": "レシーバと同じ内容を持つ新しい配列を返します。\n\nclone は frozen singleton-class の情報も含めてコピーしますが、\ndup は内容だけをコピーします。\nまたどちらのメソッドも要素それ自体のコピーはしません。\nつまり参照しているオブジェクトが変わらない「浅い(shallow)」コピーを行います。\n\n//emlist[例][ruby]{\nary = ['string']\np ary             #=> [\"string\"]\ncopy = ary.dup\np copy            #=> [\"string\"]\n\nary[0][0...3] = ''\np ary             #=> [\"ing\"]\np copy            #=> [\"ing\"]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#dup -> Array",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "レシーバと同じ内容を持つ新しい配列を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/clone.html",
          "description": "レシーバと同じ内容を持つ新しい配列を返します。\n\nclone は frozen singleton-class の情報も含めてコピーしますが、\ndup は内容だけをコピーします。\nまたどちらのメソッドも要素それ自体のコピーはしません。\nつまり参照しているオブジェクトが変わらない「浅い(shallow)」コピーを行います。\n\n//emlist[例][ruby]{\nary = ['string']\np ary             #=> [\"string\"]\ncopy = ary.dup\np copy            #=> [\"string\"]\n\nary[0][0...3] = ''\np ary             #=> [\"ing\"]\np copy            #=> [\"ing\"]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#max(n) -> Array",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "最大の要素、もしくは最大の n 要素が降順に入った配列を返します。\n全要素が互いに <=> メソッドで比較できることを仮定しています。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/max.html",
          "description": "最大の要素、もしくは最大の n 要素が降順に入った配列を返します。\n全要素が互いに <=> メソッドで比較できることを仮定しています。\n\n引数を指定しない形式では要素が存在しなければ nil を返します。\n引数を指定する形式では、空の配列を返します。\n\n//emlist[例][ruby]{\n[].max           #=> nil\n[].max(1)        #=> []\n[2, 5, 3].max    #=> 5\n[2, 5, 3].max(2) #=> [5, 3]\n//}\n\n@param n 取得する要素数。\n\n@see Enumerable#max",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#max(n) {|a, b| ... } -> Array",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "ブロックの評価結果で各要素の大小判定を行い、最大の要素、もしくは最大の\nn 要素が降順に入った配列を返します。\n引数を指定しない形式では要素が存在しなければ nil を返します。\n引数を指定する形式では、空の配列を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/max.html",
          "description": "ブロックの評価結果で各要素の大小判定を行い、最大の要素、もしくは最大の\nn 要素が降順に入った配列を返します。\n引数を指定しない形式では要素が存在しなければ nil を返します。\n引数を指定する形式では、空の配列を返します。\n\nブロックの値は、a > b のとき正、\na == b のとき 0、a < b のとき負の整数を、期待しています。\n\n//emlist[例][ruby]{\n[].max {|a, b| a <=> b }    #=> nil\n[].max(1) {|a, b| a <=> b } #=> []\n\nary = %w(albatross dog horse)\nary.max {|a, b| a.length <=> b.length }    #=> \"albatross\"\nary.max(2) {|a, b| a.length <=> b.length } #=> [\"albatross\", \"horse\"]\n//}\n\n@param n 取得する要素数。\n\n@see Enumerable#max",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#min(n) -> Array",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "最小の要素、もしくは最小の n 要素が昇順で入った配列を返します。\n全要素が互いに <=> メソッドで比較できることを仮定しています。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/min.html",
          "description": "最小の要素、もしくは最小の n 要素が昇順で入った配列を返します。\n全要素が互いに <=> メソッドで比較できることを仮定しています。\n\n引数を指定しない形式では要素が存在しなければ nil を返します。\n引数を指定する形式では、空の配列を返します。\n\n//emlist[例][ruby]{\n[].min           #=> nil\n[].min(1)        #=> []\n[2, 5, 3].min    #=> 2\n[2, 5, 3].min(2) #=> [2, 3]\n//}\n\n@param n 取得する要素数。\n\n@see Enumerable#min",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#min(n) {|a, b| ... } -> Array",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "ブロックの評価結果で各要素の大小判定を行い、最小の要素、もしくは最小の\nn 要素が昇順で入った配列を返します。\n引数を指定しない形式では要素が存在しなければ nil を返します。\n引数を指定する形式では、空の配列を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/min.html",
          "description": "ブロックの評価結果で各要素の大小判定を行い、最小の要素、もしくは最小の\nn 要素が昇順で入った配列を返します。\n引数を指定しない形式では要素が存在しなければ nil を返します。\n引数を指定する形式では、空の配列を返します。\n\nブロックの値は、a > b のとき正、a == b のとき 0、\na < b のとき負の整数を、期待しています。\n\n//emlist[例][ruby]{\n[].min {|a, b| a <=> b }    #=> nil\n[].min(1) {|a, b| a <=> b } #=> []\n\nary = %w(albatross dog horse)\nary.min {|a, b| a.length <=> b.length }    #=> \"dog\"\nary.min(2) {|a, b| a.length <=> b.length } #=> [\"dog\", \"horse\"]\n//}\n\n@param n 取得する要素数。\n\n@see Enumerable#min",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#sample(n) -> Array",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の要素を1個(引数を指定した場合は自身の要素数を越えない範囲で n 個)\nランダムに選んで返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/sample.html",
          "description": "配列の要素を1個(引数を指定した場合は自身の要素数を越えない範囲で n 個)\nランダムに選んで返します。\n\n重複したインデックスは選択されません。そのため、自身がユニークな配列の\n場合は返り値もユニークな配列になります。\n\n配列が空の場合、無引数の場合は nil を、個数を指定した場合は空配列を返します。\n\nsrand()が有効です。\n\n@param n 取得する要素の数を指定します。自身の要素数(self.length)以上の\n         値を指定した場合は要素数と同じ数の配列を返します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@param random 乱数生成器(主に Random オブジェクト)を指定します。\n              選択する要素のインデックスを返す rand メソッドに応答する\n              オブジェクトであれば指定する事ができます。rand メソッド\n              の引数には Random#rand(max) のように選択可能なイン\n              デックスの最大値が指定されます。\n              Kernel.#rand、Random を使用しないオブジェク\n              トを指定した場合、Kernel.#srandの指定に影響されません。\n\n@raise TypeError 引数 n に整数以外の(暗黙の型変換が行えない)オブジェク\n                 トを指定した場合に発生します。\n\n@raise ArgumentError 引数 n に負の数を指定した場合に発生します。\n\n//emlist[例][ruby]{\na = (1..10).to_a\np a.sample        #=>  9\np a.sample        #=> 10\np a.sample(3)     #=> [1, 9, 3]\np a               #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Random",
          "label": "Random",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Random/"
        }
      ]
    },
    {
      "signature": "Array#sample(n, random: Random) -> Array",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の要素を1個(引数を指定した場合は自身の要素数を越えない範囲で n 個)\nランダムに選んで返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/sample.html",
          "description": "配列の要素を1個(引数を指定した場合は自身の要素数を越えない範囲で n 個)\nランダムに選んで返します。\n\n重複したインデックスは選択されません。そのため、自身がユニークな配列の\n場合は返り値もユニークな配列になります。\n\n配列が空の場合、無引数の場合は nil を、個数を指定した場合は空配列を返します。\n\nsrand()が有効です。\n\n@param n 取得する要素の数を指定します。自身の要素数(self.length)以上の\n         値を指定した場合は要素数と同じ数の配列を返します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@param random 乱数生成器(主に Random オブジェクト)を指定します。\n              選択する要素のインデックスを返す rand メソッドに応答する\n              オブジェクトであれば指定する事ができます。rand メソッド\n              の引数には Random#rand(max) のように選択可能なイン\n              デックスの最大値が指定されます。\n              Kernel.#rand、Random を使用しないオブジェク\n              トを指定した場合、Kernel.#srandの指定に影響されません。\n\n@raise TypeError 引数 n に整数以外の(暗黙の型変換が行えない)オブジェク\n                 トを指定した場合に発生します。\n\n@raise ArgumentError 引数 n に負の数を指定した場合に発生します。\n\n//emlist[例][ruby]{\na = (1..10).to_a\np a.sample        #=>  9\np a.sample        #=> 10\np a.sample(3)     #=> [1, 9, 3]\np a               #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Random",
          "label": "Random",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Random/"
        }
      ]
    },
    {
      "signature": "Array#slice!(range) -> Array | nil",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定した部分配列を自身から取り除き、取り除いた部分配列を返します。取り除く要素がなければ nil\nを返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/slice=21.html",
          "description": "指定した部分配列を自身から取り除き、取り除いた部分配列を返します。取り除く要素がなければ nil\nを返します。\n\n@param start 削除したい部分配列の先頭のインデックスを整数で指定します。\n\n@param len 削除したい部分配列の長さを整数で指定します。\n\n@param range 削除したい配列の範囲を Range オブジェクトで指定します。\n\n//emlist[例][ruby]{\na = [ \"a\", \"b\", \"c\" ]\na.slice!(1, 2)     #=> [\"b\", \"c\"]\na                  #=> [\"a\"]\n\na = [ \"a\", \"b\", \"c\" ]\na.slice!(1, 0)     #=> []\na                  #=> [ \"a\", \"b\", \"c\" ]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Range/"
        }
      ]
    },
    {
      "signature": "Array#slice!(start, len) -> Array | nil",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定した部分配列を自身から取り除き、取り除いた部分配列を返します。取り除く要素がなければ nil\nを返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/slice=21.html",
          "description": "指定した部分配列を自身から取り除き、取り除いた部分配列を返します。取り除く要素がなければ nil\nを返します。\n\n@param start 削除したい部分配列の先頭のインデックスを整数で指定します。\n\n@param len 削除したい部分配列の長さを整数で指定します。\n\n@param range 削除したい配列の範囲を Range オブジェクトで指定します。\n\n//emlist[例][ruby]{\na = [ \"a\", \"b\", \"c\" ]\na.slice!(1, 2)     #=> [\"b\", \"c\"]\na                  #=> [\"a\"]\n\na = [ \"a\", \"b\", \"c\" ]\na.slice!(1, 0)     #=> []\na                  #=> [ \"a\", \"b\", \"c\" ]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Range/"
        }
      ]
    },
    {
      "signature": "Array#uniq -> Array",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "uniq は配列から重複した要素を取り除いた新しい配列を返します。\nuniq! は削除を破壊的に行い、削除が行われた場合は self を、\nそうでなければnil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/uniq.html",
          "description": "uniq は配列から重複した要素を取り除いた新しい配列を返します。\nuniq! は削除を破壊的に行い、削除が行われた場合は self を、\nそうでなければnil を返します。\n\n取り除かれた要素の部分は前に詰められます。\n要素の重複判定は、Object#eql? により行われます。\n\n//emlist[例][ruby]{\np [1, 1, 1].uniq         # => [1]\np [1, 4, 1].uniq         # => [1, 4]\np [1, 3, 2, 2, 3].uniq   # => [1, 3, 2]\n//}\n\nブロックが与えられた場合、ブロックが返した値が重複した要素を取り除いた\n配列を返します。\n\n//emlist[例][ruby]{\np [1, 3, 2, \"2\", \"3\"].uniq                # => [1, 3, 2, \"2\", \"3\"]\np [1, 3, 2, \"2\", \"3\"].uniq { |n| n.to_s } # => [1, 3, 2]\n//}\n\n要素を先頭から辿っていき、最初に出現したものが残ります。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#uniq {|item| ... } -> Array",
      "score": 63307.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "uniq は配列から重複した要素を取り除いた新しい配列を返します。\nuniq! は削除を破壊的に行い、削除が行われた場合は self を、\nそうでなければnil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/uniq.html",
          "description": "uniq は配列から重複した要素を取り除いた新しい配列を返します。\nuniq! は削除を破壊的に行い、削除が行われた場合は self を、\nそうでなければnil を返します。\n\n取り除かれた要素の部分は前に詰められます。\n要素の重複判定は、Object#eql? により行われます。\n\n//emlist[例][ruby]{\np [1, 1, 1].uniq         # => [1]\np [1, 4, 1].uniq         # => [1, 4]\np [1, 3, 2, 2, 3].uniq   # => [1, 3, 2]\n//}\n\nブロックが与えられた場合、ブロックが返した値が重複した要素を取り除いた\n配列を返します。\n\n//emlist[例][ruby]{\np [1, 3, 2, \"2\", \"3\"].uniq                # => [1, 3, 2, \"2\", \"3\"]\np [1, 3, 2, \"2\", \"3\"].uniq { |n| n.to_s } # => [1, 3, 2]\n//}\n\n要素を先頭から辿っていき、最初に出現したものが残ります。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#+(other) -> Array",
      "score": 63304.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "自身と other の内容を繋げた配列を生成して返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/=2b.html",
          "description": "自身と other の内容を繋げた配列を生成して返します。\n\n@param other 自身と繋げたい配列を指定します。\n             配列以外のオブジェクトを指定した場合は to_ary メソッドによ\n             る暗黙の型変換を試みます。\n\n@raise TypeError 引数に配列以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\na = [1, 2]\nb = [8, 9]\np a + b     #=> [1, 2, 8, 9]\np a         #=> [1, 2]        (変化なし)\np b         #=> [8, 9]        (こちらも変化なし)\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#compact -> Array",
      "score": 63304.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "compact は自身から nil を取り除いた配列を生成して返します。\ncompact! は自身から破壊的に nil を取り除き、変更が\n行われた場合は self を、そうでなければ nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/compact.html",
          "description": "compact は自身から nil を取り除いた配列を生成して返します。\ncompact! は自身から破壊的に nil を取り除き、変更が\n行われた場合は self を、そうでなければ nil を返します。\n\n//emlist[例][ruby]{\nary = [1, nil, 2, nil, 3, nil]\np ary.compact   #=> [1, 2, 3]\np ary           #=> [1, nil, 2, nil, 3, nil]\nary.compact!\np ary           #=> [1, 2, 3]\np ary.compact!  #=> nil\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#flatten(lv = nil) -> Array",
      "score": 63304.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "flatten は自身を再帰的に平坦化した配列を生成して返します。flatten! は\n自身を再帰的かつ破壊的に平坦化し、平坦化が行われた場合は self をそうでない\n場合は nil を返します。\nlv が指定された場合、lv の深さまで再帰的に平坦化します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/flatten.html",
          "description": "flatten は自身を再帰的に平坦化した配列を生成して返します。flatten! は\n自身を再帰的かつ破壊的に平坦化し、平坦化が行われた場合は self をそうでない\n場合は nil を返します。\nlv が指定された場合、lv の深さまで再帰的に平坦化します。\n\n@param lv 平坦化の再帰の深さを整数で指定します。nil を指定した場合、再\n          帰の深さの制限無しに平坦化します。\n          整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n          黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n@raise ArgumentError 配列要素が自身を含むような無限にネストした配列に対して flatten を呼んだ場合に発生します。\n\n//emlist[例][ruby]{\n# 自身を再帰的に平坦化する例。\na = [1, [2, 3, [4], 5]]\np a.flatten                     #=> [1, 2, 3, 4, 5]\np a                             #=> [1, [2, 3, [4], 5]]\n\n# 自身を破壊的に平坦化する例。\na = [[[1, [2, 3]]]]\np a.flatten!                    #=> [1, 2, 3]\np a                             #=> [1, 2, 3]\n\n# 平坦化が行われない場合は nil を返す。\np [1, 2, 3].flatten!            #=> nil\n\n# 平坦化の再帰の深さを指定する例。\na = [ 1, 2, [3, [4, 5] ] ]\na.flatten(1)              #=> [1, 2, 3, [4, 5]]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#product(*lists) -> Array",
      "score": 63304.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "レシーバの配列と引数で与えられた配列（複数可）のそれぞれから要素を1\n個ずつとって配列とし，それらのすべての配列を要素とする配列を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/product.html",
          "description": "レシーバの配列と引数で与えられた配列（複数可）のそれぞれから要素を1\n個ずつとって配列とし，それらのすべての配列を要素とする配列を返します。\n\n返される配列の長さは，レシーバと引数で与えられた配列の長さのすべての積にな\nります。\n\n\n@param lists 配列。複数指定可能。\n\n//emlist[例][ruby]{\n[1,2,3].product([4,5])     # => [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]\n[1,2].product([1,2])       # => [[1,1],[1,2],[2,1],[2,2]]\n[1,2].product([3,4],[5,6]) # => [[1,3,5],[1,3,6],[1,4,5],[1,4,6],\n                           #     [2,3,5],[2,3,6],[2,4,5],[2,4,6]]\n[1,2].product()            # => [[1],[2]]\n[1,2].product([])          # => []\n//}\n\nブロックが与えられた場合、作成した配列の各要素を引数としてブロックを実\n行して self を返します。\n\n//emlist[例][ruby]{\na = []\n[1,2,3].product([4,5]) {|e| a << e} # => [1,2,3]\na # => [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#reverse -> Array",
      "score": 63304.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "reverse は自身の要素を逆順に並べた新しい配列を生成して返します。\nreverse! は自身を破壊的に並べ替えます。\nreverse! は self を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/reverse.html",
          "description": "reverse は自身の要素を逆順に並べた新しい配列を生成して返します。\nreverse! は自身を破壊的に並べ替えます。\nreverse! は self を返します。\n\n//emlist[例][ruby]{\na = [\"a\", 2, true]\np a.reverse         #=> [true, 2, \"a\"]\np a                 #=> [\"a\", 2, true] (変化なし)\n\na = [\"a\", 2, true]\np a.reverse!        #=> [true, 2, \"a\"]\np a                 #=> [true, 2, \"a\"]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#take(n) -> Array",
      "score": 63304.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の先頭から n 要素を配列として返します。\nこのメソッドは自身を破壊的に変更しません。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/take.html",
          "description": "配列の先頭から n 要素を配列として返します。\nこのメソッドは自身を破壊的に変更しません。\n\n@param n 要素数を指定します。\n\n//emlist[例][ruby]{\na = [1, 2, 3, 4, 5, 0]\na.take(3)             # => [1, 2, 3]\n//}\n\n@see Enumerable#take",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#take_while {|element| ... } -> Array",
      "score": 63304.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の要素を順に偽になるまでブロックで評価します。\n最初に偽になった要素の手前の要素までを配列として返します。\nこのメソッドは自身を破壊的に変更しません。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/take_while.html",
          "description": "配列の要素を順に偽になるまでブロックで評価します。\n最初に偽になった要素の手前の要素までを配列として返します。\nこのメソッドは自身を破壊的に変更しません。\n\n//emlist[例][ruby]{\na = [1, 2, 3, 4, 5, 0]\na.take_while {|i| i < 3 }   # => [1, 2]\n//}\n\nブロックを省略した場合は Enumerator を返します。\n\n@see Enumerable#take_while",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#values_at(*selectors) -> Array",
      "score": 63304.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "引数で指定されたインデックスに対応する要素を配列で返します。インデッ\nクスに対応する値がなければ nil が要素になります。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/values_at.html",
          "description": "引数で指定されたインデックスに対応する要素を配列で返します。インデッ\nクスに対応する値がなければ nil が要素になります。\n\n@param selectors インデックスを整数もしくは整数の Range で指定します。\n\n//emlist[例][ruby]{\nary = %w( a b c d e )\np ary.values_at( 0, 2, 4 )          #=> [\"a\", \"c\", \"e\"]\np ary.values_at( 3, 4, 5, 6, 35 )   #=> [\"d\", \"e\", nil, nil, nil]\np ary.values_at( 0, -1, -2 )        #=> [\"a\", \"e\", \"d\"]\np ary.values_at( -4, -5, -6, -35 )  #=> [\"b\", \"a\", nil, nil]\np ary.values_at( 1..2 )             #=> [\"b\", \"c\"]\np ary.values_at( 3..10 )            #=> [\"d\", \"e\", nil, nil, nil, nil, nil, nil]\np ary.values_at( 6..7 )             #=> [nil, nil]\np ary.values_at( 0, 3..5 )          #=> [\"a\", \"d\", \"e\", nil]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Range/"
        }
      ]
    },
    {
      "signature": "Array#pop -> object | nil",
      "score": 63238.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "自身の末尾から要素を取り除いてそれを返します。\n引数を指定した場合はその個数だけ取り除き、それを配列で返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/pop.html",
          "description": "自身の末尾から要素を取り除いてそれを返します。\n引数を指定した場合はその個数だけ取り除き、それを配列で返します。\n\n空配列の場合、n が指定されていない場合は nil を、\n指定されている場合は空配列を返します。\nまた、n が自身の要素数より少ない場合はその要素数の配列を\n返します。どちらの場合も自身は空配列となります。\n\n返す値と副作用の両方を利用して、個数を指定して配列を 2 分する簡単な方法として使えます。\n\n@param n 自身から取り除きたい要素の個数を整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\narray = [1, [2, 3], 4]\np array.pop      # => 4\np array.pop      # => [2, 3]\np array          # => [1]\n\np array.pop      # => 1\np array.pop      # => nil\np array          # => []\narray = [1, 2, 3]\np array.pop(2)   #=> [2, 3]\np array          #=> [1]\n//}\n\n@see Array#push, Array#shift, Array#unshift",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#append(*obj) -> self",
      "score": 63163.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された obj を順番に配列の末尾に追加します。\n引数を指定しなければ何もしません。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/append.html",
          "description": "指定された obj を順番に配列の末尾に追加します。\n引数を指定しなければ何もしません。\n\n@param obj 自身に追加したいオブジェクトを指定します。\n\n//emlist[例][ruby]{\narray = [1, 2, 3]\narray.push 4\narray.push [5, 6]\narray.push 7, 8\np array          # => [1, 2, 3, 4, [5, 6], 7, 8]\n//}\n\n@see Array#pop, Array#shift, Array#unshift, Array#<<",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#push(*obj) -> self",
      "score": 63163.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された obj を順番に配列の末尾に追加します。\n引数を指定しなければ何もしません。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/append.html",
          "description": "指定された obj を順番に配列の末尾に追加します。\n引数を指定しなければ何もしません。\n\n@param obj 自身に追加したいオブジェクトを指定します。\n\n//emlist[例][ruby]{\narray = [1, 2, 3]\narray.push 4\narray.push [5, 6]\narray.push 7, 8\np array          # => [1, 2, 3, 4, [5, 6], 7, 8]\n//}\n\n@see Array#pop, Array#shift, Array#unshift, Array#<<",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#slice(nth) -> object | nil",
      "score": 63085.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された自身の要素を返します。Array#[]  と同じです。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/slice.html",
          "description": "指定された自身の要素を返します。Array#[]  と同じです。\n\n@param nth 要素のインデックスを整数で指定します。Array#[]  と同じです。\n\n//emlist[例][ruby]{\np [0, 1, 2].slice(1)    #=> 1\np [0, 1, 2].slice(2)    #=> 2\np [0, 1, 2].slice(10)   #=> nil\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#bsearch_index -> Enumerator",
      "score": 63073.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "ブロックの評価結果で範囲内の各要素の判定を行い、条件を満たす値の位置を\n二分探索(計算量は O(log n))で検索します。要素が見つからない場合は nil\nを返します。self はあらかじめソートしておく必要があります。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/bsearch_index.html",
          "description": "ブロックの評価結果で範囲内の各要素の判定を行い、条件を満たす値の位置を\n二分探索(計算量は O(log n))で検索します。要素が見つからない場合は nil\nを返します。self はあらかじめソートしておく必要があります。\n\n本メソッドはArray#bsearchと同様に、ブロックを評価した結果により2\nつのモードで動作します。Array#bsearch との違いは見つかった要素自\n身を返すか位置を返すかのみです。各モードのより詳細な違いについては\nArray#bsearch を参照してください。\n\n//emlist[例: find-minimum モード][ruby]{\nary = [0, 4, 7, 10, 12]\nary.bsearch_index { |x| x >=   4 } # => 1\nary.bsearch_index { |x| x >=   6 } # => 2\nary.bsearch_index { |x| x >=  -1 } # => 0\nary.bsearch_index { |x| x >= 100 } # => nil\n//}\n\n//emlist[例: find-any モード][ruby]{\nary = [0, 4, 7, 10, 12]\n# 4 <= v < 8 になる要素の位置を検索\nary.bsearch_index { |x| 1 - x / 4 } # => 2\n# 8 <= v < 10 になる要素の位置を検索\nary.bsearch_index { |x| 4 - x / 2 } # => nil\n//}\n\n@see Array#bsearch",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#bsearch_index { |x| ... } -> Integer | nil",
      "score": 63073.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "ブロックの評価結果で範囲内の各要素の判定を行い、条件を満たす値の位置を\n二分探索(計算量は O(log n))で検索します。要素が見つからない場合は nil\nを返します。self はあらかじめソートしておく必要があります。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/bsearch_index.html",
          "description": "ブロックの評価結果で範囲内の各要素の判定を行い、条件を満たす値の位置を\n二分探索(計算量は O(log n))で検索します。要素が見つからない場合は nil\nを返します。self はあらかじめソートしておく必要があります。\n\n本メソッドはArray#bsearchと同様に、ブロックを評価した結果により2\nつのモードで動作します。Array#bsearch との違いは見つかった要素自\n身を返すか位置を返すかのみです。各モードのより詳細な違いについては\nArray#bsearch を参照してください。\n\n//emlist[例: find-minimum モード][ruby]{\nary = [0, 4, 7, 10, 12]\nary.bsearch_index { |x| x >=   4 } # => 1\nary.bsearch_index { |x| x >=   6 } # => 2\nary.bsearch_index { |x| x >=  -1 } # => 0\nary.bsearch_index { |x| x >= 100 } # => nil\n//}\n\n//emlist[例: find-any モード][ruby]{\nary = [0, 4, 7, 10, 12]\n# 4 <= v < 8 になる要素の位置を検索\nary.bsearch_index { |x| 1 - x / 4 } # => 2\n# 8 <= v < 10 になる要素の位置を検索\nary.bsearch_index { |x| 4 - x / 2 } # => nil\n//}\n\n@see Array#bsearch",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#delete_at(pos) -> object | nil",
      "score": 63073.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された位置 pos にある要素を取り除きそれを返します。\npos が範囲外であったら nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/delete_at.html",
          "description": "指定された位置 pos にある要素を取り除きそれを返します。\npos が範囲外であったら nil を返します。\n\nArray#at と同様に負のインデックスで末尾から位置を指定するこ\nとができます。\n\n@param pos 削除したい要素のインデックスを整数で指定します。\n           整数以外のオブジェクトを指定した場合は to_int メソッドによる\n           暗黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\narray = [0, 1, 2, 3, 4]\narray.delete_at 2\np array             #=> [0, 1, 3, 4]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#sum(init=0) -> object",
      "score": 63073.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "要素の合計を返します。例えば [e1, e2, e3].sum は init + e1 + e2 + e3 を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/sum.html",
          "description": "要素の合計を返します。例えば [e1, e2, e3].sum は init + e1 + e2 + e3 を返します。\n\nブロックが与えられた場合、加算する前に各要素にブロックが適用されます。\n\n配列が空の場合、initを返します。\n\n//emlist[例][ruby]{\n[].sum                             #=> 0\n[].sum(0.0)                        #=> 0.0\n[1, 2, 3].sum                      #=> 6\n[3, 5.5].sum                       #=> 8.5\n[2.5, 3.0].sum(0.0) {|e| e * e }   #=> 15.25\n[Object.new].sum                   #=> TypeError\n//}\n\n配列の平均値は以下のように求められます。\n\n//emlist[例][ruby]{\nmean = ary.sum(0.0) / ary.length\n//}\n\ninit 引数を明示的に指名すると数値以外のオブジェクトにも使えます。\n\n//emlist[例][ruby]{\n[\"a\", \"b\", \"c\"].sum(\"\")            #=> \"abc\"\n[[1], [[2]], [3]].sum([])          #=> [1, [2], 3]\n//}\n\nしかし、文字列の配列や配列の配列の場合 Array#join や Array#flatten の方が Array#sum よりも高速です。\n\n//emlist[例][ruby]{\n[\"a\", \"b\", \"c\"].join               #=> \"abc\"\n[[1], [[2]], [3]].flatten(1)       #=> [1, [2], 3]\n//}\n\n\"+\" メソッドが再定義されている場合、Array#sum は再定義を無視することがあります(例えば Integer#+)。\n\n@see Enumerable#sum",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#sum(init=0) {|e| expr } -> object",
      "score": 63073.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "要素の合計を返します。例えば [e1, e2, e3].sum は init + e1 + e2 + e3 を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/sum.html",
          "description": "要素の合計を返します。例えば [e1, e2, e3].sum は init + e1 + e2 + e3 を返します。\n\nブロックが与えられた場合、加算する前に各要素にブロックが適用されます。\n\n配列が空の場合、initを返します。\n\n//emlist[例][ruby]{\n[].sum                             #=> 0\n[].sum(0.0)                        #=> 0.0\n[1, 2, 3].sum                      #=> 6\n[3, 5.5].sum                       #=> 8.5\n[2.5, 3.0].sum(0.0) {|e| e * e }   #=> 15.25\n[Object.new].sum                   #=> TypeError\n//}\n\n配列の平均値は以下のように求められます。\n\n//emlist[例][ruby]{\nmean = ary.sum(0.0) / ary.length\n//}\n\ninit 引数を明示的に指名すると数値以外のオブジェクトにも使えます。\n\n//emlist[例][ruby]{\n[\"a\", \"b\", \"c\"].sum(\"\")            #=> \"abc\"\n[[1], [[2]], [3]].sum([])          #=> [1, [2], 3]\n//}\n\nしかし、文字列の配列や配列の配列の場合 Array#join や Array#flatten の方が Array#sum よりも高速です。\n\n//emlist[例][ruby]{\n[\"a\", \"b\", \"c\"].join               #=> \"abc\"\n[[1], [[2]], [3]].flatten(1)       #=> [1, [2], 3]\n//}\n\n\"+\" メソッドが再定義されている場合、Array#sum は再定義を無視することがあります(例えば Integer#+)。\n\n@see Enumerable#sum",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#to_ary -> self",
      "score": 63073.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "self をそのまま返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/to_ary.html",
          "description": "self をそのまま返します。\n\n//emlist[例][ruby]{\nclass SubArray < Array; end\nary1 = Array([1, 2, 3, 4])\nary2 = SubArray([1, 2, 3, 4])\n\nary1.to_ary        # => [1, 2, 3, 4]\nary1.to_ary.class  # => Array\n\nary2.to_ary        # => [1, 2, 3, 4]\nary2.to_ary.class  # => SubArray\n//}\n\n@see Array#to_a",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#*(sep) -> String",
      "score": 63070.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/=2a.html",
          "description": "指定された sep を間にはさんで連結した文字列を生成して返します。Array#join(sep) と同じ動作をします。\n\n@param sep 文字列を指定します。\n           文字列以外のオブジェクトを指定した場合は to_str メソッドによ\n           る暗黙の型変換を試みます。\n\n//emlist[例][ruby]{\np [1,2,3] * \",\"\n# => \"1,2,3\"\n//}\n\n@see Array#join",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#concat(other) -> self",
      "score": 63058.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列 other を自身の末尾に破壊的に連結します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/concat.html",
          "description": "配列 other を自身の末尾に破壊的に連結します。\n\n@param other 自身と連結したい配列を指定します。\n\n//emlist[例][ruby]{\narray = [1, 2]\na     = [3, 4]\narray.concat a\np array          # => [1, 2, 3, 4]\np a              # => [3, 4]       # こちらは変わらない\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#shift -> object | nil",
      "score": 63058.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の先頭の要素を取り除いてそれを返します。\n引数を指定した場合はその個数だけ取り除き、それを配列で返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/shift.html",
          "description": "配列の先頭の要素を取り除いてそれを返します。\n引数を指定した場合はその個数だけ取り除き、それを配列で返します。\n\n空配列の場合、n が指定されていない場合は nil を、\n指定されている場合は空配列を返します。\nまた、n が自身の要素数より少ない場合はその要素数の配列を\n返します。どちらの場合も自身は空配列となります。\n\n返す値と副作用の両方を利用して、個数を指定して配列を 2 分する簡単な方法として使えます。\n\n@param n 自身から取り除きたい要素の個数を非負整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n@raise ArgumentError 引数に負の数を指定した場合に発生します。\n\n\n\n//emlist[例][ruby]{\na = [0, 1, 2, 3, 4]\np a.shift            #=> 0\np a                  #=> [1, 2, 3, 4]\n\np [].shift           #=> nil\np [].shift(1)        #=> []\n//}\n\n@see Array#push, Array#pop, Array#unshift",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#delete(val) -> object | nil",
      "score": 63055.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された val と == で等しい要素を自身からすべて取り除きます。\n等しい要素が見つかった場合は最後に見つかった要素を、\nそうでない場合には nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/delete.html",
          "description": "指定された val と == で等しい要素を自身からすべて取り除きます。\n等しい要素が見つかった場合は最後に見つかった要素を、\nそうでない場合には nil を返します。\n\nブロックが与えられた場合、val と等しい要素が見つからなかったときにブロッ\nクを評価してその結果を返します。\n\n@param val 自身から削除したい値を指定します。\n\n//emlist[例][ruby]{\narray = [1, 2, 3, 2, 1]\np array.delete(2)       #=> 2\np array                 #=> [1, 3, 1]\n\n# ブロックなしの引数に nil を渡すとその戻り値から削除が\n# 行われたかどうかの判定をすることはできない\nary = [nil,nil,nil]\np ary.delete(nil)       #=> nil\np ary                   #=> []\np ary.delete(nil)       #=> nil\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#delete(val) { ... } -> object",
      "score": 63055.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された val と == で等しい要素を自身からすべて取り除きます。\n等しい要素が見つかった場合は最後に見つかった要素を、\nそうでない場合には nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/delete.html",
          "description": "指定された val と == で等しい要素を自身からすべて取り除きます。\n等しい要素が見つかった場合は最後に見つかった要素を、\nそうでない場合には nil を返します。\n\nブロックが与えられた場合、val と等しい要素が見つからなかったときにブロッ\nクを評価してその結果を返します。\n\n@param val 自身から削除したい値を指定します。\n\n//emlist[例][ruby]{\narray = [1, 2, 3, 2, 1]\np array.delete(2)       #=> 2\np array                 #=> [1, 3, 1]\n\n# ブロックなしの引数に nil を渡すとその戻り値から削除が\n# 行われたかどうかの判定をすることはできない\nary = [nil,nil,nil]\np ary.delete(nil)       #=> nil\np ary                   #=> []\np ary.delete(nil)       #=> nil\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#keep_if -> Enumerator",
      "score": 63055.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "ブロックが真を返した要素を残し、偽を返した要素を自身から削除します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/keep_if.html",
          "description": "ブロックが真を返した要素を残し、偽を返した要素を自身から削除します。\n\n//emlist[例][ruby]{\na = %w{ a b c d e f }\na.keep_if {|v| v =~ /[aeiou]/}   # => [\"a\", \"e\"]\na # => [\"a\", \"e\"]\n//}\n\nkeep_if は常に self を返しますが、Array#select! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。\n\n//emlist[例][ruby]{\na = %w{ a b c d e f }\na.keep_if {|v| v =~ /[a-z]/ }   # => [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\na # => [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n//}\n\nブロックが与えられなかった場合は、自身と keep_if から生成した\nEnumerator オブジェクトを返します。\n\n@see Array#select!, Array#delete_if",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#keep_if {|item| ... } -> self",
      "score": 63055.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "ブロックが真を返した要素を残し、偽を返した要素を自身から削除します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/keep_if.html",
          "description": "ブロックが真を返した要素を残し、偽を返した要素を自身から削除します。\n\n//emlist[例][ruby]{\na = %w{ a b c d e f }\na.keep_if {|v| v =~ /[aeiou]/}   # => [\"a\", \"e\"]\na # => [\"a\", \"e\"]\n//}\n\nkeep_if は常に self を返しますが、Array#select! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。\n\n//emlist[例][ruby]{\na = %w{ a b c d e f }\na.keep_if {|v| v =~ /[a-z]/ }   # => [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\na # => [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n//}\n\nブロックが与えられなかった場合は、自身と keep_if から生成した\nEnumerator オブジェクトを返します。\n\n@see Array#select!, Array#delete_if",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#pack(template) -> String",
      "score": 63055.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の内容を template で指定された文字列にしたがって、\nバイナリとしてパックした文字列を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/pack.html",
          "description": "配列の内容を template で指定された文字列にしたがって、\nバイナリとしてパックした文字列を返します。\n\nテンプレートは\n型指定文字列とその長さ(省略時は1)を並べたものです。長さと\nして * が指定された時は「残りのデータ全て」の長さを\n表します。型指定文字は以下で述べる pack テンプレート文字列の通りです。\n\nbuffer が指定されていれば、バッファとして使って返値として返します。\nもし template の最初にオフセット (@) が指定されていれば、\n結果はオフセットの後ろから詰められます。\nbuffer の元の内容がオフセットより長ければ、\nオフセットより後ろの部分は上書きされます。\nオフセットより短ければ、足りない部分は \"\\0\" で埋められます。\n\nbuffer オプションはメモリ確保が発生しないことを保証するものでは\nないことに注意してください。\nbuffer のサイズ(capacity)が足りなければ、packはメモリを確保します。\n\n//emlist[例][ruby]{\n['!'].pack('@1a', buffer: 'abc')  # => \"a!\"\n['!'].pack('@5a', buffer: 'abc')  # => \"abc\\u0000\\u0000!\"\n//}\n\n@param template 自身のバイナリとしてパックするためのテンプレートを文字列で指定します。\n@param buffer   結果を詰めるバッファとして使う文字列オブジェクトを指定します。\n                指定した場合は返値も指定した文字列オブジェクトになります。\n\n\n以下にあげるものは、Array#pack、String#unpack、String#unpack1\nのテンプレート文字の一覧です。テンプレート文字は後に「長さ」を表す数字\nを続けることができます。「長さ」の代わりに`*'とすることで「残り全て」\nを表すこともできます。\n\n長さの意味はテンプレート文字により異なりますが大抵、\n  \"iiii\"\nのように連続するテンプレート文字は\n  \"i4\"\nと書き換えることができます。\n\nテンプレート文字列中の空白類は無視されます。\nまた、`#' から改行あるいはテンプレート文字列の最後まではコメントとみな\nされ無視されます。\n\n=== 整数のテンプレート文字のシステム依存性\n\n各テンプレート文字の説明の中で、\nshort や long はシステムによらずそれぞれ 2, 4バイトサ\nイズの数値(32ビットマシンで一般的なshort, longのサイズ)を意味していま\nす。s, S, l, L に対しては直後に _ または ! を \"s_\" あるいは \"s!\" のように\n続けることでシステム依存の short, long のサイズにすることもできます。\n\ni, I (int)のサイズは常にシステム依存であり、n, N, v, V\nのサイズは常にシステム依存ではない(!をつけられない)ことに注意してください。\n\nつまり、IO#ioctl などで C の構造体を渡すときのように、\nシステム依存のサイズとエンディアンに合わせる必要があるときには\ns!, S!, i!, I!, l!, L!, q!, Q!, j!, J! を用います。\nまた、ネットワークプロトコルやファイルフォーマットのように、\nシステムに依存しないデータを扱うときには\nn, N, v, V を用います。\n\n強制的にエンディアンを指定したいときは、\nリトルエンディアンなら < を、\nビッグエンディアンなら >\nを後ろにつけます。! と組み合わせることも可能です。\n\nまとめると以下のようになります。\n\n: エンディアン非依存、整数サイズ非依存 (ネットワークプロトコルなどに適切)\n//emlist{\n  n: big endian unsigned 16bit\n  N: big endian unsigned 32bit\n  v: little endian unsigned 16bit\n  V: little endian unsigned 32bit\n//}\n\n: エンディアン依存、整数サイズ依存 (C の構造体などに適切)\n//emlist{\n  s!: signed short\n  S!: unsigned short\n  i,i!: signed int\n  I,I!: unsigned int\n  l!: signed long\n  L!: unsigned long\n  q!: signed long long\n  Q!: unsigned long long\n  j,j!: intptr_t\n  J,J!: uintptr_t\n//}\n\n: エンディアン依存、整数サイズ非依存 (C99 の stdint.h にある厳密な幅を持つ整数型に適切)\n//emlist{\n  s: int16_t\n  S: uint16_t\n  l: int32_t\n  L: uint32_t\n  q: int64_t\n  Q: uint64_t\n//}\n\n: エンディアンの強制指定(バイナリ解析などに適切)\n//emlist{\n  S>:  big endian unsigned 16bit(nと同じ)\n  s>:  big endian int16_t\n  s!>: big endian signed short\n  l<:  little endian int32_t\n  l!<: little endian signed long\n//}\n\n=== 各テンプレート文字の説明\n\n説明中、Array#pack と String#unpack で違いのあるものは `/' で区切って\n「Array#pack の説明 / String#unpack の説明」としています。\n\n: a\n\n  ASCII文字列(ヌル文字を詰める/後続するヌル文字やスペースを残す)\n//emlist[][ruby]{\n[\"abc\"].pack(\"a\")    # => \"a\"\n[\"abc\"].pack(\"a*\")   # => \"abc\"\n[\"abc\"].pack(\"a4\")   # => \"abc\\x00\"\n\n\"abc\\0\".unpack(\"a4\") # => [\"abc\\x00\"]\n\"abc \".unpack(\"a4\")  # => [\"abc \"]\n//}\n\n: A\n\n  ASCII文字列(スペースを詰める/後続するヌル文字やスペースを削除)\n//emlist[][ruby]{\n[\"abc\"].pack(\"A\")    # => \"a\"\n[\"abc\"].pack(\"A*\")   # => \"abc\"\n[\"abc\"].pack(\"A4\")   # => \"abc \"\n\n\"abc \".unpack(\"A4\")  # => [\"abc\"]\n\"abc\\0\".unpack(\"A4\") # => [\"abc\"]\n//}\n\n: Z\n\n  ヌル終端文字列(長さが`*'の場合も含め、ヌル文字を詰める/後続するヌル文字を削除)\n//emlist[][ruby]{\n[\"abc\"].pack(\"Z\")  # => \"a\"\n[\"abc\"].pack(\"Z*\") # => \"abc\\x00\"\n[\"abc\"].pack(\"Z5\") # => \"abc\\x00\\x00\"\n\n\"abc\\0\".unpack(\"Z4\") # => [\"abc\"]\n\"abc \".unpack(\"Z4\")  # => [\"abc \"]\n//}\n\n: b\n\n  ビットストリング(各バイトごとに下位ビットから上位ビット)\n//emlist[][ruby]{\n\"\\xFF\\x00\".unpack(\"b*\") # => [\"1111111100000000\"]\n\"\\x01\\x02\".unpack(\"b*\") # => [\"1000000001000000\"]\n\"\\x01\\x02\".unpack(\"b3\") # => [\"100\"]\n\n\n[\"1000000001000000\"].pack(\"b*\") # => \"\\x01\\x02\"\n//}\n\n: B\n\n  ビットストリング(各バイトごとに上位ビットから下位ビット)\n//emlist[][ruby]{\n\"\\xFF\\x00\".unpack(\"B*\")  # => [\"1111111100000000\"]\n\"\\x01\\x02\".unpack(\"B*\")  # => [\"0000000100000010\"]\n\"\\x01\\x02\".unpack(\"B9\")  # => [\"000000010\"]\n\"\\x01\\x02\".unpack(\"B15\") # => [\"000000010000001\"]\n\n[\"0000000100000010\"].pack(\"B*\")  # => \"\\x01\\x02\"\n[\"0000000100000010\"].pack(\"B0\")  # => \"\"\n[\"0000000100000010\"].pack(\"B1\")  # => \"\\x00\"\n[\"0000000100000010\"].pack(\"B7\")  # => \"\\x00\"\n[\"0000000100000010\"].pack(\"B8\")  # => \"\\x01\"\n[\"0000000100000010\"].pack(\"B9\")  # => \"\\x01\\x00\"\n[\"0000000100000010\"].pack(\"B14\") # => \"\\x01\\x00\"\n[\"0000000100000010\"].pack(\"B15\") # => \"\\x01\\x02\"\n[\"0000000100000010\"].pack(\"B16\") # => \"\\x01\\x02\"\n//}\n\n: h\n\n  16進文字列(下位ニブルが先)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"h*\") # => [\"10ef\"]\n\"\\x01\\xFE\".unpack(\"h3\") # => [\"10e\"]\n\n[\"10ef\"].pack(\"h*\") # => \"\\x01\\xFE\"\n//}\n\n: H\n\n  16進文字列(上位ニブルが先)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"H*\") # => [\"01fe\"]\n\"\\x01\\xFE\".unpack(\"H3\") # => [\"01f\"]\n\"~\".unpack(\"H2\")        # => [\"7e\"]\n\n[\"01fe\"].pack(\"H*\") # => \"\\x01\\xFE\"\n[\"7e\"].pack(\"H2\")   # => \"~\"\n//}\n\n: c\n\n  char (8bit 符号つき整数)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"c*\") # => [1, -2]\n\n[1, -2].pack(\"c*\")  # => \"\\x01\\xFE\"\n[1, 254].pack(\"c*\") # => \"\\x01\\xFE\"\n//}\n\n: C\n\n  unsigned char (8bit 符号なし整数)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"C*\") # => [1, 254]\n\n[1, -2].pack(\"C*\")  # => \"\\x01\\xFE\"\n[1, 254].pack(\"C*\") # => \"\\x01\\xFE\"\n//}\n\n: s\n\n  short (16bit 符号つき整数, エンディアンに依存)\n  (s! は 16bit でなく、short のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"s*\") # => [513, -514]\n\n[513, 65022].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[513, -514].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"s*\") # => [258, -259]\n\n[258, 65277].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[258, -259].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n: S\n\n  unsigned short (16bit 符号なし整数, エンディアンに依存)\n  (S! は 16bit でなく、short のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"S*\") # => [513, 65022]\n\n[513, 65022].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[513, -514].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n  ビッグエンディアン (SPARC64):\n\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"S*\") # => [258, 65277]\n\n[258, 65277].pack(\"S*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[258, -259].pack(\"S*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n: i\n\n  int (符号つき整数, エンディアンと int のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"i*\") # => [67305985, -50462977]\n\n[67305985, 4244504319].pack(\"i*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"i*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"i*\") # => [16909060, -66052]\n\n[16909060, 4294901244].pack(\"i*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"i*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n: I\n\n  unsigned int (符号なし整数, エンディアンと int のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"I*\") # => [67305985, 4244504319]\n\n[67305985, 4244504319].pack(\"I*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"I*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n  ビッグエンディアン (SPARC64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"I*\") # => [16909060, 4294901244]\n\n[16909060, 4294901244].pack(\"I*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"I*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: l\n\n  long (32bit 符号つき整数, エンディアンに依存)\n  (l! は 32bit でなく、long のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"l*\") # => [67305985, -50462977]\n\n[67305985, 4244504319].pack(\"l*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"l*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"l*\") # => [16909060, -66052]\n\n[16909060, 4294901244].pack(\"l*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"l*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: L\n\n  unsigned long (32bit 符号なし整数, エンディアンに依存)\n  (L! は 32bit でなく、long のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"L*\") # => [67305985, 4244504319]\n\n[67305985, 4244504319].pack(\"L*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"L*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"L*\") # => [16909060, 4294901244]\n\n[16909060, 4294901244].pack(\"L*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"L*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: q\n\n  64bit 符号付き整数 (エンディアンに依存)\n  (q! は 64bit でなく、long long のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"q*\")\n# => [578437695752307201, -506097522914230529]\n\n[578437695752307201, -506097522914230529].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[578437695752307201, 17940646550795321087].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"q*\")\n# => [72623859790382856, -283686952306184]\n\n[72623859790382856, -283686952306184].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[72623859790382856, 18446460386757245432].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n: Q\n\n  64bit 符号なし整数 (エンディアンに依存)\n  (Q! は 64bit でなく、long long のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"Q*\")\n# => [578437695752307201, 17940646550795321087]\n\n[578437695752307201, 17940646550795321087].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[578437695752307201, -506097522914230529].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"Q*\")\n# => [72623859790382856, 18446460386757245432]\n\n[72623859790382856, 18446460386757245432].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[72623859790382856, -283686952306184].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n: m\n\n  base64された文字列。60 オクテットごと(と最後)に改行コードが付加されます。\n\n  Base64は、3オクテット(8bits * 3 = 24bits)のバイナリコードをASCII文字の\n  うちの65文字 ([A-Za-z0-9+/]の64文字とpaddingのための'=')だけを使用して\n  4オクテット(6bits * 4 = 24bits)の印字可能文字列に変換するエンコーディ\n  ング法です。2045, 4648 で定義されています。\n//emlist[][ruby]{\n[\"\"].pack(\"m\")             # => \"\"\n[\"\\0\"].pack(\"m\")           # => \"AA==\\n\"\n[\"\\0\\0\"].pack(\"m\")         # => \"AAA=\\n\"\n[\"\\0\\0\\0\"].pack(\"m\")       # => \"AAAA\\n\"\n[\"\\xFF\"].pack(\"m\")         # => \"/w==\\n\"\n[\"\\xFF\\xFF\"].pack(\"m\")     # => \"//8=\\n\"\n[\"\\xFF\\xFF\\xFF\"].pack(\"m\") # => \"////\\n\"\n\n[\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"].pack(\"m\")\n# => \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJT\\nVFVWV1hZWg==\\n\"\n[\"abcdefghijklmnopqrstuvwxyz\"].pack(\"m3\")\n# => \"YWJj\\nZGVm\\nZ2hp\\namts\\nbW5v\\ncHFy\\nc3R1\\ndnd4\\neXo=\\n\"\n\n\"\".unpack(\"m\")       # => [\"\"]\n\"AA==\\n\".unpack(\"m\") # => [\"\\x00\"]\n\"AA==\".unpack(\"m\")   # => [\"\\x00\"]\n\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJT\\nVFVWV1hZWg==\\n\".unpack(\"m\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\\n\".unpack(\"m\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n//}\n  m0 は 4648 対応\n//emlist[][ruby]{\n[\"\"].pack(\"m0\")             # => \"\"\n[\"\\0\"].pack(\"m0\")           # => \"AA==\"\n[\"\\0\\0\"].pack(\"m0\")         # => \"AAA=\"\n[\"\\0\\0\\0\"].pack(\"m0\")       # => \"AAAA\"\n[\"\\xFF\"].pack(\"m0\")         # => \"/w==\"\n[\"\\xFF\\xFF\"].pack(\"m0\")     # => \"//8=\"\n[\"\\xFF\\xFF\\xFF\"].pack(\"m0\") # => \"////\"\n\n[\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"].pack(\"m0\")\n# => \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\"\n\n\"\".unpack(\"m0\")       # => [\"\"]\n\"AA==\\n\".unpack(\"m0\") # => ArgumentError (invalid base64)\n\"AA==\".unpack(\"m0\")   # => [\"\\x00\"]\n\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\".unpack(\"m0\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n//}\n@see base64\n\n: M\n\n  quoted-printable encoding された文字列\n//emlist[][ruby]{\n[\"a b c\\td \\ne\"].pack(\"M\") # => \"a b c\\td =\\n\\ne=\\n\"\n\n\"a b c\\td =\\n\\ne=\\n\".unpack(\"M\") # => [\"a b c\\td \\ne\"]\n//}\n\n: n\n\n  ネットワークバイトオーダー(ビッグエンディアン)のunsigned short (16bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1,32767,-32768,65535].pack(\"n*\")\n# => \"\\x00\\x00\\x00\\x01\\xFF\\xFF\\x7F\\xFF\\x80\\x00\\xFF\\xFF\"\n\n\"\\x00\\x00\\x00\\x01\\xFF\\xFF\\x7F\\xFF\\x80\\x00\\xFF\\xFF\".unpack(\"n*\")\n# => [0, 1, 65535, 32767, 32768, 65535]\n//}\n\n: N\n\n  ネットワークバイトオーダー(ビッグエンディアン)のunsigned long (32bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1].pack(\"N*\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xFF\\xFF\\xFF\\xFF\"\n\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xFF\\xFF\\xFF\\xFF\".unpack(\"N*\") # => [0, 1, 4294967295]\n//}\n\n: v\n\n  \"VAX\"バイトオーダー(リトルエンディアン)のunsigned short (16bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1,32767,-32768,65535].pack(\"v*\")\n# => \"\\x00\\x00\\x01\\x00\\xFF\\xFF\\xFF\\x7F\\x00\\x80\\xFF\\xFF\"\n\n\"\\x00\\x00\\x01\\x00\\xFF\\xFF\\xFF\\x7F\\x00\\x80\\xFF\\xFF\".unpack(\"v*\")\n# => [0, 1, 65535, 32767, 32768, 65535]\n//}\n\n: V\n\n  \"VAX\"バイトオーダー(リトルエンディアン)のunsigned long (32bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1].pack(\"V*\") # => \"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\"\n\n\n\"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\".unpack(\"V*\") # => [0, 1, 4294967295]\n//}\n\n: f\n\n  単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754 単精度 リトルエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"f\")      # => \"\\x00\\x00\\x80?\"\n[0.0/0.0].pack(\"f\")  # => \"\\x00\\x00\\xC0\\x7F\"      # NaN\n[1.0/0.0].pack(\"f\")  # => \"\\x00\\x00\\x80\\x7F\"      # +Infinity\n[-1.0/0.0].pack(\"f\") # => \"\\x00\\x00\\x80\\xFF\"      # -Infinity\n//}\n\n  SPARC64 (IEEE754 単精度 ビッグエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"f\")      # => \"?\\x80\\x00\\x00\"\n[0.0/0.0].pack(\"f\")  # => \"\\x7F\\xC0\\x00\\x00\"      # NaN\n[1.0/0.0].pack(\"f\")  # => \"\\x7F\\x80\\x00\\x00\"      # +Infinity\n[-1.0/0.0].pack(\"f\") # => \"\\xFF\\x80\\x00\\x00\"      # -Infinity\n//}\n\n  VAX (NetBSD 3.0) (非IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"f\") # => \"\\x80@\\x00\\x00\"\n//}\n\n: d\n\n  倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754 倍精度 リトルエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"d\")      # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n[0.0/0.0].pack(\"d\")  # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF8\\x7F\"      # NaN\n[1.0/0.0].pack(\"d\")  # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\x7F\"      # +Infinity\n[-1.0/0.0].pack(\"d\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\xFF\"      # -Infinity\n//}\n\n  SPARC64 (IEEE754 倍精度 ビッグエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"d\")      # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n[0.0/0.0].pack(\"d\")  # => \"\\x7F\\xF8\\x00\\x00\\x00\\x00\\x00\\x00\"      # NaN\n[1.0/0.0].pack(\"d\")  # => \"\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"      # +Infinity\n[-1.0/0.0].pack(\"d\") # => \"\\xFF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"      # -Infinity\n//}\n\n  VAX (NetBSD 3.0) (非IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"d\") # => \"\\x80@\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n: e\n\n  リトルエンディアンの単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"e\") # => \"\\x00\\x00\\x80?\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"e\") # => \"\\x00\\x00\\x80?\"\n//}\n\n: E\n\n  リトルエンディアンの倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"E\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"E\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n//}\n\n: g\n\n  ビッグエンディアンの単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"g\") # => \"?\\x80\\x00\\x00\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"g\") # => \"?\\x80\\x00\\x00\"\n//}\n\n  IEEE754準拠な環境の場合、以下のようにして符号、指数部、仮数部を取り出せます。\n//emlist[][ruby]{\ns = [v].pack(\"g\").unpack(\"B*\")[0][0,1]      # 符号\ne = [v].pack(\"g\").unpack(\"B*\")[0][1,8]      # 指数部\nf = [v].pack(\"g\").unpack(\"B*\")[0][9,23]     # 仮数部\n//}\n\n  そして、s, e, f の意味は以下の通りです。\n//emlist[][ruby]{\nsgn = s == \"0\" ? +1.0 : -1.0\nexp = Integer(\"0b\" + e)\nfra = Integer(\"0b\" + f)\nif exp == 0\n  if fra == 0\n    sgn * 0                     # ±0 (positive/negative zero)\n  else\n    sgn * fra * 2**(-126-23)    # 非正規化数 (denormalized number)\n  end\nelsif exp == 255\n  if fra == 0\n    sgn * Inf                   # ±∞ (positive/negative infinity)\n  else\n    NaN                         # 非数 (not a number)\n  end\nelse\n  fra += 1 << 23                # ゲタ\n  sgn * fra * 2**(exp-127-23)   # 正規化数 (normalized number)\nend\n//}\n\n: G\n\n  ビッグエンディアンの倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"G\") # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"G\") # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  IEEE754準拠な環境の場合、以下のようにして符号、指数部、仮数部を取り出せます。\n//emlist[][ruby]{\ns = [v].pack(\"G\").unpack(\"B*\")[0][0,1]    # 符号\ne = [v].pack(\"G\").unpack(\"B*\")[0][1,11]   # 指数部\nf = [v].pack(\"G\").unpack(\"B*\")[0][12,52]  # 仮数部\n//}\n\n  そして、s, e, f の意味は以下の通りです。\n//emlist[][ruby]{\nsgn = s == \"0\" ? +1.0 : -1.0\nexp = Integer(\"0b\" + e)\nfra = Integer(\"0b\" + f)\nif exp == 0\n  if fra == 0\n    sgn * 0                     # ±0 (positive/negative zero)\n  else\n    sgn * fra * 2**(-1022-52)   # 非正規化数 (denormalized number)\n  end\nelsif exp == 2047\n  if fra == 0\n    sgn * Inf                   # ±∞ (positive/negative infinity)\n  else\n    NaN                         # 非数 (not a number)\n  end\nelse\n  fra += 1 << 52                # ゲタ\n  sgn * fra * 2**(exp-1023-52)  # 正規化数 (normalized number)\nend\n//}\n\n: p\n\n  ヌル終端の文字列へのポインタ\n//emlist[][ruby]{\n[\"\"].pack(\"p\")             # => \"\\x980\\xBEf\\x1CV\\x00\\x00\"\n[\"a\", \"b\", \"c\"].pack(\"p3\") # => \"\\x98\\xE5\\x9ER\\xD2U\\x00\\x00p\\xE5\\x9ER\\xD2U\\x00\\x00H\\xE5\\x9ER\\xD2U\\x00\\x00\"\n[nil].pack(\"p\")            # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n: P\n\n  構造体(固定長文字列)へのポインタ\n//emlist[][ruby]{\n[nil].pack(\"P\")    # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n[\"abc\"].pack(\"P3\") # => \"\\xA0\\xEE\\er\\x84U\\x00\\x00\"\n\n[\"abc\"].pack(\"P4\") # => ArgumentError: too short buffer for P(3 for 4)\n[\"\"].pack(\"P\")     # => ArgumentError: too short buffer for P(0 for 1)\n//}\n\n: u\n\n  uuencodeされた文字列\n//emlist[][ruby]{\n[\"\"].pack(\"u\")           # => \"\"\n[\"a\"].pack(\"u\")          # => \"!80``\\n\"\n[\"abc\"].pack(\"u\")        # => \"#86)C\\n\"\n[\"abcd\"].pack(\"u\")       # => \"$86)C9```\\n\"\n[\"a\"*45].pack(\"u\")       # => \"M86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A\\n\"\n[\"a\"*46].pack(\"u\")       # => \"M86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A\\n!80``\\n\"\n[\"abcdefghi\"].pack(\"u6\") # => \"&86)C9&5F\\n#9VAI\\n\"\n//}\n\n: U\n\n  UTF-8\n//emlist[][ruby]{\n[0].pack(\"U\")                               # => \"\\u0000\"\n[1].pack(\"U\")                               # => \"\\u0001\"\n[0x7f].pack(\"U\")                            # => \"\\u007F\"\n[0x80].pack(\"U\")                            # => \"\\u0080\"\n[0x7fffffff].pack(\"U\")                      # => \"\\xFD\\xBF\\xBF\\xBF\\xBF\\xBF\"\n[0x80000000].pack(\"U\")                      # => RangeError: pack(U): value out of range\n[0,256,65536].pack(\"U3\").b                  # => \"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\"\n\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U3\") # => [0, 256, 65536]\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U\")  # => [0]\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U*\") # => [0, 256, 65536]\n//}\n\n: w\n\n  BER圧縮整数\n\n  1バイトあたり7ビットを使用して必要最小限のバイト数で任意サイズの\n  0以上の整数を表す数値表現。各バイトの最上位ビットはデータの最後\n  を除いて必ず1が立っている(つまり最上位ビットはどこまでデータがあ\n  るかを示している)。\n\n  ISO/IEC 8825-1:1995 : Information technology−ASN.1 encoding rules : Specification of Basic Encoding Rules(BER) に定められる整数の符号化方法。\n\n//emlist[][ruby]{\n[0].pack(\"w\")             # => \"\\x00\"\n[1].pack(\"w\")             # => \"\\x01\"\n[127].pack(\"w\")           # => \"\\x7F\"\n[128].pack(\"w\")           # => \"\\x81\\x00\"\n[0x3fff].pack(\"w\")        # => \"\\xFF\\x7F\"\n[0x4000].pack(\"w\")        # => \"\\x81\\x80\\x00\"\n[0x3fffffff].pack(\"w\")    # => \"\\x83\\xFF\\xFF\\xFF\\x7F\"\n[0x40000000].pack(\"w\")    # => \"\\x84\\x80\\x80\\x80\\x00\"\n[0xffffffff].pack(\"w\")    # => \"\\x8F\\xFF\\xFF\\xFF\\x7F\"\n[0x100000000].pack(\"w\")   # => \"\\x90\\x80\\x80\\x80\\x00\"\n\n\"\\x00\".unpack(\"w\")              # => [0]\n\"\\x00\\x81\\x00\\x01\".unpack(\"w*\") # => [0, 128, 1]\n//}\n\n  なお、BER圧縮整数でエンコードした結果は大小関係を保存しない。\n  たとえば、[0x3fff].pack(\"w\") > [0x4000].pack(\"w\") である。\n\n: x\n\n  ヌルバイト（pack）／1バイト読み飛ばし（unpack）\n//emlist[][ruby]{\n[97, 98].pack(\"CxC\")    # => \"a\\x00b\"\n[97, 98].pack(\"Cx3C\")   # => \"a\\x00\\x00\\x00b\"\n\n\"abc\".unpack(\"CxC\")  # => [97, 99]\n\"abc\".unpack(\"Cx3C\") # => ArgumentError: x outside of string\n//}\n\n: X\n\n  1バイト後退\n//emlist[][ruby]{\n[97, 98, 99].pack(\"CCXC\") # => \"ac\"\n\n\"abcdef\".unpack(\"x*XC\") # => [102]\n//}\n\n: @\n\n  絶対位置への移動\n//emlist[][ruby]{\n[97, 98].pack(\"C @3 C\") # => \"a\\x00\\x00b\"\n\n\"abcd\".unpack(\"C @3 C\") # => [97, 100]\n//}\n\n: j\n\nintptr_t (ポインタの幅の符号つき整数, エンディアンに依存)\n\n: J\n\nuintptr_t (ポインタの幅の符号なし整数, エンディアンに依存)\n\n=== 使用例\n\n以下、pack/unpack の使用例の一部です。\n\npack を使用しなくても同じことができる場合はその例も載せています。\npack は暗号になりやすい面があることを考慮し、pack を使いたくない人\nに別解を示すためです。\n\n: 数値(文字コード)の配列を文字列に変換する例\n//emlist[][ruby]{\n[82, 117, 98, 121].pack(\"cccc\")  # => \"Ruby\"\n[82, 117, 98, 121].pack(\"c4\")    # => \"Ruby\"\n[82, 117, 98, 121].pack(\"c*\")    # => \"Ruby\"\n\ns = \"\"\n[82, 117, 98, 121].each {|c| s << c}\ns    # => \"Ruby\"\n\n[82, 117, 98, 121].collect {|c| sprintf \"%c\", c}.join   # => \"Ruby\"\n\n[82, 117, 98, 121].inject(\"\") {|s, c| s << c}    # => \"Ruby\"\n//}\n\n: 文字列を数値(文字コード)の配列に変換する例\n//emlist[][ruby]{\n\"Ruby\".unpack('C*')    # => [82, 117, 98, 121]\n\na = []\n\"Ruby\".each_byte {|c| a << c}\na    # => [82, 117, 98, 121]\n//}\n\n: \"x\" でヌルバイトを埋めることができる\n//emlist[][ruby]{\n[82, 117, 98, 121].pack(\"ccxxcc\")    # => \"Ru\\x00\\x00by\"\n//}\n\n: \"x\" で文字を読み飛ばす事が出来る\n//emlist[][ruby]{\n\"Ru\\x00\\x00by\".unpack('ccxxcc')    # => [82, 117, 98, 121]\n//}\n\n: Hexダンプを数値の配列に変換する例\n//emlist[][ruby]{\n\"61 62 63 64 65 66\".delete(' ').lines.pack('H*').unpack('C*')\n# => [97, 98, 99, 100, 101, 102]\n\n\"61 62 63 64 65 66\".split.collect {|c| c.hex}\n# => [97, 98, 99, 100, 101, 102]\n//}\n\n: バイナリと16進数のpackでは長さ指定は生成されるバイト数ではなく、ビットやニブルの個数を表す\n//emlist[][ruby]{\n[0b01010010, 0b01110101, 0b01100010, 0b01111001].pack(\"C4\")\n# => \"Ruby\"\n[\"01010010011101010110001001111001\"].pack(\"B32\") # 8 bits * 4\n# => \"Ruby\"\n\n[0x52, 0x75, 0x62, 0x79].pack(\"C4\")\n# => \"Ruby\"\n[\"52756279\"].pack(\"H8\")  # 2 nybbles * 4\n# => \"Ruby\"\n//}\n\n: テンプレート文字'a'の長さ指定は1つの文字列だけに適用される\n//emlist[][ruby]{\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"a4\")\n# => \"RUBY\"\n\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"aaaa\")\n# => \"Ruby\"\n\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"a*aaa\")\n# => \"RUBYuby\"\n//}\n\n: テンプレート文字\"a\"は、長さが足りない分をヌル文字で補う\n//emlist[][ruby]{\n[\"Ruby\"].pack(\"a8\")\n# => \"Ruby\\x00\\x00\\x00\\x00\"\n//}\n\n: リトルエンディアンとビッグエンディアン\n//emlist[][ruby]{\n[1,2].pack(\"s2\")\n# => \"\\x01\\x00\\002\\x00\" # リトルエンディアンのシステムでの出力\n# => \"\\x00\\x01\\x00\\002\" # ビッグエンディアンのシステムでの出力\n\n[1,2].pack(\"n2\")\n# => \"\\x00\\x01\\x00\\002\" # システムによらずビッグエンディアン\n\n[1,2].pack(\"v2\")\n# => \"\\x01\\x00\\002\\x00\" # システムによらずリトルエンディアン\n//}\n\n: ネットワークバイトオーダの signed long\n//emlist[][ruby]{\ns = \"\\xFF\\xFF\\xFF\\xFE\"\nn = s.unpack(\"N\")[0]\nif n[31] == 1\n  n = -((n ^ 0xffff_ffff) + 1)\nend\nn # => -2\n//}\n\n: ネットワークバイトオーダの signed long(その2)\n//emlist[][ruby]{\ns = \"\\xFF\\xFF\\xFF\\xFE\"\nn = s.unpack(\"N\").pack(\"l\").unpack(\"l\")[0]\nn # => -2\n//}\n\n: IPアドレス\n//emlist[][ruby]{\nrequire 'socket'\nofficial_hostname, alias_hostnames, address_family, *address_list = Socket.gethostbyname(\"localhost\")\naddress_list.find {|address| address.size == 4 }.unpack(\"C4\").join(\".\")\n# => \"127.0.0.1\"\n\n\"127.0.0.1\".split(\".\").collect {|c| c.to_i}.pack(\"C4\")\n# => \"\\x7F\\x00\\x00\\x01\"\n//}\n\n: sockaddr_in 構造体\n//emlist[][ruby]{\nrequire 'socket'\n[Socket::AF_INET,\n Socket.getservbyname('echo'),\n 127, 0, 0, 1].pack(\"s n C4 x8\")\n# => \"\\x02\\x00\\x00\\a\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  pack/unpack を使う代わりに\n  Socket.pack_sockaddr_in,\n  Socket.unpack_sockaddr_in メソッドがあります。\n\n: '\\0'終端文字列のアドレス\n\n  テンプレート文字 \"p\" や \"P\" は、C 言語レベルのインタフェースのた\n  めにあります(例えば IO#ioctl)。\n//emlist[][ruby]{\n[\"foo\"].pack(\"p\")    # => \"xp\\xC2\\x85\\vV\\x00\\x00\"\n//}\n\n  結果の文字列はゴミに見えますが、実際は文字列\"foo\\0\"を指すアドレ\n  ス(のバイナリ表現)です。以下のようにすれば見慣れた表記で見ること\n  が出来ます\n//emlist[][ruby]{\nprintf \"%#014x\\n\", \"xp\\xC2\\x85\\vV\\x00\\x00\".unpack(\"J\")[0] # => 0x560b85c27078\n//}\n\n  アドレスが指す先のオブジェクト(この例で \"foo\\0\") は、pack の結\n  果が GC されるまではGCされないことが保証されています。\n\n  unpack(\"p\"), unpack(\"P\") は、pack の結果からしか unpack できません。\n//emlist[][ruby]{\n[\"foo\"].pack(\"p\").unpack(\"p\") # => [\"foo\"]\n\"xp\\xC2\\x85\\vV\\x00\\x00\".unpack(\"p\")\n# => ArgumentError: no associated pointer\n//}\n  \"p\" や \"P\" は、nil を特別に扱い NULL\n  ポインタとして解釈します。(以下は、64bitマシンで一般的な結果)\n//emlist[][ruby]{\n[nil].pack(\"p\")        # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\".unpack(\"p\") # => [nil]\n//}\n\n: 構造体のアドレス\n\n  例えば、\n//emlist{\n      struct {\n        int   a;\n        short b;\n        long  c;\n      } v = {1,2,3};\n//}\n  を表す文字列は\n//emlist[][ruby]{\nv = [1,2,3].pack(\"i!s!l!\")\n//}\n  です。(byte alignment の問題から実際は適当な padding が必要に\n  なるかもしれません)\n\n  この構造体を指すアドレスは\n//emlist[][ruby]{\n[v].pack(\"P\")  # => \"\\xC0\\xCC2L\\fV\\x00\\x00\"\n//}\n  で得られます。\n\n: UTF-8からUCS-2への変換 (サロゲートを処理していないので UTF-16 とはいえない)\n\n  リトルエンディアン:\n//emlist[][ruby]{\n(\"Comments\").unpack(\"U*\").pack(\"v*\") # => \"C\\x00o\\x00m\\x00m\\x00e\\x00n\\x00t\\x00s\\x00\"\n//}\n  ビッグエンディアン:\n//emlist[][ruby]{\n(\"Comments\").unpack(\"U*\").pack(\"n*\") # => \"\\x00C\\x00o\\x00m\\x00m\\x00e\\x00n\\x00t\\x00s\"\n//}\n\n@see String#unpack, String#unpack1",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "base64",
          "label": "base64",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:base64/"
        }
      ]
    },
    {
      "signature": "Array#pack(template, buffer: String.new) -> String",
      "score": 63055.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の内容を template で指定された文字列にしたがって、\nバイナリとしてパックした文字列を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/pack.html",
          "description": "配列の内容を template で指定された文字列にしたがって、\nバイナリとしてパックした文字列を返します。\n\nテンプレートは\n型指定文字列とその長さ(省略時は1)を並べたものです。長さと\nして * が指定された時は「残りのデータ全て」の長さを\n表します。型指定文字は以下で述べる pack テンプレート文字列の通りです。\n\nbuffer が指定されていれば、バッファとして使って返値として返します。\nもし template の最初にオフセット (@) が指定されていれば、\n結果はオフセットの後ろから詰められます。\nbuffer の元の内容がオフセットより長ければ、\nオフセットより後ろの部分は上書きされます。\nオフセットより短ければ、足りない部分は \"\\0\" で埋められます。\n\nbuffer オプションはメモリ確保が発生しないことを保証するものでは\nないことに注意してください。\nbuffer のサイズ(capacity)が足りなければ、packはメモリを確保します。\n\n//emlist[例][ruby]{\n['!'].pack('@1a', buffer: 'abc')  # => \"a!\"\n['!'].pack('@5a', buffer: 'abc')  # => \"abc\\u0000\\u0000!\"\n//}\n\n@param template 自身のバイナリとしてパックするためのテンプレートを文字列で指定します。\n@param buffer   結果を詰めるバッファとして使う文字列オブジェクトを指定します。\n                指定した場合は返値も指定した文字列オブジェクトになります。\n\n\n以下にあげるものは、Array#pack、String#unpack、String#unpack1\nのテンプレート文字の一覧です。テンプレート文字は後に「長さ」を表す数字\nを続けることができます。「長さ」の代わりに`*'とすることで「残り全て」\nを表すこともできます。\n\n長さの意味はテンプレート文字により異なりますが大抵、\n  \"iiii\"\nのように連続するテンプレート文字は\n  \"i4\"\nと書き換えることができます。\n\nテンプレート文字列中の空白類は無視されます。\nまた、`#' から改行あるいはテンプレート文字列の最後まではコメントとみな\nされ無視されます。\n\n=== 整数のテンプレート文字のシステム依存性\n\n各テンプレート文字の説明の中で、\nshort や long はシステムによらずそれぞれ 2, 4バイトサ\nイズの数値(32ビットマシンで一般的なshort, longのサイズ)を意味していま\nす。s, S, l, L に対しては直後に _ または ! を \"s_\" あるいは \"s!\" のように\n続けることでシステム依存の short, long のサイズにすることもできます。\n\ni, I (int)のサイズは常にシステム依存であり、n, N, v, V\nのサイズは常にシステム依存ではない(!をつけられない)ことに注意してください。\n\nつまり、IO#ioctl などで C の構造体を渡すときのように、\nシステム依存のサイズとエンディアンに合わせる必要があるときには\ns!, S!, i!, I!, l!, L!, q!, Q!, j!, J! を用います。\nまた、ネットワークプロトコルやファイルフォーマットのように、\nシステムに依存しないデータを扱うときには\nn, N, v, V を用います。\n\n強制的にエンディアンを指定したいときは、\nリトルエンディアンなら < を、\nビッグエンディアンなら >\nを後ろにつけます。! と組み合わせることも可能です。\n\nまとめると以下のようになります。\n\n: エンディアン非依存、整数サイズ非依存 (ネットワークプロトコルなどに適切)\n//emlist{\n  n: big endian unsigned 16bit\n  N: big endian unsigned 32bit\n  v: little endian unsigned 16bit\n  V: little endian unsigned 32bit\n//}\n\n: エンディアン依存、整数サイズ依存 (C の構造体などに適切)\n//emlist{\n  s!: signed short\n  S!: unsigned short\n  i,i!: signed int\n  I,I!: unsigned int\n  l!: signed long\n  L!: unsigned long\n  q!: signed long long\n  Q!: unsigned long long\n  j,j!: intptr_t\n  J,J!: uintptr_t\n//}\n\n: エンディアン依存、整数サイズ非依存 (C99 の stdint.h にある厳密な幅を持つ整数型に適切)\n//emlist{\n  s: int16_t\n  S: uint16_t\n  l: int32_t\n  L: uint32_t\n  q: int64_t\n  Q: uint64_t\n//}\n\n: エンディアンの強制指定(バイナリ解析などに適切)\n//emlist{\n  S>:  big endian unsigned 16bit(nと同じ)\n  s>:  big endian int16_t\n  s!>: big endian signed short\n  l<:  little endian int32_t\n  l!<: little endian signed long\n//}\n\n=== 各テンプレート文字の説明\n\n説明中、Array#pack と String#unpack で違いのあるものは `/' で区切って\n「Array#pack の説明 / String#unpack の説明」としています。\n\n: a\n\n  ASCII文字列(ヌル文字を詰める/後続するヌル文字やスペースを残す)\n//emlist[][ruby]{\n[\"abc\"].pack(\"a\")    # => \"a\"\n[\"abc\"].pack(\"a*\")   # => \"abc\"\n[\"abc\"].pack(\"a4\")   # => \"abc\\x00\"\n\n\"abc\\0\".unpack(\"a4\") # => [\"abc\\x00\"]\n\"abc \".unpack(\"a4\")  # => [\"abc \"]\n//}\n\n: A\n\n  ASCII文字列(スペースを詰める/後続するヌル文字やスペースを削除)\n//emlist[][ruby]{\n[\"abc\"].pack(\"A\")    # => \"a\"\n[\"abc\"].pack(\"A*\")   # => \"abc\"\n[\"abc\"].pack(\"A4\")   # => \"abc \"\n\n\"abc \".unpack(\"A4\")  # => [\"abc\"]\n\"abc\\0\".unpack(\"A4\") # => [\"abc\"]\n//}\n\n: Z\n\n  ヌル終端文字列(長さが`*'の場合も含め、ヌル文字を詰める/後続するヌル文字を削除)\n//emlist[][ruby]{\n[\"abc\"].pack(\"Z\")  # => \"a\"\n[\"abc\"].pack(\"Z*\") # => \"abc\\x00\"\n[\"abc\"].pack(\"Z5\") # => \"abc\\x00\\x00\"\n\n\"abc\\0\".unpack(\"Z4\") # => [\"abc\"]\n\"abc \".unpack(\"Z4\")  # => [\"abc \"]\n//}\n\n: b\n\n  ビットストリング(各バイトごとに下位ビットから上位ビット)\n//emlist[][ruby]{\n\"\\xFF\\x00\".unpack(\"b*\") # => [\"1111111100000000\"]\n\"\\x01\\x02\".unpack(\"b*\") # => [\"1000000001000000\"]\n\"\\x01\\x02\".unpack(\"b3\") # => [\"100\"]\n\n\n[\"1000000001000000\"].pack(\"b*\") # => \"\\x01\\x02\"\n//}\n\n: B\n\n  ビットストリング(各バイトごとに上位ビットから下位ビット)\n//emlist[][ruby]{\n\"\\xFF\\x00\".unpack(\"B*\")  # => [\"1111111100000000\"]\n\"\\x01\\x02\".unpack(\"B*\")  # => [\"0000000100000010\"]\n\"\\x01\\x02\".unpack(\"B9\")  # => [\"000000010\"]\n\"\\x01\\x02\".unpack(\"B15\") # => [\"000000010000001\"]\n\n[\"0000000100000010\"].pack(\"B*\")  # => \"\\x01\\x02\"\n[\"0000000100000010\"].pack(\"B0\")  # => \"\"\n[\"0000000100000010\"].pack(\"B1\")  # => \"\\x00\"\n[\"0000000100000010\"].pack(\"B7\")  # => \"\\x00\"\n[\"0000000100000010\"].pack(\"B8\")  # => \"\\x01\"\n[\"0000000100000010\"].pack(\"B9\")  # => \"\\x01\\x00\"\n[\"0000000100000010\"].pack(\"B14\") # => \"\\x01\\x00\"\n[\"0000000100000010\"].pack(\"B15\") # => \"\\x01\\x02\"\n[\"0000000100000010\"].pack(\"B16\") # => \"\\x01\\x02\"\n//}\n\n: h\n\n  16進文字列(下位ニブルが先)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"h*\") # => [\"10ef\"]\n\"\\x01\\xFE\".unpack(\"h3\") # => [\"10e\"]\n\n[\"10ef\"].pack(\"h*\") # => \"\\x01\\xFE\"\n//}\n\n: H\n\n  16進文字列(上位ニブルが先)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"H*\") # => [\"01fe\"]\n\"\\x01\\xFE\".unpack(\"H3\") # => [\"01f\"]\n\"~\".unpack(\"H2\")        # => [\"7e\"]\n\n[\"01fe\"].pack(\"H*\") # => \"\\x01\\xFE\"\n[\"7e\"].pack(\"H2\")   # => \"~\"\n//}\n\n: c\n\n  char (8bit 符号つき整数)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"c*\") # => [1, -2]\n\n[1, -2].pack(\"c*\")  # => \"\\x01\\xFE\"\n[1, 254].pack(\"c*\") # => \"\\x01\\xFE\"\n//}\n\n: C\n\n  unsigned char (8bit 符号なし整数)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"C*\") # => [1, 254]\n\n[1, -2].pack(\"C*\")  # => \"\\x01\\xFE\"\n[1, 254].pack(\"C*\") # => \"\\x01\\xFE\"\n//}\n\n: s\n\n  short (16bit 符号つき整数, エンディアンに依存)\n  (s! は 16bit でなく、short のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"s*\") # => [513, -514]\n\n[513, 65022].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[513, -514].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"s*\") # => [258, -259]\n\n[258, 65277].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[258, -259].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n: S\n\n  unsigned short (16bit 符号なし整数, エンディアンに依存)\n  (S! は 16bit でなく、short のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"S*\") # => [513, 65022]\n\n[513, 65022].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[513, -514].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n  ビッグエンディアン (SPARC64):\n\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"S*\") # => [258, 65277]\n\n[258, 65277].pack(\"S*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[258, -259].pack(\"S*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n: i\n\n  int (符号つき整数, エンディアンと int のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"i*\") # => [67305985, -50462977]\n\n[67305985, 4244504319].pack(\"i*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"i*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"i*\") # => [16909060, -66052]\n\n[16909060, 4294901244].pack(\"i*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"i*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n: I\n\n  unsigned int (符号なし整数, エンディアンと int のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"I*\") # => [67305985, 4244504319]\n\n[67305985, 4244504319].pack(\"I*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"I*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n  ビッグエンディアン (SPARC64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"I*\") # => [16909060, 4294901244]\n\n[16909060, 4294901244].pack(\"I*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"I*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: l\n\n  long (32bit 符号つき整数, エンディアンに依存)\n  (l! は 32bit でなく、long のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"l*\") # => [67305985, -50462977]\n\n[67305985, 4244504319].pack(\"l*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"l*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"l*\") # => [16909060, -66052]\n\n[16909060, 4294901244].pack(\"l*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"l*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: L\n\n  unsigned long (32bit 符号なし整数, エンディアンに依存)\n  (L! は 32bit でなく、long のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"L*\") # => [67305985, 4244504319]\n\n[67305985, 4244504319].pack(\"L*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"L*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"L*\") # => [16909060, 4294901244]\n\n[16909060, 4294901244].pack(\"L*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"L*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: q\n\n  64bit 符号付き整数 (エンディアンに依存)\n  (q! は 64bit でなく、long long のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"q*\")\n# => [578437695752307201, -506097522914230529]\n\n[578437695752307201, -506097522914230529].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[578437695752307201, 17940646550795321087].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"q*\")\n# => [72623859790382856, -283686952306184]\n\n[72623859790382856, -283686952306184].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[72623859790382856, 18446460386757245432].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n: Q\n\n  64bit 符号なし整数 (エンディアンに依存)\n  (Q! は 64bit でなく、long long のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"Q*\")\n# => [578437695752307201, 17940646550795321087]\n\n[578437695752307201, 17940646550795321087].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[578437695752307201, -506097522914230529].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"Q*\")\n# => [72623859790382856, 18446460386757245432]\n\n[72623859790382856, 18446460386757245432].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[72623859790382856, -283686952306184].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n: m\n\n  base64された文字列。60 オクテットごと(と最後)に改行コードが付加されます。\n\n  Base64は、3オクテット(8bits * 3 = 24bits)のバイナリコードをASCII文字の\n  うちの65文字 ([A-Za-z0-9+/]の64文字とpaddingのための'=')だけを使用して\n  4オクテット(6bits * 4 = 24bits)の印字可能文字列に変換するエンコーディ\n  ング法です。2045, 4648 で定義されています。\n//emlist[][ruby]{\n[\"\"].pack(\"m\")             # => \"\"\n[\"\\0\"].pack(\"m\")           # => \"AA==\\n\"\n[\"\\0\\0\"].pack(\"m\")         # => \"AAA=\\n\"\n[\"\\0\\0\\0\"].pack(\"m\")       # => \"AAAA\\n\"\n[\"\\xFF\"].pack(\"m\")         # => \"/w==\\n\"\n[\"\\xFF\\xFF\"].pack(\"m\")     # => \"//8=\\n\"\n[\"\\xFF\\xFF\\xFF\"].pack(\"m\") # => \"////\\n\"\n\n[\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"].pack(\"m\")\n# => \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJT\\nVFVWV1hZWg==\\n\"\n[\"abcdefghijklmnopqrstuvwxyz\"].pack(\"m3\")\n# => \"YWJj\\nZGVm\\nZ2hp\\namts\\nbW5v\\ncHFy\\nc3R1\\ndnd4\\neXo=\\n\"\n\n\"\".unpack(\"m\")       # => [\"\"]\n\"AA==\\n\".unpack(\"m\") # => [\"\\x00\"]\n\"AA==\".unpack(\"m\")   # => [\"\\x00\"]\n\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJT\\nVFVWV1hZWg==\\n\".unpack(\"m\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\\n\".unpack(\"m\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n//}\n  m0 は 4648 対応\n//emlist[][ruby]{\n[\"\"].pack(\"m0\")             # => \"\"\n[\"\\0\"].pack(\"m0\")           # => \"AA==\"\n[\"\\0\\0\"].pack(\"m0\")         # => \"AAA=\"\n[\"\\0\\0\\0\"].pack(\"m0\")       # => \"AAAA\"\n[\"\\xFF\"].pack(\"m0\")         # => \"/w==\"\n[\"\\xFF\\xFF\"].pack(\"m0\")     # => \"//8=\"\n[\"\\xFF\\xFF\\xFF\"].pack(\"m0\") # => \"////\"\n\n[\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"].pack(\"m0\")\n# => \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\"\n\n\"\".unpack(\"m0\")       # => [\"\"]\n\"AA==\\n\".unpack(\"m0\") # => ArgumentError (invalid base64)\n\"AA==\".unpack(\"m0\")   # => [\"\\x00\"]\n\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\".unpack(\"m0\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n//}\n@see base64\n\n: M\n\n  quoted-printable encoding された文字列\n//emlist[][ruby]{\n[\"a b c\\td \\ne\"].pack(\"M\") # => \"a b c\\td =\\n\\ne=\\n\"\n\n\"a b c\\td =\\n\\ne=\\n\".unpack(\"M\") # => [\"a b c\\td \\ne\"]\n//}\n\n: n\n\n  ネットワークバイトオーダー(ビッグエンディアン)のunsigned short (16bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1,32767,-32768,65535].pack(\"n*\")\n# => \"\\x00\\x00\\x00\\x01\\xFF\\xFF\\x7F\\xFF\\x80\\x00\\xFF\\xFF\"\n\n\"\\x00\\x00\\x00\\x01\\xFF\\xFF\\x7F\\xFF\\x80\\x00\\xFF\\xFF\".unpack(\"n*\")\n# => [0, 1, 65535, 32767, 32768, 65535]\n//}\n\n: N\n\n  ネットワークバイトオーダー(ビッグエンディアン)のunsigned long (32bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1].pack(\"N*\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xFF\\xFF\\xFF\\xFF\"\n\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xFF\\xFF\\xFF\\xFF\".unpack(\"N*\") # => [0, 1, 4294967295]\n//}\n\n: v\n\n  \"VAX\"バイトオーダー(リトルエンディアン)のunsigned short (16bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1,32767,-32768,65535].pack(\"v*\")\n# => \"\\x00\\x00\\x01\\x00\\xFF\\xFF\\xFF\\x7F\\x00\\x80\\xFF\\xFF\"\n\n\"\\x00\\x00\\x01\\x00\\xFF\\xFF\\xFF\\x7F\\x00\\x80\\xFF\\xFF\".unpack(\"v*\")\n# => [0, 1, 65535, 32767, 32768, 65535]\n//}\n\n: V\n\n  \"VAX\"バイトオーダー(リトルエンディアン)のunsigned long (32bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1].pack(\"V*\") # => \"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\"\n\n\n\"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\".unpack(\"V*\") # => [0, 1, 4294967295]\n//}\n\n: f\n\n  単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754 単精度 リトルエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"f\")      # => \"\\x00\\x00\\x80?\"\n[0.0/0.0].pack(\"f\")  # => \"\\x00\\x00\\xC0\\x7F\"      # NaN\n[1.0/0.0].pack(\"f\")  # => \"\\x00\\x00\\x80\\x7F\"      # +Infinity\n[-1.0/0.0].pack(\"f\") # => \"\\x00\\x00\\x80\\xFF\"      # -Infinity\n//}\n\n  SPARC64 (IEEE754 単精度 ビッグエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"f\")      # => \"?\\x80\\x00\\x00\"\n[0.0/0.0].pack(\"f\")  # => \"\\x7F\\xC0\\x00\\x00\"      # NaN\n[1.0/0.0].pack(\"f\")  # => \"\\x7F\\x80\\x00\\x00\"      # +Infinity\n[-1.0/0.0].pack(\"f\") # => \"\\xFF\\x80\\x00\\x00\"      # -Infinity\n//}\n\n  VAX (NetBSD 3.0) (非IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"f\") # => \"\\x80@\\x00\\x00\"\n//}\n\n: d\n\n  倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754 倍精度 リトルエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"d\")      # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n[0.0/0.0].pack(\"d\")  # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF8\\x7F\"      # NaN\n[1.0/0.0].pack(\"d\")  # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\x7F\"      # +Infinity\n[-1.0/0.0].pack(\"d\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\xFF\"      # -Infinity\n//}\n\n  SPARC64 (IEEE754 倍精度 ビッグエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"d\")      # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n[0.0/0.0].pack(\"d\")  # => \"\\x7F\\xF8\\x00\\x00\\x00\\x00\\x00\\x00\"      # NaN\n[1.0/0.0].pack(\"d\")  # => \"\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"      # +Infinity\n[-1.0/0.0].pack(\"d\") # => \"\\xFF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"      # -Infinity\n//}\n\n  VAX (NetBSD 3.0) (非IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"d\") # => \"\\x80@\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n: e\n\n  リトルエンディアンの単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"e\") # => \"\\x00\\x00\\x80?\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"e\") # => \"\\x00\\x00\\x80?\"\n//}\n\n: E\n\n  リトルエンディアンの倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"E\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"E\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n//}\n\n: g\n\n  ビッグエンディアンの単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"g\") # => \"?\\x80\\x00\\x00\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"g\") # => \"?\\x80\\x00\\x00\"\n//}\n\n  IEEE754準拠な環境の場合、以下のようにして符号、指数部、仮数部を取り出せます。\n//emlist[][ruby]{\ns = [v].pack(\"g\").unpack(\"B*\")[0][0,1]      # 符号\ne = [v].pack(\"g\").unpack(\"B*\")[0][1,8]      # 指数部\nf = [v].pack(\"g\").unpack(\"B*\")[0][9,23]     # 仮数部\n//}\n\n  そして、s, e, f の意味は以下の通りです。\n//emlist[][ruby]{\nsgn = s == \"0\" ? +1.0 : -1.0\nexp = Integer(\"0b\" + e)\nfra = Integer(\"0b\" + f)\nif exp == 0\n  if fra == 0\n    sgn * 0                     # ±0 (positive/negative zero)\n  else\n    sgn * fra * 2**(-126-23)    # 非正規化数 (denormalized number)\n  end\nelsif exp == 255\n  if fra == 0\n    sgn * Inf                   # ±∞ (positive/negative infinity)\n  else\n    NaN                         # 非数 (not a number)\n  end\nelse\n  fra += 1 << 23                # ゲタ\n  sgn * fra * 2**(exp-127-23)   # 正規化数 (normalized number)\nend\n//}\n\n: G\n\n  ビッグエンディアンの倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"G\") # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"G\") # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  IEEE754準拠な環境の場合、以下のようにして符号、指数部、仮数部を取り出せます。\n//emlist[][ruby]{\ns = [v].pack(\"G\").unpack(\"B*\")[0][0,1]    # 符号\ne = [v].pack(\"G\").unpack(\"B*\")[0][1,11]   # 指数部\nf = [v].pack(\"G\").unpack(\"B*\")[0][12,52]  # 仮数部\n//}\n\n  そして、s, e, f の意味は以下の通りです。\n//emlist[][ruby]{\nsgn = s == \"0\" ? +1.0 : -1.0\nexp = Integer(\"0b\" + e)\nfra = Integer(\"0b\" + f)\nif exp == 0\n  if fra == 0\n    sgn * 0                     # ±0 (positive/negative zero)\n  else\n    sgn * fra * 2**(-1022-52)   # 非正規化数 (denormalized number)\n  end\nelsif exp == 2047\n  if fra == 0\n    sgn * Inf                   # ±∞ (positive/negative infinity)\n  else\n    NaN                         # 非数 (not a number)\n  end\nelse\n  fra += 1 << 52                # ゲタ\n  sgn * fra * 2**(exp-1023-52)  # 正規化数 (normalized number)\nend\n//}\n\n: p\n\n  ヌル終端の文字列へのポインタ\n//emlist[][ruby]{\n[\"\"].pack(\"p\")             # => \"\\x980\\xBEf\\x1CV\\x00\\x00\"\n[\"a\", \"b\", \"c\"].pack(\"p3\") # => \"\\x98\\xE5\\x9ER\\xD2U\\x00\\x00p\\xE5\\x9ER\\xD2U\\x00\\x00H\\xE5\\x9ER\\xD2U\\x00\\x00\"\n[nil].pack(\"p\")            # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n: P\n\n  構造体(固定長文字列)へのポインタ\n//emlist[][ruby]{\n[nil].pack(\"P\")    # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n[\"abc\"].pack(\"P3\") # => \"\\xA0\\xEE\\er\\x84U\\x00\\x00\"\n\n[\"abc\"].pack(\"P4\") # => ArgumentError: too short buffer for P(3 for 4)\n[\"\"].pack(\"P\")     # => ArgumentError: too short buffer for P(0 for 1)\n//}\n\n: u\n\n  uuencodeされた文字列\n//emlist[][ruby]{\n[\"\"].pack(\"u\")           # => \"\"\n[\"a\"].pack(\"u\")          # => \"!80``\\n\"\n[\"abc\"].pack(\"u\")        # => \"#86)C\\n\"\n[\"abcd\"].pack(\"u\")       # => \"$86)C9```\\n\"\n[\"a\"*45].pack(\"u\")       # => \"M86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A\\n\"\n[\"a\"*46].pack(\"u\")       # => \"M86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A\\n!80``\\n\"\n[\"abcdefghi\"].pack(\"u6\") # => \"&86)C9&5F\\n#9VAI\\n\"\n//}\n\n: U\n\n  UTF-8\n//emlist[][ruby]{\n[0].pack(\"U\")                               # => \"\\u0000\"\n[1].pack(\"U\")                               # => \"\\u0001\"\n[0x7f].pack(\"U\")                            # => \"\\u007F\"\n[0x80].pack(\"U\")                            # => \"\\u0080\"\n[0x7fffffff].pack(\"U\")                      # => \"\\xFD\\xBF\\xBF\\xBF\\xBF\\xBF\"\n[0x80000000].pack(\"U\")                      # => RangeError: pack(U): value out of range\n[0,256,65536].pack(\"U3\").b                  # => \"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\"\n\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U3\") # => [0, 256, 65536]\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U\")  # => [0]\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U*\") # => [0, 256, 65536]\n//}\n\n: w\n\n  BER圧縮整数\n\n  1バイトあたり7ビットを使用して必要最小限のバイト数で任意サイズの\n  0以上の整数を表す数値表現。各バイトの最上位ビットはデータの最後\n  を除いて必ず1が立っている(つまり最上位ビットはどこまでデータがあ\n  るかを示している)。\n\n  ISO/IEC 8825-1:1995 : Information technology−ASN.1 encoding rules : Specification of Basic Encoding Rules(BER) に定められる整数の符号化方法。\n\n//emlist[][ruby]{\n[0].pack(\"w\")             # => \"\\x00\"\n[1].pack(\"w\")             # => \"\\x01\"\n[127].pack(\"w\")           # => \"\\x7F\"\n[128].pack(\"w\")           # => \"\\x81\\x00\"\n[0x3fff].pack(\"w\")        # => \"\\xFF\\x7F\"\n[0x4000].pack(\"w\")        # => \"\\x81\\x80\\x00\"\n[0x3fffffff].pack(\"w\")    # => \"\\x83\\xFF\\xFF\\xFF\\x7F\"\n[0x40000000].pack(\"w\")    # => \"\\x84\\x80\\x80\\x80\\x00\"\n[0xffffffff].pack(\"w\")    # => \"\\x8F\\xFF\\xFF\\xFF\\x7F\"\n[0x100000000].pack(\"w\")   # => \"\\x90\\x80\\x80\\x80\\x00\"\n\n\"\\x00\".unpack(\"w\")              # => [0]\n\"\\x00\\x81\\x00\\x01\".unpack(\"w*\") # => [0, 128, 1]\n//}\n\n  なお、BER圧縮整数でエンコードした結果は大小関係を保存しない。\n  たとえば、[0x3fff].pack(\"w\") > [0x4000].pack(\"w\") である。\n\n: x\n\n  ヌルバイト（pack）／1バイト読み飛ばし（unpack）\n//emlist[][ruby]{\n[97, 98].pack(\"CxC\")    # => \"a\\x00b\"\n[97, 98].pack(\"Cx3C\")   # => \"a\\x00\\x00\\x00b\"\n\n\"abc\".unpack(\"CxC\")  # => [97, 99]\n\"abc\".unpack(\"Cx3C\") # => ArgumentError: x outside of string\n//}\n\n: X\n\n  1バイト後退\n//emlist[][ruby]{\n[97, 98, 99].pack(\"CCXC\") # => \"ac\"\n\n\"abcdef\".unpack(\"x*XC\") # => [102]\n//}\n\n: @\n\n  絶対位置への移動\n//emlist[][ruby]{\n[97, 98].pack(\"C @3 C\") # => \"a\\x00\\x00b\"\n\n\"abcd\".unpack(\"C @3 C\") # => [97, 100]\n//}\n\n: j\n\nintptr_t (ポインタの幅の符号つき整数, エンディアンに依存)\n\n: J\n\nuintptr_t (ポインタの幅の符号なし整数, エンディアンに依存)\n\n=== 使用例\n\n以下、pack/unpack の使用例の一部です。\n\npack を使用しなくても同じことができる場合はその例も載せています。\npack は暗号になりやすい面があることを考慮し、pack を使いたくない人\nに別解を示すためです。\n\n: 数値(文字コード)の配列を文字列に変換する例\n//emlist[][ruby]{\n[82, 117, 98, 121].pack(\"cccc\")  # => \"Ruby\"\n[82, 117, 98, 121].pack(\"c4\")    # => \"Ruby\"\n[82, 117, 98, 121].pack(\"c*\")    # => \"Ruby\"\n\ns = \"\"\n[82, 117, 98, 121].each {|c| s << c}\ns    # => \"Ruby\"\n\n[82, 117, 98, 121].collect {|c| sprintf \"%c\", c}.join   # => \"Ruby\"\n\n[82, 117, 98, 121].inject(\"\") {|s, c| s << c}    # => \"Ruby\"\n//}\n\n: 文字列を数値(文字コード)の配列に変換する例\n//emlist[][ruby]{\n\"Ruby\".unpack('C*')    # => [82, 117, 98, 121]\n\na = []\n\"Ruby\".each_byte {|c| a << c}\na    # => [82, 117, 98, 121]\n//}\n\n: \"x\" でヌルバイトを埋めることができる\n//emlist[][ruby]{\n[82, 117, 98, 121].pack(\"ccxxcc\")    # => \"Ru\\x00\\x00by\"\n//}\n\n: \"x\" で文字を読み飛ばす事が出来る\n//emlist[][ruby]{\n\"Ru\\x00\\x00by\".unpack('ccxxcc')    # => [82, 117, 98, 121]\n//}\n\n: Hexダンプを数値の配列に変換する例\n//emlist[][ruby]{\n\"61 62 63 64 65 66\".delete(' ').lines.pack('H*').unpack('C*')\n# => [97, 98, 99, 100, 101, 102]\n\n\"61 62 63 64 65 66\".split.collect {|c| c.hex}\n# => [97, 98, 99, 100, 101, 102]\n//}\n\n: バイナリと16進数のpackでは長さ指定は生成されるバイト数ではなく、ビットやニブルの個数を表す\n//emlist[][ruby]{\n[0b01010010, 0b01110101, 0b01100010, 0b01111001].pack(\"C4\")\n# => \"Ruby\"\n[\"01010010011101010110001001111001\"].pack(\"B32\") # 8 bits * 4\n# => \"Ruby\"\n\n[0x52, 0x75, 0x62, 0x79].pack(\"C4\")\n# => \"Ruby\"\n[\"52756279\"].pack(\"H8\")  # 2 nybbles * 4\n# => \"Ruby\"\n//}\n\n: テンプレート文字'a'の長さ指定は1つの文字列だけに適用される\n//emlist[][ruby]{\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"a4\")\n# => \"RUBY\"\n\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"aaaa\")\n# => \"Ruby\"\n\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"a*aaa\")\n# => \"RUBYuby\"\n//}\n\n: テンプレート文字\"a\"は、長さが足りない分をヌル文字で補う\n//emlist[][ruby]{\n[\"Ruby\"].pack(\"a8\")\n# => \"Ruby\\x00\\x00\\x00\\x00\"\n//}\n\n: リトルエンディアンとビッグエンディアン\n//emlist[][ruby]{\n[1,2].pack(\"s2\")\n# => \"\\x01\\x00\\002\\x00\" # リトルエンディアンのシステムでの出力\n# => \"\\x00\\x01\\x00\\002\" # ビッグエンディアンのシステムでの出力\n\n[1,2].pack(\"n2\")\n# => \"\\x00\\x01\\x00\\002\" # システムによらずビッグエンディアン\n\n[1,2].pack(\"v2\")\n# => \"\\x01\\x00\\002\\x00\" # システムによらずリトルエンディアン\n//}\n\n: ネットワークバイトオーダの signed long\n//emlist[][ruby]{\ns = \"\\xFF\\xFF\\xFF\\xFE\"\nn = s.unpack(\"N\")[0]\nif n[31] == 1\n  n = -((n ^ 0xffff_ffff) + 1)\nend\nn # => -2\n//}\n\n: ネットワークバイトオーダの signed long(その2)\n//emlist[][ruby]{\ns = \"\\xFF\\xFF\\xFF\\xFE\"\nn = s.unpack(\"N\").pack(\"l\").unpack(\"l\")[0]\nn # => -2\n//}\n\n: IPアドレス\n//emlist[][ruby]{\nrequire 'socket'\nofficial_hostname, alias_hostnames, address_family, *address_list = Socket.gethostbyname(\"localhost\")\naddress_list.find {|address| address.size == 4 }.unpack(\"C4\").join(\".\")\n# => \"127.0.0.1\"\n\n\"127.0.0.1\".split(\".\").collect {|c| c.to_i}.pack(\"C4\")\n# => \"\\x7F\\x00\\x00\\x01\"\n//}\n\n: sockaddr_in 構造体\n//emlist[][ruby]{\nrequire 'socket'\n[Socket::AF_INET,\n Socket.getservbyname('echo'),\n 127, 0, 0, 1].pack(\"s n C4 x8\")\n# => \"\\x02\\x00\\x00\\a\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  pack/unpack を使う代わりに\n  Socket.pack_sockaddr_in,\n  Socket.unpack_sockaddr_in メソッドがあります。\n\n: '\\0'終端文字列のアドレス\n\n  テンプレート文字 \"p\" や \"P\" は、C 言語レベルのインタフェースのた\n  めにあります(例えば IO#ioctl)。\n//emlist[][ruby]{\n[\"foo\"].pack(\"p\")    # => \"xp\\xC2\\x85\\vV\\x00\\x00\"\n//}\n\n  結果の文字列はゴミに見えますが、実際は文字列\"foo\\0\"を指すアドレ\n  ス(のバイナリ表現)です。以下のようにすれば見慣れた表記で見ること\n  が出来ます\n//emlist[][ruby]{\nprintf \"%#014x\\n\", \"xp\\xC2\\x85\\vV\\x00\\x00\".unpack(\"J\")[0] # => 0x560b85c27078\n//}\n\n  アドレスが指す先のオブジェクト(この例で \"foo\\0\") は、pack の結\n  果が GC されるまではGCされないことが保証されています。\n\n  unpack(\"p\"), unpack(\"P\") は、pack の結果からしか unpack できません。\n//emlist[][ruby]{\n[\"foo\"].pack(\"p\").unpack(\"p\") # => [\"foo\"]\n\"xp\\xC2\\x85\\vV\\x00\\x00\".unpack(\"p\")\n# => ArgumentError: no associated pointer\n//}\n  \"p\" や \"P\" は、nil を特別に扱い NULL\n  ポインタとして解釈します。(以下は、64bitマシンで一般的な結果)\n//emlist[][ruby]{\n[nil].pack(\"p\")        # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\".unpack(\"p\") # => [nil]\n//}\n\n: 構造体のアドレス\n\n  例えば、\n//emlist{\n      struct {\n        int   a;\n        short b;\n        long  c;\n      } v = {1,2,3};\n//}\n  を表す文字列は\n//emlist[][ruby]{\nv = [1,2,3].pack(\"i!s!l!\")\n//}\n  です。(byte alignment の問題から実際は適当な padding が必要に\n  なるかもしれません)\n\n  この構造体を指すアドレスは\n//emlist[][ruby]{\n[v].pack(\"P\")  # => \"\\xC0\\xCC2L\\fV\\x00\\x00\"\n//}\n  で得られます。\n\n: UTF-8からUCS-2への変換 (サロゲートを処理していないので UTF-16 とはいえない)\n\n  リトルエンディアン:\n//emlist[][ruby]{\n(\"Comments\").unpack(\"U*\").pack(\"v*\") # => \"C\\x00o\\x00m\\x00m\\x00e\\x00n\\x00t\\x00s\\x00\"\n//}\n  ビッグエンディアン:\n//emlist[][ruby]{\n(\"Comments\").unpack(\"U*\").pack(\"n*\") # => \"\\x00C\\x00o\\x00m\\x00m\\x00e\\x00n\\x00t\\x00s\"\n//}\n\n@see String#unpack, String#unpack1",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "base64",
          "label": "base64",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:base64/"
        }
      ]
    },
    {
      "signature": "Array#prepend(*obj) -> self",
      "score": 63055.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された obj を引数の最後から順番に配列の先頭に挿入します。\n引数を指定しなければ何もしません。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/prepend.html",
          "description": "指定された obj を引数の最後から順番に配列の先頭に挿入します。\n引数を指定しなければ何もしません。\n\n@param obj 自身に追加したいオブジェクトを指定します。\n\n//emlist[例][ruby]{\narr = [1,2,3]\narr.unshift 0\np arr             #=> [0, 1, 2, 3]\narr.unshift [0]\np arr             #=> [[0], 0, 1, 2, 3]\narr.unshift 1, 2\np arr             #=> [1, 2, [0], 0, 1, 2, 3]\n//}\n\n@see Array#push, Array#pop, Array#shift",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#unshift(*obj) -> self",
      "score": 63055.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された obj を引数の最後から順番に配列の先頭に挿入します。\n引数を指定しなければ何もしません。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/prepend.html",
          "description": "指定された obj を引数の最後から順番に配列の先頭に挿入します。\n引数を指定しなければ何もしません。\n\n@param obj 自身に追加したいオブジェクトを指定します。\n\n//emlist[例][ruby]{\narr = [1,2,3]\narr.unshift 0\np arr             #=> [0, 1, 2, 3]\narr.unshift [0]\np arr             #=> [[0], 0, 1, 2, 3]\narr.unshift 1, 2\np arr             #=> [1, 2, [0], 0, 1, 2, 3]\n//}\n\n@see Array#push, Array#pop, Array#shift",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#hash -> Integer",
      "score": 63049.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "自身のハッシュ値を整数で返します。ハッシュ値は自身の各要素のハッシュ値から\n計算されます。Array#eql? で比較して等しい配列同士は同じハッシュ値を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/hash.html",
          "description": "自身のハッシュ値を整数で返します。ハッシュ値は自身の各要素のハッシュ値から\n計算されます。Array#eql? で比較して等しい配列同士は同じハッシュ値を返します。\n\n//emlist[例][ruby]{\na = [\"a\", \"b\", 1]\na.hash                #=>  321\nb = a.dup\nb.hash                #=>  321\n\n[\"a\", 1, \"b\"].hash    #=>  491\n[\"a\", 1.0, \"b\"].hash  #=>  466227\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#<<(obj) -> self",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "指定された obj を自身の末尾に破壊的に追加します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/=3c=3c.html",
          "description": "指定された obj を自身の末尾に破壊的に追加します。\n\n//emlist[例][ruby]{\nary = [1]\nary << 2\np ary      # [1, 2]\n//}\n\nまたこのメソッドは self を返すので、以下のように連続して\n書くことができます。\n\n//emlist[例][ruby]{\nary = [1]\nary << 2 << 3 << 4\np ary   #=> [1, 2, 3, 4]\n//}\n\n@param obj 自身に加えたいオブジェクトを指定します。Array#push と違って引数は一つしか指定できません。\n\n@see Array#push",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#combination(n) -> Enumerator",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "サイズ n の組み合わせをすべて生成し、それを引数としてブロックを実行します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/combination.html",
          "description": "サイズ n の組み合わせをすべて生成し、それを引数としてブロックを実行します。\n\n得られる組み合わせの順序は保証されません。ブロックなしで呼び出されると、組み合わせ\nを生成する Enumerator オブジェクトを返します。\n\n@param n 生成される配列のサイズを整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\na = [1, 2, 3, 4]\na.combination(1).to_a  #=> [[1],[2],[3],[4]]\na.combination(2).to_a  #=> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\na.combination(3).to_a  #=> [[1,2,3],[1,2,4],[1,3,4],[2,3,4]]\na.combination(4).to_a  #=> [[1,2,3,4]]\na.combination(0).to_a  #=> [[]]: one combination of length 0\na.combination(5).to_a  #=> []  : no combinations of length 5\n//}\n\nブロックが与えられた場合、作成した配列の各要素を引数としてブロックを実\n行して self を返します。\n\n//emlist[例][ruby]{\na = [1, 2, 3, 4]\nresult = []\na.combination(2) {|e| result << e} # => [1,2,3,4]\nresult #=> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n//}\n\n@see Array#permutation, Array#repeated_combination",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#combination(n) {|c| block } -> self",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "サイズ n の組み合わせをすべて生成し、それを引数としてブロックを実行します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/combination.html",
          "description": "サイズ n の組み合わせをすべて生成し、それを引数としてブロックを実行します。\n\n得られる組み合わせの順序は保証されません。ブロックなしで呼び出されると、組み合わせ\nを生成する Enumerator オブジェクトを返します。\n\n@param n 生成される配列のサイズを整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\na = [1, 2, 3, 4]\na.combination(1).to_a  #=> [[1],[2],[3],[4]]\na.combination(2).to_a  #=> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\na.combination(3).to_a  #=> [[1,2,3],[1,2,4],[1,3,4],[2,3,4]]\na.combination(4).to_a  #=> [[1,2,3,4]]\na.combination(0).to_a  #=> [[]]: one combination of length 0\na.combination(5).to_a  #=> []  : no combinations of length 5\n//}\n\nブロックが与えられた場合、作成した配列の各要素を引数としてブロックを実\n行して self を返します。\n\n//emlist[例][ruby]{\na = [1, 2, 3, 4]\nresult = []\na.combination(2) {|e| result << e} # => [1,2,3,4]\nresult #=> [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]\n//}\n\n@see Array#permutation, Array#repeated_combination",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#delete_if -> Enumerator",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/delete_if.html",
          "description": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。\n\nブロックが与えられなかった場合は、自身と reject! から生成した\nEnumerator オブジェクトを返します。\n返された Enumerator オブジェクトの each メソッドには、\nもとの配列に対して副作用があることに注意してください。\n\n//emlist[例][ruby]{\na = [0, 1, 2, 3, 4, 5]\na.delete_if{|x| x % 2 == 0}\np a #=> [1, 3, 5]\n\na = [0, 1, 2, 3, 4, 5]\ne = a.reject!\ne.each{|i| i % 2 == 0}\np a                    #=> [1, 3, 5]  もとの配列から削除されていることに注意。\n//}\n\n@see Array#select!, Array#keep_if",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#delete_if {|x| ... } -> self",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/delete_if.html",
          "description": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。\n\nブロックが与えられなかった場合は、自身と reject! から生成した\nEnumerator オブジェクトを返します。\n返された Enumerator オブジェクトの each メソッドには、\nもとの配列に対して副作用があることに注意してください。\n\n//emlist[例][ruby]{\na = [0, 1, 2, 3, 4, 5]\na.delete_if{|x| x % 2 == 0}\np a #=> [1, 3, 5]\n\na = [0, 1, 2, 3, 4, 5]\ne = a.reject!\ne.each{|i| i % 2 == 0}\np a                    #=> [1, 3, 5]  もとの配列から削除されていることに注意。\n//}\n\n@see Array#select!, Array#keep_if",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#each -> Enumerator",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "各要素に対してブロックを評価します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/each.html",
          "description": "各要素に対してブロックを評価します。\n\nブロックが与えられなかった場合は、自身と each から生成した\nEnumerator オブジェクトを返します。\n\n//emlist[例][ruby]{\n[1, 2, 3].each do |i|\n  puts i\nend\n#=> 1\n#   2\n#   3\n//}\n\n\n@see Array#each_index, Array#reverse_each",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#each {|item| .... } -> self",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "各要素に対してブロックを評価します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/each.html",
          "description": "各要素に対してブロックを評価します。\n\nブロックが与えられなかった場合は、自身と each から生成した\nEnumerator オブジェクトを返します。\n\n//emlist[例][ruby]{\n[1, 2, 3].each do |i|\n  puts i\nend\n#=> 1\n#   2\n#   3\n//}\n\n\n@see Array#each_index, Array#reverse_each",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#each_index -> Enumerator",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "各要素のインデックスに対してブロックを評価します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/each_index.html",
          "description": "各要素のインデックスに対してブロックを評価します。\n\n以下と同じです。\n\n//emlist[例][ruby]{\n(0 ... ary.size).each do |index|\n  # ....\nend\n//}\n\nブロックが与えられなかった場合は、自身と each_index から生成した\nEnumerator オブジェクトを返します。\n\n@see Array#each, Array#reverse_each",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#each_index {|index| .... } -> self",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "各要素のインデックスに対してブロックを評価します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/each_index.html",
          "description": "各要素のインデックスに対してブロックを評価します。\n\n以下と同じです。\n\n//emlist[例][ruby]{\n(0 ... ary.size).each do |index|\n  # ....\nend\n//}\n\nブロックが与えられなかった場合は、自身と each_index から生成した\nEnumerator オブジェクトを返します。\n\n@see Array#each, Array#reverse_each",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#fetch(nth) -> object",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "nth 番目の要素を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/fetch.html",
          "description": "nth 番目の要素を返します。\n\nArray#[] (nth) とは nth 番目の要素が存在しない場合の振舞いが異\nなります。最初の形式では、例外 IndexError が発生します。\n二番目の形式では、引数 ifnone を返します。\n三番目の形式では、ブロックを評価した結果を返します。\n\n@param nth 取得したい要素のインデックスを整数で指定します。\n           整数以外のオブジェクトを指定した場合は to_int メソッドによる\n           暗黙の型変換を試みます。\n\n@param ifnone 要素が存在しなかった場合に返すべき値を指定します。\n\n@raise TypeError 引数 nth に整数以外の(暗黙の型変換が行えない)オブジェ\n                 クトを指定した場合に発生します。\n\n@raise IndexError 引数 ifnone もブロックも指定しておらず、 nth 番目の要\n                  素も存在しなかった場合に発生します。\n\n//emlist[例][ruby]{\na = [1, 2, 3, 4, 5]\nbegin\n  p a.fetch(10)\nrescue IndexError => err\n  puts err #=> index 10 out of array\nend\n\np a.fetch(10, 999) #=> 999\n\nresult = a.fetch(10){|nth|\n  print \"#{nth} はありません。\\n\"\n  999\n}\np result #=> 999\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "IndexError",
          "label": "IndexError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IndexError/"
        }
      ]
    },
    {
      "signature": "Array#fetch(nth) {|nth| ... } -> object",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "nth 番目の要素を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/fetch.html",
          "description": "nth 番目の要素を返します。\n\nArray#[] (nth) とは nth 番目の要素が存在しない場合の振舞いが異\nなります。最初の形式では、例外 IndexError が発生します。\n二番目の形式では、引数 ifnone を返します。\n三番目の形式では、ブロックを評価した結果を返します。\n\n@param nth 取得したい要素のインデックスを整数で指定します。\n           整数以外のオブジェクトを指定した場合は to_int メソッドによる\n           暗黙の型変換を試みます。\n\n@param ifnone 要素が存在しなかった場合に返すべき値を指定します。\n\n@raise TypeError 引数 nth に整数以外の(暗黙の型変換が行えない)オブジェ\n                 クトを指定した場合に発生します。\n\n@raise IndexError 引数 ifnone もブロックも指定しておらず、 nth 番目の要\n                  素も存在しなかった場合に発生します。\n\n//emlist[例][ruby]{\na = [1, 2, 3, 4, 5]\nbegin\n  p a.fetch(10)\nrescue IndexError => err\n  puts err #=> index 10 out of array\nend\n\np a.fetch(10, 999) #=> 999\n\nresult = a.fetch(10){|nth|\n  print \"#{nth} はありません。\\n\"\n  999\n}\np result #=> 999\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "IndexError",
          "label": "IndexError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IndexError/"
        }
      ]
    },
    {
      "signature": "Array#fetch(nth, ifnone) -> object",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "nth 番目の要素を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/fetch.html",
          "description": "nth 番目の要素を返します。\n\nArray#[] (nth) とは nth 番目の要素が存在しない場合の振舞いが異\nなります。最初の形式では、例外 IndexError が発生します。\n二番目の形式では、引数 ifnone を返します。\n三番目の形式では、ブロックを評価した結果を返します。\n\n@param nth 取得したい要素のインデックスを整数で指定します。\n           整数以外のオブジェクトを指定した場合は to_int メソッドによる\n           暗黙の型変換を試みます。\n\n@param ifnone 要素が存在しなかった場合に返すべき値を指定します。\n\n@raise TypeError 引数 nth に整数以外の(暗黙の型変換が行えない)オブジェ\n                 クトを指定した場合に発生します。\n\n@raise IndexError 引数 ifnone もブロックも指定しておらず、 nth 番目の要\n                  素も存在しなかった場合に発生します。\n\n//emlist[例][ruby]{\na = [1, 2, 3, 4, 5]\nbegin\n  p a.fetch(10)\nrescue IndexError => err\n  puts err #=> index 10 out of array\nend\n\np a.fetch(10, 999) #=> 999\n\nresult = a.fetch(10){|nth|\n  print \"#{nth} はありません。\\n\"\n  999\n}\np result #=> 999\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "IndexError",
          "label": "IndexError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IndexError/"
        }
      ]
    },
    {
      "signature": "Array#filter! -> Enumerator",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "ブロックが真を返した要素を残し、偽を返した要素を自身から削除します。\n変更があった場合は self を、\n変更がなかった場合には nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/filter=21.html",
          "description": "ブロックが真を返した要素を残し、偽を返した要素を自身から削除します。\n変更があった場合は self を、\n変更がなかった場合には nil を返します。\n\n//emlist[例][ruby]{\na = %w{ a b c d e f }\na.select! {|v| v =~ /[a-z]/ }   # => nil\na # => [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n//}\n\nブロックが与えられなかった場合は、自身と select! から生成した\nEnumerator オブジェクトを返します。\n\n@see Array#keep_if, Array#reject!",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#filter! {|item| block } -> self | nil",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "ブロックが真を返した要素を残し、偽を返した要素を自身から削除します。\n変更があった場合は self を、\n変更がなかった場合には nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/filter=21.html",
          "description": "ブロックが真を返した要素を残し、偽を返した要素を自身から削除します。\n変更があった場合は self を、\n変更がなかった場合には nil を返します。\n\n//emlist[例][ruby]{\na = %w{ a b c d e f }\na.select! {|v| v =~ /[a-z]/ }   # => nil\na # => [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n//}\n\nブロックが与えられなかった場合は、自身と select! から生成した\nEnumerator オブジェクトを返します。\n\n@see Array#keep_if, Array#reject!",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#join(sep = $,) -> String",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "配列の要素を文字列 sep を間に挟んで連結した文字列を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/join.html",
          "description": "配列の要素を文字列 sep を間に挟んで連結した文字列を返します。\n\n文字列でない要素に対しては、to_str があれば to_str、なければ to_s した結果を連結します。\n要素がまた配列であれば再帰的に (同じ sep を利用して)\njoin した文字列を連結します。\nただし、配列要素が自身を含むような無限にネストした配列に対しては、以下\nのような結果になります。\n\n//emlist[例][ruby]{\nary = [1,2,3]\nary.push ary\np ary           # => [1, 2, 3, [...]]\np ary.join      # => ArgumentError: recursive array join\n//}\n\n@param sep 間に挟む文字列を指定します。nil のときは空文字列を使います。\n           文字列以外のオブジェクトを指定した場合は to_str メソッドによ\n           る暗黙の型変換を試みます。\n\n@raise TypeError 引数に文字列以外の(暗黙の型変換が行えない)オブジェクト\n                 を指定した場合に発生します。\n\n@raise ArgumentError 配列要素が自身を含むような無限にネストした配列に対\n                     して join を呼んだ場合に発生します。\n\n//emlist[例][ruby]{\n[1, 2, 3].join('-') #=> \"1-2-3\"\n//}\n\n@see Array#*, $,",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#permutation(n = self.length) -> Enumerator",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "サイズ n の順列をすべて生成し，それを引数としてブロックを実行します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/permutation.html",
          "description": "サイズ n の順列をすべて生成し，それを引数としてブロックを実行します。\n\n引数を省略した場合は配列の要素数と同じサイズの順列に対してブロックを実\n行します。\n\n得られる順列の順序は保証されません。ブロックなしで呼び出されると， 順列\nを生成する Enumerator オブジェクトを返します。\n\n@param n 生成する配列のサイズを整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\na = [1, 2, 3]\na.permutation.to_a     #=> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\na.permutation(1).to_a  #=> [[1],[2],[3]]\na.permutation(2).to_a  #=> [[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]]\na.permutation(3).to_a  #=> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\na.permutation(0).to_a  #=> [[]]: one permutation of length 0\na.permutation(4).to_a  #=> []  : no permutations of length 4\n//}\n\nブロックが与えられた場合、作成した配列の各要素を引数としてブロックを実\n行して self を返します。\n\n//emlist[例][ruby]{\na = [1, 2, 3]\nresult = []\na.permutation(2) {|e| result << e} # => [1,2,3]\nresult # => [[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]]\n//}\n\n@see Array#combination, Array#repeated_permutation",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#permutation(n = self.length) { |p| block } -> self",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "サイズ n の順列をすべて生成し，それを引数としてブロックを実行します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/permutation.html",
          "description": "サイズ n の順列をすべて生成し，それを引数としてブロックを実行します。\n\n引数を省略した場合は配列の要素数と同じサイズの順列に対してブロックを実\n行します。\n\n得られる順列の順序は保証されません。ブロックなしで呼び出されると， 順列\nを生成する Enumerator オブジェクトを返します。\n\n@param n 生成する配列のサイズを整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\na = [1, 2, 3]\na.permutation.to_a     #=> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\na.permutation(1).to_a  #=> [[1],[2],[3]]\na.permutation(2).to_a  #=> [[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]]\na.permutation(3).to_a  #=> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\na.permutation(0).to_a  #=> [[]]: one permutation of length 0\na.permutation(4).to_a  #=> []  : no permutations of length 4\n//}\n\nブロックが与えられた場合、作成した配列の各要素を引数としてブロックを実\n行して self を返します。\n\n//emlist[例][ruby]{\na = [1, 2, 3]\nresult = []\na.permutation(2) {|e| result << e} # => [1,2,3]\nresult # => [[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]]\n//}\n\n@see Array#combination, Array#repeated_permutation",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#reject! -> Enumerator",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/delete_if.html",
          "description": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。\n\nブロックが与えられなかった場合は、自身と reject! から生成した\nEnumerator オブジェクトを返します。\n返された Enumerator オブジェクトの each メソッドには、\nもとの配列に対して副作用があることに注意してください。\n\n//emlist[例][ruby]{\na = [0, 1, 2, 3, 4, 5]\na.delete_if{|x| x % 2 == 0}\np a #=> [1, 3, 5]\n\na = [0, 1, 2, 3, 4, 5]\ne = a.reject!\ne.each{|i| i % 2 == 0}\np a                    #=> [1, 3, 5]  もとの配列から削除されていることに注意。\n//}\n\n@see Array#select!, Array#keep_if",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#reject! {|x| ... } -> self | nil",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/delete_if.html",
          "description": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。\n\nブロックが与えられなかった場合は、自身と reject! から生成した\nEnumerator オブジェクトを返します。\n返された Enumerator オブジェクトの each メソッドには、\nもとの配列に対して副作用があることに注意してください。\n\n//emlist[例][ruby]{\na = [0, 1, 2, 3, 4, 5]\na.delete_if{|x| x % 2 == 0}\np a #=> [1, 3, 5]\n\na = [0, 1, 2, 3, 4, 5]\ne = a.reject!\ne.each{|i| i % 2 == 0}\np a                    #=> [1, 3, 5]  もとの配列から削除されていることに注意。\n//}\n\n@see Array#select!, Array#keep_if",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#repeated_combination(n) -> Enumerator",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "サイズ n の重複組み合わせをすべて生成し、それを引数としてブロックを実行\nします。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/repeated_combination.html",
          "description": "サイズ n の重複組み合わせをすべて生成し、それを引数としてブロックを実行\nします。\n\n得られる組み合わせの順序は保証されません。ブロックなしで呼び出されると、\n組み合わせを生成する Enumerator オブジェクトを返します。\n\n@param n 生成される配列のサイズを整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\na = [1, 2, 3]\na.repeated_combination(1).to_a  #=> [[1], [2], [3]]\na.repeated_combination(2).to_a  #=> [[1,1],[1,2],[1,3],[2,2],[2,3],[3,3]]\na.repeated_combination(3).to_a  #=> [[1,1,1],[1,1,2],[1,1,3],[1,2,2],[1,2,3],\n                                #    [1,3,3],[2,2,2],[2,2,3],[2,3,3],[3,3,3]]\na.repeated_combination(4).to_a  #=> [[1,1,1,1],[1,1,1,2],[1,1,1,3],[1,1,2,2],[1,1,2,3],\n                                #    [1,1,3,3],[1,2,2,2],[1,2,2,3],[1,2,3,3],[1,3,3,3],\n                                #    [2,2,2,2],[2,2,2,3],[2,2,3,3],[2,3,3,3],[3,3,3,3]]\na.repeated_combination(0).to_a  #=> [[]] # one combination of length 0\n//}\n\nブロックが与えられた場合、作成した配列の各要素を引数としてブロックを実\n行して self を返します。\n\n//emlist[例][ruby]{\na = [1, 2, 3]\nresult = []\na.repeated_combination(3) {|e| result << e} # => [1,2,3]\nresult  #=> [[1,1,1],[1,1,2],[1,1,3],[1,2,2],[1,2,3],\n        #    [1,3,3],[2,2,2],[2,2,3],[2,3,3],[3,3,3]]\n//}\n\n@see Array#repeated_permutation, Array#combination",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#repeated_combination(n) { |c| ... } -> self",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "サイズ n の重複組み合わせをすべて生成し、それを引数としてブロックを実行\nします。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/repeated_combination.html",
          "description": "サイズ n の重複組み合わせをすべて生成し、それを引数としてブロックを実行\nします。\n\n得られる組み合わせの順序は保証されません。ブロックなしで呼び出されると、\n組み合わせを生成する Enumerator オブジェクトを返します。\n\n@param n 生成される配列のサイズを整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\na = [1, 2, 3]\na.repeated_combination(1).to_a  #=> [[1], [2], [3]]\na.repeated_combination(2).to_a  #=> [[1,1],[1,2],[1,3],[2,2],[2,3],[3,3]]\na.repeated_combination(3).to_a  #=> [[1,1,1],[1,1,2],[1,1,3],[1,2,2],[1,2,3],\n                                #    [1,3,3],[2,2,2],[2,2,3],[2,3,3],[3,3,3]]\na.repeated_combination(4).to_a  #=> [[1,1,1,1],[1,1,1,2],[1,1,1,3],[1,1,2,2],[1,1,2,3],\n                                #    [1,1,3,3],[1,2,2,2],[1,2,2,3],[1,2,3,3],[1,3,3,3],\n                                #    [2,2,2,2],[2,2,2,3],[2,2,3,3],[2,3,3,3],[3,3,3,3]]\na.repeated_combination(0).to_a  #=> [[]] # one combination of length 0\n//}\n\nブロックが与えられた場合、作成した配列の各要素を引数としてブロックを実\n行して self を返します。\n\n//emlist[例][ruby]{\na = [1, 2, 3]\nresult = []\na.repeated_combination(3) {|e| result << e} # => [1,2,3]\nresult  #=> [[1,1,1],[1,1,2],[1,1,3],[1,2,2],[1,2,3],\n        #    [1,3,3],[2,2,2],[2,2,3],[2,3,3],[3,3,3]]\n//}\n\n@see Array#repeated_permutation, Array#combination",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#repeated_permutation(n) -> Enumerator",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "サイズ n の重複順列をすべて生成し，それを引数としてブロックを実行します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/repeated_permutation.html",
          "description": "サイズ n の重複順列をすべて生成し，それを引数としてブロックを実行します。\n\n得られる順列の順序は保証されません。ブロックなしで呼び出されると， 順列\nを生成する Enumerator オブジェクトを返します。\n\n@param n 生成する配列のサイズを整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\na = [1, 2]\na.repeated_permutation(1).to_a  #=> [[1], [2]]\na.repeated_permutation(2).to_a  #=> [[1,1],[1,2],[2,1],[2,2]]\na.repeated_permutation(3).to_a  #=> [[1,1,1],[1,1,2],[1,2,1],[1,2,2],\n                                #    [2,1,1],[2,1,2],[2,2,1],[2,2,2]]\na.repeated_permutation(0).to_a  #=> [[]] # one permutation of length 0\n//}\n\nブロックが与えられた場合、作成した配列の各要素を引数としてブロックを実\n行して self を返します。\n\n//emlist[例][ruby]{\na = [1, 2]\nresult = []\na.repeated_permutation(3) {|e| result << e} # => [1,2]\nresult  #=> [[1,1,1],[1,1,2],[1,2,1],[1,2,2],\n        #    [2,1,1],[2,1,2],[2,2,1],[2,2,2]]\n//}\n\n@see Array#repeated_combination, Array#permutation",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#repeated_permutation(n) { |p| ... } -> self",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "サイズ n の重複順列をすべて生成し，それを引数としてブロックを実行します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/repeated_permutation.html",
          "description": "サイズ n の重複順列をすべて生成し，それを引数としてブロックを実行します。\n\n得られる順列の順序は保証されません。ブロックなしで呼び出されると， 順列\nを生成する Enumerator オブジェクトを返します。\n\n@param n 生成する配列のサイズを整数で指定します。\n         整数以外のオブジェクトを指定した場合は to_int メソッドによる暗\n         黙の型変換を試みます。\n\n@raise TypeError 引数に整数以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n//emlist[例][ruby]{\na = [1, 2]\na.repeated_permutation(1).to_a  #=> [[1], [2]]\na.repeated_permutation(2).to_a  #=> [[1,1],[1,2],[2,1],[2,2]]\na.repeated_permutation(3).to_a  #=> [[1,1,1],[1,1,2],[1,2,1],[1,2,2],\n                                #    [2,1,1],[2,1,2],[2,2,1],[2,2,2]]\na.repeated_permutation(0).to_a  #=> [[]] # one permutation of length 0\n//}\n\nブロックが与えられた場合、作成した配列の各要素を引数としてブロックを実\n行して self を返します。\n\n//emlist[例][ruby]{\na = [1, 2]\nresult = []\na.repeated_permutation(3) {|e| result << e} # => [1,2]\nresult  #=> [[1,1,1],[1,1,2],[1,2,1],[1,2,2],\n        #    [2,1,1],[2,1,2],[2,2,1],[2,2,2]]\n//}\n\n@see Array#repeated_combination, Array#permutation",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#select! -> Enumerator",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "ブロックが真を返した要素を残し、偽を返した要素を自身から削除します。\n変更があった場合は self を、\n変更がなかった場合には nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/filter=21.html",
          "description": "ブロックが真を返した要素を残し、偽を返した要素を自身から削除します。\n変更があった場合は self を、\n変更がなかった場合には nil を返します。\n\n//emlist[例][ruby]{\na = %w{ a b c d e f }\na.select! {|v| v =~ /[a-z]/ }   # => nil\na # => [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n//}\n\nブロックが与えられなかった場合は、自身と select! から生成した\nEnumerator オブジェクトを返します。\n\n@see Array#keep_if, Array#reject!",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#select! {|item| block } -> self | nil",
      "score": 63037.0,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.3"
        ]
      },
      "summary": "ブロックが真を返した要素を残し、偽を返した要素を自身から削除します。\n変更があった場合は self を、\n変更がなかった場合には nil を返します。",
      "documents": [
        {
          "version": "3.3",
          "url": "https://rurema.clear-code.com/3.3/method/Array/i/filter=21.html",
          "description": "ブロックが真を返した要素を残し、偽を返した要素を自身から削除します。\n変更があった場合は self を、\n変更がなかった場合には nil を返します。\n\n//emlist[例][ruby]{\na = %w{ a b c d e f }\na.select! {|v| v =~ /[a-z]/ }   # => nil\na # => [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n//}\n\nブロックが与えられなかった場合は、自身と select! から生成した\nEnumerator オブジェクトを返します。\n\n@see Array#keep_if, Array#reject!",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    }
  ]
}
