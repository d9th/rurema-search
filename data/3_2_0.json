{
  "versions": [
    { "name": "all", "selected": false },
    { "name": "2.1.0", "selected": false },
    { "name": "2.2.0", "selected": false },
    { "name": "2.3.0", "selected": false },
    { "name": "2.4.0", "selected": false },
    { "name": "2.5.0", "selected": false },
    { "name": "2.6.0", "selected": false },
    { "name": "2.7.0", "selected": false },
    { "name": "3.0.0", "selected": false },
    { "name": "3.1.0", "selected": false },
    { "name": "3.2.0", "selected": true }
  ],
  "statistics": {
    "total": 73,
    "start_offset": 1,
    "end_offset": 73,
    "elapsed_time": 0.028914928436279297
  },
  "conditions": [
    {
      "name": "version",
      "value": "3.2.0",
      "icon_url": "https://rurema.clear-code.com/images/version-icon.png"
    },
    {
      "name": "query",
      "value": "array",
      "icon_url": "https://rurema.clear-code.com/images/query-icon.png"
    },
    {
      "name": "query",
      "value": "each",
      "icon_url": "https://rurema.clear-code.com/images/query-icon.png"
    }
  ],
  "corrections": [
    { "value": "array fill", "score": 5510 },
    { "value": "array []", "score": 3673 },
    { "value": "array sample", "score": 3672 },
    { "value": "array fetch", "score": 2756 },
    { "value": "array []=", "score": 2754 }
  ],
  "suggestions": [],
  "entries": [
    {
      "signature": "Array#each -> Enumerator",
      "score": 81415.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "各要素に対してブロックを評価します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/each.html",
          "description": "各要素に対してブロックを評価します。\n\nブロックが与えられなかった場合は、自身と each から生成した\nEnumerator オブジェクトを返します。\n\n//emlist[例][ruby]{\n[1, 2, 3].each do |i|\n  puts i\nend\n#=> 1\n#   2\n#   3\n//}\n\n\n@see Array#each_index, Array#reverse_each",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#each {|item| .... } -> self",
      "score": 81415.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "各要素に対してブロックを評価します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/each.html",
          "description": "各要素に対してブロックを評価します。\n\nブロックが与えられなかった場合は、自身と each から生成した\nEnumerator オブジェクトを返します。\n\n//emlist[例][ruby]{\n[1, 2, 3].each do |i|\n  puts i\nend\n#=> 1\n#   2\n#   3\n//}\n\n\n@see Array#each_index, Array#reverse_each",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#each_index -> Enumerator",
      "score": 45415.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "各要素のインデックスに対してブロックを評価します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/each_index.html",
          "description": "各要素のインデックスに対してブロックを評価します。\n\n以下と同じです。\n\n//emlist[例][ruby]{\n(0 ... ary.size).each do |index|\n  # ....\nend\n//}\n\nブロックが与えられなかった場合は、自身と each_index から生成した\nEnumerator オブジェクトを返します。\n\n@see Array#each, Array#reverse_each",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#each_index {|index| .... } -> self",
      "score": 45415.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "各要素のインデックスに対してブロックを評価します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/each_index.html",
          "description": "各要素のインデックスに対してブロックを評価します。\n\n以下と同じです。\n\n//emlist[例][ruby]{\n(0 ... ary.size).each do |index|\n  # ....\nend\n//}\n\nブロックが与えられなかった場合は、自身と each_index から生成した\nEnumerator オブジェクトを返します。\n\n@see Array#each, Array#reverse_each",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#reverse_each -> Enumerator",
      "score": 45379.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "各要素に対して逆順にブロックを評価します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/reverse_each.html",
          "description": "各要素に対して逆順にブロックを評価します。\n\nブロックが与えられなかった場合は、自身と reverse_each から生成した\nEnumerator オブジェクトを返します。\n\n//emlist[例][ruby]{\na = [ \"a\", \"b\", \"c\" ]\na.reverse_each {|x| print x, \" \" }\n# => c b a\n//}\n\n@see Array#each",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#reverse_each {|item| ... } -> self",
      "score": 45379.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "各要素に対して逆順にブロックを評価します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/reverse_each.html",
          "description": "各要素に対して逆順にブロックを評価します。\n\nブロックが与えられなかった場合は、自身と reverse_each から生成した\nEnumerator オブジェクトを返します。\n\n//emlist[例][ruby]{\na = [ \"a\", \"b\", \"c\" ]\na.reverse_each {|x| print x, \" \" }\n# => c b a\n//}\n\n@see Array#each",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array.new(ary) -> Array",
      "score": 27421.0,
      "metadata": { "type": "singleton-method", "versions": ["3.2.0"] },
      "summary": "指定された配列 ary を複製して返します。\nArray#dup 同様 要素を複製しない浅い複製です。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/s/new.html",
          "description": "指定された配列 ary を複製して返します。\nArray#dup 同様 要素を複製しない浅い複製です。\n\n@param ary 複製したい配列を指定します。\n\n//emlist[例][ruby]{\np Array.new([1,2,3]) # => [1,2,3]\n\na = [\"a\", \"b\", \"c\"]\nb = Array.new(a)\na.each{|s| s.capitalize! }\np a                        #=> [\"A\", \"B\", \"C\"]\np b                        #=> [\"A\", \"B\", \"C\"]   (b は a と要素を共有する)\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array.new(size) {|index| ... } -> Array",
      "score": 27361.0,
      "metadata": { "type": "singleton-method", "versions": ["3.2.0"] },
      "summary": "長さ size の配列を生成し、各要素のインデックスを引数としてブロックを実行し、\n各要素の値をブロックの評価結果に設定します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/s/new.html",
          "description": "長さ size の配列を生成し、各要素のインデックスを引数としてブロックを実行し、\n各要素の値をブロックの評価結果に設定します。\n\nブロックは要素毎に実行されるので、全要素をあるオブジェクトの複製にすることができます。\n\n@param size 配列の長さを数値で指定します。\n\n//emlist[例][ruby]{\nary = Array.new(3){|index| \"hoge#{index}\"}\np ary                      #=> [\"hoge0\", \"hoge1\", \"hoge2\"]\n//}\n\n//emlist[例][ruby]{\nary = Array.new(3){ \"foo\" }\np ary                      #=> [\"foo\", \"foo\", \"foo\"]\nary[0].capitalize!\np ary                      #=> [\"Foo\", \"foo\", \"foo\"]  (各要素は違うオブジェクトである)\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array.new(size = 0, val = nil) -> Array",
      "score": 27346.0,
      "metadata": { "type": "singleton-method", "versions": ["3.2.0"] },
      "summary": "長さ size の配列を生成し、各要素を val で初期化して返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/s/new.html",
          "description": "長さ size の配列を生成し、各要素を val で初期化して返します。\n\n要素毎に val が複製されるわけではないことに注意してください。\n全要素が同じオブジェクト val を参照します。\n後述の例では、配列の各要素は全て同一の文字列を指します。\n\n@param size 配列の長さを数値で指定します。\n\n@param val 配列の要素の値を指定します。\n\n//emlist[例][ruby]{\nary = Array.new(3, \"foo\")\np ary                     #=> [\"foo\", \"foo\", \"foo\"]\nary[0].capitalize!\np ary                     #=> [\"Foo\", \"Foo\", \"Foo\"]  (各要素は同一のオブジェクトである)\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#pack(template) -> String",
      "score": 27091.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "配列の内容を template で指定された文字列にしたがって、\nバイナリとしてパックした文字列を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/pack.html",
          "description": "配列の内容を template で指定された文字列にしたがって、\nバイナリとしてパックした文字列を返します。\n\nテンプレートは\n型指定文字列とその長さ(省略時は1)を並べたものです。長さと\nして * が指定された時は「残りのデータ全て」の長さを\n表します。型指定文字は以下で述べる pack テンプレート文字列の通りです。\n\nbuffer が指定されていれば、バッファとして使って返値として返します。\nもし template の最初にオフセット (@) が指定されていれば、\n結果はオフセットの後ろから詰められます。\nbuffer の元の内容がオフセットより長ければ、\nオフセットより後ろの部分は上書きされます。\nオフセットより短ければ、足りない部分は \"\\0\" で埋められます。\n\nbuffer オプションはメモリ確保が発生しないことを保証するものでは\nないことに注意してください。\nbuffer のサイズ(capacity)が足りなければ、packはメモリを確保します。\n\n//emlist[例][ruby]{\n['!'].pack('@1a', buffer: 'abc')  # => \"a!\"\n['!'].pack('@5a', buffer: 'abc')  # => \"abc\\u0000\\u0000!\"\n//}\n\n@param template 自身のバイナリとしてパックするためのテンプレートを文字列で指定します。\n@param buffer   結果を詰めるバッファとして使う文字列オブジェクトを指定します。\n                指定した場合は返値も指定した文字列オブジェクトになります。\n\n\n以下にあげるものは、Array#pack、String#unpack、String#unpack1\nのテンプレート文字の一覧です。テンプレート文字は後に「長さ」を表す数字\nを続けることができます。「長さ」の代わりに`*'とすることで「残り全て」\nを表すこともできます。\n\n長さの意味はテンプレート文字により異なりますが大抵、\n  \"iiii\"\nのように連続するテンプレート文字は\n  \"i4\"\nと書き換えることができます。\n\nテンプレート文字列中の空白類は無視されます。\nまた、`#' から改行あるいはテンプレート文字列の最後まではコメントとみな\nされ無視されます。\n\n=== 整数のテンプレート文字のシステム依存性\n\n各テンプレート文字の説明の中で、\nshort や long はシステムによらずそれぞれ 2, 4バイトサ\nイズの数値(32ビットマシンで一般的なshort, longのサイズ)を意味していま\nす。s, S, l, L に対しては直後に _ または ! を \"s_\" あるいは \"s!\" のように\n続けることでシステム依存の short, long のサイズにすることもできます。\n\ni, I (int)のサイズは常にシステム依存であり、n, N, v, V\nのサイズは常にシステム依存ではない(!をつけられない)ことに注意してください。\n\nつまり、IO#ioctl などで C の構造体を渡すときのように、\nシステム依存のサイズとエンディアンに合わせる必要があるときには\ns!, S!, i!, I!, l!, L!, q!, Q!, j!, J! を用います。\nまた、ネットワークプロトコルやファイルフォーマットのように、\nシステムに依存しないデータを扱うときには\nn, N, v, V を用います。\n\n強制的にエンディアンを指定したいときは、\nリトルエンディアンなら < を、\nビッグエンディアンなら >\nを後ろにつけます。! と組み合わせることも可能です。\n\nまとめると以下のようになります。\n\n: エンディアン非依存、整数サイズ非依存 (ネットワークプロトコルなどに適切)\n//emlist{\n  n: big endian unsigned 16bit\n  N: big endian unsigned 32bit\n  v: little endian unsigned 16bit\n  V: little endian unsigned 32bit\n//}\n\n: エンディアン依存、整数サイズ依存 (C の構造体などに適切)\n//emlist{\n  s!: signed short\n  S!: unsigned short\n  i,i!: signed int\n  I,I!: unsigned int\n  l!: signed long\n  L!: unsigned long\n  q!: signed long long\n  Q!: unsigned long long\n  j,j!: intptr_t\n  J,J!: uintptr_t\n//}\n\n: エンディアン依存、整数サイズ非依存 (C99 の stdint.h にある厳密な幅を持つ整数型に適切)\n//emlist{\n  s: int16_t\n  S: uint16_t\n  l: int32_t\n  L: uint32_t\n  q: int64_t\n  Q: uint64_t\n//}\n\n: エンディアンの強制指定(バイナリ解析などに適切)\n//emlist{\n  S>:  big endian unsigned 16bit(nと同じ)\n  s>:  big endian int16_t\n  s!>: big endian signed short\n  l<:  little endian int32_t\n  l!<: little endian signed long\n//}\n\n=== 各テンプレート文字の説明\n\n説明中、Array#pack と String#unpack で違いのあるものは `/' で区切って\n「Array#pack の説明 / String#unpack の説明」としています。\n\n: a\n\n  ASCII文字列(ヌル文字を詰める/後続するヌル文字やスペースを残す)\n//emlist[][ruby]{\n[\"abc\"].pack(\"a\")    # => \"a\"\n[\"abc\"].pack(\"a*\")   # => \"abc\"\n[\"abc\"].pack(\"a4\")   # => \"abc\\x00\"\n\n\"abc\\0\".unpack(\"a4\") # => [\"abc\\x00\"]\n\"abc \".unpack(\"a4\")  # => [\"abc \"]\n//}\n\n: A\n\n  ASCII文字列(スペースを詰める/後続するヌル文字やスペースを削除)\n//emlist[][ruby]{\n[\"abc\"].pack(\"A\")    # => \"a\"\n[\"abc\"].pack(\"A*\")   # => \"abc\"\n[\"abc\"].pack(\"A4\")   # => \"abc \"\n\n\"abc \".unpack(\"A4\")  # => [\"abc\"]\n\"abc\\0\".unpack(\"A4\") # => [\"abc\"]\n//}\n\n: Z\n\n  ヌル終端文字列(長さが`*'の場合も含め、ヌル文字を詰める/後続するヌル文字を削除)\n//emlist[][ruby]{\n[\"abc\"].pack(\"Z\")  # => \"a\"\n[\"abc\"].pack(\"Z*\") # => \"abc\\x00\"\n[\"abc\"].pack(\"Z5\") # => \"abc\\x00\\x00\"\n\n\"abc\\0\".unpack(\"Z4\") # => [\"abc\"]\n\"abc \".unpack(\"Z4\")  # => [\"abc \"]\n//}\n\n: b\n\n  ビットストリング(各バイトごとに下位ビットから上位ビット)\n//emlist[][ruby]{\n\"\\xFF\\x00\".unpack(\"b*\") # => [\"1111111100000000\"]\n\"\\x01\\x02\".unpack(\"b*\") # => [\"1000000001000000\"]\n\"\\x01\\x02\".unpack(\"b3\") # => [\"100\"]\n\n\n[\"1000000001000000\"].pack(\"b*\") # => \"\\x01\\x02\"\n//}\n\n: B\n\n  ビットストリング(各バイトごとに上位ビットから下位ビット)\n//emlist[][ruby]{\n\"\\xFF\\x00\".unpack(\"B*\")  # => [\"1111111100000000\"]\n\"\\x01\\x02\".unpack(\"B*\")  # => [\"0000000100000010\"]\n\"\\x01\\x02\".unpack(\"B9\")  # => [\"000000010\"]\n\"\\x01\\x02\".unpack(\"B15\") # => [\"000000010000001\"]\n\n[\"0000000100000010\"].pack(\"B*\")  # => \"\\x01\\x02\"\n[\"0000000100000010\"].pack(\"B0\")  # => \"\"\n[\"0000000100000010\"].pack(\"B1\")  # => \"\\x00\"\n[\"0000000100000010\"].pack(\"B7\")  # => \"\\x00\"\n[\"0000000100000010\"].pack(\"B8\")  # => \"\\x01\"\n[\"0000000100000010\"].pack(\"B9\")  # => \"\\x01\\x00\"\n[\"0000000100000010\"].pack(\"B14\") # => \"\\x01\\x00\"\n[\"0000000100000010\"].pack(\"B15\") # => \"\\x01\\x02\"\n[\"0000000100000010\"].pack(\"B16\") # => \"\\x01\\x02\"\n//}\n\n: h\n\n  16進文字列(下位ニブルが先)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"h*\") # => [\"10ef\"]\n\"\\x01\\xFE\".unpack(\"h3\") # => [\"10e\"]\n\n[\"10ef\"].pack(\"h*\") # => \"\\x01\\xFE\"\n//}\n\n: H\n\n  16進文字列(上位ニブルが先)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"H*\") # => [\"01fe\"]\n\"\\x01\\xFE\".unpack(\"H3\") # => [\"01f\"]\n\"~\".unpack(\"H2\")        # => [\"7e\"]\n\n[\"01fe\"].pack(\"H*\") # => \"\\x01\\xFE\"\n[\"7e\"].pack(\"H2\")   # => \"~\"\n//}\n\n: c\n\n  char (8bit 符号つき整数)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"c*\") # => [1, -2]\n\n[1, -2].pack(\"c*\")  # => \"\\x01\\xFE\"\n[1, 254].pack(\"c*\") # => \"\\x01\\xFE\"\n//}\n\n: C\n\n  unsigned char (8bit 符号なし整数)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"C*\") # => [1, 254]\n\n[1, -2].pack(\"C*\")  # => \"\\x01\\xFE\"\n[1, 254].pack(\"C*\") # => \"\\x01\\xFE\"\n//}\n\n: s\n\n  short (16bit 符号つき整数, エンディアンに依存)\n  (s! は 16bit でなく、short のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"s*\") # => [513, -514]\n\n[513, 65022].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[513, -514].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"s*\") # => [258, -259]\n\n[258, 65277].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[258, -259].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n: S\n\n  unsigned short (16bit 符号なし整数, エンディアンに依存)\n  (S! は 16bit でなく、short のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"S*\") # => [513, 65022]\n\n[513, 65022].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[513, -514].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n  ビッグエンディアン (SPARC64):\n\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"S*\") # => [258, 65277]\n\n[258, 65277].pack(\"S*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[258, -259].pack(\"S*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n: i\n\n  int (符号つき整数, エンディアンと int のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"i*\") # => [67305985, -50462977]\n\n[67305985, 4244504319].pack(\"i*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"i*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"i*\") # => [16909060, -66052]\n\n[16909060, 4294901244].pack(\"i*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"i*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n: I\n\n  unsigned int (符号なし整数, エンディアンと int のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"I*\") # => [67305985, 4244504319]\n\n[67305985, 4244504319].pack(\"I*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"I*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n  ビッグエンディアン (SPARC64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"I*\") # => [16909060, 4294901244]\n\n[16909060, 4294901244].pack(\"I*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"I*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: l\n\n  long (32bit 符号つき整数, エンディアンに依存)\n  (l! は 32bit でなく、long のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"l*\") # => [67305985, -50462977]\n\n[67305985, 4244504319].pack(\"l*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"l*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"l*\") # => [16909060, -66052]\n\n[16909060, 4294901244].pack(\"l*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"l*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: L\n\n  unsigned long (32bit 符号なし整数, エンディアンに依存)\n  (L! は 32bit でなく、long のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"L*\") # => [67305985, 4244504319]\n\n[67305985, 4244504319].pack(\"L*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"L*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"L*\") # => [16909060, 4294901244]\n\n[16909060, 4294901244].pack(\"L*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"L*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: q\n\n  64bit 符号付き整数 (エンディアンに依存)\n  (q! は 64bit でなく、long long のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"q*\")\n# => [578437695752307201, -506097522914230529]\n\n[578437695752307201, -506097522914230529].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[578437695752307201, 17940646550795321087].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"q*\")\n# => [72623859790382856, -283686952306184]\n\n[72623859790382856, -283686952306184].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[72623859790382856, 18446460386757245432].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n: Q\n\n  64bit 符号なし整数 (エンディアンに依存)\n  (Q! は 64bit でなく、long long のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"Q*\")\n# => [578437695752307201, 17940646550795321087]\n\n[578437695752307201, 17940646550795321087].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[578437695752307201, -506097522914230529].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"Q*\")\n# => [72623859790382856, 18446460386757245432]\n\n[72623859790382856, 18446460386757245432].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[72623859790382856, -283686952306184].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n: m\n\n  base64された文字列。60 オクテットごと(と最後)に改行コードが付加されます。\n\n  Base64は、3オクテット(8bits * 3 = 24bits)のバイナリコードをASCII文字の\n  うちの65文字 ([A-Za-z0-9+/]の64文字とpaddingのための'=')だけを使用して\n  4オクテット(6bits * 4 = 24bits)の印字可能文字列に変換するエンコーディ\n  ング法です。2045, 4648 で定義されています。\n//emlist[][ruby]{\n[\"\"].pack(\"m\")             # => \"\"\n[\"\\0\"].pack(\"m\")           # => \"AA==\\n\"\n[\"\\0\\0\"].pack(\"m\")         # => \"AAA=\\n\"\n[\"\\0\\0\\0\"].pack(\"m\")       # => \"AAAA\\n\"\n[\"\\xFF\"].pack(\"m\")         # => \"/w==\\n\"\n[\"\\xFF\\xFF\"].pack(\"m\")     # => \"//8=\\n\"\n[\"\\xFF\\xFF\\xFF\"].pack(\"m\") # => \"////\\n\"\n\n[\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"].pack(\"m\")\n# => \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJT\\nVFVWV1hZWg==\\n\"\n[\"abcdefghijklmnopqrstuvwxyz\"].pack(\"m3\")\n# => \"YWJj\\nZGVm\\nZ2hp\\namts\\nbW5v\\ncHFy\\nc3R1\\ndnd4\\neXo=\\n\"\n\n\"\".unpack(\"m\")       # => [\"\"]\n\"AA==\\n\".unpack(\"m\") # => [\"\\x00\"]\n\"AA==\".unpack(\"m\")   # => [\"\\x00\"]\n\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJT\\nVFVWV1hZWg==\\n\".unpack(\"m\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\\n\".unpack(\"m\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n//}\n  m0 は 4648 対応\n//emlist[][ruby]{\n[\"\"].pack(\"m0\")             # => \"\"\n[\"\\0\"].pack(\"m0\")           # => \"AA==\"\n[\"\\0\\0\"].pack(\"m0\")         # => \"AAA=\"\n[\"\\0\\0\\0\"].pack(\"m0\")       # => \"AAAA\"\n[\"\\xFF\"].pack(\"m0\")         # => \"/w==\"\n[\"\\xFF\\xFF\"].pack(\"m0\")     # => \"//8=\"\n[\"\\xFF\\xFF\\xFF\"].pack(\"m0\") # => \"////\"\n\n[\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"].pack(\"m0\")\n# => \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\"\n\n\"\".unpack(\"m0\")       # => [\"\"]\n\"AA==\\n\".unpack(\"m0\") # => ArgumentError (invalid base64)\n\"AA==\".unpack(\"m0\")   # => [\"\\x00\"]\n\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\".unpack(\"m0\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n//}\n@see base64\n\n: M\n\n  quoted-printable encoding された文字列\n//emlist[][ruby]{\n[\"a b c\\td \\ne\"].pack(\"M\") # => \"a b c\\td =\\n\\ne=\\n\"\n\n\"a b c\\td =\\n\\ne=\\n\".unpack(\"M\") # => [\"a b c\\td \\ne\"]\n//}\n\n: n\n\n  ネットワークバイトオーダー(ビッグエンディアン)のunsigned short (16bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1,32767,-32768,65535].pack(\"n*\")\n# => \"\\x00\\x00\\x00\\x01\\xFF\\xFF\\x7F\\xFF\\x80\\x00\\xFF\\xFF\"\n\n\"\\x00\\x00\\x00\\x01\\xFF\\xFF\\x7F\\xFF\\x80\\x00\\xFF\\xFF\".unpack(\"n*\")\n# => [0, 1, 65535, 32767, 32768, 65535]\n//}\n\n: N\n\n  ネットワークバイトオーダー(ビッグエンディアン)のunsigned long (32bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1].pack(\"N*\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xFF\\xFF\\xFF\\xFF\"\n\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xFF\\xFF\\xFF\\xFF\".unpack(\"N*\") # => [0, 1, 4294967295]\n//}\n\n: v\n\n  \"VAX\"バイトオーダー(リトルエンディアン)のunsigned short (16bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1,32767,-32768,65535].pack(\"v*\")\n# => \"\\x00\\x00\\x01\\x00\\xFF\\xFF\\xFF\\x7F\\x00\\x80\\xFF\\xFF\"\n\n\"\\x00\\x00\\x01\\x00\\xFF\\xFF\\xFF\\x7F\\x00\\x80\\xFF\\xFF\".unpack(\"v*\")\n# => [0, 1, 65535, 32767, 32768, 65535]\n//}\n\n: V\n\n  \"VAX\"バイトオーダー(リトルエンディアン)のunsigned long (32bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1].pack(\"V*\") # => \"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\"\n\n\n\"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\".unpack(\"V*\") # => [0, 1, 4294967295]\n//}\n\n: f\n\n  単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754 単精度 リトルエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"f\")      # => \"\\x00\\x00\\x80?\"\n[0.0/0.0].pack(\"f\")  # => \"\\x00\\x00\\xC0\\x7F\"      # NaN\n[1.0/0.0].pack(\"f\")  # => \"\\x00\\x00\\x80\\x7F\"      # +Infinity\n[-1.0/0.0].pack(\"f\") # => \"\\x00\\x00\\x80\\xFF\"      # -Infinity\n//}\n\n  SPARC64 (IEEE754 単精度 ビッグエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"f\")      # => \"?\\x80\\x00\\x00\"\n[0.0/0.0].pack(\"f\")  # => \"\\x7F\\xC0\\x00\\x00\"      # NaN\n[1.0/0.0].pack(\"f\")  # => \"\\x7F\\x80\\x00\\x00\"      # +Infinity\n[-1.0/0.0].pack(\"f\") # => \"\\xFF\\x80\\x00\\x00\"      # -Infinity\n//}\n\n  VAX (NetBSD 3.0) (非IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"f\") # => \"\\x80@\\x00\\x00\"\n//}\n\n: d\n\n  倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754 倍精度 リトルエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"d\")      # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n[0.0/0.0].pack(\"d\")  # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF8\\x7F\"      # NaN\n[1.0/0.0].pack(\"d\")  # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\x7F\"      # +Infinity\n[-1.0/0.0].pack(\"d\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\xFF\"      # -Infinity\n//}\n\n  SPARC64 (IEEE754 倍精度 ビッグエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"d\")      # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n[0.0/0.0].pack(\"d\")  # => \"\\x7F\\xF8\\x00\\x00\\x00\\x00\\x00\\x00\"      # NaN\n[1.0/0.0].pack(\"d\")  # => \"\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"      # +Infinity\n[-1.0/0.0].pack(\"d\") # => \"\\xFF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"      # -Infinity\n//}\n\n  VAX (NetBSD 3.0) (非IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"d\") # => \"\\x80@\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n: e\n\n  リトルエンディアンの単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"e\") # => \"\\x00\\x00\\x80?\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"e\") # => \"\\x00\\x00\\x80?\"\n//}\n\n: E\n\n  リトルエンディアンの倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"E\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"E\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n//}\n\n: g\n\n  ビッグエンディアンの単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"g\") # => \"?\\x80\\x00\\x00\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"g\") # => \"?\\x80\\x00\\x00\"\n//}\n\n  IEEE754準拠な環境の場合、以下のようにして符号、指数部、仮数部を取り出せます。\n//emlist[][ruby]{\ns = [v].pack(\"g\").unpack(\"B*\")[0][0,1]      # 符号\ne = [v].pack(\"g\").unpack(\"B*\")[0][1,8]      # 指数部\nf = [v].pack(\"g\").unpack(\"B*\")[0][9,23]     # 仮数部\n//}\n\n  そして、s, e, f の意味は以下の通りです。\n//emlist[][ruby]{\nsgn = s == \"0\" ? +1.0 : -1.0\nexp = Integer(\"0b\" + e)\nfra = Integer(\"0b\" + f)\nif exp == 0\n  if fra == 0\n    sgn * 0                     # ±0 (positive/negative zero)\n  else\n    sgn * fra * 2**(-126-23)    # 非正規化数 (denormalized number)\n  end\nelsif exp == 255\n  if fra == 0\n    sgn * Inf                   # ±∞ (positive/negative infinity)\n  else\n    NaN                         # 非数 (not a number)\n  end\nelse\n  fra += 1 << 23                # ゲタ\n  sgn * fra * 2**(exp-127-23)   # 正規化数 (normalized number)\nend\n//}\n\n: G\n\n  ビッグエンディアンの倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"G\") # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"G\") # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  IEEE754準拠な環境の場合、以下のようにして符号、指数部、仮数部を取り出せます。\n//emlist[][ruby]{\ns = [v].pack(\"G\").unpack(\"B*\")[0][0,1]    # 符号\ne = [v].pack(\"G\").unpack(\"B*\")[0][1,11]   # 指数部\nf = [v].pack(\"G\").unpack(\"B*\")[0][12,52]  # 仮数部\n//}\n\n  そして、s, e, f の意味は以下の通りです。\n//emlist[][ruby]{\nsgn = s == \"0\" ? +1.0 : -1.0\nexp = Integer(\"0b\" + e)\nfra = Integer(\"0b\" + f)\nif exp == 0\n  if fra == 0\n    sgn * 0                     # ±0 (positive/negative zero)\n  else\n    sgn * fra * 2**(-1022-52)   # 非正規化数 (denormalized number)\n  end\nelsif exp == 2047\n  if fra == 0\n    sgn * Inf                   # ±∞ (positive/negative infinity)\n  else\n    NaN                         # 非数 (not a number)\n  end\nelse\n  fra += 1 << 52                # ゲタ\n  sgn * fra * 2**(exp-1023-52)  # 正規化数 (normalized number)\nend\n//}\n\n: p\n\n  ヌル終端の文字列へのポインタ\n//emlist[][ruby]{\n[\"\"].pack(\"p\")             # => \"\\x980\\xBEf\\x1CV\\x00\\x00\"\n[\"a\", \"b\", \"c\"].pack(\"p3\") # => \"\\x98\\xE5\\x9ER\\xD2U\\x00\\x00p\\xE5\\x9ER\\xD2U\\x00\\x00H\\xE5\\x9ER\\xD2U\\x00\\x00\"\n[nil].pack(\"p\")            # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n: P\n\n  構造体(固定長文字列)へのポインタ\n//emlist[][ruby]{\n[nil].pack(\"P\")    # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n[\"abc\"].pack(\"P3\") # => \"\\xA0\\xEE\\er\\x84U\\x00\\x00\"\n\n[\"abc\"].pack(\"P4\") # => ArgumentError: too short buffer for P(3 for 4)\n[\"\"].pack(\"P\")     # => ArgumentError: too short buffer for P(0 for 1)\n//}\n\n: u\n\n  uuencodeされた文字列\n//emlist[][ruby]{\n[\"\"].pack(\"u\")           # => \"\"\n[\"a\"].pack(\"u\")          # => \"!80``\\n\"\n[\"abc\"].pack(\"u\")        # => \"#86)C\\n\"\n[\"abcd\"].pack(\"u\")       # => \"$86)C9```\\n\"\n[\"a\"*45].pack(\"u\")       # => \"M86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A\\n\"\n[\"a\"*46].pack(\"u\")       # => \"M86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A\\n!80``\\n\"\n[\"abcdefghi\"].pack(\"u6\") # => \"&86)C9&5F\\n#9VAI\\n\"\n//}\n\n: U\n\n  UTF-8\n//emlist[][ruby]{\n[0].pack(\"U\")                               # => \"\\u0000\"\n[1].pack(\"U\")                               # => \"\\u0001\"\n[0x7f].pack(\"U\")                            # => \"\\u007F\"\n[0x80].pack(\"U\")                            # => \"\\u0080\"\n[0x7fffffff].pack(\"U\")                      # => \"\\xFD\\xBF\\xBF\\xBF\\xBF\\xBF\"\n[0x80000000].pack(\"U\")                      # => RangeError: pack(U): value out of range\n[0,256,65536].pack(\"U3\").b                  # => \"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\"\n\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U3\") # => [0, 256, 65536]\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U\")  # => [0]\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U*\") # => [0, 256, 65536]\n//}\n\n: w\n\n  BER圧縮整数\n\n  1バイトあたり7ビットを使用して必要最小限のバイト数で任意サイズの\n  0以上の整数を表す数値表現。各バイトの最上位ビットはデータの最後\n  を除いて必ず1が立っている(つまり最上位ビットはどこまでデータがあ\n  るかを示している)。\n\n  ISO/IEC 8825-1:1995 : Information technology−ASN.1 encoding rules : Specification of Basic Encoding Rules(BER) に定められる整数の符号化方法。\n\n//emlist[][ruby]{\n[0].pack(\"w\")             # => \"\\x00\"\n[1].pack(\"w\")             # => \"\\x01\"\n[127].pack(\"w\")           # => \"\\x7F\"\n[128].pack(\"w\")           # => \"\\x81\\x00\"\n[0x3fff].pack(\"w\")        # => \"\\xFF\\x7F\"\n[0x4000].pack(\"w\")        # => \"\\x81\\x80\\x00\"\n[0x3fffffff].pack(\"w\")    # => \"\\x83\\xFF\\xFF\\xFF\\x7F\"\n[0x40000000].pack(\"w\")    # => \"\\x84\\x80\\x80\\x80\\x00\"\n[0xffffffff].pack(\"w\")    # => \"\\x8F\\xFF\\xFF\\xFF\\x7F\"\n[0x100000000].pack(\"w\")   # => \"\\x90\\x80\\x80\\x80\\x00\"\n\n\"\\x00\".unpack(\"w\")              # => [0]\n\"\\x00\\x81\\x00\\x01\".unpack(\"w*\") # => [0, 128, 1]\n//}\n\n  なお、BER圧縮整数でエンコードした結果は大小関係を保存しない。\n  たとえば、[0x3fff].pack(\"w\") > [0x4000].pack(\"w\") である。\n\n: x\n\n  ヌルバイト（pack）／1バイト読み飛ばし（unpack）\n//emlist[][ruby]{\n[97, 98].pack(\"CxC\")    # => \"a\\x00b\"\n[97, 98].pack(\"Cx3C\")   # => \"a\\x00\\x00\\x00b\"\n\n\"abc\".unpack(\"CxC\")  # => [97, 99]\n\"abc\".unpack(\"Cx3C\") # => ArgumentError: x outside of string\n//}\n\n: X\n\n  1バイト後退\n//emlist[][ruby]{\n[97, 98, 99].pack(\"CCXC\") # => \"ac\"\n\n\"abcdef\".unpack(\"x*XC\") # => [102]\n//}\n\n: @\n\n  絶対位置への移動\n//emlist[][ruby]{\n[97, 98].pack(\"C @3 C\") # => \"a\\x00\\x00b\"\n\n\"abcd\".unpack(\"C @3 C\") # => [97, 100]\n//}\n\n: j\n\nintptr_t (ポインタの幅の符号つき整数, エンディアンに依存)\n\n: J\n\nuintptr_t (ポインタの幅の符号なし整数, エンディアンに依存)\n\n=== 使用例\n\n以下、pack/unpack の使用例の一部です。\n\npack を使用しなくても同じことができる場合はその例も載せています。\npack は暗号になりやすい面があることを考慮し、pack を使いたくない人\nに別解を示すためです。\n\n: 数値(文字コード)の配列を文字列に変換する例\n//emlist[][ruby]{\n[82, 117, 98, 121].pack(\"cccc\")  # => \"Ruby\"\n[82, 117, 98, 121].pack(\"c4\")    # => \"Ruby\"\n[82, 117, 98, 121].pack(\"c*\")    # => \"Ruby\"\n\ns = \"\"\n[82, 117, 98, 121].each {|c| s << c}\ns    # => \"Ruby\"\n\n[82, 117, 98, 121].collect {|c| sprintf \"%c\", c}.join   # => \"Ruby\"\n\n[82, 117, 98, 121].inject(\"\") {|s, c| s << c}    # => \"Ruby\"\n//}\n\n: 文字列を数値(文字コード)の配列に変換する例\n//emlist[][ruby]{\n\"Ruby\".unpack('C*')    # => [82, 117, 98, 121]\n\na = []\n\"Ruby\".each_byte {|c| a << c}\na    # => [82, 117, 98, 121]\n//}\n\n: \"x\" でヌルバイトを埋めることができる\n//emlist[][ruby]{\n[82, 117, 98, 121].pack(\"ccxxcc\")    # => \"Ru\\x00\\x00by\"\n//}\n\n: \"x\" で文字を読み飛ばす事が出来る\n//emlist[][ruby]{\n\"Ru\\x00\\x00by\".unpack('ccxxcc')    # => [82, 117, 98, 121]\n//}\n\n: Hexダンプを数値の配列に変換する例\n//emlist[][ruby]{\n\"61 62 63 64 65 66\".delete(' ').lines.pack('H*').unpack('C*')\n# => [97, 98, 99, 100, 101, 102]\n\n\"61 62 63 64 65 66\".split.collect {|c| c.hex}\n# => [97, 98, 99, 100, 101, 102]\n//}\n\n: バイナリと16進数のpackでは長さ指定は生成されるバイト数ではなく、ビットやニブルの個数を表す\n//emlist[][ruby]{\n[0b01010010, 0b01110101, 0b01100010, 0b01111001].pack(\"C4\")\n# => \"Ruby\"\n[\"01010010011101010110001001111001\"].pack(\"B32\") # 8 bits * 4\n# => \"Ruby\"\n\n[0x52, 0x75, 0x62, 0x79].pack(\"C4\")\n# => \"Ruby\"\n[\"52756279\"].pack(\"H8\")  # 2 nybbles * 4\n# => \"Ruby\"\n//}\n\n: テンプレート文字'a'の長さ指定は1つの文字列だけに適用される\n//emlist[][ruby]{\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"a4\")\n# => \"RUBY\"\n\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"aaaa\")\n# => \"Ruby\"\n\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"a*aaa\")\n# => \"RUBYuby\"\n//}\n\n: テンプレート文字\"a\"は、長さが足りない分をヌル文字で補う\n//emlist[][ruby]{\n[\"Ruby\"].pack(\"a8\")\n# => \"Ruby\\x00\\x00\\x00\\x00\"\n//}\n\n: リトルエンディアンとビッグエンディアン\n//emlist[][ruby]{\n[1,2].pack(\"s2\")\n# => \"\\x01\\x00\\002\\x00\" # リトルエンディアンのシステムでの出力\n# => \"\\x00\\x01\\x00\\002\" # ビッグエンディアンのシステムでの出力\n\n[1,2].pack(\"n2\")\n# => \"\\x00\\x01\\x00\\002\" # システムによらずビッグエンディアン\n\n[1,2].pack(\"v2\")\n# => \"\\x01\\x00\\002\\x00\" # システムによらずリトルエンディアン\n//}\n\n: ネットワークバイトオーダの signed long\n//emlist[][ruby]{\ns = \"\\xFF\\xFF\\xFF\\xFE\"\nn = s.unpack(\"N\")[0]\nif n[31] == 1\n  n = -((n ^ 0xffff_ffff) + 1)\nend\nn # => -2\n//}\n\n: ネットワークバイトオーダの signed long(その2)\n//emlist[][ruby]{\ns = \"\\xFF\\xFF\\xFF\\xFE\"\nn = s.unpack(\"N\").pack(\"l\").unpack(\"l\")[0]\nn # => -2\n//}\n\n: IPアドレス\n//emlist[][ruby]{\nrequire 'socket'\nofficial_hostname, alias_hostnames, address_family, *address_list = Socket.gethostbyname(\"localhost\")\naddress_list.find {|address| address.size == 4 }.unpack(\"C4\").join(\".\")\n# => \"127.0.0.1\"\n\n\"127.0.0.1\".split(\".\").collect {|c| c.to_i}.pack(\"C4\")\n# => \"\\x7F\\x00\\x00\\x01\"\n//}\n\n: sockaddr_in 構造体\n//emlist[][ruby]{\nrequire 'socket'\n[Socket::AF_INET,\n Socket.getservbyname('echo'),\n 127, 0, 0, 1].pack(\"s n C4 x8\")\n# => \"\\x02\\x00\\x00\\a\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  pack/unpack を使う代わりに\n  Socket.pack_sockaddr_in,\n  Socket.unpack_sockaddr_in メソッドがあります。\n\n: '\\0'終端文字列のアドレス\n\n  テンプレート文字 \"p\" や \"P\" は、C 言語レベルのインタフェースのた\n  めにあります(例えば IO#ioctl)。\n//emlist[][ruby]{\n[\"foo\"].pack(\"p\")    # => \"xp\\xC2\\x85\\vV\\x00\\x00\"\n//}\n\n  結果の文字列はゴミに見えますが、実際は文字列\"foo\\0\"を指すアドレ\n  ス(のバイナリ表現)です。以下のようにすれば見慣れた表記で見ること\n  が出来ます\n//emlist[][ruby]{\nprintf \"%#014x\\n\", \"xp\\xC2\\x85\\vV\\x00\\x00\".unpack(\"J\")[0] # => 0x560b85c27078\n//}\n\n  アドレスが指す先のオブジェクト(この例で \"foo\\0\") は、pack の結\n  果が GC されるまではGCされないことが保証されています。\n\n  unpack(\"p\"), unpack(\"P\") は、pack の結果からしか unpack できません。\n//emlist[][ruby]{\n[\"foo\"].pack(\"p\").unpack(\"p\") # => [\"foo\"]\n\"xp\\xC2\\x85\\vV\\x00\\x00\".unpack(\"p\")\n# => ArgumentError: no associated pointer\n//}\n  \"p\" や \"P\" は、nil を特別に扱い NULL\n  ポインタとして解釈します。(以下は、64bitマシンで一般的な結果)\n//emlist[][ruby]{\n[nil].pack(\"p\")        # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\".unpack(\"p\") # => [nil]\n//}\n\n: 構造体のアドレス\n\n  例えば、\n//emlist{\n      struct {\n        int   a;\n        short b;\n        long  c;\n      } v = {1,2,3};\n//}\n  を表す文字列は\n//emlist[][ruby]{\nv = [1,2,3].pack(\"i!s!l!\")\n//}\n  です。(byte alignment の問題から実際は適当な padding が必要に\n  なるかもしれません)\n\n  この構造体を指すアドレスは\n//emlist[][ruby]{\n[v].pack(\"P\")  # => \"\\xC0\\xCC2L\\fV\\x00\\x00\"\n//}\n  で得られます。\n\n: UTF-8からUCS-2への変換 (サロゲートを処理していないので UTF-16 とはいえない)\n\n  リトルエンディアン:\n//emlist[][ruby]{\n(\"Comments\").unpack(\"U*\").pack(\"v*\") # => \"C\\x00o\\x00m\\x00m\\x00e\\x00n\\x00t\\x00s\\x00\"\n//}\n  ビッグエンディアン:\n//emlist[][ruby]{\n(\"Comments\").unpack(\"U*\").pack(\"n*\") # => \"\\x00C\\x00o\\x00m\\x00m\\x00e\\x00n\\x00t\\x00s\"\n//}\n\n@see String#unpack, String#unpack1",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "base64",
          "label": "base64",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:base64/"
        }
      ]
    },
    {
      "signature": "Array#pack(template, buffer: String.new) -> String",
      "score": 27091.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "配列の内容を template で指定された文字列にしたがって、\nバイナリとしてパックした文字列を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/pack.html",
          "description": "配列の内容を template で指定された文字列にしたがって、\nバイナリとしてパックした文字列を返します。\n\nテンプレートは\n型指定文字列とその長さ(省略時は1)を並べたものです。長さと\nして * が指定された時は「残りのデータ全て」の長さを\n表します。型指定文字は以下で述べる pack テンプレート文字列の通りです。\n\nbuffer が指定されていれば、バッファとして使って返値として返します。\nもし template の最初にオフセット (@) が指定されていれば、\n結果はオフセットの後ろから詰められます。\nbuffer の元の内容がオフセットより長ければ、\nオフセットより後ろの部分は上書きされます。\nオフセットより短ければ、足りない部分は \"\\0\" で埋められます。\n\nbuffer オプションはメモリ確保が発生しないことを保証するものでは\nないことに注意してください。\nbuffer のサイズ(capacity)が足りなければ、packはメモリを確保します。\n\n//emlist[例][ruby]{\n['!'].pack('@1a', buffer: 'abc')  # => \"a!\"\n['!'].pack('@5a', buffer: 'abc')  # => \"abc\\u0000\\u0000!\"\n//}\n\n@param template 自身のバイナリとしてパックするためのテンプレートを文字列で指定します。\n@param buffer   結果を詰めるバッファとして使う文字列オブジェクトを指定します。\n                指定した場合は返値も指定した文字列オブジェクトになります。\n\n\n以下にあげるものは、Array#pack、String#unpack、String#unpack1\nのテンプレート文字の一覧です。テンプレート文字は後に「長さ」を表す数字\nを続けることができます。「長さ」の代わりに`*'とすることで「残り全て」\nを表すこともできます。\n\n長さの意味はテンプレート文字により異なりますが大抵、\n  \"iiii\"\nのように連続するテンプレート文字は\n  \"i4\"\nと書き換えることができます。\n\nテンプレート文字列中の空白類は無視されます。\nまた、`#' から改行あるいはテンプレート文字列の最後まではコメントとみな\nされ無視されます。\n\n=== 整数のテンプレート文字のシステム依存性\n\n各テンプレート文字の説明の中で、\nshort や long はシステムによらずそれぞれ 2, 4バイトサ\nイズの数値(32ビットマシンで一般的なshort, longのサイズ)を意味していま\nす。s, S, l, L に対しては直後に _ または ! を \"s_\" あるいは \"s!\" のように\n続けることでシステム依存の short, long のサイズにすることもできます。\n\ni, I (int)のサイズは常にシステム依存であり、n, N, v, V\nのサイズは常にシステム依存ではない(!をつけられない)ことに注意してください。\n\nつまり、IO#ioctl などで C の構造体を渡すときのように、\nシステム依存のサイズとエンディアンに合わせる必要があるときには\ns!, S!, i!, I!, l!, L!, q!, Q!, j!, J! を用います。\nまた、ネットワークプロトコルやファイルフォーマットのように、\nシステムに依存しないデータを扱うときには\nn, N, v, V を用います。\n\n強制的にエンディアンを指定したいときは、\nリトルエンディアンなら < を、\nビッグエンディアンなら >\nを後ろにつけます。! と組み合わせることも可能です。\n\nまとめると以下のようになります。\n\n: エンディアン非依存、整数サイズ非依存 (ネットワークプロトコルなどに適切)\n//emlist{\n  n: big endian unsigned 16bit\n  N: big endian unsigned 32bit\n  v: little endian unsigned 16bit\n  V: little endian unsigned 32bit\n//}\n\n: エンディアン依存、整数サイズ依存 (C の構造体などに適切)\n//emlist{\n  s!: signed short\n  S!: unsigned short\n  i,i!: signed int\n  I,I!: unsigned int\n  l!: signed long\n  L!: unsigned long\n  q!: signed long long\n  Q!: unsigned long long\n  j,j!: intptr_t\n  J,J!: uintptr_t\n//}\n\n: エンディアン依存、整数サイズ非依存 (C99 の stdint.h にある厳密な幅を持つ整数型に適切)\n//emlist{\n  s: int16_t\n  S: uint16_t\n  l: int32_t\n  L: uint32_t\n  q: int64_t\n  Q: uint64_t\n//}\n\n: エンディアンの強制指定(バイナリ解析などに適切)\n//emlist{\n  S>:  big endian unsigned 16bit(nと同じ)\n  s>:  big endian int16_t\n  s!>: big endian signed short\n  l<:  little endian int32_t\n  l!<: little endian signed long\n//}\n\n=== 各テンプレート文字の説明\n\n説明中、Array#pack と String#unpack で違いのあるものは `/' で区切って\n「Array#pack の説明 / String#unpack の説明」としています。\n\n: a\n\n  ASCII文字列(ヌル文字を詰める/後続するヌル文字やスペースを残す)\n//emlist[][ruby]{\n[\"abc\"].pack(\"a\")    # => \"a\"\n[\"abc\"].pack(\"a*\")   # => \"abc\"\n[\"abc\"].pack(\"a4\")   # => \"abc\\x00\"\n\n\"abc\\0\".unpack(\"a4\") # => [\"abc\\x00\"]\n\"abc \".unpack(\"a4\")  # => [\"abc \"]\n//}\n\n: A\n\n  ASCII文字列(スペースを詰める/後続するヌル文字やスペースを削除)\n//emlist[][ruby]{\n[\"abc\"].pack(\"A\")    # => \"a\"\n[\"abc\"].pack(\"A*\")   # => \"abc\"\n[\"abc\"].pack(\"A4\")   # => \"abc \"\n\n\"abc \".unpack(\"A4\")  # => [\"abc\"]\n\"abc\\0\".unpack(\"A4\") # => [\"abc\"]\n//}\n\n: Z\n\n  ヌル終端文字列(長さが`*'の場合も含め、ヌル文字を詰める/後続するヌル文字を削除)\n//emlist[][ruby]{\n[\"abc\"].pack(\"Z\")  # => \"a\"\n[\"abc\"].pack(\"Z*\") # => \"abc\\x00\"\n[\"abc\"].pack(\"Z5\") # => \"abc\\x00\\x00\"\n\n\"abc\\0\".unpack(\"Z4\") # => [\"abc\"]\n\"abc \".unpack(\"Z4\")  # => [\"abc \"]\n//}\n\n: b\n\n  ビットストリング(各バイトごとに下位ビットから上位ビット)\n//emlist[][ruby]{\n\"\\xFF\\x00\".unpack(\"b*\") # => [\"1111111100000000\"]\n\"\\x01\\x02\".unpack(\"b*\") # => [\"1000000001000000\"]\n\"\\x01\\x02\".unpack(\"b3\") # => [\"100\"]\n\n\n[\"1000000001000000\"].pack(\"b*\") # => \"\\x01\\x02\"\n//}\n\n: B\n\n  ビットストリング(各バイトごとに上位ビットから下位ビット)\n//emlist[][ruby]{\n\"\\xFF\\x00\".unpack(\"B*\")  # => [\"1111111100000000\"]\n\"\\x01\\x02\".unpack(\"B*\")  # => [\"0000000100000010\"]\n\"\\x01\\x02\".unpack(\"B9\")  # => [\"000000010\"]\n\"\\x01\\x02\".unpack(\"B15\") # => [\"000000010000001\"]\n\n[\"0000000100000010\"].pack(\"B*\")  # => \"\\x01\\x02\"\n[\"0000000100000010\"].pack(\"B0\")  # => \"\"\n[\"0000000100000010\"].pack(\"B1\")  # => \"\\x00\"\n[\"0000000100000010\"].pack(\"B7\")  # => \"\\x00\"\n[\"0000000100000010\"].pack(\"B8\")  # => \"\\x01\"\n[\"0000000100000010\"].pack(\"B9\")  # => \"\\x01\\x00\"\n[\"0000000100000010\"].pack(\"B14\") # => \"\\x01\\x00\"\n[\"0000000100000010\"].pack(\"B15\") # => \"\\x01\\x02\"\n[\"0000000100000010\"].pack(\"B16\") # => \"\\x01\\x02\"\n//}\n\n: h\n\n  16進文字列(下位ニブルが先)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"h*\") # => [\"10ef\"]\n\"\\x01\\xFE\".unpack(\"h3\") # => [\"10e\"]\n\n[\"10ef\"].pack(\"h*\") # => \"\\x01\\xFE\"\n//}\n\n: H\n\n  16進文字列(上位ニブルが先)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"H*\") # => [\"01fe\"]\n\"\\x01\\xFE\".unpack(\"H3\") # => [\"01f\"]\n\"~\".unpack(\"H2\")        # => [\"7e\"]\n\n[\"01fe\"].pack(\"H*\") # => \"\\x01\\xFE\"\n[\"7e\"].pack(\"H2\")   # => \"~\"\n//}\n\n: c\n\n  char (8bit 符号つき整数)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"c*\") # => [1, -2]\n\n[1, -2].pack(\"c*\")  # => \"\\x01\\xFE\"\n[1, 254].pack(\"c*\") # => \"\\x01\\xFE\"\n//}\n\n: C\n\n  unsigned char (8bit 符号なし整数)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"C*\") # => [1, 254]\n\n[1, -2].pack(\"C*\")  # => \"\\x01\\xFE\"\n[1, 254].pack(\"C*\") # => \"\\x01\\xFE\"\n//}\n\n: s\n\n  short (16bit 符号つき整数, エンディアンに依存)\n  (s! は 16bit でなく、short のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"s*\") # => [513, -514]\n\n[513, 65022].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[513, -514].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"s*\") # => [258, -259]\n\n[258, 65277].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[258, -259].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n: S\n\n  unsigned short (16bit 符号なし整数, エンディアンに依存)\n  (S! は 16bit でなく、short のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"S*\") # => [513, 65022]\n\n[513, 65022].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[513, -514].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n  ビッグエンディアン (SPARC64):\n\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"S*\") # => [258, 65277]\n\n[258, 65277].pack(\"S*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[258, -259].pack(\"S*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n: i\n\n  int (符号つき整数, エンディアンと int のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"i*\") # => [67305985, -50462977]\n\n[67305985, 4244504319].pack(\"i*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"i*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"i*\") # => [16909060, -66052]\n\n[16909060, 4294901244].pack(\"i*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"i*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n: I\n\n  unsigned int (符号なし整数, エンディアンと int のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"I*\") # => [67305985, 4244504319]\n\n[67305985, 4244504319].pack(\"I*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"I*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n  ビッグエンディアン (SPARC64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"I*\") # => [16909060, 4294901244]\n\n[16909060, 4294901244].pack(\"I*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"I*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: l\n\n  long (32bit 符号つき整数, エンディアンに依存)\n  (l! は 32bit でなく、long のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"l*\") # => [67305985, -50462977]\n\n[67305985, 4244504319].pack(\"l*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"l*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"l*\") # => [16909060, -66052]\n\n[16909060, 4294901244].pack(\"l*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"l*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: L\n\n  unsigned long (32bit 符号なし整数, エンディアンに依存)\n  (L! は 32bit でなく、long のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"L*\") # => [67305985, 4244504319]\n\n[67305985, 4244504319].pack(\"L*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"L*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"L*\") # => [16909060, 4294901244]\n\n[16909060, 4294901244].pack(\"L*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"L*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: q\n\n  64bit 符号付き整数 (エンディアンに依存)\n  (q! は 64bit でなく、long long のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"q*\")\n# => [578437695752307201, -506097522914230529]\n\n[578437695752307201, -506097522914230529].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[578437695752307201, 17940646550795321087].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"q*\")\n# => [72623859790382856, -283686952306184]\n\n[72623859790382856, -283686952306184].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[72623859790382856, 18446460386757245432].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n: Q\n\n  64bit 符号なし整数 (エンディアンに依存)\n  (Q! は 64bit でなく、long long のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"Q*\")\n# => [578437695752307201, 17940646550795321087]\n\n[578437695752307201, 17940646550795321087].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[578437695752307201, -506097522914230529].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"Q*\")\n# => [72623859790382856, 18446460386757245432]\n\n[72623859790382856, 18446460386757245432].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[72623859790382856, -283686952306184].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n: m\n\n  base64された文字列。60 オクテットごと(と最後)に改行コードが付加されます。\n\n  Base64は、3オクテット(8bits * 3 = 24bits)のバイナリコードをASCII文字の\n  うちの65文字 ([A-Za-z0-9+/]の64文字とpaddingのための'=')だけを使用して\n  4オクテット(6bits * 4 = 24bits)の印字可能文字列に変換するエンコーディ\n  ング法です。2045, 4648 で定義されています。\n//emlist[][ruby]{\n[\"\"].pack(\"m\")             # => \"\"\n[\"\\0\"].pack(\"m\")           # => \"AA==\\n\"\n[\"\\0\\0\"].pack(\"m\")         # => \"AAA=\\n\"\n[\"\\0\\0\\0\"].pack(\"m\")       # => \"AAAA\\n\"\n[\"\\xFF\"].pack(\"m\")         # => \"/w==\\n\"\n[\"\\xFF\\xFF\"].pack(\"m\")     # => \"//8=\\n\"\n[\"\\xFF\\xFF\\xFF\"].pack(\"m\") # => \"////\\n\"\n\n[\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"].pack(\"m\")\n# => \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJT\\nVFVWV1hZWg==\\n\"\n[\"abcdefghijklmnopqrstuvwxyz\"].pack(\"m3\")\n# => \"YWJj\\nZGVm\\nZ2hp\\namts\\nbW5v\\ncHFy\\nc3R1\\ndnd4\\neXo=\\n\"\n\n\"\".unpack(\"m\")       # => [\"\"]\n\"AA==\\n\".unpack(\"m\") # => [\"\\x00\"]\n\"AA==\".unpack(\"m\")   # => [\"\\x00\"]\n\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJT\\nVFVWV1hZWg==\\n\".unpack(\"m\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\\n\".unpack(\"m\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n//}\n  m0 は 4648 対応\n//emlist[][ruby]{\n[\"\"].pack(\"m0\")             # => \"\"\n[\"\\0\"].pack(\"m0\")           # => \"AA==\"\n[\"\\0\\0\"].pack(\"m0\")         # => \"AAA=\"\n[\"\\0\\0\\0\"].pack(\"m0\")       # => \"AAAA\"\n[\"\\xFF\"].pack(\"m0\")         # => \"/w==\"\n[\"\\xFF\\xFF\"].pack(\"m0\")     # => \"//8=\"\n[\"\\xFF\\xFF\\xFF\"].pack(\"m0\") # => \"////\"\n\n[\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"].pack(\"m0\")\n# => \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\"\n\n\"\".unpack(\"m0\")       # => [\"\"]\n\"AA==\\n\".unpack(\"m0\") # => ArgumentError (invalid base64)\n\"AA==\".unpack(\"m0\")   # => [\"\\x00\"]\n\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\".unpack(\"m0\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n//}\n@see base64\n\n: M\n\n  quoted-printable encoding された文字列\n//emlist[][ruby]{\n[\"a b c\\td \\ne\"].pack(\"M\") # => \"a b c\\td =\\n\\ne=\\n\"\n\n\"a b c\\td =\\n\\ne=\\n\".unpack(\"M\") # => [\"a b c\\td \\ne\"]\n//}\n\n: n\n\n  ネットワークバイトオーダー(ビッグエンディアン)のunsigned short (16bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1,32767,-32768,65535].pack(\"n*\")\n# => \"\\x00\\x00\\x00\\x01\\xFF\\xFF\\x7F\\xFF\\x80\\x00\\xFF\\xFF\"\n\n\"\\x00\\x00\\x00\\x01\\xFF\\xFF\\x7F\\xFF\\x80\\x00\\xFF\\xFF\".unpack(\"n*\")\n# => [0, 1, 65535, 32767, 32768, 65535]\n//}\n\n: N\n\n  ネットワークバイトオーダー(ビッグエンディアン)のunsigned long (32bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1].pack(\"N*\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xFF\\xFF\\xFF\\xFF\"\n\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xFF\\xFF\\xFF\\xFF\".unpack(\"N*\") # => [0, 1, 4294967295]\n//}\n\n: v\n\n  \"VAX\"バイトオーダー(リトルエンディアン)のunsigned short (16bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1,32767,-32768,65535].pack(\"v*\")\n# => \"\\x00\\x00\\x01\\x00\\xFF\\xFF\\xFF\\x7F\\x00\\x80\\xFF\\xFF\"\n\n\"\\x00\\x00\\x01\\x00\\xFF\\xFF\\xFF\\x7F\\x00\\x80\\xFF\\xFF\".unpack(\"v*\")\n# => [0, 1, 65535, 32767, 32768, 65535]\n//}\n\n: V\n\n  \"VAX\"バイトオーダー(リトルエンディアン)のunsigned long (32bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1].pack(\"V*\") # => \"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\"\n\n\n\"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\".unpack(\"V*\") # => [0, 1, 4294967295]\n//}\n\n: f\n\n  単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754 単精度 リトルエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"f\")      # => \"\\x00\\x00\\x80?\"\n[0.0/0.0].pack(\"f\")  # => \"\\x00\\x00\\xC0\\x7F\"      # NaN\n[1.0/0.0].pack(\"f\")  # => \"\\x00\\x00\\x80\\x7F\"      # +Infinity\n[-1.0/0.0].pack(\"f\") # => \"\\x00\\x00\\x80\\xFF\"      # -Infinity\n//}\n\n  SPARC64 (IEEE754 単精度 ビッグエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"f\")      # => \"?\\x80\\x00\\x00\"\n[0.0/0.0].pack(\"f\")  # => \"\\x7F\\xC0\\x00\\x00\"      # NaN\n[1.0/0.0].pack(\"f\")  # => \"\\x7F\\x80\\x00\\x00\"      # +Infinity\n[-1.0/0.0].pack(\"f\") # => \"\\xFF\\x80\\x00\\x00\"      # -Infinity\n//}\n\n  VAX (NetBSD 3.0) (非IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"f\") # => \"\\x80@\\x00\\x00\"\n//}\n\n: d\n\n  倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754 倍精度 リトルエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"d\")      # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n[0.0/0.0].pack(\"d\")  # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF8\\x7F\"      # NaN\n[1.0/0.0].pack(\"d\")  # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\x7F\"      # +Infinity\n[-1.0/0.0].pack(\"d\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\xFF\"      # -Infinity\n//}\n\n  SPARC64 (IEEE754 倍精度 ビッグエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"d\")      # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n[0.0/0.0].pack(\"d\")  # => \"\\x7F\\xF8\\x00\\x00\\x00\\x00\\x00\\x00\"      # NaN\n[1.0/0.0].pack(\"d\")  # => \"\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"      # +Infinity\n[-1.0/0.0].pack(\"d\") # => \"\\xFF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"      # -Infinity\n//}\n\n  VAX (NetBSD 3.0) (非IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"d\") # => \"\\x80@\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n: e\n\n  リトルエンディアンの単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"e\") # => \"\\x00\\x00\\x80?\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"e\") # => \"\\x00\\x00\\x80?\"\n//}\n\n: E\n\n  リトルエンディアンの倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"E\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"E\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n//}\n\n: g\n\n  ビッグエンディアンの単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"g\") # => \"?\\x80\\x00\\x00\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"g\") # => \"?\\x80\\x00\\x00\"\n//}\n\n  IEEE754準拠な環境の場合、以下のようにして符号、指数部、仮数部を取り出せます。\n//emlist[][ruby]{\ns = [v].pack(\"g\").unpack(\"B*\")[0][0,1]      # 符号\ne = [v].pack(\"g\").unpack(\"B*\")[0][1,8]      # 指数部\nf = [v].pack(\"g\").unpack(\"B*\")[0][9,23]     # 仮数部\n//}\n\n  そして、s, e, f の意味は以下の通りです。\n//emlist[][ruby]{\nsgn = s == \"0\" ? +1.0 : -1.0\nexp = Integer(\"0b\" + e)\nfra = Integer(\"0b\" + f)\nif exp == 0\n  if fra == 0\n    sgn * 0                     # ±0 (positive/negative zero)\n  else\n    sgn * fra * 2**(-126-23)    # 非正規化数 (denormalized number)\n  end\nelsif exp == 255\n  if fra == 0\n    sgn * Inf                   # ±∞ (positive/negative infinity)\n  else\n    NaN                         # 非数 (not a number)\n  end\nelse\n  fra += 1 << 23                # ゲタ\n  sgn * fra * 2**(exp-127-23)   # 正規化数 (normalized number)\nend\n//}\n\n: G\n\n  ビッグエンディアンの倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"G\") # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"G\") # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  IEEE754準拠な環境の場合、以下のようにして符号、指数部、仮数部を取り出せます。\n//emlist[][ruby]{\ns = [v].pack(\"G\").unpack(\"B*\")[0][0,1]    # 符号\ne = [v].pack(\"G\").unpack(\"B*\")[0][1,11]   # 指数部\nf = [v].pack(\"G\").unpack(\"B*\")[0][12,52]  # 仮数部\n//}\n\n  そして、s, e, f の意味は以下の通りです。\n//emlist[][ruby]{\nsgn = s == \"0\" ? +1.0 : -1.0\nexp = Integer(\"0b\" + e)\nfra = Integer(\"0b\" + f)\nif exp == 0\n  if fra == 0\n    sgn * 0                     # ±0 (positive/negative zero)\n  else\n    sgn * fra * 2**(-1022-52)   # 非正規化数 (denormalized number)\n  end\nelsif exp == 2047\n  if fra == 0\n    sgn * Inf                   # ±∞ (positive/negative infinity)\n  else\n    NaN                         # 非数 (not a number)\n  end\nelse\n  fra += 1 << 52                # ゲタ\n  sgn * fra * 2**(exp-1023-52)  # 正規化数 (normalized number)\nend\n//}\n\n: p\n\n  ヌル終端の文字列へのポインタ\n//emlist[][ruby]{\n[\"\"].pack(\"p\")             # => \"\\x980\\xBEf\\x1CV\\x00\\x00\"\n[\"a\", \"b\", \"c\"].pack(\"p3\") # => \"\\x98\\xE5\\x9ER\\xD2U\\x00\\x00p\\xE5\\x9ER\\xD2U\\x00\\x00H\\xE5\\x9ER\\xD2U\\x00\\x00\"\n[nil].pack(\"p\")            # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n: P\n\n  構造体(固定長文字列)へのポインタ\n//emlist[][ruby]{\n[nil].pack(\"P\")    # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n[\"abc\"].pack(\"P3\") # => \"\\xA0\\xEE\\er\\x84U\\x00\\x00\"\n\n[\"abc\"].pack(\"P4\") # => ArgumentError: too short buffer for P(3 for 4)\n[\"\"].pack(\"P\")     # => ArgumentError: too short buffer for P(0 for 1)\n//}\n\n: u\n\n  uuencodeされた文字列\n//emlist[][ruby]{\n[\"\"].pack(\"u\")           # => \"\"\n[\"a\"].pack(\"u\")          # => \"!80``\\n\"\n[\"abc\"].pack(\"u\")        # => \"#86)C\\n\"\n[\"abcd\"].pack(\"u\")       # => \"$86)C9```\\n\"\n[\"a\"*45].pack(\"u\")       # => \"M86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A\\n\"\n[\"a\"*46].pack(\"u\")       # => \"M86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A\\n!80``\\n\"\n[\"abcdefghi\"].pack(\"u6\") # => \"&86)C9&5F\\n#9VAI\\n\"\n//}\n\n: U\n\n  UTF-8\n//emlist[][ruby]{\n[0].pack(\"U\")                               # => \"\\u0000\"\n[1].pack(\"U\")                               # => \"\\u0001\"\n[0x7f].pack(\"U\")                            # => \"\\u007F\"\n[0x80].pack(\"U\")                            # => \"\\u0080\"\n[0x7fffffff].pack(\"U\")                      # => \"\\xFD\\xBF\\xBF\\xBF\\xBF\\xBF\"\n[0x80000000].pack(\"U\")                      # => RangeError: pack(U): value out of range\n[0,256,65536].pack(\"U3\").b                  # => \"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\"\n\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U3\") # => [0, 256, 65536]\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U\")  # => [0]\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U*\") # => [0, 256, 65536]\n//}\n\n: w\n\n  BER圧縮整数\n\n  1バイトあたり7ビットを使用して必要最小限のバイト数で任意サイズの\n  0以上の整数を表す数値表現。各バイトの最上位ビットはデータの最後\n  を除いて必ず1が立っている(つまり最上位ビットはどこまでデータがあ\n  るかを示している)。\n\n  ISO/IEC 8825-1:1995 : Information technology−ASN.1 encoding rules : Specification of Basic Encoding Rules(BER) に定められる整数の符号化方法。\n\n//emlist[][ruby]{\n[0].pack(\"w\")             # => \"\\x00\"\n[1].pack(\"w\")             # => \"\\x01\"\n[127].pack(\"w\")           # => \"\\x7F\"\n[128].pack(\"w\")           # => \"\\x81\\x00\"\n[0x3fff].pack(\"w\")        # => \"\\xFF\\x7F\"\n[0x4000].pack(\"w\")        # => \"\\x81\\x80\\x00\"\n[0x3fffffff].pack(\"w\")    # => \"\\x83\\xFF\\xFF\\xFF\\x7F\"\n[0x40000000].pack(\"w\")    # => \"\\x84\\x80\\x80\\x80\\x00\"\n[0xffffffff].pack(\"w\")    # => \"\\x8F\\xFF\\xFF\\xFF\\x7F\"\n[0x100000000].pack(\"w\")   # => \"\\x90\\x80\\x80\\x80\\x00\"\n\n\"\\x00\".unpack(\"w\")              # => [0]\n\"\\x00\\x81\\x00\\x01\".unpack(\"w*\") # => [0, 128, 1]\n//}\n\n  なお、BER圧縮整数でエンコードした結果は大小関係を保存しない。\n  たとえば、[0x3fff].pack(\"w\") > [0x4000].pack(\"w\") である。\n\n: x\n\n  ヌルバイト（pack）／1バイト読み飛ばし（unpack）\n//emlist[][ruby]{\n[97, 98].pack(\"CxC\")    # => \"a\\x00b\"\n[97, 98].pack(\"Cx3C\")   # => \"a\\x00\\x00\\x00b\"\n\n\"abc\".unpack(\"CxC\")  # => [97, 99]\n\"abc\".unpack(\"Cx3C\") # => ArgumentError: x outside of string\n//}\n\n: X\n\n  1バイト後退\n//emlist[][ruby]{\n[97, 98, 99].pack(\"CCXC\") # => \"ac\"\n\n\"abcdef\".unpack(\"x*XC\") # => [102]\n//}\n\n: @\n\n  絶対位置への移動\n//emlist[][ruby]{\n[97, 98].pack(\"C @3 C\") # => \"a\\x00\\x00b\"\n\n\"abcd\".unpack(\"C @3 C\") # => [97, 100]\n//}\n\n: j\n\nintptr_t (ポインタの幅の符号つき整数, エンディアンに依存)\n\n: J\n\nuintptr_t (ポインタの幅の符号なし整数, エンディアンに依存)\n\n=== 使用例\n\n以下、pack/unpack の使用例の一部です。\n\npack を使用しなくても同じことができる場合はその例も載せています。\npack は暗号になりやすい面があることを考慮し、pack を使いたくない人\nに別解を示すためです。\n\n: 数値(文字コード)の配列を文字列に変換する例\n//emlist[][ruby]{\n[82, 117, 98, 121].pack(\"cccc\")  # => \"Ruby\"\n[82, 117, 98, 121].pack(\"c4\")    # => \"Ruby\"\n[82, 117, 98, 121].pack(\"c*\")    # => \"Ruby\"\n\ns = \"\"\n[82, 117, 98, 121].each {|c| s << c}\ns    # => \"Ruby\"\n\n[82, 117, 98, 121].collect {|c| sprintf \"%c\", c}.join   # => \"Ruby\"\n\n[82, 117, 98, 121].inject(\"\") {|s, c| s << c}    # => \"Ruby\"\n//}\n\n: 文字列を数値(文字コード)の配列に変換する例\n//emlist[][ruby]{\n\"Ruby\".unpack('C*')    # => [82, 117, 98, 121]\n\na = []\n\"Ruby\".each_byte {|c| a << c}\na    # => [82, 117, 98, 121]\n//}\n\n: \"x\" でヌルバイトを埋めることができる\n//emlist[][ruby]{\n[82, 117, 98, 121].pack(\"ccxxcc\")    # => \"Ru\\x00\\x00by\"\n//}\n\n: \"x\" で文字を読み飛ばす事が出来る\n//emlist[][ruby]{\n\"Ru\\x00\\x00by\".unpack('ccxxcc')    # => [82, 117, 98, 121]\n//}\n\n: Hexダンプを数値の配列に変換する例\n//emlist[][ruby]{\n\"61 62 63 64 65 66\".delete(' ').lines.pack('H*').unpack('C*')\n# => [97, 98, 99, 100, 101, 102]\n\n\"61 62 63 64 65 66\".split.collect {|c| c.hex}\n# => [97, 98, 99, 100, 101, 102]\n//}\n\n: バイナリと16進数のpackでは長さ指定は生成されるバイト数ではなく、ビットやニブルの個数を表す\n//emlist[][ruby]{\n[0b01010010, 0b01110101, 0b01100010, 0b01111001].pack(\"C4\")\n# => \"Ruby\"\n[\"01010010011101010110001001111001\"].pack(\"B32\") # 8 bits * 4\n# => \"Ruby\"\n\n[0x52, 0x75, 0x62, 0x79].pack(\"C4\")\n# => \"Ruby\"\n[\"52756279\"].pack(\"H8\")  # 2 nybbles * 4\n# => \"Ruby\"\n//}\n\n: テンプレート文字'a'の長さ指定は1つの文字列だけに適用される\n//emlist[][ruby]{\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"a4\")\n# => \"RUBY\"\n\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"aaaa\")\n# => \"Ruby\"\n\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"a*aaa\")\n# => \"RUBYuby\"\n//}\n\n: テンプレート文字\"a\"は、長さが足りない分をヌル文字で補う\n//emlist[][ruby]{\n[\"Ruby\"].pack(\"a8\")\n# => \"Ruby\\x00\\x00\\x00\\x00\"\n//}\n\n: リトルエンディアンとビッグエンディアン\n//emlist[][ruby]{\n[1,2].pack(\"s2\")\n# => \"\\x01\\x00\\002\\x00\" # リトルエンディアンのシステムでの出力\n# => \"\\x00\\x01\\x00\\002\" # ビッグエンディアンのシステムでの出力\n\n[1,2].pack(\"n2\")\n# => \"\\x00\\x01\\x00\\002\" # システムによらずビッグエンディアン\n\n[1,2].pack(\"v2\")\n# => \"\\x01\\x00\\002\\x00\" # システムによらずリトルエンディアン\n//}\n\n: ネットワークバイトオーダの signed long\n//emlist[][ruby]{\ns = \"\\xFF\\xFF\\xFF\\xFE\"\nn = s.unpack(\"N\")[0]\nif n[31] == 1\n  n = -((n ^ 0xffff_ffff) + 1)\nend\nn # => -2\n//}\n\n: ネットワークバイトオーダの signed long(その2)\n//emlist[][ruby]{\ns = \"\\xFF\\xFF\\xFF\\xFE\"\nn = s.unpack(\"N\").pack(\"l\").unpack(\"l\")[0]\nn # => -2\n//}\n\n: IPアドレス\n//emlist[][ruby]{\nrequire 'socket'\nofficial_hostname, alias_hostnames, address_family, *address_list = Socket.gethostbyname(\"localhost\")\naddress_list.find {|address| address.size == 4 }.unpack(\"C4\").join(\".\")\n# => \"127.0.0.1\"\n\n\"127.0.0.1\".split(\".\").collect {|c| c.to_i}.pack(\"C4\")\n# => \"\\x7F\\x00\\x00\\x01\"\n//}\n\n: sockaddr_in 構造体\n//emlist[][ruby]{\nrequire 'socket'\n[Socket::AF_INET,\n Socket.getservbyname('echo'),\n 127, 0, 0, 1].pack(\"s n C4 x8\")\n# => \"\\x02\\x00\\x00\\a\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  pack/unpack を使う代わりに\n  Socket.pack_sockaddr_in,\n  Socket.unpack_sockaddr_in メソッドがあります。\n\n: '\\0'終端文字列のアドレス\n\n  テンプレート文字 \"p\" や \"P\" は、C 言語レベルのインタフェースのた\n  めにあります(例えば IO#ioctl)。\n//emlist[][ruby]{\n[\"foo\"].pack(\"p\")    # => \"xp\\xC2\\x85\\vV\\x00\\x00\"\n//}\n\n  結果の文字列はゴミに見えますが、実際は文字列\"foo\\0\"を指すアドレ\n  ス(のバイナリ表現)です。以下のようにすれば見慣れた表記で見ること\n  が出来ます\n//emlist[][ruby]{\nprintf \"%#014x\\n\", \"xp\\xC2\\x85\\vV\\x00\\x00\".unpack(\"J\")[0] # => 0x560b85c27078\n//}\n\n  アドレスが指す先のオブジェクト(この例で \"foo\\0\") は、pack の結\n  果が GC されるまではGCされないことが保証されています。\n\n  unpack(\"p\"), unpack(\"P\") は、pack の結果からしか unpack できません。\n//emlist[][ruby]{\n[\"foo\"].pack(\"p\").unpack(\"p\") # => [\"foo\"]\n\"xp\\xC2\\x85\\vV\\x00\\x00\".unpack(\"p\")\n# => ArgumentError: no associated pointer\n//}\n  \"p\" や \"P\" は、nil を特別に扱い NULL\n  ポインタとして解釈します。(以下は、64bitマシンで一般的な結果)\n//emlist[][ruby]{\n[nil].pack(\"p\")        # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\".unpack(\"p\") # => [nil]\n//}\n\n: 構造体のアドレス\n\n  例えば、\n//emlist{\n      struct {\n        int   a;\n        short b;\n        long  c;\n      } v = {1,2,3};\n//}\n  を表す文字列は\n//emlist[][ruby]{\nv = [1,2,3].pack(\"i!s!l!\")\n//}\n  です。(byte alignment の問題から実際は適当な padding が必要に\n  なるかもしれません)\n\n  この構造体を指すアドレスは\n//emlist[][ruby]{\n[v].pack(\"P\")  # => \"\\xC0\\xCC2L\\fV\\x00\\x00\"\n//}\n  で得られます。\n\n: UTF-8からUCS-2への変換 (サロゲートを処理していないので UTF-16 とはいえない)\n\n  リトルエンディアン:\n//emlist[][ruby]{\n(\"Comments\").unpack(\"U*\").pack(\"v*\") # => \"C\\x00o\\x00m\\x00m\\x00e\\x00n\\x00t\\x00s\\x00\"\n//}\n  ビッグエンディアン:\n//emlist[][ruby]{\n(\"Comments\").unpack(\"U*\").pack(\"n*\") # => \"\\x00C\\x00o\\x00m\\x00m\\x00e\\x00n\\x00t\\x00s\"\n//}\n\n@see String#unpack, String#unpack1",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "base64",
          "label": "base64",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:base64/"
        }
      ]
    },
    {
      "signature": "Array#delete_if -> Enumerator",
      "score": 27073.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/delete_if.html",
          "description": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。\n\nブロックが与えられなかった場合は、自身と reject! から生成した\nEnumerator オブジェクトを返します。\n返された Enumerator オブジェクトの each メソッドには、\nもとの配列に対して副作用があることに注意してください。\n\n//emlist[例][ruby]{\na = [0, 1, 2, 3, 4, 5]\na.delete_if{|x| x % 2 == 0}\np a #=> [1, 3, 5]\n\na = [0, 1, 2, 3, 4, 5]\ne = a.reject!\ne.each{|i| i % 2 == 0}\np a                    #=> [1, 3, 5]  もとの配列から削除されていることに注意。\n//}\n\n@see Array#select!, Array#keep_if",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#delete_if {|x| ... } -> self",
      "score": 27073.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/delete_if.html",
          "description": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。\n\nブロックが与えられなかった場合は、自身と reject! から生成した\nEnumerator オブジェクトを返します。\n返された Enumerator オブジェクトの each メソッドには、\nもとの配列に対して副作用があることに注意してください。\n\n//emlist[例][ruby]{\na = [0, 1, 2, 3, 4, 5]\na.delete_if{|x| x % 2 == 0}\np a #=> [1, 3, 5]\n\na = [0, 1, 2, 3, 4, 5]\ne = a.reject!\ne.each{|i| i % 2 == 0}\np a                    #=> [1, 3, 5]  もとの配列から削除されていることに注意。\n//}\n\n@see Array#select!, Array#keep_if",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#reject! -> Enumerator",
      "score": 27073.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/delete_if.html",
          "description": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。\n\nブロックが与えられなかった場合は、自身と reject! から生成した\nEnumerator オブジェクトを返します。\n返された Enumerator オブジェクトの each メソッドには、\nもとの配列に対して副作用があることに注意してください。\n\n//emlist[例][ruby]{\na = [0, 1, 2, 3, 4, 5]\na.delete_if{|x| x % 2 == 0}\np a #=> [1, 3, 5]\n\na = [0, 1, 2, 3, 4, 5]\ne = a.reject!\ne.each{|i| i % 2 == 0}\np a                    #=> [1, 3, 5]  もとの配列から削除されていることに注意。\n//}\n\n@see Array#select!, Array#keep_if",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#reject! {|x| ... } -> self | nil",
      "score": 27073.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/delete_if.html",
          "description": "要素を順番にブロックに渡して評価し、その結果が真になった要素をすべて削除します。\ndelete_if は常に self を返しますが、reject! は要素が 1 つ以上削除されれば self を、\n1 つも削除されなければ nil を返します。\n\nブロックが与えられなかった場合は、自身と reject! から生成した\nEnumerator オブジェクトを返します。\n返された Enumerator オブジェクトの each メソッドには、\nもとの配列に対して副作用があることに注意してください。\n\n//emlist[例][ruby]{\na = [0, 1, 2, 3, 4, 5]\na.delete_if{|x| x % 2 == 0}\np a #=> [1, 3, 5]\n\na = [0, 1, 2, 3, 4, 5]\ne = a.reject!\ne.each{|i| i % 2 == 0}\np a                    #=> [1, 3, 5]  もとの配列から削除されていることに注意。\n//}\n\n@see Array#select!, Array#keep_if",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#collect! -> Enumerator",
      "score": 27037.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "各要素を順番にブロックに渡して評価し、その結果で要素を\n置き換えます。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/collect=21.html",
          "description": "各要素を順番にブロックに渡して評価し、その結果で要素を\n置き換えます。\n\nブロックが与えられなかった場合は、自身と map! から生成した\nEnumerator オブジェクトを返します。\n\n//emlist[例][ruby]{\nary = [1, 2, 3]\nary.map! {|i| i * 3 }\np ary   #=> [3, 6, 9]\n\nary = [1, 2, 3]\ne = ary.map!\ne.each{ 1 }\np ary           #=> [1, 1, 1]\n//}\n\n@see Array#collect,  Enumerator",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#collect! {|item| ..} -> self",
      "score": 27037.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "各要素を順番にブロックに渡して評価し、その結果で要素を\n置き換えます。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/collect=21.html",
          "description": "各要素を順番にブロックに渡して評価し、その結果で要素を\n置き換えます。\n\nブロックが与えられなかった場合は、自身と map! から生成した\nEnumerator オブジェクトを返します。\n\n//emlist[例][ruby]{\nary = [1, 2, 3]\nary.map! {|i| i * 3 }\np ary   #=> [3, 6, 9]\n\nary = [1, 2, 3]\ne = ary.map!\ne.each{ 1 }\np ary           #=> [1, 1, 1]\n//}\n\n@see Array#collect,  Enumerator",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#map! -> Enumerator",
      "score": 27037.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "各要素を順番にブロックに渡して評価し、その結果で要素を\n置き換えます。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/collect=21.html",
          "description": "各要素を順番にブロックに渡して評価し、その結果で要素を\n置き換えます。\n\nブロックが与えられなかった場合は、自身と map! から生成した\nEnumerator オブジェクトを返します。\n\n//emlist[例][ruby]{\nary = [1, 2, 3]\nary.map! {|i| i * 3 }\np ary   #=> [3, 6, 9]\n\nary = [1, 2, 3]\ne = ary.map!\ne.each{ 1 }\np ary           #=> [1, 1, 1]\n//}\n\n@see Array#collect,  Enumerator",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#map! {|item| ..} -> self",
      "score": 27037.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "各要素を順番にブロックに渡して評価し、その結果で要素を\n置き換えます。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/collect=21.html",
          "description": "各要素を順番にブロックに渡して評価し、その結果で要素を\n置き換えます。\n\nブロックが与えられなかった場合は、自身と map! から生成した\nEnumerator オブジェクトを返します。\n\n//emlist[例][ruby]{\nary = [1, 2, 3]\nary.map! {|i| i * 3 }\np ary   #=> [3, 6, 9]\n\nary = [1, 2, 3]\ne = ary.map!\ne.each{ 1 }\np ary           #=> [1, 1, 1]\n//}\n\n@see Array#collect,  Enumerator",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Array#zip(*lists) -> [[object]]",
      "score": 27019.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "自身と引数に渡した配列の各要素からなる配列の配列を生成して返します。\n生成される配列の要素数は self の要素数と同じです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/zip.html",
          "description": "自身と引数に渡した配列の各要素からなる配列の配列を生成して返します。\n生成される配列の要素数は self の要素数と同じです。\n\nブロック付きで呼び出した場合は、\nself と引数に渡した配列の各要素を順番にブロックに渡します。\n\n@param lists 配列を指定します。\n             配列以外のオブジェクトを指定した場合は to_ary メソッドによ\n             る暗黙の型変換を試みます。to_ary メソッドに応答できない場\n             合は each メソッドによる暗黙の型変換を試みます。\n\n@raise TypeError 引数に配列以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n\n//emlist[例][ruby]{\np [1,2,3].zip([4,5,6], [7,8,9])\n# => [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\np [1,2].zip([:a,:b,:c], [:A,:B,:C,:D])\n# => a, :A], [2, :b, :B\n\np [1,2,3,4,5].zip([:a,:b,:c], [:A,:B,:C,:D])\n# => [[1, :a, :A], [2, :b, :B],\n#     [3, :c, :C], [4, nil, :D], [5, nil, nil]]\n\np [1,2,3].zip([4,5,6], [7,8,9]) { |ary| p ary }\n# => [1, 4, 7]\n#    [2, 5, 8]\n#    [3, 6, 9]\n#    nil\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "Array#zip(*lists) {|v1, v2, ...| ...} -> nil",
      "score": 27019.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "自身と引数に渡した配列の各要素からなる配列の配列を生成して返します。\n生成される配列の要素数は self の要素数と同じです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Array/i/zip.html",
          "description": "自身と引数に渡した配列の各要素からなる配列の配列を生成して返します。\n生成される配列の要素数は self の要素数と同じです。\n\nブロック付きで呼び出した場合は、\nself と引数に渡した配列の各要素を順番にブロックに渡します。\n\n@param lists 配列を指定します。\n             配列以外のオブジェクトを指定した場合は to_ary メソッドによ\n             る暗黙の型変換を試みます。to_ary メソッドに応答できない場\n             合は each メソッドによる暗黙の型変換を試みます。\n\n@raise TypeError 引数に配列以外の(暗黙の型変換が行えない)オブジェクトを\n                 指定した場合に発生します。\n\n\n//emlist[例][ruby]{\np [1,2,3].zip([4,5,6], [7,8,9])\n# => [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n\np [1,2].zip([:a,:b,:c], [:A,:B,:C,:D])\n# => a, :A], [2, :b, :B\n\np [1,2,3,4,5].zip([:a,:b,:c], [:A,:B,:C,:D])\n# => [[1, :a, :A], [2, :b, :B],\n#     [3, :c, :C], [4, nil, :D], [5, nil, nil]]\n\np [1,2,3].zip([4,5,6], [7,8,9]) { |ary| p ary }\n# => [1, 4, 7]\n#    [2, 5, 8]\n#    [3, 6, 9]\n#    nil\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Array/"
        }
      ]
    },
    {
      "signature": "ObjectSpace.#reachable_objects_from(obj) -> Array | nil",
      "score": 18712.0,
      "metadata": { "type": "module-function", "versions": ["3.2.0"] },
      "summary": "obj から到達可能なすべてのオブジェクトを返します。マーク不能なオブジェ\nクトを指定した場合は nil を返します。本メソッドを使う事でメモリリークの\n調査が行えます。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/ObjectSpace/m/reachable_objects_from.html",
          "description": "obj から到達可能なすべてのオブジェクトを返します。マーク不能なオブジェ\nクトを指定した場合は nil を返します。本メソッドを使う事でメモリリークの\n調査が行えます。\n\n//emlist[例][ruby]{\n# 配列クラス(Array)と 'a'、'b'、'c' に到達可能。\nObjectSpace.reachable_objects_from(['a', 'b', 'c'])\n# => [Array, 'a', 'b', 'c']\n//}\n\nobj が 2 つ以上の同じオブジェクト x への参照を持つ場合、戻り値に含まれ\nるオブジェクト x は 1 つだけです。\n\n//emlist[例][ruby]{\n# 配列クラス(Array)と v に到達可能。\nObjectSpace.reachable_objects_from([v = 'a', v, v])\n# => [Array, 'a']\n\n# 配列クラス(Array)と 3 つの異なる 'a' オブジェクトに到達可能。\nObjectSpace.reachable_objects_from(['a', 'a', 'a'])\n# => [Array, 'a', 'a', 'a']\n//}\n\nobj にマーク不能なオブジェクト(true、false、nil、Symbol、\nFixnum、Flonum(即値の Float オブジェクト))を指定した場合は\nnil を返します。\n\n//emlist[例][ruby]{\n# 1 はマーク不能\nObjectSpace.reachable_objects_from(1)\n# => nil\n//}\n\nobj が内部でオブジェクトへの参照を持つ場合、\nObjectSpace::InternalObjectWrapper オブジェクトが戻り値に含まれます。こ\nのオブジェクトは obj が内部で持っているオブジェクトを持ちます。内部のオ\nブジェクトの型を確認する場合は ObjectSpace::InternalObjectWrapper#type\nを参照してください。:T_CLASS のような Symbol を返します。\n\nobj が ObjectSpace::InternalObjectWrapper オブジェクトであった場合、そ\nのオブジェクトから参照される全てのオブジェクトを返します。\n\n本メソッドは C Ruby 以外では動作しません。\n\n@see https://www.atdot.net/~ko1/diary/201212.html#d8,\n     https://www.atdot.net/~ko1/diary/201212.html#d9",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Fixnum",
          "label": "Fixnum",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Fixnum/"
        },
        {
          "key": "Float",
          "label": "Float",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Float/"
        },
        {
          "key": "ObjectSpace",
          "label": "ObjectSpace",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:ObjectSpace/"
        },
        {
          "key": "Symbol",
          "label": "Symbol",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Symbol/"
        }
      ]
    },
    {
      "signature": "Vector#each2(v) -> Enumerator",
      "score": 18325.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "ベクトルの各要素と、それに対応するインデックスを持つ引数 v の要素との組に対して (2引数の) ブロックを繰返し評価します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Vector/i/each2.html",
          "description": "ベクトルの各要素と、それに対応するインデックスを持つ引数 v の要素との組に対して (2引数の) ブロックを繰返し評価します。\n\nv は配列互換(size メソッドと [] メソッドを持つ)オブジェクトです。\nVector も使えます。\n\nブロックを省略した場合は Enumerator を返します。\n\n@param v 各要素と組を取るためのオブジェクト\n@raise ExceptionForMatrix::ErrDimensionMismatch 自分自身と引数のベクト\n       ルの要素の数(次元)が異なっていたときに発生します。\n@see Array#zip",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        },
        {
          "key": "Vector",
          "label": "Vector",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Vector/"
        }
      ]
    },
    {
      "signature": "Vector#each2(v) {|x, y| ... } -> self",
      "score": 18325.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "ベクトルの各要素と、それに対応するインデックスを持つ引数 v の要素との組に対して (2引数の) ブロックを繰返し評価します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Vector/i/each2.html",
          "description": "ベクトルの各要素と、それに対応するインデックスを持つ引数 v の要素との組に対して (2引数の) ブロックを繰返し評価します。\n\nv は配列互換(size メソッドと [] メソッドを持つ)オブジェクトです。\nVector も使えます。\n\nブロックを省略した場合は Enumerator を返します。\n\n@param v 各要素と組を取るためのオブジェクト\n@raise ExceptionForMatrix::ErrDimensionMismatch 自分自身と引数のベクト\n       ルの要素の数(次元)が異なっていたときに発生します。\n@see Array#zip",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        },
        {
          "key": "Vector",
          "label": "Vector",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Vector/"
        }
      ]
    },
    {
      "signature": "1.6.8から1.8.0への変更点(まとめ)",
      "score": 1225.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "1.6.8から1.8.0への変更点(まとめ) \n* ((<1.6.8から1.8.0への変更点(まとめ)/インタプリタの変更>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/追加されたクラス／モジュール>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/追加されたメソッド>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/追加された定数>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/拡張されたクラス／メソッド(互換性のある変更)>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/変更されたクラス／メソッド(互換性のない変更)>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/文法の変更>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/正規表現>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/Marshal>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/Windows 対応>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/廃止された(される予定の)機能>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/ライブラリ>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/拡張ライブラリAPI>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/バグ修正>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/サポートプラットフォームの追加>))",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f1=2e8=2e0.html",
          "description": "1.6.8から1.8.0への変更点(まとめ) \n* ((<1.6.8から1.8.0への変更点(まとめ)/インタプリタの変更>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/追加されたクラス／モジュール>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/追加されたメソッド>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/追加された定数>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/拡張されたクラス／メソッド(互換性のある変更)>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/変更されたクラス／メソッド(互換性のない変更)>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/文法の変更>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/正規表現>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/Marshal>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/Windows 対応>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/廃止された(される予定の)機能>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/ライブラリ>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/拡張ライブラリAPI>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/バグ修正>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/サポートプラットフォームの追加>))\n\n== インタプリタの変更\n\n: ((<組み込み変数/$defout>)) [obsolete]\n: ((<組み込み変数/$deferr>)) [obsolete]\n: ((<組み込み変数/$stdout>)) [change]\n: ((<組み込み変数/$stderr>)) [change]\n: ((<組み込み変数/$stdin>))  [change]\n\n  $stdout, $stderr は、$defout, $deferr の別名になり\n  $defout, $deferr は ((<obsolete>)) になりました\n\n  $stdin は、普通のグローバル変数となりました(STDINをリダイレクトする\n  動作はなくなりました)\n\n  $defout や $deferr に代入を行うと警告がでます。\n  (注：1.6 に $deferr はありません)\n  ((<ruby-dev:20961>))\n\n  $stdin にオブジェクトを代入すると標準入力からの入力メソッド(gets 等)\n  はそのオブジェクトにメソッドを投げます。\n  (リダイレクトしなくなった点を除けば、1.6 とそれほど違いはないようです)\n\n: ((<組み込み変数/$VERBOSE>))\n\n  三段階のレベルを持つようになりました。\n  * nil: 警告を出力しない   (-W0 新しい警告レベル)\n  * false: 重要な警告のみ出力  (-W1 デフォルト)\n  * true: すべての警告を出力する (-W2 or -W or -v or -w or --verbose)\n\n  追加された -W オプションは $VERBOSE = nil の指定(-W0)を可能にします。\n\n: ruby interpreter [ruby] [change]\n\n  クラスの特異クラスの特異クラスは特異クラス自身であると定義されました\n  ((<ruby-bugs-ja:313>))。なんだかよくわかりません(^^;\n\n        class << Object\n          p [self.id, self]\n          class << self\n            p [self.id, self]\n          end\n        end\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           [537771634, Class]\n           [537742484, Class]\n        => ruby 1.7.3 (2002-09-05) [i586-linux]\n           [537771634, #<Class:Object>]\n           [537771634, #<Class:Object>]\n\n  さらに、オブジェクトの特異クラスのスーパークラスの特異クラスと\n  オブジェクトの特異クラスの特異クラスのスーパークラスは同じなのだそうです\n  ((<ruby-bugs-ja:324>))。さあっぱりわかりません(^^;;\n\n        class << Object.new\n          class << self.superclass\n            p [self.id, self]\n          end\n          class << self\n            p [self.superclass.id, self.superclass]\n          end\n        end\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           [537771634, Class]\n           [537771644, Class]\n        => ruby 1.7.3 (2002-09-05) [i586-linux]\n           [537771634, #<Class:Object>]\n           [537771634, #<Class:Object>]\n\n  ((<ruby-bugs-ja:336>)) のあたりでまた少し変わったかもしれません\n  (2002-09-21 の ChangeLog 参照。まじめにおっかけるのに疲れたらしい\n  ^^;;)\n\n: ((<Proc/Proc.new>)) [change]\n: ((<組み込み関数/lambda>))   [change]\n: ((<組み込み関数/proc>))     [change]\n\n  以下のように変更されました。((<ruby-dev:20358>))\n\n      * Proc.new およびブロック引数で与えられる Proc は\n        引数チェックがゆるい。break が例外になる。\n\n            Proc.new {|a,b,c| p [a,b,c]}.call(1,2)\n                => -:1: wrong # of arguments (2 for 3) (ArgumentError)\n                        from -:1:in `call'\n                        from -:1\n                   ruby 1.6.8 (2002-12-24) [i586-linux]\n                => ruby 1.8.0 (2003-06-21) [i586-linux]\n                   [1, 2, nil]\n\n            Proc.new { break }.call\n\n                => ruby 1.6.8 (2002-12-24) [i586-linux]\n\n                => -:1:in `call': break from proc-closure (LocalJumpError)\n                        from -:1\n                   ruby 1.8.0 (2003-06-21) [i586-linux]\n\n      * lambda および proc が返す Proc は引数チェックが厳しい。\n        break は実行を中断する。\n\n            lambda {|a,b,c| p [a,b,c]}.call(1,2)\n                => -:1: wrong # of arguments (2 for 3) (ArgumentError)\n                        from -:1:in `call'\n                        from -:1\n                   ruby 1.6.8 (2002-12-24) [i586-linux]\n                => -:1: wrong number of arguments (2 for 3) (ArgumentError)\n                        from -:1:in `call'\n                        from -:1\n                   ruby 1.8.0 (2003-06-21) [i586-linux]\n\n            lambda { break }.call\n                => ruby 1.6.8 (2002-12-24) [i586-linux]\n                => ruby 1.8.0 (2003-06-21) [i586-linux]\n\n\n  以下のようにイテレータブロックと、Procをブロックとして引数で渡したと\n  きの挙動が同じになっています。\n\n        def foo\n          yield 1,2,3,4\n        end\n\n        foo {|a,b,c| p [a,b,c]; break }\n\n        foo( &proc {|a,b,c| p [a,b,c]; break } )\n\n        foo( &Proc.new {|a,b,c| p [a,b,c]; break } )\n\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           [1, 2, 3]\n           [1, 2, 3]\n           -:2: break from proc-closure (LocalJumpError)\n        => ruby 1.8.0 (2003-06-21) [i586-linux]\n           [1, 2, 3]\n           [1, 2, 3]\n           [1, 2, 3]\n\n: ((<yield|メソッド呼び出し/yield>))\n\n  ブロックパラメータの数が一つの場合、ブロックに複数の値を渡すと警告が\n  出るようになりました。\n\n  以前は |var| は一つの引数を受けるときと、複数の引数を受けるときの両\n  方で利用されていましたが、将来は「一つの引数を受ける」ことを意味する\n  ようになります。((<ruby-dev:20358>))\n\n: defined? [compat]\n\n  属性代入、配列要素への代入に対して \"method\" でなく \"assignment\" を返\n  すようになりました。\n\n: ((<リテラル/数値リテラル>)) [compat]\n\n  10進((*整数*))リテラルの prefix として 0d が追加されました。\n  8進リテラルの prefix として 0 以外に 0o が追加されました。\n\n  Integer(), String#to_i、String#oct もこの prefix を認識します。\n\n: ((<メソッド引数の & 修飾|メソッド呼び出し/イテレータ>)) [compat]\n: ((<Proc#to_proc|Proc/to_proc>)) [new]\n\n  メソッドに渡す引数に & を修飾した場合、渡すオブジェクトが to_proc を\n  持っていればそれを実行し、その結果をブロックとして渡すようになりまし\n  た。以前は、& 修飾できるのは Proc, Method オブジェクト限定でした。\n  これに伴い Proc#to_proc が追加されました。\n\n: 終了ステータス [compat]\n\n  raise SystemExit したときに終了ステータス 1 で終了するようになりました。\n  ((<ruby-dev:16776>))\n\n: ((<\"rescue/ensure on begin .. end while\"|制御構造/while 修飾子>)) [compat]\n\n  rescue/ensure を持つ begin 式も while/until 修飾できるようになりまし\n  た。\n\n  以前は、rescue/ensure を持つ while/until 修飾式は、通常の begin 式に\n  while/until 修飾していると見なされ本体が必ず最初に実行されるという振\n  るまい(C の do ... while 構文と同じ)をしていませんでした。\n  ((<ruby-list:34618>))\n\n: ((<\"rescue/ensure on class/module\"|クラス／メソッドの定義/クラス定義>)) [compat]\n\n  メソッド定義のほかにもクラス定義やモジュール定義にもrescue/ensureを\n  つけられるようになりました。\n\n: [ruby] [compat]\n\n  内部のハッシュテーブルを使用することにより定数参照の速度を改善したそうです。\n  (ChangeLogの\n        Tue Jun  5 16:15:58 2001  Yukihiro Matsumoto  <matz@ruby-lang.org>\n  に該当するようです)\n\n: break and next        [compat]\n\n  break, next は、引数を指定することでイテレータや yield の値を返す\n  ことができるようになりました。(この機能はまだ実験です)\n\n  break [n] はイテレータを終了させ、n がそのイテレータの戻り値になります。\n  next [n] はブロックを抜け、n が yield の戻り値になります。\n\n: to_str        [compat]\n\n  to_str を定義したオブジェクトはより広範囲にStringとして振舞うように\n  なりました。\n\n  文字列を引数に取るほとんどの組み込みメソッドは、to_str による暗黙の\n  型変換を試みます。\n\n: 範囲演算子式中のリテラル [ruby] [change]\n  範囲演算子式中の単独の数値リテラルが (({$.})) と比較されるのは\n  -e オプションによる1行スクリプトの中だけになりました。\n\n: rescue 節の例外クラスと発生した例外オブジェクトの比較 [ruby] [change]\n\n  発生した例外 $! と rescue 節の例外クラスとは ((<Module#===|Module/===>))\n  を使って比較するようになりました。\n\n  以前は kind_of? による比較なので基本的な動作に変わりはありませんが、\n  SystemCallError.=== は特別に errno が一致する例外を同じと見なすよう\n  に再定義されました。これにより、例えば Errno::EWOULDBLOCK と \n  Errno::EAGAIN が同じ意味(同じerrno)の場合にどちらを指定しても rescue \n  できるようになりました。\n\n  その後、errno が一致する Errno::XXX オブジェクトは同一のオブジェクト\n  になったのでこの変更の効果はなくなってますが、変更自体は残ってます。\n  (ユーザで例外クラスを定義するのに使えるかもしれません)\n  ((<ruby-dev:19589>))\n\n: while, until, class, module, def の値         [ruby] [change]\n\n  while, until, class, module, def が式として値を返すようになりました。\n\n  class/module は最後に評価した式の結果を返します。def は nil を返し\n  ます。while/until は、通常 nil を返しますが、break の引数により任意\n  の値を返すことができます。\n\n: 多重代入 [change]\n\n  多重代入の規則を見直しました。\n\n# # derived from sample/test.rb\n# a = *[]; p a                            # special case\n# def f;  yield; end; f {|a| p a}         # add   (warning)\n# def r; return; end; a = r(); p a\n#           a = nil; p a\n# def f;  yield nil; end; f {|a| p a}\n# def r; return nil; end; a = r(); p a\n#           a = 1; p a\n# def f;  yield 1; end; f {|a| p a}\n# def r; return 1; end; a = r(); p a\n#           a = []; p a\n# def f;  yield []; end; f {|a| p a}\n# def r; return []; end; a = r(); p a\n#           a = [1]; p a\n# def f;  yield [1]; end; f {|a| p a}\n# def r; return [1]; end; a = r(); p a\n#           a = [nil]; p a\n# def f;  yield [nil]; end; f {|a| p a}\n# def r; return [nil]; end; a = r(); p a\n#           a = [[]]; p a\n# def f;  yield [[]]; end; f {|a| p a}\n# def r; return [[]]; end; a = r(); p a\n#           a = [1,2]; p a\n#           a = [*[]]; p a\n# def f;  yield [*[]]; end; f {|a| p a}\n# def r; return [*[]]; end; a = r(); p a\n#           a = [*[1]]; p a\n# def f;  yield [*[1]]; end; f {|a| p a}\n# def r; return [*[1]]; end; a = r(); p a\n#           a = [*[1,2]]; p a\n# def f;  yield [*[1,2]]; end; f {|a| p a}\n# def r; return [*[1,2]]; end; a = r(); p a\n# \n#           a = *nil; p a\n# def f;  yield *nil; end; f {|a| p a}\n# def r; return *nil; end; a = r(); p a\n#           a = *1; p a\n# def f;  yield *1; end; f {|a| p a}\n# def r; return *1; end; a = r(); p a\n#           a = *[]; p a\n# def f;  yield *[]; end; f {|a| p a}                 # add (warning)\n# def r; return *[]; end; a = r(); p a\n#           a = *[1]; p a\n# def f;  yield *[1]; end; f {|a| p a}\n# def r; return *[1]; end; a = r(); p a\n#           a = *[nil]; p a\n# def f;  yield *[nil]; end; f {|a| p a}\n# def r; return *[nil]; end; a = r(); p a\n#           a = *[[]]; p a\n# def f;  yield *[[]]; end; f {|a| p a}\n# def r; return *[[]]; end; a = r(); p a\n#           a = *[1,2]; p a\n# def f;  yield *[1,2]; end; f {|a| p a}            # add\n# def r; return *[1,2]; end; a = r(); p a         # add\n#           a = *[*[]]; p a\n# def f;  yield *[*[]]; end; f {|a| p a}            # add(warning)\n# def r; return *[*[]]; end; a = r(); p a\n#           a = *[*[1]]; p a\n# def f;  yield *[*[1]]; end; f {|a| p a}\n# def r; return *[*[1]]; end; a = r(); p a\n#           a = *[*[1,2]]; p a\n# def r; return *[*[1,2]]; end; a = r(); p a\n# \n# *a = *[]; p a                          # special case\n# def f;  yield; end; f {|*a| p a}\n# def r; return; end; *a = r(); p a\n#          *a = nil; p a\n# def f;  yield nil; end; f {|*a| p a}\n# def r; return nil; end; *a = r(); p a\n#          *a = 1; p a\n# def f;  yield 1; end; f {|*a| p a}\n# def r; return 1; end; *a = r(); p a\n#          *a = []; p a\n# def f;  yield []; end; f {|*a| p a}\n# def r; return []; end; *a = r(); p a\n#          *a = [1]; p a\n# def f;  yield [1]; end; f {|*a| p a}\n# def r; return [1]; end; *a = r(); p a\n#          *a = [nil]; p a\n# def f;  yield [nil]; end; f {|*a| p a}\n# def r; return [nil]; end; *a = r(); p a\n#          *a = [[]]; p a\n# def f;  yield [[]]; end; f {|*a| p a}\n# def r; return [[]]; end; *a = r(); p a\n#          *a = [1,2]; p a\n# def f;  yield [1,2]; end; f {|*a| p a}\n# def r; return [1,2]; end; *a = r(); p a\n#          *a = [*[]]; p a\n# def f;  yield [*[]]; end; f {|*a| p a}\n# def r; return [*[]]; end; *a = r(); p a\n#          *a = [*[1]]; p a\n# def f;  yield [*[1]]; end; f {|*a| p a}\n# def r; return [*[1]]; end; *a = r(); p a\n#          *a = [*[1,2]]; p a\n# def f;  yield [*[1,2]]; end; f {|*a| p a}\n# def r; return [*[1,2]]; end; *a = r(); p a\n# \n#          *a = *nil; p a\n# def f;  yield *nil; end; f {|*a| p a}\n# def r; return *nil; end; *a = r(); p a\n#          *a = *1; p a\n# def f;  yield *1; end; f {|*a| p a}\n# def r; return *1; end; *a = r(); p a\n#          *a = *[]; p a\n# def f;  yield *[]; end; f {|*a| p a}\n# def r; return *[]; end; *a = r(); p a\n#          *a = *[1]; p a\n# def f;  yield *[1]; end; f {|*a| p a}\n# def r; return *[1]; end; *a = r(); p a\n#          *a = *[nil]; p a\n# def f;  yield *[nil]; end; f {|*a| p a}\n# def r; return *[nil]; end; *a = r(); p a\n#          *a = *[[]]; p a\n# def f;  yield *[[]]; end; f {|*a| p a}\n# def r; return *[[]]; end; *a = r(); p a\n#          *a = *[1,2]; p a\n# def f;  yield *[1,2]; end; f {|*a| p a}         # add\n# def r; return *[1,2]; end; *a = r(); p a\n#          *a = *[*[]]; p a\n# def f;  yield *[*[]]; end; f {|*a| p a}\n# def r; return *[*[]]; end; *a = r(); p a\n#          *a = *[*[1]]; p a\n# def f;  yield *[*[1]]; end; f {|*a| p a}\n# def r; return *[*[1]]; end; *a = r(); p a\n#          *a = *[*[1,2]]; p a\n# def f;  yield *[*[1,2]]; end; f {|*a| p a}\n# def r; return *[*[1,2]]; end; *a = r(); p a\n# \n# a,b,*c = *[]; p [a,b,c]                          # special case\n# def f;  yield; end; f {|a,b,*c| p [a,b,c]}\n# def r; return; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = nil; p [a,b,c]\n# def f;  yield nil; end; f {|a,b,*c| p [a,b,c]}\n# def r; return nil; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = 1; p [a,b,c]\n# def f;  yield 1; end; f {|a,b,*c| p [a,b,c]}\n# def r; return 1; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = []; p [a,b,c]\n# def f;  yield []; end; f {|a,b,*c| p [a,b,c]}\n# def r; return []; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [1]; p [a,b,c]\n# def f;  yield [1]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return [1]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [nil]; p [a,b,c]\n# def f;  yield [nil]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return [nil]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [[]]; p [a,b,c]\n# def f;  yield [[]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return [[]]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [1,2]; p [a,b,c]\n# def f;  yield [1,2]; end; f {|a,b,*c| p [a,b,c]}        # add\n# def r; return [1,2]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [*[]]; p [a,b,c]\n# def f;  yield [*[]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return [*[]]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [*[1]]; p [a,b,c]\n# def f;  yield [*[1]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return [*[1]]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [*[1,2]]; p [a,b,c]\n# def f;  yield [*[1,2]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return [*[1,2]]; end; a,b,*c = r(); p [a,b,c]\n# \n#      a,b,*c = *nil; p [a,b,c]\n# def f;  yield *nil; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *nil; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *1; p [a,b,c]\n# def f;  yield *1; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *1; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[]; p [a,b,c]\n# def f;  yield *[]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[1]; p [a,b,c]\n# def f;  yield *[1]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[1]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[nil]; p [a,b,c]\n# def f;  yield *[nil]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[nil]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[[]]; p [a,b,c]\n# def f;  yield *[[]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[[]]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[1,2]; p [a,b,c]\n# def f;  yield *[1,2]; end; f {|a,b,*c| p [a,b,c]}       # add\n# def r; return *[1,2]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[*[]]; p [a,b,c]\n# def f;  yield *[*[]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[*[]]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[*[1]]; p [a,b,c]\n# def f;  yield *[*[1]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[*[1]]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[*[1,2]]; p [a,b,c]\n# def f;  yield *[*[1,2]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[*[1,2]]; end; a,b,*c = r(); p [a,b,c]\n\n: 配列展開 [change]\n\n  以下の挙動を修正しました。\n  現在は、1要素の配列も正常に展開されます。\n\n    a = *[1]\n    p a #=> [1]\n\n    => ruby 1.6.8 (2002-12-24) [i586-linux]\n       [1]\n    => ruby 1.7.1 (2001-06-05) [i586-linux]\n       1\n\n== 追加されたクラス／モジュール\n: ((<Process::UID>))  [new]\n: ((<Process::GID>))  [new]\n: ((<Process::Sys>))  [new]\n: ((<Signal>)) モジュール       [new]\n: ((<Process::Status>))         [new]\n: ((<NoMethodError>))   [new]\n\n  ((<Process::Status>)) の追加により、(({$?})) の値も整数からこのクラ\n  スのインスタンスになりました。\n\n=== クラス階層\n\n: ((<File::Constants>))\n\n  File::Constants は、File クラスでなく IO クラスが include するように\n  なりました。((<ruby-dev:20964>))\n\n: ((<UnboundMethod>)) [compat]\n\n  UnboundMethod クラスは Method クラスのサブクラスではなくなりました。\n  UnboundMethod#call, UnboundMethod#unbind はなくなりました。\n  ((<ruby-core:00927>))\n\n\n: ((<NameError>)) & ((<NoMethodError>)) [change]\n\n  NameError を StandardError のサブクラスに戻しました。\n  クラス階層は以下のようになりました。\n\n    NoMethodError < NameError < StandardError.\n\n: ((<Interrupt>))                       [change]\n  Interrupt は、((<SignalException>))のサブクラスになりました。\n  (1.6以前はExceptionのサブクラス)\n\n== 追加されたメソッド\n=== 組み込み関数\n\n: ((<組み込み関数/warn>))  [new]\n: ((<組み込み変数/$deferr>)) [new]\n\n  追加\n\n  以前は、ruby インタプリタが出力する error/warning メッセージは STDERR\n  固定でしたが、$stderr に変更されました。($deferr はすぐに obsolete に\n  なりました。$stderr を使ってください)\n\n=== ARGF\n\n: ((<ARGF/ARGF.path>)) [new]\n\n  追加 (ARGF.filename の別名) ((<ruby-dev:20197>))\n\n=== Array\n\n: ((<Array#transpose|Array/transpose>)) [new]\n\n  追加\n\n: ((<Array#zip|Enumerable/zip>)) [new]\n: ((<Enumerable#zip|Enumerable/zip>)) [new]\n\n  追加\n\n: ((<Array#fetch|Array/fetch>))     [new]\n\n  追加\n\n: ((<Array#insert|Array/insert>))     [new]\n\n  追加 ((<ruby-talk:14289>))\n\n  (({ary[n,0] = [other,...]})) と同じ(ただし self を返す)\n\n=== Class\n\n: ((<Class#allocate|Class/allocate>))    [new]\n\n    allocate と initialize の二つのメソッドでオブジェクトを\n    生成するようになりました。((<ruby-dev:14847>))\n    rb_define_alloc_func() も参照。\n\n=== Dir\n\n: ((<Dir#path|Dir/path>))       [new]\n\n  追加\n\n=== ENV\n\n: ((<ENV/ENV.clear>)) [new]\n: ((<ENV/ENV.shift>)) [new]\n: ((<ENV/ENV.invert>)) [new]\n: ((<ENV/ENV.replace>)) [new]\n: ((<ENV/ENV.update>)) [new]\n\n  ((<Hash>)) との互換性のために定義されました。\n\n=== Enumerable\n\n: ((<Enumerable#partition|Enumerable/partition>)) [new]\n\n  追加\n\n: ((<Enumerable#sort_by|Enumerable/sort_by>))      [new]\n\n  追加。((<ruby-dev:8986>))以降で提案された Schwartzian transform\n  を行うための sort です。\n\n: ((<Enumerable#all?|Enumerable/all?>))         [new]\n: ((<Enumerable#any?|Enumerable/any?>))         [new]\n: ((<Enumerable#inject|Enumerable/inject>))       [new]\n  追加\n\n=== File\n\n: ((<File/File.extname>)) [new]\n\n  追加。ファイル名の拡張子を返します。((<ruby-talk:37617>))\n\n: ((<File/File.fnmatch>))     [new]\n: ((<File/File.fnmatch?>))    [new]\n  追加\n\n  このメソッドで使用するフラグ FNM_NOESCAPE, FNM_PATHNAME, FNM_PERIOD,\n  FNM_CASEFOLD も((<File::Constants>)) モジュールに定義されました。\n\n: ((<File/File.lchmod>))     [new]\n: ((<File/File.lchown>))     [new]\n  追加\n\n=== File::Stat\n\n: ((<File::Stat#rdev_major|File::Stat/rdev_major>)) [new]\n: ((<File::Stat#rdev_minor|File::Stat/rdev_minor>)) [new]\n\n  追加\n\n=== Float\n\n: ((<Numeric#to_int|Numeric/to_int>)) [new]\n: ((<Float#to_int|Numeric/to_int>)) [new]\n\n  追加。\n\n=== Hash\n\n: ((<Hash#merge|Hash/merge>)) [new]\n: ((<Hash#merge!|Hash/merge!>)) [new]\n\n  追加。Hash#merge は、hash.dup.update と同じ。\n  Hash#merge! は、Hash#update の別名 ((<ruby-talk:59777>)), ((<ruby-dev:19463>))\n\n: ((<Hash#default_proc|Hash/default_proc>)) [new]\n\n  追加 ((<ruby-dev:17966>))\n\n=== IO\n\n: ((<IO/IO.sysopen>)) [new]\n: ((<Socket#sysaccept|Socket/sysaccept>)) [new]\n: ((<TCPServer#sysaccept|TCPServer/sysaccept>)) [new]\n: ((<UNIXServer#sysaccept|UNIXServer/sysaccept>)) [new]\n\n  追加\n\n: ((<IO#sysseek|IO/sysseek>))  [new]\n\n  追加 ((<ruby-talk:21612>)), ((<ruby-talk:36703>))\n\n: ((<IO#fsync|IO/fsync>))     [new]\n\n  追加\n\n: ((<IO/IO.open>))  [new]\n\n  追加\n\n: ((<IO/IO.for_fd>))       [new]\n  追加\n\n: ((<IO/IO.read>))         [new]\n\n  追加。((<ruby-talk:9460>))が実装に至った経緯だと思う\n\n=== LocalJumpError\n\n: ((<LocalJumpError#exit_value|LocalJumpError/exit_value>)) [new]\n: ((<LocalJumpError#reason|LocalJumpError/reason>)) [new]\n\n  追加\n\n=== Marshal\n\n: ((<Marshal/Object#marshal_load>))  [new]\n: ((<Marshal/Object#marshal_dump>))  [new]\n\n  追加 ((<ruby-dev:21016>))\n\n=== MatchData\n\n: ((<MatchData#captures|MatchData/captures>)) [new]\n\n  追加。((<RCR#139>))\n\n: ((<MatchData#select|MatchData/select>)) [new]\n\n  ((<MatchData>)) は、Enumerable ではありませんが、Enumerable#select\n  と同じメソッドが定義されました。\n\n=== Math\n\n: ((<Math/Math.erf>)) [new]\n: ((<Math/Math.erfc>)) [new]\n\n  追加 ((<ruby-list:37753>))\n\n: ((<Math/Math.acos>))          [new]\n: ((<Math/Math.asin>))          [new]\n: ((<Math/Math.atan>))          [new]\n: ((<Math/Math.cosh>))          [new]\n: ((<Math/Math.sinh>))          [new]\n: ((<Math/Math.tanh>))          [new]\n: ((<Math/Math.hypot>))         [new]\n    追加\n\n=== Method\n\n: ((<Method#==|Method/==>)) [new]\n\n  追加\n\n=== Module\n\n: ((<組み込み関数/autoload>))  [change]\n: ((<組み込み関数/autoload?>))  [new]\n: ((<Module#autoload|Module/autoload>))  [new]\n: ((<Module#autoload?|Module/autoload>))  [new]\n\n  ネストしたクラス/モジュールに対する autoload 指定が可能になりました。\n  ((<ruby-dev:16159>)), ((<ruby-dev:16165>)) ((<ruby-dev:18103>)),\n  ((<ruby-dev:19686>))\n\n: ((<Module#const_missing|Module/const_missing>))  [new]\n\n   定義されていない定数を使用したときに const_missing という名のメソッドを\n   呼ぶようになりました。デフォルトでは NameError 例外を発生させます。\n   ((<ruby-core:00441>))\n\n: ((<Module#private_method_defined?|Module/private_method_defined?>)) [new]\n: ((<Module#protected_method_defined?|Module/protected_method_defined?>)) [new]\n\n: ((<Module#public_method_defined?|Module/public_method_defined?>)) [new]\n: ((<Object#methods|Object/methods>)) [change]\n: ((<Module#instance_methods|Module/instance_methods>)) [change]\n\n  追加。変更(仕様の統一)\n\n: ((<Module#include?|Module/include?>)) [new]\n\n  Added. ((<ruby-dev:13941>))\n\n: ((<Module#included|Module/included>))         [new]\n\n  追加。Module#append_feature の後に呼ばれるhook\n\n: ((<Module#method_removed|Module/method_removed>))   [new]\n: ((<Module#method_undefined|Module/method_undefined>)) [new]\n\n  追加\n\n=== NameError\n\n: ((<NameError#name|NameError/name>))                [new]\n\n  追加\n\n=== NilClass\n\n: ((<NilClass#to_f|NilClass/to_f>)) [new]\n\n  追加\n\n=== Numeric\n\n: ((<Numeric#div|Numeric/div>)) [new]\n: ((<Numeric#quo|Numeric/quo>)) [new]\n\n  追加  ((<ruby-dev:19423>))\n\n  ((<ruby-dev:20962>))\n\n      * div    - 整除(divmodの第一要素)\n      * /      - その数型でもっとも自然な商(異論はあるだろうけど)\n      * quo    - もっとも正確に近い商\n      * divmod - 整除と剰余\n\n=== NoMethodError\n\n: ((<NoMethodError#args|NoMethodError/args>))        [new]\n\n  追加\n\n=== Object\n\n: ((<Object#initialize_copy|Object/initialize_copy>)) [change]\n\n  追加\n\n  このメソッドは initialize と同様、自動的に private method になります。\n\n: ((<Object#instance_variable_get|Object/instance_variable_get>)) [new]\n: ((<Object#instance_variable_set|Object/instance_variable_set>)) [new]\n\n  追加\n\n: ((<Object#object_id|Object/object_id>)) [new]\n\n  追加 (Object#id は、obsolete)\n\n: ((<Object#singleton_method_removed|Object/singleton_method_removed>)) [new]\n: ((<Object#singleton_method_undefined|Object/singleton_method_undefined>)) [new]\n\n  追加\n\n=== Proc\n\n: ((<Proc#binding|Proc/binding>)) [new]\n\n  追加\n\n: ((<Proc#to_proc|Proc/to_proc>)) [new]\n\n  追加\n\n# : ((<Precision>)).included      [new]\n# \n#   追加(((<Module#included|Module>)) の再定義)\n\n=== Process\n\n: ((<Process/Process.initgroups>))  [new]\n  追加\n\n: ((<Process/Process.groups>)) [new]\n: ((<Process/Process.groups=>)) [new]\n: ((<Process/Process.maxgroups>)) [new]\n: ((<Process/Process.maxgroups=>)) [new]\n\n  追加\n: ((<Process/Process.detach>)) [new]\n\n  追加\n\n: ((<Process/Process.abort>)) [new]\n: ((<Process/Process.exit>)) [new]\n\n  追加。関数 abort, exit と同じ。\n\n: ((<Process/Process.waitall>))         [new]\n  追加\n\n: ((<Process::Status#pid|Process::Status/pid>)) [new]\n\n  追加\n\n=== Range\n\n: ((<Range#step|Range/step>))     [new]\n\n  追加。step ごとの要素で繰り返します。\n\n: ((<Range#include?|Range/include?>))          [new]\n: ((<Range#member?|Range/member?>))           [new]\n  追加\n\n=== Regexp\n\n: ((<Regexp#to_s|Regexp/to_s>)) [new]\n\n  追加。((<ruby-dev:16909>))\n\n  これにより、\n      re1 = /hogehoge/i\n      re2 = /fugafuga/\n      re3 = / #{re1} | #{re2} /x\n  などと正規表現オブジェクトを正規表現に埋め込めるようになりました。\n\n: ((<Regexp#options|Regexp/options>))          [new]\n  追加\n\n=== Socket\n\n: ((<Socket/Socket.pack_sockaddr_in>))          [new]\n: ((<Socket/Socket.unpack_sockaddr_in>))        [new]\n\n  追加。ソケットアドレス構造体(INET domain)のpack/unpack。\n\n: ((<Socket/Socket.pack_sockaddr_un>))      [new]\n: ((<Socket/Socket.unpack_sockaddr_un>))    [new]\n\n  追加。ソケットアドレス構造体(UNIX domain)のpack/unpack。\n\n: ((<UNIXSocket/UNIXSocket.pair>))              [new]\n: ((<UNIXSocket/UNIXSocket.socketpair>))        [new]\n: ((<UNIXSocket#recv_io|UNIXSocket/recv_io>))   [new]\n: ((<UNIXSocket#send_io|UNIXSocket/send_io>))   [new]\n\n  追加\n\n: ((<UNIXServer#listen|UNIXServer/listen>))     [new]\n: ((<TCPServer#listen|TCPServer/listen>))       [new]\n\n  追加。Socket#((<Socket/listen>))と同じ。\n\n=== String\n\n: ((<String#match|String/match>))      [new]\n\n  追加 re.match(str) と同じ。\n\n: ((<String#lstrip|String/lstrip>))     [new]\n: ((<String#rstrip|String/rstrip>))     [new]\n: ((<String#lstrip!|String/lstrip!>))     [new]\n: ((<String#rstrip!|String/rstrip!>))     [new]\n\n  追加。左端あるいは右端の空白類を取り除きます。\n  rstrip は、右側の \"\\0\" も取り除きます。\n\n: ((<String#casecmp|String/casecmp>))   [new]\n: ((<String#eql?|String/eql?>))         [change]\n\n  casecmp 追加。アルファベットの大小を無視した文字列比較。\n\n  eql? は、((<$=|組み込み変数>)) の値に関らず常にアルファベットの大小\n  を区別するようになりました。\n\n: ((<String#insert|String/insert>)) [new]\n\n  追加\n\n  (({str[n, 0] = other})) と同じ(ただし self を返す)\n\n=== Struct\n\n: ((<Struct/each_pair>)) [new]\n\n  追加。\n\n=== Symbol\n\n: ((<Symbol/Symbol.all_symbols>))      [new]\n  追加 ((<ruby-dev:12921>))\n\n=== SystemCallError\n\n: ((<SystemCallError/SystemCallError.===>))     [new]\n\n  追加 (上記 「rescue 節の...」 を参照のこと)\n  ((<ruby-dev:12670>))\n\n: ((<SystemExit#status|SystemExit/status>))       [new]\n  追加\n\n=== Thread\n\n: ((<Thread#keys|Thread/keys>))     [new]\n  追加。Thread固有データのキーの配列を返します。\n\n\n: ((<Thread#terminate|Thread/terminate>)) [new]\n\n  追加。Thread#kill と同じ。\n\n: ((<Thread#group|Thread/group>)) [new]\n  追加\n\n=== ThreadGroup\n\n: ((<ThreadGroup#enclose|ThreadGroup/enclose>)) [new]\n: ((<ThreadGroup#enclosed?|ThreadGroup/enclosed?>)) [new]\n\n  追加 ((<ruby-dev:20655>))\n\n  ThreadGroup への Thread 追加/削除を(freeze せずに)禁止します。\n\n=== Time\n\n: ((<Time#getgm|Time/getgm>))           [new]\n: ((<Time#getlocal|Time/getlocal>))     [new]\n: ((<Time#getutc|Time/getutc>))         [new]\n: ((<Time#gmt_offset|Time/gmt_offset>)) [new]\n: ((<Time#gmtoff|Time/gmtoff>))         [new]\n: ((<Time#utc_offset|Time/utc_offset>)) [new]\n\n  追加\n\n=== その他\n\n: ((<Array#values_at|Array/values_at>)) [new]\n: ((<Hash#values_at|Hash/values_at>)) [new]\n: ((<ENV/ENV.values_at>)) [new]\n: ((<MatchData#values_at|MatchData/values_at>)) [new]\n: ((<aStruct#values_at|Struct/values_at>)) [new]\n\n  ruby 1.6 の ((<indexes|Array/indexes>)) は、values_at というメソッド\n  名になりました(ruby 1.7 では block なし ((<select|Array/select>)) が\n  indexes の代わりでしたが、こちらも使用すると警告が出ます)。\n\n: ((<Fixnum#to_sym|Fixnum/to_sym>)) [new]\n: ((<String#to_sym|String/to_sym>)) [new]\n\n  追加(Symbol#intern はなくなった)\n\n== 追加された定数\n\n: ((<Float::DIG|Float/DIG>)) [new]\n: ((<Float::EPSILON|Float/EPSILON>)) [new]\n: ((<Float::MANT_DIG|Float/MANT_DIG>)) [new]\n: ((<Float::MAX|Float/MAX>)) [new]\n: ((<Float::MAX_10_EXP|Float/MAX_10_EXP>)) [new]\n: ((<Float::MAX_EXP|Float/MAX_EXP>)) [new]\n: ((<Float::MIN|Float/MIN>)) [new]\n: ((<Float::MIN_10_EXP|Float/MIN_10_EXP>)) [new]\n: ((<Float::MIN_EXP|Float/MIN_EXP>)) [new]\n: ((<Float::RADIX|Float/RADIX>)) [new]\n: ((<Float::ROUNDS|Float/ROUNDS>)) [new]\n\n  追加 ((<ruby-math:0773>))\n\n: ((<Marshal::MAJOR_VERSION|Marshal/MAJOR_VERSION>))          [new]\n: ((<Marshal::MINOR_VERSION|Marshal/MINOR_VERSION>))          [new]\n  追加。Marshal が出力するダンプフォーマットのバージョン番号です。\n  ((<ruby-dev:14172>))\n\n== 拡張されたクラス／メソッド(互換性のある変更)\n\n=== 組み込み関数\n\n: ((<組み込み関数/sprintf>)) [new]\n\n  \"%p\" が追加されました。inspect の結果が利用されます。((<RCR#69>))\n\n: ((<組み込み関数/trap>)) [compat]\n\n  あるシグナルに対して、SIG_DFL や SIG_IGN が割り当てられていた場合、\n  文字列 \"DEFAULT\" や \"IGNORE\" を返すようになりました(以前は、nil を返\n  していました) ((<ruby-talk:67860>))\n\n: ((<組み込み関数/system>)) [compat]\n: ((<組み込み関数/exec>)) [compat]\n\n  第一引数が配列の場合、その一つ目の要素のファイルを環境変数PATHから\n  検索するようになりました。\n\n  また、msdosdjgpp・mswin32・mingw32・bccwin32でも、他のプラットフォームと\n  同様に、引数として配列が与えられた場合はシェルを経由しないようになりました。\n  以前は常にシェルを経由していました(win32系portは2003-01-04に変更)。\n  ((<ruby-dev:19107>))\n\n: ((<組み込み関数/rand>)) [compat]\n\n  乱数生成のアルゴリズムに\n  ((<Mersenne Twister|URL:http://www.math.keio.ac.jp/~matumoto/mt.html>))\n  を使用するようになりました。\n\n: ((<組み込み関数/sprintf>))('%u') [compat]\n\n  sprintf の '%u' で、最上位ビットの繰り返しをあらわす \"..\"  は、付加\n  されないようになりました。((<ruby-dev:16522>))\n\n: ((<組み込み関数/abort>)) [compat]\n\n  終了メッセージを指定できるようになりました。\n\n=== Array\n\n: ((<Array#first|Array/first>)) [compat]\n: ((<Array#last|Array/last>)) [compat]\n\n  省略可能な引数を追加\n\n: ((<Array#push|Array/push>)) [compat]\n: ((<Array#unshift|Array/unshift>)) [compat]\n: ((<Array#insert|Array/insert>)) [compat]\n\n  引数が指定されない場合に、ArgumentError 例外が発生しなくなりました。\n  (何もせずに self を返すだけです)\n\n: ((<Array#[]|Array/[]>)) [compat]\n: ((<Array#[]=|Array/[]=>)) [compat]\n\n  配列のインデックスとして Symbol を指定した場合、Symbol#to_int を呼ば\n  す、例外 ((<TypeError>)) が発生するようになりました。\n  ((<ruby-list:37217>))\n\n: ((<Array/Array.new>))         [compat]\n: ((<Array#fill|Array/fill>))   [compat]\n\n  ブロックの評価結果を fill する値として指定できるようになりました。ブ\n  ロックは要素毎に評価されるので、下のような例では \"val\" が毎回生成さ\n  れます。\n\n: ((<Array/Array.new>))       [compat]\n\n  Array.new の引数に配列を渡すとそのコピーを生成するようになりました。\n\n: ((<Array#pack|Array/pack>))         [compat]\n: ((<String#unpack|String/unpack>))   [compat]\n\n  pack/unpack のテンプレートにコメントを記述できるようになりました。\n\n: ((<Array#pack|Array/pack>))         [new]\n: ((<String#unpack|String/unpack>))   [new]\n\n  64 bit 整数のテンプレート文字 Q/q が追加されました(Quad の意)。\n  Q は unsigned、q は、signed です。\n\n: ((<Array#pack|Array/pack>))      [change]\n: ((<String#unpack|String/unpack>))   [change]\n\n    Array#pack, String#unpack のテンプレート文字 \"p\", \"P\" は、nil と\n    NULLポインタの相互変換を行うようになりました((<ruby-dev:13017>))。\n\n=== Class\n\n: ((<Class#inherited|Class/inherited>)) [change]\n\n  inherited メソッドはクラス定義式の終りに呼び出されるようになりました。\n  ((<ruby-bugs-ja:342>))\n\n=== Dir\n\n: ((<Dir/Dir.glob>)) [compat]\n\n  Dir.glob に第2引数(マッチの挙動を変更するフラグ)を指定できるようにな\n  りました。Dir[] にはこのフラグは指定できません。\n\n  関連して定数 File::FNM_DOTMATCH (FNM_PERIOD の逆の意味)が追加されて\n  います。\n\n: ((<Dir/Dir.chdir>))       [compat]\n  ブロックを指定できるようになりました。\n\n=== ENV\n\n: ((<ENV>)) [change]\n\n  ENV が生成する文字列はすべて ((<Object/freeze>)) されるようになりました。\n  ((<ruby-talk:72732>))\n\n        ENV['environ'] = 'value'\n        ENV['environ'].sub!(/value/, 'VALUE')\n        p ENV['environ']\n\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           \"value\"\n\n  この例のように sub! のような破壊的メソッドの効果がないため混乱すると\n  いうのが理由です(ENVが返す文字列を変更しても環境変数自体に影響がない)。\n\n        => -:2:in `sub!': can't modify frozen string (TypeError)\n                from -:2\n           ruby 1.8.0 (2003-06-09) [i586-linux]\n\n=== Hash\n\n: ((<Hash#update|Hash/update>)) [compat]\n\n  ブロックを指定できるようになりました。重複したキーに対する振舞いを制\n  御できます。\n\n: ((<Hash/Hash.new>))   [compat]\n\n  ハッシュのデフォルト値としてブロックを指定できるようになり\n  ました。ブロックを指定すると空のハッシュ要素の参照に対して\n  その都度ブロックを実行し、その結果を返します。\n  ブロックにはハッシュ自身と、ハッシュを参照したときのキーが渡されます\n\n=== IO\n\n: ((<IO/IO.new>)) [compat]\n\n  ((<File/File.open>)) と同様に mode を数値(つまり、\n  ((<File::Constants>)) の定数) で指定できるようになりました。\n\n: ((<IO#reopen|IO/reopen>)) [compat]\n\n  第二引数を省略したときレシーバのモードをそのまま引き継ぐようになりま\n  した。以前は、第二引数のデフォルト値は \"r\" 固定でした。\n\n: ((<IO#read|IO/read>)) [compat]\n: ((<IO#sysread|IO/sysread>)) [compat]\n\n  IO#read, IO#sysread に第二引数追加(あらかじめ割り当てた読み込み用バッ\n  ファの指定)\n\n=== Method\n\n: ((<Method#inspect|Method/inspect>))   [compat]\n\n  特異メソッドに対する出力形式がより意味のあるものになりました。\n  ((<ruby-bugs-ja:PR#193>))\n\n=== Module\n\n: ((<Module#undef_method|Module/undef_method>)) [compat]\n: ((<Module#remove_method|Module/remove_method>)) [compat]\n\n  一度に複数のメソッドを指定できるようになりました。((<RCR#146>))\n\n: ((<Module#method_added|Module/method_added>)) [compat]\n: ((<Module#singleton_method_added|Module/singleton_method_added>)) [compat]\n\n  拡張ライブラリからメソッドが定義されたときも呼ばれるようになりました。\n  ((<ruby-talk:70471>))\n\n: ((<Module/Module.new>))       [compat]\n: ((<Class/Class.new>))         [compat]\n\n    Module.new, Class.new でブロックが与えられた場合、生成した\n    モジュール/クラスのコンテキストでブロックを実行するように\n    なりました。\n\n=== Numeric\n\n: ((<Numeric#step|Numeric/step>)) [compat]\n\n  ((<Fixnum>)), ((<Integer>)) から移動しました。\n\n=== Object\n\n: ((<Object#singleton_methods|Object/singleton_methods>))         [compat]\n  省略可能な引数 all が追加されました。\n\n: ((<Object#methods|Object/methods>)) [compat]\n: ((<Object#public_methods|Object/public_methods>)) [compat]\n: ((<Object#private_methods|Object/private_methods>)) [compat]\n: ((<Object#protected_methods|Object/protected_methods>)) [compat]\n\n  スーパークラスのメソッドも探索するかどうかを引数で指定できるようにな\n  りました。((<Module#instance_methods|Module/instance_methods>)) など\n  と同じですが、過去との互換性のため引数のデフォルト値が Module のもの\n  とは逆です。(Module#instance_methods などのデフォルト値は将来(1.8.1)\n  変更される予定のようです)\n\n  ((<Object#methods|Object/methods>)) は引数が false の場合にそのオブ\n  ジェクトの特異メソッドのリストを返します。つまり、\n  ((<Object#singleton_methods(false)|Object/singleton_methods>)) と同\n  じです。\n\n  1.7 の変更点も含めて仕様をまとめると\n\n        Object#methods,           Module#instance_methods,\n        Object#public_methods,    Module#public_instance_methods,\n        Object#private_methods,   Module#private_instance_methods,\n        Object#protected_methods, Module#protected_instance_methods\n        Object#singleton_methods\n\n  * 引数が true の場合は、モジュールやスーパークラスを探索する。\n\n  * public_xxx, private_xxx, protected_xxx はそれぞれpublic, private,\n    protected メソッドのみを返す。public_, private_, protected_ がつか\n    ない、methods, instance_methods は、public メソッドと protected\n    メソッドを返す。\n\n  * Object#methods(false) は Object#singleton_methods(false) と同じ。\n\n  * 将来これらのメソッドの引数のデフォルト値は true になる予定だが、\n    Module#xxx_instance_methods と Object#singleton_methods は現状デフォ\n    ルト値が false(過去との互換のため。なお、省略したままだと警告が出る)。\n    デフォルトに頼らないようにするべき、1.6 で使用していたスクリプトを\n    書き換える場合は、false を明示的に指定する。\n\n=== Proc\n\n: ((<Proc#to_s|Proc/to_s>)) [compat]\n\n  Proc#to_s の結果にスクリプトのソースファイル名と行番号が付加されまし\n  た。((<ruby-dev:17968>))\n\n=== Regexp\n\n: ((<Regexp#===|Regexp/===>)) [compat]\n\n  真偽値を返すようになりました。\n\n: ((<Regexp/Regexp.last_match>))    [compat]\n  optional な引数が追加されました。\n\n=== String\n\n: ((<String/String.new>))      [compat]\n\n  String.new の引数を省略できるようになりました。\n\n: ((<String/strip>))     [compat]\n: ((<String/strip!>))    [compat]\n: ((<String/rstrip>))    [compat]\n: ((<String/rstrip!>))   [compat]\n\n  空白類だけでなく \"\\0\" も strip するようになりました。((<ruby-talk:76659>))\n\n: ((<String#scan|String/scan>)) [change]\n: ((<String#split|String/split>)) [change]\n: ((<String#sub|String/sub>)), ((<String#sub!|String/sub!>)) [change]\n: ((<String#gsub|String/gsub>)), ((<String#gsub!|String/gsub!>)) [change]\n: ((<String#~|String/~>)) [obsolete]\n: ((<String#=~|String/=~>)) [obsolete]\n: ((<組み込み変数/$;>))   [compat]\n: ((<組み込み変数/$-F>))  [compat]\n: ((<Rubyの起動/-F((*regexp*))>))    [compat]\n\n  pattern として正規表現でなく文字列を指定したとき、それを正規表現にコ\n  ンパイルせず文字列そのものをパターンとして扱うようになりました。(よ\n  り正確には、Regexp.compile(arg) でなく\n  Regexp.compile(Regexp.quote(arg)) するようになりました)\n\n  ((<String#~|String/~>)), ((<String#=~|String/=~>)) は、obsolete にな\n  りました。(String#~ はここにあげた変更が反映された上で obsolete)\n\n#   str =~ arg だけは、arg が文字列のとき、\n#   Regexp.compile(Regexp.quote(arg)) =~ str と等価な str.index(arg) が\n#   実行されます(したがって、$~ は設定されません)。\n\n  $; の指定に正規表現が許されるようになりました。これに伴い、文字列以\n  外を設定しても例外 ((<TypeError>)) は発生しないようになりました。\n  ((<ruby-talk:77381>))\n\n: ((<String#center|String/center>)) [compat]\n: ((<String#ljust|String/ljust>)) [compat]\n: ((<String#rjust|String/rjust>)) [compat]\n\n  空白の代わりに詰め込む文字列を第二引数で指定できるようになりました。\n\n: ((<String#[]|String/[]>))     [change]\n: ((<String#[]=|String/[]=>))   [change]\n\n  第一引数が正規表現を渡す形式で、オプションの第二引数 idx が追加されました。\n  str[/re/, 0] は、str[/re/] と同じです。\n\n=== Struct\n\n: ((<Struct>)) [compat]\n\n   Struct が適切なハッシュ値を持つよう Struct#hash, Struct#eql? が定義\n   されました。((<ruby-bugs:PR#758>))\n\n: ((<aStruct#inspect|Struct>)) [compat]\n\n  出力形式が少しだけ変わりました。\n\n=== Socket\n\n: ((<TCPSocket/TCPSocket.new>))   [compat]\n: ((<TCPSocket/TCPSocket.open>))  [compat]\n  ローカル側アドレスを省略可能な第3,4引数で指定できるようになりました。\n\n=== Thread\n\n: ((<Thread#join|Thread/join>))  [compat]\n\n  スレッドを待ち合わせる時間を limit で指定できるようになりました。\n\n: ((<Thread/Thread.list>)) [compat]\n: ((<ThreadGroup#list|ThreadGroup/list>)) [compat]\n  終了中(aborting)のスレッドもリストに含まれるようになりました。\n  ((<rubyist:1282>))\n\n=== Time\n\n: ((<Time>))            [compat]\n  負の time_t を扱えるようになりました(OSがサポートしている場合に限る)\n    p Time.at(-1)\n    => Thu Jan 01 08:59:59 JST 1970\n\n=== UnboundMethod\n\n: ((<UnboundMethod#bind|UnboundMethod/bind>)) [compat]\n\n  UnboundMethod オブジェクトをそれが定義されたクラスのサブクラスへ\n  bind しても良いことになりました。\n\n=== その他\n\n: ((<NameError/NameError.new>))(msg[, name])            [compat]\n: ((<NoMethodError/NoMethodError.new>))(msg, name, args)    [compat]\n: ((<SystemCallError/SystemCallError.new>))(msg, err)         [compat]\n: ((<Errno::EXXX>)).new(msg)                   [compat]\n\n  内部の実装でインスタンス変数を初期化していなかったために warning が\n  出ていたのを修正しました。そして、new のパラメータでその値を指定でき\n  るように変更されました。\n\n: ((<SystemExit#initialize|SystemExit/SystemExit.new>)) [compat]\n\n  引数が追加されました。\n\n: ((<String#to_i|String/to_i>)) [compat]\n: ((<Integer#to_s|Integer/to_s>)) [compat]\n\n  引数に基数(2,8,10,16)を指定できるようになりました。\n  (2002-01-26: 引数が 0 のときは prefix で基数を判定する)\n\n  基数変換で、2, 8, 10, 16 進だけでなく、2 .. 36進数までの任意の基数へ\n  の変換をサポートしました。((<ruby-dev:20021>))\n\n# 別に影響ない変更なのでコメント\n# : ((<Class/Class.inherited>)) [compat]\n# \n#   (注: Class#inherited ではありません)\n# \n#   以前は、クラスのサブクラスの定義を禁止するために定義されていましたが、\n#   (((<TypeError>))例外を発生させるメソッドとして定義されていました) こ\n#   の役割は Class.new が担保するようになりました。そのため、\n#   Class.inherited メソッドの定義はなくなりました。\n# \n#     class SubClass < Class\n#     end\n# \n#     #=> -:1:in `inherited': can't make subclass of Class (TypeError)\n#                 from -:1\n#         ruby 1.7.1 (2001-06-12) [i586-linux]\n# \n#     #=> -:1: can't make subclass of Class (TypeError)\n#         ruby 1.7.1 (2001-07-31) [i586-linux]\n\n== 変更されたクラス／メソッド(互換性のない変更)\n\n=== 組み込み関数\n\n: ((<組み込み関数/Integer>))() [change]\n\n  数値や文字列以外のオブジェクトを整数に変換するときに to_i ではなく \n  to_int を使用するようになりました。\n\n: ((<組み込み関数/Float>))() [change]\n\n  Float() は、引数に nil を受け付けなくなりました。\n\n        p Float(nil)\n\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           0.0\n        => -:1:in `Float': cannot convert nil into Float (TypeError)\n                from -:1\n           ruby 1.7.3 (2002-09-02) [i586-linux]\n\n=== ARGF\n\n: ((<ARGF#to_s|ARGF/to_s>)) [change]\n\n  結果は \"ARGF\" 固定になりました。ファイル名は ARGF.path で取得します。\n\n=== ARGV\n\n: ((<組み込み定数/ARGV>)) [change]\n\n  ARGV の各要素は freeze されるようになりました。\n\n        ruby -v -e 'p ARGV.collect {|v| v.frozen?}' a b c\n\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           [false, false, false]\n        => ruby 1.8.0 (2003-08-11) [i586-linux]\n           [true, true, true]\n\n=== Array\n\n: ((<Array#sort!|Array/sort!>))     [change]\n\n  常にself返すようになりました。\n\n  将来にわたってこのことが保証されるわけではないそうです ((<ruby-dev:12506>))。\n\n: ((<Array#reverse!|Array/reverse!>)) [change]\n\n  サイズが 1 以下の配列に対して以前は nil を返していましたが、self を\n  返すようになりました。((<String#reverse!|String/reverse!>)) の挙動と\n  同じです。((<ruby-dev:20135>))\n\n: ((<Array#-|Array/->)) [change]\n\n  差を求めるときに重複した値は取り除かなくなりました。\n\n=== Comparable\n\n: ((<Comparable>)) [change]\n\n  obj#<=> が nil を返すような引数に対して、>, >=, <, <= が例外\n  ((<ArgumentError>)) を起こすようになりました。また、== は、nil を返\n  すようになりました。\n\n: ((<Module/Module#>>)) [change]\n: ((<Module/Module#<>)) [change]\n: ((<Module/Module#<=>)) [change]\n\n  継承関係にないクラス同士の比較で nil を返すようになりました。\n  ((<ruby-dev:20190>))\n\n#   ((<Module/Module#<=>)) は、1.7 で nil を返すように変更されていました\n#   が、その後、-1 に、その後再度 nil におさまりました。\n\n: ((<String#<=>|String/<=>>)) [change]\n: ((<Comparable>)) [change]\n\n  string <=> other は、((|other|)) が文字列でない場合、\n  ((|other|)).to_str と ((|other|)).<=> が定義されていれば (({0 -\n  (other <=> string)})) の結果を返します。そうでなければ nil を返します。\n  ((<ruby-dev:19625>))\n\n        class Foo\n          def to_str\n            \"foo\"\n          end\n          def <=>(o)\n            p \"<=> called\"\n            self.to_str <=> o\n          end\n        end\n\n        p \"foo\" <=> Foo.new\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           0\n        => ruby 1.8.0 (2003-05-02) [i586-linux]\n           \"<=> called\"\n           0\n\n: ((<String#==|String/==>))    [change]\n: ((<Numeric#==|Numeric/==>))  [change]\n\n  Comparable の変更と合わせて <=> が nil を返すとき == が nil を返すよ\n  うになりました。((<ruby-dev:20759>))\n\n=== Dir\n\n: ((<Dir/Dir.open>))        [change]\n  ブロックを伴う場合((<File>)).openと同様に、ブロックの結果がメソッドの\n  戻り値になりました。(1.6以前は (({nil})) 固定)\n\n: ((<Dir/Dir.glob>))        [change]\n  先行するバックスラッシュにより、ワイルドカードをエスケープ\n  できるようになりました。\n  また、空白類に特殊な意味はなくなりました('\\0'の効果は残っています)。\n\n=== Enumerable\n\n: ((<Enumerable#find|Enumerable/find>)) [change]\n\n  引数に文字列を指定できなくなりました。\n\n  また、要素が見つからなかった場合は、ifnone の結果を返すようになりました。\n\n=== File\n\n: ((<File/File.basename>)) [CHANGE]\n: ((<File/File.dirname>)) [CHANGE]\n\n  File.dirname と File.basename の動作が ((<SUSv3|URL:http://www.unix-systems.org/version3/online.html>)) に従うようになりました。\n\n  ((<ruby-dev:19548>)) [PATCH] file.c for ((<ruby-bugs-ja:PR#389>))\n  and ((<ruby-bugs-ja:PR#390>))\n\n        p File.dirname(\"foo/bar/\")\n        p File.dirname(\"foo//bar\")\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           \"foo/bar\"\n           \"foo/\"\n        => ruby 1.8.0 (2003-05-02) [i586-linux]\n           \"foo\"\n           \"foo\"\n\n        p File.basename(\"foo/bar/\")\n        p File.basename(\"foo//bar\")\n        ruby 1.6.7 (2002-03-19) [i386-linux]\n        \"\"\n        \"bar\"\n        ruby 1.8.1 (2003-12-27) [i686-linux]\n        \"bar\"\n        \"bar\"\n\n=== Float\n\n: ((<Float#to_s|Float/to_s>)) [change]\n\n  最大の精度を示すためのフォーマットが \"%.10g\" から \"%.16g\" に変わりま\n  した。(2003-03-20: その後、\"%.15g\" になりました ((<ruby-bugs-ja:PR#406>)))\n\n=== Module\n\n: ((<Module#include|Module/include>)) [change]\n\n  トップレベルの include は、第二引数に true を指定した load でロード\n  されるスクリプトのもとではモジュールの機能を self に \n  ((<Object/extend>)) するように変更されました。\n\n: ((<Module#include|Module/include>)) [change], [experimental]\n\n  wrapper モジュールで評価される file (load(file, true)) 中で、トップ\n  レベルの include を行ったとき、Module を include する対象が Object で\n  なく、wrapper モジュールになりました。\n  つまり、load(file, true) で、file をロードしたときに file 中で\n  include を実行していても呼び出し元に影響しなくなりました。\n\n  ((*これは実験的な変更です*))\n\n: ((<Module#include|Module/include>)) [change]\n: ((<Object#extend|Object/extend>))  [change]\n\n  複数のモジュールを渡したときにインクルードされる順序が変更されました。\n  ((<ruby-dev:16035>))\n  extend も同様だそうです。((<ruby-dev:16183>))\n\n  一つ一つ include した場合とは逆順になります。\n\n=== Object\n\n: ((<Object#clone|Object/clone>)) [change]\n\n  Numeric など immutable なオブジェクトは clone できなくなりました。\n  ((<ruby-bugs-ja:PR#94>)), ((<rubyist:0831>))\n\n=== Range\n\n: ((<Range#max|Range/max>)) [change]\n: ((<Range#min|Range/min>)) [change]\n: ((<Range#include?|Range/include?>)) [change]\n: ((<Range#member?|Range/member?>)) [change]\n\n  Range#max, Range#min, Range#include? が <=> メソッドによる範囲演算で\n  求められるようになりました。((<ruby-list:35253>)), ((<ruby-dev:17228>))\n  (2003-03-18: min, max は元に戻りました。((<ruby-dev:19837>)))\n\n  Range#member? は each を利用して全要素を参照し、実際にメンバが存在するか\n  確認します。(Enumerable#member? と同じ)\n\n  1.6 までは、max, min, member? include? は、Enumerable のメソッドで、\n  === は、Range のメソッドです。1.7 では、max, min, member?, include?,\n  === はすべて Range のメソッドで、include? は === の別名になっていま\n  す。(1.8 では、max, min は、Enumerable のメソッドに戻っています)\n\n: ((<Range#each|Range/each>)) [change]\n\n  Range#each は各要素の succ メソッドを使用してイテレーションするよう\n  になりました。\n\n=== Regexp\n\n: ((<Regexp/Regexp.new>)) [change]\n\n  第一引数に正規表現を与えた時に引数のオプションを無視し、元のオプショ\n  ンを保持した複製を返すようになりました。\n\n        p Regexp.new(//is, Regexp::EXTENDED, \"e\")\n\n        => ruby 1.6.8 (2003-08-03) [i586-linux]\n           //xe\n        => -:1: warning: flags and encoding ignored\n           ruby 1.8.0 (2003-02-16) [i586-linux]\n           //is\n\n=== String\n\n: ((<String#chomp|String/chomp>))       [change]\n: ((<String#chomp!|String/chomp!>))     [change]\n: ((<組み込み関数/chomp>))              [change]\n: ((<組み込み関数/chomp!>))             [change]\n\n  $/ が \"\\n\" (デフォルト)のとき、どの行末形式(\"\\r\\n\", \"\\r\",\n  \"\\n\" のいずれでも)でもそれらを取り除くようになりました。\n\n=== ThreadGroup\n\n: ((<ThreadGroup#freeze|ThreadGroup/freeze>)) [change]\n\n  freeze された ThreadGroup に Thread を追加/削除できなくなりました。\n\n=== Time\n\n: ((<Process/Process.times>))           [change]\n  ((<Time/Time.times>)) から移動しました。\n  (Time.times も残っていますが、warningが出ます)\n\n: ((<Time#to_a|Time/to_a>))       [change]\n: ((<Time#zone|Time/zone>))       [change]\n  gmtime なタイムゾーンに対して\"UTC\"を返すようになりました\n  (以前は環境依存。大抵の場合\"GMT\")\n\n== 文法の変更\n\n: parser [compat]\n\n  数字で始まるグローバル変数は特殊変数 $1, $2, ... 以外に許されなくな\n  りました。\n\n: [parser], [change]\n\n  `*' による配列展開が、多重代入の右辺で行われた場合、to_ary だけでな\n  く、to_a も配列展開のための配列化に利用されるようになりました(ただし、\n  Object#to_a は対象外。Object#to_a は将来削除される予定です)。\n\n: [parser]\n\n  スコープ演算子 `::' を伴う定数代入を許すようになりました。\n        p Object::Foo = 1\n  また、\"class Foo::Bar; end\" という定義も可能になりました。\n\n: [parser]\n\n  (({.<digit>}))はFloatのリテラルではなくなりました。\n\n: [parser] [experimental]\n\n  実験的な修正のようです。\n\n      a = 1\n      p a / 5\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           0\n        => ruby 1.8.0 (2003-03-12) [i586-linux]\n           0\n\n      a = 1\n      p a /5\n        => -:2: warning: ambiguous first argument; make sure\n           -:2: unterminated regexp meets end of file\n           ruby 1.6.8 (2002-12-24) [i586-linux]\n        => ruby 1.8.0 (2003-03-12) [i586-linux]\n           0\n\n: [parser] [new]\n\n  シンボルの拡張表記法が採用されました。((<ruby-dev:18537>))\n\n        p :\"foo#{\"bar\"}\"\n        p :'foo#{\"bar\"}'\n        p %s{foo#{\"bar\"}}\n\n        => ruby 1.7.3 (2002-11-14) [i586-linux]\n           :foobar\n           :\"foo\\#{\\\"bar\\\"}\"\n           :\"foo\\#{\\\"bar\\\"}\"\n\n: rescue修飾式 [parser] [change]\n\n  rescue 修飾式の優先度が変わりました。これは、実験的なもののようです。\n  (1.8 リリースで残っているので正式採用のようです)\n\n        a = b rescue c\n\n  は、\n\n        (a = b) rescue c\n\n  でなく\n\n        a = (b rescue c)\n\n  と評価されます。\n\n: [parser] [compat]\n\n  メソッド定義の外での return の呼び出しはコンパイル時でなく実行時に\n  エラーになるようになりました。\n\n        p :doing\n        return\n        => -:2: return appeared outside of method\n           ruby 1.6.7 (2002-03-01) [i586-linux]\n        => ruby 1.7.3 (2002-10-04) [i586-linux]\n           :doing\n           -:2: unexpected return\n\n: [parser] [compat]\n\n  ネストしたメソッド定義が許されるようになりました。\n\n  メソッド定義中での alias, undef も許可されました。\n\n  メソッド定義の外での super の呼び出しはコンパイル時でなく実行時に\n  エラーになるようになりました。\n\n  おそらく、((<ruby-dev:16969>)) あたりが変更の理由なのではないかと思\n  います。((<ruby-dev:17882>))\n\n: ((<%W()|リテラル/%記法>)) [parser]\n\n  %W(...) 配列リテラルが追加されました。%w() と異なりバックスラッシュ\n  記法や式展開が有効です。((<ruby-dev:15988>))\n\n: ((<リテラル/式展開>)) [parser]\n\n  #{ ... } の式展開中に文字列のデリミタを含めて任意の ruby プログラム\n  をそのまま書けるようになりました。以前も同じでしたが、よりルールが明\n  確になっているようです。つまり、式展開の中も外も同じ規則で、ruby プ\n  ログラムはパースされます。((<ruby-dev:17422>))\n\n: [parser] [compat]\n\n  文字列リテラル中の行頭の __END__ は、スクリプトの終りとみなさなくな\n  りました。((<ruby-dev:17513>))\n\n        # p \"\n        #__END__\n        #\"\n        p eval(%Q(p \"\\n__END__\\n\"))\n\n: ((<?<whitespace>|リテラル/数値リテラル>)) [parser] [change]\n\n  ?スペース、?改行、?TAB 等はリテラルとして無効になりました。必要なら \n  ?\\s, ?\\n, ?\\t 等を使用してください。(以下の例は前者がダブルクォート\n  を使用していることに注意) ((<ruby-bugs-ja:PR#261>)), ((<ruby-dev:17446>))\n\n: [parser] [change]\n: ((<String#to_f|String/to_f>)) [change]\n: ((<組み込み関数/Float>))() [change]\n\n  文字列を浮動小数点数に変換する内部処理で、ライブラリ関数 strtod(3) \n  に依存しなくなりました。ロケールやライブラリの独自拡張により動作が変\n  わることはなくなりました。\n\n: メソッド呼び出し      [parser] [change]\n\n  メソッド名と括弧の間に空白があるとその括弧は引数を括る括弧ではなく\n  式の括弧と解釈するようになりました。\n  (ただし、p (1, 2) とすると空白があっても引数を括る括弧になる。\n  つまり、(おそらく)意図通りに動作する)\n\n    p (1+2)*3\n\n: 条件式中の正規表現リテラル    [parser] [change]\n\n  条件式中の正規表現リテラルは警告が出るようになりました。\n\n  $_ との正規表現マッチは、明示的に ~/re/ (単項の ((<Regexp/~>)) メソッ\n  ド)などとすることが推奨されます。\n\n== 正規表現\n\n: ((<正規表現>)) [regexp]\n\n  正規表現 $ が改行の前だけでなく、常に文字列の末尾にもマッチするよう\n  になりました。これは、perl や python と同じ挙動です。((<ruby-dev:20104>))\n\n: ((<正規表現>)) [regexp]\n\n  ((<ruby 1.8 feature/2003-05-01>)) の $ の変更と同様に、正規表現 \\Z\n  が改行の前だけでなく、常に文字列の末尾にもマッチするようになりました。\n  これは、perl や python と同じ挙動です。((<ruby-dev:20187>))\n\n: ((<正規表現>)) [regexp]\n\n  文字クラス [] 内の [, ], - をエスケープなしで使用すると warning が出\n  るようになりました。((<ruby-dev:19868>))\n\n== Marshal\n\n: ((<Marshal/Marshal.dump>)) [marshal] [change]\n\n4.7->4.8\n: ((<Marshal>))         [marshal] [change]\n  無名モジュールを include したオブジェクトがダンプできなくなりました。\n  ((<ruby-dev:18186>))\n\n  名前付きモジュールを include したオブジェクトはダンプでき、include \n  したモジュールの情報をダンプフォーマットに保持するようになりました。\n\n  名前付きモジュールを include したオブジェクトはダンプでき、include\n  したモジュールの情報をダンプフォーマットに保持するようになりました。\n\n4.6->4.7\n: ((<Marshal>))         [marshal] [change]\n\n  Float のダンプが、sprintf(3) に依存しなくなりました。フォーマッ\n  トバージョンが 4.6 から 4.7 に上がっています。\n  (この後、strtod(3) の組み込みにより、読み込み時もシステムの strtod(3)\n  に依存しなくなっています)\n\n: ((<Marshal>))       [bug]\n\n  構造体クラスのサブクラスをダンプしたものがロードできませんでした。\n  ((<ruby-bugs-ja:PR#104>))\n\n        S = Struct.new(\"S\", :a)\n        class C < S\n        end\n        p Marshal.load(Marshal.dump(C.new))\n\n        => -:4: warning: instance variable __member__ not initialized\n           -:4:in `dump': uninitialized struct (TypeError)\n                from -:4\n           ruby 1.6.5 (2001-09-19) [i586-linux]\n\n        => ruby 1.7.1 (2001-10-19) [i586-linux]\n           #<C a=nil>\n\n== Windows 対応\n\n: ((<File/File.link>)) [new]\n\n  Win32(Win2k以降のみ)でNTFS上でのハードリンクの作成(CreateHardLink)に\n  対応しました。\n\n: ((<File/File.utime>)) [new]\n\n  Win32(NT系のみ)でディレクトリに対するutimeが出来るようになりました。\n\n* DOSISHなプラットフォームでのドライブレター対応が強化されました。\n* ((<Process/Process.pid>)) (win)\n\n  ((<mswin32>))版 ruby と ((<MinGW>))版 ruby で拡張ライブラリのバイナ\n  リ互換を保つようになりました。Config::CONFIG['RUBY_SO_NAME'] が\n  msvcrt-ruby((|XX|)) に(DLL 名になります)、Config::CONFIG['sitearch'] (拡張\n  ライブラリの置き場所のパス要素)が \"i386-msvcrt\" に変更されました。\n  ((<ruby-dev:17144>)), ((<ruby-dev:18047>))\n\n  Win32用の双方向パイプサポートのパッチが取り込まれたのだそうです\n  ((<ruby-win32:185>))\n\n: ((<Process/Process.kill>)) [compat]\n\n  ChangeLog によると win32 でも、シグナル 0 がサポートされたそうです。\n  多くの Unix で、シグナル 0 の送信は、プロセスの存在チェックに使用で\n  きますので、それと同じ動作をするのだと思います。\n\n: ruby interpreter (win32, MinGW) [ruby] [change]\n\n  ((<mswin32>))版 ruby と ((<MinGW>))版 ruby で拡張ライブラリのバイナ\n  リ互換を保つようになりました。Config::CONFIG['RUBY_SO_NAME'] が \n  msvcrt-ruby((|XX|)) に(DLL 名になります)、Config::CONFIG['sitearch'] (拡張\n  ライブラリの置き場所のパス要素)が \"i386-msvcrt\" に変更されました。\n  ((<ruby-dev:17144>)), ((<ruby-dev:18047>))\n\n  sitearch は、今回の件で新規追加されました(他の環境では \n  CONFIG['arch'] と同じ)\n\n  ((<Win32ネイティブ版>)) の脚注も参照\n\n: ENV[\"PATH\"]    [ruby], [bug?]\n\n  Windows などのプラットフォームで環境変数名 PATH (セキュリティチェッ\n  ク時などに判断)の大文字と小文字を区別しないようになりました。\n  ((<ruby-dev:20374>))\n\n: 双方向パイプ (win) [compat]\n\n  Win32用の双方向パイプサポートのパッチが取り込まれたのだそうです \n  ((<ruby-win32:185>))\n\n: ((<Process/Process.kill>))    [compat]\n\n  ((<mswin32>)), ((<mingw32>)) でも、Process.kill(9, pid) でプロセスを\n  強制終了(TerminateProcess) できます。(Process.kill(\"KILL\", pid) とは\n  できないようです・・・2002-08-28 その後 \"KILL\" で指定できるようになっ\n  たようです)\n\n: win32: map OS error to errno. [change]\n\n: cygwin\n\n  cygwinでは常にバイナリモードになりました(((<ruby-dev:19583>)))\n\n: ((<File/File.dirname>)) [CHANGE]\n: ((<File/File.expand_path>)) [CHANGE]\n: ((<File/File.join>)) [CHANGE]\n\n  DOSISHなプラットフォームでのドライブレター対応が強化されました。\n  ((<DOSISH 対応>))を参照。\n\n: ((<Process/Process.pid>)) (win) [change]\n\n  mswin32 版と mingw32 版で、ruby 内部はプロセスIDを常に正の値に変換して\n  扱うようになりました。\n  NT系のOSでは従来と違いはありませんが、Win9x系のOSでは、OSの保持する\n  プロセスIDが負値なので、符号変換して扱うようになります。((<ruby-dev:18263>))\n\n== 廃止された(される予定の)機能\n\n: ((<組み込み変数/$defout>)) [obsolete]\n: ((<組み込み変数/$deferr>)) [obsolete]\n\n  $stdout, $stderr を使用してください。\n\n: ((<String#=~|String/=~>)) [obsolete]\n: ((<String#~|String/~>))  [obsolete]\n  string =~ string に対して警告が出るようになりました。明示的に string\n  =~ regexp あるいは regexp =~ string を使うことが推奨されます。\n  (1.8.1 以降使用できなくなるかもしれません) ((<ruby-list:37662>))\n\n  String#=~ の変更と同様にString#~ で警告が出るようになりました。\n  (1.8.1 以降使用できなくなるかもしれません)\n\n: ((<Object#id|Object/id>))\n: ((<Object#type|Object/type>)) [obsolete]\n\n  使うと警告が出るようになりました。代わりに Object#object_id,\n  Object#class を使用してください。\n\n: ((<Object#to_a|Object/to_a>)) [obsolete]\n\n  警告メッセージが出るようになりました。(((<obsolete>)) になるのだそうです)\n\n: ((<Range#size|Range/size>))     [obsolete]\n: ((<Range#length|Range/length>)) [obsolete]\n\n  このメソッドはなくなりました。\n  ((<ruby-talk:64479>)), ((<ruby-talk:72133>))\n\n  Range の要素数を得るには\n\n        p((\"a\"..\"z\").to_a.size)\n\n  などとする必要があります。\n\n: ((<Array/indexes>))\n: ((<Array/indicies>))\n\n  (((<Array>)), ((<Hash>)), ((<ENV>))) のメソッド、indexes, indicies \n  は values_at という名前に変わりました。\n\n: ((<Array#filter|Array/filter>))\n\n  なくなりました。\n\n: Time.times\n\n  ((<Process/Process.times>)) に移動しました。\n\n: NotImplementError             [obsolete]\n\n  旧称は削除されました。((<NotImplementedError>))を使ってください\n\n: ((<Proc#yield|Proc/yield>))\n\n  なくなりました。((<ruby-dev:20180>))\n\n== ライブラリ\n\n: ((<tmpdir>)) [new]\n\n  テンポラリディレクトリを取得するためのライブラリが追加されました。\n  Windows などで利用されるライブラリは、/tmp をハードコードせずに(ま\n  た 環境変数 TEMP などを参照せずに)このライブラリを使用するべきです。\n  (tempfile などが tmpdir を使用するようになりました。\n  ((*tmp*))dir と ((*temp*))file というのがまたなんとも・・・)\n\n\n: ((<Timeout/Timeout.timeout>)) [lib] [new]\n: ((<Timeout::Error|Timeout/Error>)) [lib] [new]\n\n  timeout に Timeout モジュールが定義されました。((<RCR#121>))\n\n  関数 ((<timeout/timeout>)) は、モジュール関数 Timeout.timeout の別名に、\n  例外 ((<TimeoutError>)) は Timout::Error の別名になりました。\n\n: ((<erb>))           [lib] [new]\n\n  追加\n\n: ((<\"io/wait\">))     [lib] [new]\n\n  追加\n\n: ((<mkmf>)) [lib] [new]\n\n  新しい判定メソッド have_type(), check_sizeof() が追加されました。\n\n: ((<pathname>))        [lib] [new]\n\n  追加\n\n: ((<resolv>))       [lib] [compat]\n\n  Win32 に対応しました。\n\n: ((<webrick>))      [lib] [new]\n\n  追加\n\n: ((<openssl>))      [lib] [new]\n\n  追加\n\n: ((<win32ole|WIN32OLE>)) [lib] [new]\n\n  追加\n\n: ((<un>)) [lib] [new]\n\n  追加\n\n: ((<csv>)) [lib], [new]\n\n  追加。\n\n: ((<tk|tk>)) [lib], [change]\n\n  Ruby/Tk に多数の修正が入りました。((<ruby-list:37798>))\n\n: ((<drb>)) [lib] [new]\n\n  dRuby 追加。((<ruby-dev:20363>))\n\n: ((<rexml>)) [lib],[new]\n\n  追加\n\n: ((<yaml|YAML>)) [new]\n\n  追加。YAML は、YAML Ain't Markup Language だそうです。\n  ((<URL:http://yaml4r.sourceforge.net/>))\n  ((<URL:http://yaml.org/>))\n\n: ((<zlib>)) [lib] [new]\n\n  追加\n\n: ((<bigdecimal>)) [lib] [new]\n\n  追加\n\n: ((<\"test/unit\"|Test::Unit>)) [new]\n\n  Test::Unit 追加\n\n: ((<\"win32/registry\">)) [new]\n  Win32でレジストリにアクセスするためのライブラリが追加されました。\n\n: ((<profiler>)) [lib] [new]\n\n  追加。((<profile>)) の実体として分離されました。\n\n: ((<open-uri>)) [lib] [new]\n\n  追加\n\n: ((<set>)) [lib] [new]\n\n  追加\n\n: ((<\"net/ftp\">)) [new]\n\n  メソッド set_socket 追加\n\n: ((<dl>)) [lib] [new]\n\n  追加\n\n: 添付ライブラリ [lib] [new]\n\n  以下のライブラリが新たに追加されました。\n  ((<iconv>)), ((<tsort>)), ((<StringIO>)), ((<strscan>)),\n  ((<fileutils>)), racc/*\n\n: ((<benchmark>)) [new]\n  added\n\n: Curses        [lib] [compat]\n\n  Updated.  New methods and constants for using the mouse, character\n  attributes, colors and key codes have been added.\n\n: Complex#to_i          [lib] [obsolete]\n: Complex#to_f          [lib] [obsolete]\n: Complex#to_r          [lib] [obsolete]\n\n  Complex#to_i, #to_f, #to_r はなくなりました。\n  ((<ruby-bugs-ja:PR#102>)), ((<rubyist:0879>))\n\n: ((<gdbm>))    [lib] [change]\n: ((<dbm>))     [lib] [change]\n: ((<sdbm>))    [lib] [change]\n\n  ((*ドキュメント未反映*))\n  ((<ruby-dev:16126>))\n\n: ((<mkmf>)), extmk [lib] [compat]\n\n  extmk と mkmf をマージする作業が開始されました。extmk は \n  mkmf を利用するようになりました。mkmf もこれに伴い変更が行われ\n  ています。((<ruby-dev:18109>))\n\n: ((<\"net/ftp\">)) [compat]\n\n  getbinaryfile() の第二引数(ローカルファイル名)が省略可能になりました。\n  メソッド get(), put(), binary(), binary = 追加\n\n: ((<\"net/http\">)) [compat]\n  Net::HTTP のクラスメソッドで ((<URI>)) オブジェクトが使えるようになった。\n\n      Net::HTTP.get_print(URI.parse('http://www.ruby-lang.org/ja/'))\n\n  インスタンスメソッドでは使えないので注意。\n\n: ((<readline>))                [change]\n\n  Readline.readline 実行中に Ctrl-C により中断した後でも、端末状態を\n  復帰するようにしました。((<ruby-dev:14574>))\n\n== 拡張ライブラリAPI\n: rb_define_alloc_func() [api] [new]\n: rb_undef_alloc_func() [api] [new]\n\n  追加。((<Class/allocate>)) メソッドの定義に使用します。\n  ((<ruby-dev:19116>))\n\n: rb_enable_super() [api]\n: rb_disable_super() [api]\n\n  ChangeLog によると、これらの関数は必要なくなったようです。\n\n  (rb_enable_super() を呼ぶと warning が出ます)。以前は、拡張ライブラ\n  リのレベルで、rb_call_super() (Ruby の super にあたる) を呼ぶメソッ\n  ドは rb_enable_super() しておかなければなりませんでした。\n\n: STR2CSTR() [api] [new]\n\n    拡張ライブラリの API である STR2CSTR() は、与えられたオブジェクト\n    が文字列でなくかつ to_str メソッドを持つ場合、内部で to_str を呼び\n    出して暗黙の型変換を行います。この場合、変換結果が保持する文字列ポ\n    インタを返しますが、このAPIでは暗黙の型変換結果のオブジェクトがど\n    こからも参照されないため、型変換結果が GC される可能性があります。\n    ((<ruby-dev:12731>))\n\n    version 1.7 以降では代わりに StringValuePtr() を使用します。こちら\n    は、引数の参照先が暗黙の型変換の結果に置き換わるため変換結果が GC \n    されません。(version 1.7 では、STR2CSTR() は、obsolete です)\n\n    もう一つ新しく StringValue() という API が用意されています。こちら\n    は、引数が to_str による暗黙の型変換を期待する場合に使用します。\n    引数が文字列なら何もしません。\n    文字列を受け取るメソッドの最初の方で読んでおくと便利です。\n\n    なお、今のところ str2cstr() (Cポインタと文字列長を返す)の代わりに\n    なる安全な API は用意されていません。(((<ruby-dev:15644>))で提案は\n    ありました)\n\n== バグ修正\n\n: ((<組み込み関数/load>)) [bug]\n\n  ((<組み込み関数/load>)) がスレッドセーフになりました。((<ruby-dev:20490>))\n\n: ((<組み込み関数/syscall>)) [bug]\n\n  第二引数以降に文字列か Fixnum しか受け付けないために、long の範囲の\n  数値を指定することができませんでした。((<ruby-talk:72257>))\n\n        syscall(1, 2**30)\n\n        => -:1:in `syscall': wrong argument type Bignum (expected String) (TypeError)\n                from -:1\n           ruby 1.6.8 (2002-12-24) [i586-linux]\n\n\n: ((<組み込み関数/trap>))       [bug]\n: ((<組み込み関数/trace_var>))  [bug]\n\n  第二引数に汚染された文字列を渡すと例外 ((<SecurityError>)) が\n  起こるようになりました。1.6 では、汚染された文字列をセーフレ\n  ベル4で評価するようになっていました。\n  ((<ruby-list:32215>))\n\n: ((<Array#collect|Array/collect>))   [bug]\n: ((<Array#map|Array/map>))       [bug]\n\n  Array#collect がブロックを伴わない場合に self.dup を返していました。\n  そのため、Array 以外を返すことがありました((<ruby-list:30480>))。\n\n    Foo = Class.new Array\n\n    a = Foo.new\n    p a.map.class\n    p a.collect.class\n\n    => ruby 1.7.1 (2001-06-12) [i586-linux]\n       Array\n       Foo\n\n    => ruby 1.7.1 (2001-07-31) [i586-linux]\n       Array\n       Array\n\n: ((<Bignum>)) [bug]\n\n  -2147483648 より小さい数値の2進、8進、16進の表記がおかしくなっていました\n  ((<ruby-list:34828>))\n\n    p \"%b\" % -2147483648\n    p \"%b\" % -2147483649\n    p \"%b\" % -2147483650\n\n    => ruby 1.6.7 (2002-03-01) [i586-linux]\n       \"..10000000000000000000000000000000\"\n       \"..1\"\n       \"..10\"\n\n    => ruby 1.7.2 (2002-04-11) [i586-linux]\n       \"..10000000000000000000000000000000\"\n       \"..101111111111111111111111111111111\"\n       \"..101111111111111111111111111111110\"\n\n: ((<File/File.open>))       [bug]\n\n  第2引数を数値(File::RDONLY|File::CREATとか)で指定した場合に限り、第3\n  引数を用いていましたが、第3引数が与えられれば常に有効にするように\n  しました。\n  ((<ruby-bugs-ja:PR#54>))\n\n: ((<IO>)) (win32) [bug]\n\n  mswin32・mingw32で、更新モード(w+,r+)でオープンされたファイルに対する\n  読み書きの切り替えがうまくいっていなかった問題が修正されました。\n  bccwin32にも同様の問題がありますが、こちらは未修正です。\n  ((<ruby-dev:19299>))\n\n: ((<IO#putc|IO/putc>)) [bug]\n\n  出力メソッドのうち putc だけが write メソッドを使用していませんでした。\n  ((<ruby-dev:18038>))\n\n: IO#read, gets ..., etc. [bug]\n\n  File::NONBLOCK を指定した IO の読み込みで EWOULDBLOCK が発生すると、\n  途中まで読んだデータが失われることがありました。\n  ((<ruby-dev:17855>))\n\n  Thread を使ったプログラムで、ファイルからデータを読み込んでソケットに\n  書き出していると、ごく稀に Socket#write が Errno::EINTR になってしまう\n  ことがありました。((<ruby-dev:17878>)), ((<ruby-core:00444>))\n\n\n: ((<Proc>)) [bug]\n\n  $SAFE が、1 or 2 のとき\n  汚染された Proc は、ブロックにできなくなりました ((<ruby-dev:15682>))\n  ((-あらい 2003-08-06: できてる・・・？-))\n\n        $SAFE = 1\n        proc = proc {}\n        proc.taint\n        p proc.tainted?\n        def foo(&b)\n          p b.tainted?\n        end\n        foo(&proc)\n\n        => ruby 1.6.8 (2003-08-03) [i586-linux]\n           true\n           true\n        => ruby 1.8.0 (2003-08-04) [i586-linux]\n           true\n           true\n\n: ((<String#split|String/split>))    [bug]\n\n  空文字列に対する split が空文字列を要素に持つ配列を返していました。\n\n        p \"\".split(//)\n        p \"\".split(//, 0)\n        p \"\".split(//, 1)\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           []\n           []\n           [\"\"]\n        => ruby 1.8.0 (2003-07-25) [i586-linux]\n           []\n           []\n           []\n\n: ((<String#split|String/split>)) [bug]\n\n  以下の例のように、第一引数に ' ' (awk split)を指定してかつ、第二引数\n  を指定した場合に最後の要素の先頭に余分な空白が残っていました。\n\n        p \"a  b  c\".split(' ',3)\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           [\"a\", \"b\", \" c\"]\n        => ruby 1.8.0 (2003-07-03) [i586-linux]\n           [\"a\", \"b\", \"c\"]\n\n: ((<String#split|String/split>)) [bug]\n\n  String#split で第2引数が -1 のとき、空文字列に対して空文字列を要素と\n  する配列を返すバグが修正されました。((<ruby-bugs-ja:PR#426>))\n\n        p \"\".split(//)\n        p \"\".split(//, -1)\n\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           []\n           [\"\"]\n        => ruby 1.8.0 (2003-04-25) [i586-linux]\n           []\n           []\n\n: ((<String#rindex|String/rindex>)) [bug]\n\n  文字コード \\0 が文字列末尾にマッチしていました。\n\n        p \"abc\".rindex(0)\n        p \"abc\".index(0)\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           3\n           nil\n        => ruby 1.8.0 (2003-07-03) [i586-linux]\n           nil\n           nil\n\n: ((<String#upto|String/upto>)) [bug]\n\n  String#upto の範囲チェックが辞書順だったバグが修正されました。\n  現在は、((<String/succ>)) の動作と一致します。\n\n        p(('a'..'aa').to_a)\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           [\"a\"]\n        => ruby 1.8.0 (2003-07-03) [i586-linux]\n           [\"a\", \"b\", \"c\", ..., \"y\", \"z\", \"aa\"]\n\n        'a'.upto('aa') {|c| p c}\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           \"a\"\n        => ruby 1.8.0 (2003-07-03) [i586-linux]\n           \"a\"\n           \"b\"\n           \"c\"\n            :\n           \"y\"\n           \"z\"\n           \"aa\"\n\n  以前の実装では以下が 'aa' を含まないとか\n\n        'a'.upto('b') {|c| p c}\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           \"a\"\n           \"b\"\n        => ruby 1.8.0 (2003-07-03) [i586-linux]\n           \"a\"\n           \"b\"\n\n  以下の結果と順序関係が一致していませんでした。\n\n        p(('a'..'zz').to_a)\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           [\"a\", \"b\", \"c\", ..., \"x\", \"y\", \"z\", \"aa\", ..., \"zx\", \"zy\", \"zz\"]\n        => ruby 1.8.0 (2003-07-03) [i586-linux]\n           [\"a\", \"b\", \"c\", ..., \"x\", \"y\", \"z\", \"aa\", ..., \"zx\", \"zy\", \"zz\"]\n\n  なお、<=> の順序は辞書順であることに注意する必要があります。\n        p 'a' < 'b'    # => true\n        p 'aa' < 'b'   # => true\n\n: ((<Thread#wakeup|Thread/wakeup>)) [bug]\n: ((<Thread#run|Thread/run>)) [bug]\n  終了中(aborting)のスレッドに対して実行するとスレッドが生き返る\n  バグが修正されました。\n  ((<rubyist:1282>))\n\n: [bug]\n\n  ((<ruby-talk:73481>))\n\n        p 'mike stok' =~ /^(?i-mx:mike) (?i-mx:stok)$/\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           nil\n        => ruby 1.8.0 (2003-06-16) [i586-linux]\n           0\n\n  ((<ruby-talk:73549>))\n\n        p \"Mike\" =~ /(?-i)[Mm]ike/\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           nil\n        => ruby 1.8.0 (2003-06-16) [i586-linux]\n           0\n\n: ((<セキュリティモデル>)), ((<組み込み変数/$SAFE>)) [bug], [change]\n\n  ((<終了処理>))直前に $SAFE が 0 になるように変更されました。\n  ((<ruby-core:01119>))\n\n        $SAFE = 1\n        END { p $SAFE }\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           1\n        => ruby 1.8.0 (2003-06-09) [i586-linux]\n           0\n\n: ruby interpreter [bug]\n\n  以下のバグが修正されました((<ruby-list:37677>))\n  (イテレータの中で block を他のメソッドに & で渡した時のそのメソッド\n  の引数のコンテキストの扱い？)\n\n        def foo\n          p(block_given?)\n          p(block_given?,&proc)\n          p(yield,&proc)\n        end\n\n        foo { }\n\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           true\n           false\n           -:4: [BUG] Segmentation fault\n           ruby 1.6.8 (2002-12-24) [i586-linux]\n\n        => ruby 1.6.8 (2003-05-15) [i586-linux]\n           true\n           false\n           -:4:in `foo': no block given (LocalJumpError)\n                from -:7\n\n        => ruby 1.8.0 (2003-05-17) [i586-linux]\n           true\n           true\n           nil\n\n: ((<\"||=\"|演算子式>)) [bug]\n\n  未定義の変数に対して ||= で値を代入したときに、グローバル変数で警告\n  が出ていました。また、クラス変数はエラーになっていました。\n  ((<ruby-dev:18278>))\n\n        local ||= 1\n        @instance ||= 1\n        $global ||= 1\n        @@class ||= 1\n\n        => -:3: warning: global variable `$global' not initialized\n           -:4: uninitialized class variable @@class in Object (NameError)\n           ruby 1.6.7 (2002-03-01) [i586-linux]\n        => ruby 1.7.3 (2002-09-13) [i586-linux]\n\n: large file [bug]\n\n  large file(サイズが 4G bytes 以上のファイル)を正しく扱うようになりま\n  した(？)\n  ((<ruby-talk:35316>)), ((<ruby-talk:35470>))\n\n: alias         [bug]\n\n  グローバル変数のエイリアスが効いていませんでした。\n  ((<ruby-dev:14922>))\n\n        $g2 = 1\n        alias $g1 $g2\n        p [$g1, $g2]\n        $g2 = 2\n        p [$g1, $g2]\n        => ruby 1.6.5 (2001-09-19) [i586-linux]\n           [1, 1]\n           [1, 2]\n\n        => ruby 1.7.1 (2001-10-19) [i586-linux]\n           [1, 1]\n           [2, 2]\n\n=== サポートプラットフォームの追加\n\n: WindowsCE [platform]\n\n  ((<WindowsCE>)) のサポートパッチが取り込まれました。\n\n: Borland C++ サポート [platform]\n\n  bcc で ruby インタプリタをコンパイルするためのパッチがマージされまし\n  た。\n\n: ((<VMS>)) support [platform]\n\n  ((<VMS>)) のサポートパッチが取り込まれました。",
          "snippets": []
        }
      ],
      "related_entries": []
    },
    {
      "signature": "TSort.strongly_connected_components(each_node, each_child) -> Array",
      "score": 1198.0,
      "metadata": { "type": "singleton-method", "versions": ["3.2.0"] },
      "summary": "強連結成分の集まりを配列の配列として返します。\nこの配列は子から親に向かってソートされています。\n各要素は強連結成分を表す配列です。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/TSort/s/strongly_connected_components.html",
          "description": "強連結成分の集まりを配列の配列として返します。\nこの配列は子から親に向かってソートされています。\n各要素は強連結成分を表す配列です。\n\n引数 each_node と each_child でグラフを表します。\n\n@param each_node グラフ上の頂点をそれぞれ評価するcallメソッドを持つオブ\n                 ジェクトを指定します。\n\n@param each_child 引数で与えられた頂点の子をそれぞれ評価するcallメソッ\n                  ドを持つオブジェクトを指定します。\n\n//emlist[使用例][ruby]{\nrequire 'tsort'\n\ng = {1=>[2, 3], 2=>[4], 3=>[2, 4], 4=>[]}\neach_node = lambda {|&b| g.each_key(&b) }\neach_child = lambda {|n, &b| g[n].each(&b) }\np TSort.strongly_connected_components(each_node, each_child)\n# => [[4], [2], [3], [1]]\n\ng = {1=>[2], 2=>[3, 4], 3=>[2], 4=>[]}\neach_node = lambda {|&b| g.each_key(&b) }\neach_child = lambda {|n, &b| g[n].each(&b) }\np TSort.strongly_connected_components(each_node, each_child)\n# => [[4], [2, 3], [1]]\n//}\n\n@see TSort#strongly_connected_components",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "TSort",
          "label": "TSort",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:TSort/"
        }
      ]
    },
    {
      "signature": "TSort.tsort(each_node, each_child) -> Array",
      "score": 1198.0,
      "metadata": { "type": "singleton-method", "versions": ["3.2.0"] },
      "summary": "頂点をトポロジカルソートして得られる配列を返します。\nこの配列は子から親に向かってソートされています。\nすなわち、最初の要素は子を持たず、最後の要素は親を持ちません。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/TSort/s/tsort.html",
          "description": "頂点をトポロジカルソートして得られる配列を返します。\nこの配列は子から親に向かってソートされています。\nすなわち、最初の要素は子を持たず、最後の要素は親を持ちません。\n\n引数 each_node と each_child でグラフを表します。\n\n@param each_node グラフ上の頂点をそれぞれ評価するcallメソッドを持つオブ\n                 ジェクトを指定します。\n\n@param each_child 引数で与えられた頂点の子をそれぞれ評価するcallメソッ\n                  ドを持つオブジェクトを指定します。\n\n@raise TSort::Cyclic 閉路が存在するとき、発生します。\n\n//emlist[使用例][ruby]{\nrequire 'tsort'\n\ng = {1=>[2, 3], 2=>[4], 3=>[2, 4], 4=>[]}\neach_node = lambda {|&b| g.each_key(&b) }\neach_child = lambda {|n, &b| g[n].each(&b) }\np TSort.tsort(each_node, each_child) # => [4, 2, 3, 1]\n\ng = {1=>[2], 2=>[3, 4], 3=>[2], 4=>[]}\neach_node = lambda {|&b| g.each_key(&b) }\neach_child = lambda {|n, &b| g[n].each(&b) }\np TSort.tsort(each_node, each_child) # raises TSort::Cyclic\n//}\n\n@see TSort#tsort",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "TSort",
          "label": "TSort",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:TSort/"
        }
      ]
    },
    {
      "signature": "String#unpack(template) -> Array",
      "score": 460.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "Array#pack で生成された文字列を\nテンプレート文字列 template にしたがってアンパックし、\nそれらの要素を含む配列を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/String/i/unpack.html",
          "description": "Array#pack で生成された文字列を\nテンプレート文字列 template にしたがってアンパックし、\nそれらの要素を含む配列を返します。\n\n@param template    pack テンプレート文字列\n@return            オブジェクトの配列\n\n\n以下にあげるものは、Array#pack、String#unpack、String#unpack1\nのテンプレート文字の一覧です。テンプレート文字は後に「長さ」を表す数字\nを続けることができます。「長さ」の代わりに`*'とすることで「残り全て」\nを表すこともできます。\n\n長さの意味はテンプレート文字により異なりますが大抵、\n  \"iiii\"\nのように連続するテンプレート文字は\n  \"i4\"\nと書き換えることができます。\n\nテンプレート文字列中の空白類は無視されます。\nまた、`#' から改行あるいはテンプレート文字列の最後まではコメントとみな\nされ無視されます。\n\n=== 整数のテンプレート文字のシステム依存性\n\n各テンプレート文字の説明の中で、\nshort や long はシステムによらずそれぞれ 2, 4バイトサ\nイズの数値(32ビットマシンで一般的なshort, longのサイズ)を意味していま\nす。s, S, l, L に対しては直後に _ または ! を \"s_\" あるいは \"s!\" のように\n続けることでシステム依存の short, long のサイズにすることもできます。\n\ni, I (int)のサイズは常にシステム依存であり、n, N, v, V\nのサイズは常にシステム依存ではない(!をつけられない)ことに注意してください。\n\nつまり、IO#ioctl などで C の構造体を渡すときのように、\nシステム依存のサイズとエンディアンに合わせる必要があるときには\ns!, S!, i!, I!, l!, L!, q!, Q!, j!, J! を用います。\nまた、ネットワークプロトコルやファイルフォーマットのように、\nシステムに依存しないデータを扱うときには\nn, N, v, V を用います。\n\n強制的にエンディアンを指定したいときは、\nリトルエンディアンなら < を、\nビッグエンディアンなら >\nを後ろにつけます。! と組み合わせることも可能です。\n\nまとめると以下のようになります。\n\n: エンディアン非依存、整数サイズ非依存 (ネットワークプロトコルなどに適切)\n//emlist{\n  n: big endian unsigned 16bit\n  N: big endian unsigned 32bit\n  v: little endian unsigned 16bit\n  V: little endian unsigned 32bit\n//}\n\n: エンディアン依存、整数サイズ依存 (C の構造体などに適切)\n//emlist{\n  s!: signed short\n  S!: unsigned short\n  i,i!: signed int\n  I,I!: unsigned int\n  l!: signed long\n  L!: unsigned long\n  q!: signed long long\n  Q!: unsigned long long\n  j,j!: intptr_t\n  J,J!: uintptr_t\n//}\n\n: エンディアン依存、整数サイズ非依存 (C99 の stdint.h にある厳密な幅を持つ整数型に適切)\n//emlist{\n  s: int16_t\n  S: uint16_t\n  l: int32_t\n  L: uint32_t\n  q: int64_t\n  Q: uint64_t\n//}\n\n: エンディアンの強制指定(バイナリ解析などに適切)\n//emlist{\n  S>:  big endian unsigned 16bit(nと同じ)\n  s>:  big endian int16_t\n  s!>: big endian signed short\n  l<:  little endian int32_t\n  l!<: little endian signed long\n//}\n\n=== 各テンプレート文字の説明\n\n説明中、Array#pack と String#unpack で違いのあるものは `/' で区切って\n「Array#pack の説明 / String#unpack の説明」としています。\n\n: a\n\n  ASCII文字列(ヌル文字を詰める/後続するヌル文字やスペースを残す)\n//emlist[][ruby]{\n[\"abc\"].pack(\"a\")    # => \"a\"\n[\"abc\"].pack(\"a*\")   # => \"abc\"\n[\"abc\"].pack(\"a4\")   # => \"abc\\x00\"\n\n\"abc\\0\".unpack(\"a4\") # => [\"abc\\x00\"]\n\"abc \".unpack(\"a4\")  # => [\"abc \"]\n//}\n\n: A\n\n  ASCII文字列(スペースを詰める/後続するヌル文字やスペースを削除)\n//emlist[][ruby]{\n[\"abc\"].pack(\"A\")    # => \"a\"\n[\"abc\"].pack(\"A*\")   # => \"abc\"\n[\"abc\"].pack(\"A4\")   # => \"abc \"\n\n\"abc \".unpack(\"A4\")  # => [\"abc\"]\n\"abc\\0\".unpack(\"A4\") # => [\"abc\"]\n//}\n\n: Z\n\n  ヌル終端文字列(長さが`*'の場合も含め、ヌル文字を詰める/後続するヌル文字を削除)\n//emlist[][ruby]{\n[\"abc\"].pack(\"Z\")  # => \"a\"\n[\"abc\"].pack(\"Z*\") # => \"abc\\x00\"\n[\"abc\"].pack(\"Z5\") # => \"abc\\x00\\x00\"\n\n\"abc\\0\".unpack(\"Z4\") # => [\"abc\"]\n\"abc \".unpack(\"Z4\")  # => [\"abc \"]\n//}\n\n: b\n\n  ビットストリング(各バイトごとに下位ビットから上位ビット)\n//emlist[][ruby]{\n\"\\xFF\\x00\".unpack(\"b*\") # => [\"1111111100000000\"]\n\"\\x01\\x02\".unpack(\"b*\") # => [\"1000000001000000\"]\n\"\\x01\\x02\".unpack(\"b3\") # => [\"100\"]\n\n\n[\"1000000001000000\"].pack(\"b*\") # => \"\\x01\\x02\"\n//}\n\n: B\n\n  ビットストリング(各バイトごとに上位ビットから下位ビット)\n//emlist[][ruby]{\n\"\\xFF\\x00\".unpack(\"B*\")  # => [\"1111111100000000\"]\n\"\\x01\\x02\".unpack(\"B*\")  # => [\"0000000100000010\"]\n\"\\x01\\x02\".unpack(\"B9\")  # => [\"000000010\"]\n\"\\x01\\x02\".unpack(\"B15\") # => [\"000000010000001\"]\n\n[\"0000000100000010\"].pack(\"B*\")  # => \"\\x01\\x02\"\n[\"0000000100000010\"].pack(\"B0\")  # => \"\"\n[\"0000000100000010\"].pack(\"B1\")  # => \"\\x00\"\n[\"0000000100000010\"].pack(\"B7\")  # => \"\\x00\"\n[\"0000000100000010\"].pack(\"B8\")  # => \"\\x01\"\n[\"0000000100000010\"].pack(\"B9\")  # => \"\\x01\\x00\"\n[\"0000000100000010\"].pack(\"B14\") # => \"\\x01\\x00\"\n[\"0000000100000010\"].pack(\"B15\") # => \"\\x01\\x02\"\n[\"0000000100000010\"].pack(\"B16\") # => \"\\x01\\x02\"\n//}\n\n: h\n\n  16進文字列(下位ニブルが先)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"h*\") # => [\"10ef\"]\n\"\\x01\\xFE\".unpack(\"h3\") # => [\"10e\"]\n\n[\"10ef\"].pack(\"h*\") # => \"\\x01\\xFE\"\n//}\n\n: H\n\n  16進文字列(上位ニブルが先)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"H*\") # => [\"01fe\"]\n\"\\x01\\xFE\".unpack(\"H3\") # => [\"01f\"]\n\"~\".unpack(\"H2\")        # => [\"7e\"]\n\n[\"01fe\"].pack(\"H*\") # => \"\\x01\\xFE\"\n[\"7e\"].pack(\"H2\")   # => \"~\"\n//}\n\n: c\n\n  char (8bit 符号つき整数)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"c*\") # => [1, -2]\n\n[1, -2].pack(\"c*\")  # => \"\\x01\\xFE\"\n[1, 254].pack(\"c*\") # => \"\\x01\\xFE\"\n//}\n\n: C\n\n  unsigned char (8bit 符号なし整数)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"C*\") # => [1, 254]\n\n[1, -2].pack(\"C*\")  # => \"\\x01\\xFE\"\n[1, 254].pack(\"C*\") # => \"\\x01\\xFE\"\n//}\n\n: s\n\n  short (16bit 符号つき整数, エンディアンに依存)\n  (s! は 16bit でなく、short のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"s*\") # => [513, -514]\n\n[513, 65022].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[513, -514].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"s*\") # => [258, -259]\n\n[258, 65277].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[258, -259].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n: S\n\n  unsigned short (16bit 符号なし整数, エンディアンに依存)\n  (S! は 16bit でなく、short のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"S*\") # => [513, 65022]\n\n[513, 65022].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[513, -514].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n  ビッグエンディアン (SPARC64):\n\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"S*\") # => [258, 65277]\n\n[258, 65277].pack(\"S*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[258, -259].pack(\"S*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n: i\n\n  int (符号つき整数, エンディアンと int のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"i*\") # => [67305985, -50462977]\n\n[67305985, 4244504319].pack(\"i*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"i*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"i*\") # => [16909060, -66052]\n\n[16909060, 4294901244].pack(\"i*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"i*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n: I\n\n  unsigned int (符号なし整数, エンディアンと int のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"I*\") # => [67305985, 4244504319]\n\n[67305985, 4244504319].pack(\"I*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"I*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n  ビッグエンディアン (SPARC64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"I*\") # => [16909060, 4294901244]\n\n[16909060, 4294901244].pack(\"I*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"I*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: l\n\n  long (32bit 符号つき整数, エンディアンに依存)\n  (l! は 32bit でなく、long のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"l*\") # => [67305985, -50462977]\n\n[67305985, 4244504319].pack(\"l*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"l*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"l*\") # => [16909060, -66052]\n\n[16909060, 4294901244].pack(\"l*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"l*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: L\n\n  unsigned long (32bit 符号なし整数, エンディアンに依存)\n  (L! は 32bit でなく、long のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"L*\") # => [67305985, 4244504319]\n\n[67305985, 4244504319].pack(\"L*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"L*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"L*\") # => [16909060, 4294901244]\n\n[16909060, 4294901244].pack(\"L*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"L*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: q\n\n  64bit 符号付き整数 (エンディアンに依存)\n  (q! は 64bit でなく、long long のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"q*\")\n# => [578437695752307201, -506097522914230529]\n\n[578437695752307201, -506097522914230529].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[578437695752307201, 17940646550795321087].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"q*\")\n# => [72623859790382856, -283686952306184]\n\n[72623859790382856, -283686952306184].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[72623859790382856, 18446460386757245432].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n: Q\n\n  64bit 符号なし整数 (エンディアンに依存)\n  (Q! は 64bit でなく、long long のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"Q*\")\n# => [578437695752307201, 17940646550795321087]\n\n[578437695752307201, 17940646550795321087].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[578437695752307201, -506097522914230529].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"Q*\")\n# => [72623859790382856, 18446460386757245432]\n\n[72623859790382856, 18446460386757245432].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[72623859790382856, -283686952306184].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n: m\n\n  base64された文字列。60 オクテットごと(と最後)に改行コードが付加されます。\n\n  Base64は、3オクテット(8bits * 3 = 24bits)のバイナリコードをASCII文字の\n  うちの65文字 ([A-Za-z0-9+/]の64文字とpaddingのための'=')だけを使用して\n  4オクテット(6bits * 4 = 24bits)の印字可能文字列に変換するエンコーディ\n  ング法です。2045, 4648 で定義されています。\n//emlist[][ruby]{\n[\"\"].pack(\"m\")             # => \"\"\n[\"\\0\"].pack(\"m\")           # => \"AA==\\n\"\n[\"\\0\\0\"].pack(\"m\")         # => \"AAA=\\n\"\n[\"\\0\\0\\0\"].pack(\"m\")       # => \"AAAA\\n\"\n[\"\\xFF\"].pack(\"m\")         # => \"/w==\\n\"\n[\"\\xFF\\xFF\"].pack(\"m\")     # => \"//8=\\n\"\n[\"\\xFF\\xFF\\xFF\"].pack(\"m\") # => \"////\\n\"\n\n[\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"].pack(\"m\")\n# => \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJT\\nVFVWV1hZWg==\\n\"\n[\"abcdefghijklmnopqrstuvwxyz\"].pack(\"m3\")\n# => \"YWJj\\nZGVm\\nZ2hp\\namts\\nbW5v\\ncHFy\\nc3R1\\ndnd4\\neXo=\\n\"\n\n\"\".unpack(\"m\")       # => [\"\"]\n\"AA==\\n\".unpack(\"m\") # => [\"\\x00\"]\n\"AA==\".unpack(\"m\")   # => [\"\\x00\"]\n\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJT\\nVFVWV1hZWg==\\n\".unpack(\"m\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\\n\".unpack(\"m\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n//}\n  m0 は 4648 対応\n//emlist[][ruby]{\n[\"\"].pack(\"m0\")             # => \"\"\n[\"\\0\"].pack(\"m0\")           # => \"AA==\"\n[\"\\0\\0\"].pack(\"m0\")         # => \"AAA=\"\n[\"\\0\\0\\0\"].pack(\"m0\")       # => \"AAAA\"\n[\"\\xFF\"].pack(\"m0\")         # => \"/w==\"\n[\"\\xFF\\xFF\"].pack(\"m0\")     # => \"//8=\"\n[\"\\xFF\\xFF\\xFF\"].pack(\"m0\") # => \"////\"\n\n[\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"].pack(\"m0\")\n# => \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\"\n\n\"\".unpack(\"m0\")       # => [\"\"]\n\"AA==\\n\".unpack(\"m0\") # => ArgumentError (invalid base64)\n\"AA==\".unpack(\"m0\")   # => [\"\\x00\"]\n\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\".unpack(\"m0\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n//}\n@see base64\n\n: M\n\n  quoted-printable encoding された文字列\n//emlist[][ruby]{\n[\"a b c\\td \\ne\"].pack(\"M\") # => \"a b c\\td =\\n\\ne=\\n\"\n\n\"a b c\\td =\\n\\ne=\\n\".unpack(\"M\") # => [\"a b c\\td \\ne\"]\n//}\n\n: n\n\n  ネットワークバイトオーダー(ビッグエンディアン)のunsigned short (16bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1,32767,-32768,65535].pack(\"n*\")\n# => \"\\x00\\x00\\x00\\x01\\xFF\\xFF\\x7F\\xFF\\x80\\x00\\xFF\\xFF\"\n\n\"\\x00\\x00\\x00\\x01\\xFF\\xFF\\x7F\\xFF\\x80\\x00\\xFF\\xFF\".unpack(\"n*\")\n# => [0, 1, 65535, 32767, 32768, 65535]\n//}\n\n: N\n\n  ネットワークバイトオーダー(ビッグエンディアン)のunsigned long (32bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1].pack(\"N*\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xFF\\xFF\\xFF\\xFF\"\n\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xFF\\xFF\\xFF\\xFF\".unpack(\"N*\") # => [0, 1, 4294967295]\n//}\n\n: v\n\n  \"VAX\"バイトオーダー(リトルエンディアン)のunsigned short (16bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1,32767,-32768,65535].pack(\"v*\")\n# => \"\\x00\\x00\\x01\\x00\\xFF\\xFF\\xFF\\x7F\\x00\\x80\\xFF\\xFF\"\n\n\"\\x00\\x00\\x01\\x00\\xFF\\xFF\\xFF\\x7F\\x00\\x80\\xFF\\xFF\".unpack(\"v*\")\n# => [0, 1, 65535, 32767, 32768, 65535]\n//}\n\n: V\n\n  \"VAX\"バイトオーダー(リトルエンディアン)のunsigned long (32bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1].pack(\"V*\") # => \"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\"\n\n\n\"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\".unpack(\"V*\") # => [0, 1, 4294967295]\n//}\n\n: f\n\n  単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754 単精度 リトルエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"f\")      # => \"\\x00\\x00\\x80?\"\n[0.0/0.0].pack(\"f\")  # => \"\\x00\\x00\\xC0\\x7F\"      # NaN\n[1.0/0.0].pack(\"f\")  # => \"\\x00\\x00\\x80\\x7F\"      # +Infinity\n[-1.0/0.0].pack(\"f\") # => \"\\x00\\x00\\x80\\xFF\"      # -Infinity\n//}\n\n  SPARC64 (IEEE754 単精度 ビッグエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"f\")      # => \"?\\x80\\x00\\x00\"\n[0.0/0.0].pack(\"f\")  # => \"\\x7F\\xC0\\x00\\x00\"      # NaN\n[1.0/0.0].pack(\"f\")  # => \"\\x7F\\x80\\x00\\x00\"      # +Infinity\n[-1.0/0.0].pack(\"f\") # => \"\\xFF\\x80\\x00\\x00\"      # -Infinity\n//}\n\n  VAX (NetBSD 3.0) (非IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"f\") # => \"\\x80@\\x00\\x00\"\n//}\n\n: d\n\n  倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754 倍精度 リトルエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"d\")      # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n[0.0/0.0].pack(\"d\")  # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF8\\x7F\"      # NaN\n[1.0/0.0].pack(\"d\")  # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\x7F\"      # +Infinity\n[-1.0/0.0].pack(\"d\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\xFF\"      # -Infinity\n//}\n\n  SPARC64 (IEEE754 倍精度 ビッグエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"d\")      # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n[0.0/0.0].pack(\"d\")  # => \"\\x7F\\xF8\\x00\\x00\\x00\\x00\\x00\\x00\"      # NaN\n[1.0/0.0].pack(\"d\")  # => \"\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"      # +Infinity\n[-1.0/0.0].pack(\"d\") # => \"\\xFF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"      # -Infinity\n//}\n\n  VAX (NetBSD 3.0) (非IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"d\") # => \"\\x80@\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n: e\n\n  リトルエンディアンの単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"e\") # => \"\\x00\\x00\\x80?\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"e\") # => \"\\x00\\x00\\x80?\"\n//}\n\n: E\n\n  リトルエンディアンの倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"E\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"E\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n//}\n\n: g\n\n  ビッグエンディアンの単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"g\") # => \"?\\x80\\x00\\x00\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"g\") # => \"?\\x80\\x00\\x00\"\n//}\n\n  IEEE754準拠な環境の場合、以下のようにして符号、指数部、仮数部を取り出せます。\n//emlist[][ruby]{\ns = [v].pack(\"g\").unpack(\"B*\")[0][0,1]      # 符号\ne = [v].pack(\"g\").unpack(\"B*\")[0][1,8]      # 指数部\nf = [v].pack(\"g\").unpack(\"B*\")[0][9,23]     # 仮数部\n//}\n\n  そして、s, e, f の意味は以下の通りです。\n//emlist[][ruby]{\nsgn = s == \"0\" ? +1.0 : -1.0\nexp = Integer(\"0b\" + e)\nfra = Integer(\"0b\" + f)\nif exp == 0\n  if fra == 0\n    sgn * 0                     # ±0 (positive/negative zero)\n  else\n    sgn * fra * 2**(-126-23)    # 非正規化数 (denormalized number)\n  end\nelsif exp == 255\n  if fra == 0\n    sgn * Inf                   # ±∞ (positive/negative infinity)\n  else\n    NaN                         # 非数 (not a number)\n  end\nelse\n  fra += 1 << 23                # ゲタ\n  sgn * fra * 2**(exp-127-23)   # 正規化数 (normalized number)\nend\n//}\n\n: G\n\n  ビッグエンディアンの倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"G\") # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"G\") # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  IEEE754準拠な環境の場合、以下のようにして符号、指数部、仮数部を取り出せます。\n//emlist[][ruby]{\ns = [v].pack(\"G\").unpack(\"B*\")[0][0,1]    # 符号\ne = [v].pack(\"G\").unpack(\"B*\")[0][1,11]   # 指数部\nf = [v].pack(\"G\").unpack(\"B*\")[0][12,52]  # 仮数部\n//}\n\n  そして、s, e, f の意味は以下の通りです。\n//emlist[][ruby]{\nsgn = s == \"0\" ? +1.0 : -1.0\nexp = Integer(\"0b\" + e)\nfra = Integer(\"0b\" + f)\nif exp == 0\n  if fra == 0\n    sgn * 0                     # ±0 (positive/negative zero)\n  else\n    sgn * fra * 2**(-1022-52)   # 非正規化数 (denormalized number)\n  end\nelsif exp == 2047\n  if fra == 0\n    sgn * Inf                   # ±∞ (positive/negative infinity)\n  else\n    NaN                         # 非数 (not a number)\n  end\nelse\n  fra += 1 << 52                # ゲタ\n  sgn * fra * 2**(exp-1023-52)  # 正規化数 (normalized number)\nend\n//}\n\n: p\n\n  ヌル終端の文字列へのポインタ\n//emlist[][ruby]{\n[\"\"].pack(\"p\")             # => \"\\x980\\xBEf\\x1CV\\x00\\x00\"\n[\"a\", \"b\", \"c\"].pack(\"p3\") # => \"\\x98\\xE5\\x9ER\\xD2U\\x00\\x00p\\xE5\\x9ER\\xD2U\\x00\\x00H\\xE5\\x9ER\\xD2U\\x00\\x00\"\n[nil].pack(\"p\")            # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n: P\n\n  構造体(固定長文字列)へのポインタ\n//emlist[][ruby]{\n[nil].pack(\"P\")    # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n[\"abc\"].pack(\"P3\") # => \"\\xA0\\xEE\\er\\x84U\\x00\\x00\"\n\n[\"abc\"].pack(\"P4\") # => ArgumentError: too short buffer for P(3 for 4)\n[\"\"].pack(\"P\")     # => ArgumentError: too short buffer for P(0 for 1)\n//}\n\n: u\n\n  uuencodeされた文字列\n//emlist[][ruby]{\n[\"\"].pack(\"u\")           # => \"\"\n[\"a\"].pack(\"u\")          # => \"!80``\\n\"\n[\"abc\"].pack(\"u\")        # => \"#86)C\\n\"\n[\"abcd\"].pack(\"u\")       # => \"$86)C9```\\n\"\n[\"a\"*45].pack(\"u\")       # => \"M86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A\\n\"\n[\"a\"*46].pack(\"u\")       # => \"M86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A\\n!80``\\n\"\n[\"abcdefghi\"].pack(\"u6\") # => \"&86)C9&5F\\n#9VAI\\n\"\n//}\n\n: U\n\n  UTF-8\n//emlist[][ruby]{\n[0].pack(\"U\")                               # => \"\\u0000\"\n[1].pack(\"U\")                               # => \"\\u0001\"\n[0x7f].pack(\"U\")                            # => \"\\u007F\"\n[0x80].pack(\"U\")                            # => \"\\u0080\"\n[0x7fffffff].pack(\"U\")                      # => \"\\xFD\\xBF\\xBF\\xBF\\xBF\\xBF\"\n[0x80000000].pack(\"U\")                      # => RangeError: pack(U): value out of range\n[0,256,65536].pack(\"U3\").b                  # => \"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\"\n\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U3\") # => [0, 256, 65536]\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U\")  # => [0]\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U*\") # => [0, 256, 65536]\n//}\n\n: w\n\n  BER圧縮整数\n\n  1バイトあたり7ビットを使用して必要最小限のバイト数で任意サイズの\n  0以上の整数を表す数値表現。各バイトの最上位ビットはデータの最後\n  を除いて必ず1が立っている(つまり最上位ビットはどこまでデータがあ\n  るかを示している)。\n\n  ISO/IEC 8825-1:1995 : Information technology−ASN.1 encoding rules : Specification of Basic Encoding Rules(BER) に定められる整数の符号化方法。\n\n//emlist[][ruby]{\n[0].pack(\"w\")             # => \"\\x00\"\n[1].pack(\"w\")             # => \"\\x01\"\n[127].pack(\"w\")           # => \"\\x7F\"\n[128].pack(\"w\")           # => \"\\x81\\x00\"\n[0x3fff].pack(\"w\")        # => \"\\xFF\\x7F\"\n[0x4000].pack(\"w\")        # => \"\\x81\\x80\\x00\"\n[0x3fffffff].pack(\"w\")    # => \"\\x83\\xFF\\xFF\\xFF\\x7F\"\n[0x40000000].pack(\"w\")    # => \"\\x84\\x80\\x80\\x80\\x00\"\n[0xffffffff].pack(\"w\")    # => \"\\x8F\\xFF\\xFF\\xFF\\x7F\"\n[0x100000000].pack(\"w\")   # => \"\\x90\\x80\\x80\\x80\\x00\"\n\n\"\\x00\".unpack(\"w\")              # => [0]\n\"\\x00\\x81\\x00\\x01\".unpack(\"w*\") # => [0, 128, 1]\n//}\n\n  なお、BER圧縮整数でエンコードした結果は大小関係を保存しない。\n  たとえば、[0x3fff].pack(\"w\") > [0x4000].pack(\"w\") である。\n\n: x\n\n  ヌルバイト（pack）／1バイト読み飛ばし（unpack）\n//emlist[][ruby]{\n[97, 98].pack(\"CxC\")    # => \"a\\x00b\"\n[97, 98].pack(\"Cx3C\")   # => \"a\\x00\\x00\\x00b\"\n\n\"abc\".unpack(\"CxC\")  # => [97, 99]\n\"abc\".unpack(\"Cx3C\") # => ArgumentError: x outside of string\n//}\n\n: X\n\n  1バイト後退\n//emlist[][ruby]{\n[97, 98, 99].pack(\"CCXC\") # => \"ac\"\n\n\"abcdef\".unpack(\"x*XC\") # => [102]\n//}\n\n: @\n\n  絶対位置への移動\n//emlist[][ruby]{\n[97, 98].pack(\"C @3 C\") # => \"a\\x00\\x00b\"\n\n\"abcd\".unpack(\"C @3 C\") # => [97, 100]\n//}\n\n: j\n\nintptr_t (ポインタの幅の符号つき整数, エンディアンに依存)\n\n: J\n\nuintptr_t (ポインタの幅の符号なし整数, エンディアンに依存)\n\n=== 使用例\n\n以下、pack/unpack の使用例の一部です。\n\npack を使用しなくても同じことができる場合はその例も載せています。\npack は暗号になりやすい面があることを考慮し、pack を使いたくない人\nに別解を示すためです。\n\n: 数値(文字コード)の配列を文字列に変換する例\n//emlist[][ruby]{\n[82, 117, 98, 121].pack(\"cccc\")  # => \"Ruby\"\n[82, 117, 98, 121].pack(\"c4\")    # => \"Ruby\"\n[82, 117, 98, 121].pack(\"c*\")    # => \"Ruby\"\n\ns = \"\"\n[82, 117, 98, 121].each {|c| s << c}\ns    # => \"Ruby\"\n\n[82, 117, 98, 121].collect {|c| sprintf \"%c\", c}.join   # => \"Ruby\"\n\n[82, 117, 98, 121].inject(\"\") {|s, c| s << c}    # => \"Ruby\"\n//}\n\n: 文字列を数値(文字コード)の配列に変換する例\n//emlist[][ruby]{\n\"Ruby\".unpack('C*')    # => [82, 117, 98, 121]\n\na = []\n\"Ruby\".each_byte {|c| a << c}\na    # => [82, 117, 98, 121]\n//}\n\n: \"x\" でヌルバイトを埋めることができる\n//emlist[][ruby]{\n[82, 117, 98, 121].pack(\"ccxxcc\")    # => \"Ru\\x00\\x00by\"\n//}\n\n: \"x\" で文字を読み飛ばす事が出来る\n//emlist[][ruby]{\n\"Ru\\x00\\x00by\".unpack('ccxxcc')    # => [82, 117, 98, 121]\n//}\n\n: Hexダンプを数値の配列に変換する例\n//emlist[][ruby]{\n\"61 62 63 64 65 66\".delete(' ').lines.pack('H*').unpack('C*')\n# => [97, 98, 99, 100, 101, 102]\n\n\"61 62 63 64 65 66\".split.collect {|c| c.hex}\n# => [97, 98, 99, 100, 101, 102]\n//}\n\n: バイナリと16進数のpackでは長さ指定は生成されるバイト数ではなく、ビットやニブルの個数を表す\n//emlist[][ruby]{\n[0b01010010, 0b01110101, 0b01100010, 0b01111001].pack(\"C4\")\n# => \"Ruby\"\n[\"01010010011101010110001001111001\"].pack(\"B32\") # 8 bits * 4\n# => \"Ruby\"\n\n[0x52, 0x75, 0x62, 0x79].pack(\"C4\")\n# => \"Ruby\"\n[\"52756279\"].pack(\"H8\")  # 2 nybbles * 4\n# => \"Ruby\"\n//}\n\n: テンプレート文字'a'の長さ指定は1つの文字列だけに適用される\n//emlist[][ruby]{\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"a4\")\n# => \"RUBY\"\n\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"aaaa\")\n# => \"Ruby\"\n\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"a*aaa\")\n# => \"RUBYuby\"\n//}\n\n: テンプレート文字\"a\"は、長さが足りない分をヌル文字で補う\n//emlist[][ruby]{\n[\"Ruby\"].pack(\"a8\")\n# => \"Ruby\\x00\\x00\\x00\\x00\"\n//}\n\n: リトルエンディアンとビッグエンディアン\n//emlist[][ruby]{\n[1,2].pack(\"s2\")\n# => \"\\x01\\x00\\002\\x00\" # リトルエンディアンのシステムでの出力\n# => \"\\x00\\x01\\x00\\002\" # ビッグエンディアンのシステムでの出力\n\n[1,2].pack(\"n2\")\n# => \"\\x00\\x01\\x00\\002\" # システムによらずビッグエンディアン\n\n[1,2].pack(\"v2\")\n# => \"\\x01\\x00\\002\\x00\" # システムによらずリトルエンディアン\n//}\n\n: ネットワークバイトオーダの signed long\n//emlist[][ruby]{\ns = \"\\xFF\\xFF\\xFF\\xFE\"\nn = s.unpack(\"N\")[0]\nif n[31] == 1\n  n = -((n ^ 0xffff_ffff) + 1)\nend\nn # => -2\n//}\n\n: ネットワークバイトオーダの signed long(その2)\n//emlist[][ruby]{\ns = \"\\xFF\\xFF\\xFF\\xFE\"\nn = s.unpack(\"N\").pack(\"l\").unpack(\"l\")[0]\nn # => -2\n//}\n\n: IPアドレス\n//emlist[][ruby]{\nrequire 'socket'\nofficial_hostname, alias_hostnames, address_family, *address_list = Socket.gethostbyname(\"localhost\")\naddress_list.find {|address| address.size == 4 }.unpack(\"C4\").join(\".\")\n# => \"127.0.0.1\"\n\n\"127.0.0.1\".split(\".\").collect {|c| c.to_i}.pack(\"C4\")\n# => \"\\x7F\\x00\\x00\\x01\"\n//}\n\n: sockaddr_in 構造体\n//emlist[][ruby]{\nrequire 'socket'\n[Socket::AF_INET,\n Socket.getservbyname('echo'),\n 127, 0, 0, 1].pack(\"s n C4 x8\")\n# => \"\\x02\\x00\\x00\\a\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  pack/unpack を使う代わりに\n  Socket.pack_sockaddr_in,\n  Socket.unpack_sockaddr_in メソッドがあります。\n\n: '\\0'終端文字列のアドレス\n\n  テンプレート文字 \"p\" や \"P\" は、C 言語レベルのインタフェースのた\n  めにあります(例えば IO#ioctl)。\n//emlist[][ruby]{\n[\"foo\"].pack(\"p\")    # => \"xp\\xC2\\x85\\vV\\x00\\x00\"\n//}\n\n  結果の文字列はゴミに見えますが、実際は文字列\"foo\\0\"を指すアドレ\n  ス(のバイナリ表現)です。以下のようにすれば見慣れた表記で見ること\n  が出来ます\n//emlist[][ruby]{\nprintf \"%#014x\\n\", \"xp\\xC2\\x85\\vV\\x00\\x00\".unpack(\"J\")[0] # => 0x560b85c27078\n//}\n\n  アドレスが指す先のオブジェクト(この例で \"foo\\0\") は、pack の結\n  果が GC されるまではGCされないことが保証されています。\n\n  unpack(\"p\"), unpack(\"P\") は、pack の結果からしか unpack できません。\n//emlist[][ruby]{\n[\"foo\"].pack(\"p\").unpack(\"p\") # => [\"foo\"]\n\"xp\\xC2\\x85\\vV\\x00\\x00\".unpack(\"p\")\n# => ArgumentError: no associated pointer\n//}\n  \"p\" や \"P\" は、nil を特別に扱い NULL\n  ポインタとして解釈します。(以下は、64bitマシンで一般的な結果)\n//emlist[][ruby]{\n[nil].pack(\"p\")        # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\".unpack(\"p\") # => [nil]\n//}\n\n: 構造体のアドレス\n\n  例えば、\n//emlist{\n      struct {\n        int   a;\n        short b;\n        long  c;\n      } v = {1,2,3};\n//}\n  を表す文字列は\n//emlist[][ruby]{\nv = [1,2,3].pack(\"i!s!l!\")\n//}\n  です。(byte alignment の問題から実際は適当な padding が必要に\n  なるかもしれません)\n\n  この構造体を指すアドレスは\n//emlist[][ruby]{\n[v].pack(\"P\")  # => \"\\xC0\\xCC2L\\fV\\x00\\x00\"\n//}\n  で得られます。\n\n: UTF-8からUCS-2への変換 (サロゲートを処理していないので UTF-16 とはいえない)\n\n  リトルエンディアン:\n//emlist[][ruby]{\n(\"Comments\").unpack(\"U*\").pack(\"v*\") # => \"C\\x00o\\x00m\\x00m\\x00e\\x00n\\x00t\\x00s\\x00\"\n//}\n  ビッグエンディアン:\n//emlist[][ruby]{\n(\"Comments\").unpack(\"U*\").pack(\"n*\") # => \"\\x00C\\x00o\\x00m\\x00m\\x00e\\x00n\\x00t\\x00s\"\n//}\n\n@see String#unpack1, Array#pack",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "String",
          "label": "String",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:String/"
        },
        {
          "key": "base64",
          "label": "base64",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:base64/"
        }
      ]
    },
    {
      "signature": "ruby 1.6 feature",
      "score": 433.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "ruby 1.6 feature \nruby version 1.6 は安定版です。この版での変更はバグ修正がメイン\nになります。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f1=2e6=2e0.html",
          "description": "ruby 1.6 feature \nruby version 1.6 は安定版です。この版での変更はバグ修正がメイン\nになります。\n\n((<stable-snapshot|URL:ftp://ftp.netlab.co.jp/pub/lang/ruby/stable-snapshot.tar.gz>)) は、日々更新される安定版の最新ソースです。\n\n== 1.6.8 (2002-12-24) -> stable-snapshot\n\n: 2003-01-22: errno\n\n    EAGAIN と EWOULDBLOCK が同じ値のシステムで、EWOULDBLOCK がなくなっ\n    ていました。現在は、このようなシステムでは、EWOULDBLOCK は、EAGAIN \n    として定義されています。(これは 1.6.7 とは異なる挙動です)\n\n        p Errno::EAGAIN\n        p Errno::EWOULDBLOCK\n\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           Errno::EAGAIN\n           Errno::EWOULDBLOCK\n\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           Errno::EAGAIN\n           -:2: uninitialized constant EWOULDBLOCK at Errno (NameError)\n\n        => ruby 1.6.8 (2003-02-13) [i586-linux]\n           Errno::EAGAIN\n           Errno::EAGAIN\n\n== 1.6.7 (2002-03-01) -> 1.6.8 (2002-12-24)\n\n: 2002-10-02: Thread (cygwin)\n\n  Cygwin で、Thread の切替えが行われないことがありました。\n  ((<ruby-list:36058>)), ((<ruby-list:24637>))\n\n: 2002-10-01: Socket (win)\n\n  Windows でのソケットの問題が1つ解決されたようです。(どのような問題かは\n  大本のメールがわかりませんでしたが、selectで読み込み可能になったのに\n  空配列が返されるという問題なのだそうです) ((<ruby-talk:40015>)),\n  ((<ruby-win32:366>))\n\n: 2002-09-12: Thread.status (?)\n\n  シグナルを trap でトラップしたときにスレッドの状態を保持していなかっ\n  たためシグナルに割り込まれたスレッドの状態がおかしくなることがありま\n  した((<ruby-talk:40337>)), ((<ruby-core:00019>))\n\n: 2002-09-11: Queue#((<Queue/pop>))\n\n  Queue#pop に競合状態の問題がありました ((<ruby-dev:17223>))\n\n: 2002-09-11: SizedQueue.new\n\n  引数に 0 以下を受けつけるバグが修正されました。\n\n: 2002-09-05: ((<リテラル/式展開>))\n\n  stable snapshot で、一時期、式展開中のクォートは、バックスラッシュエ\n  スケープが必要になっていましたが、この変更は元に戻りました。\n\n        p \"#{ \"\" }\"\n\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           \"\"\n\n        => -:1: warning: bad substitution in string\n           ruby 1.6.7 (2002-09-12) [i586-linux]\n           \"#{  }\"\n\n        => ruby 1.6.7 (2002-09-25) [i586-linux]\n           \"\"\n\n  これは1.7からのバックポートではありません。コメントの扱いなどは、1.7 \n  とは異なります。(((<ruby 1.7 feature>)) の 2002-06-24 も参照)\n\n        p \"#{ \"\" # comment }\"\n        => ruby 1.6.8 (2002-10-04) [i586-linux]\n           \"\"\n        => -:1: parse error\n           ruby 1.7.3 (2002-10-04) [i586-linux]\n\n: SizedQueue#deq, #shift\n: SizedQueue#enq\n\n  追加(push, pop の別名)。これらが定義されていなかったため、enq などを\n  呼び出したときスーパークラス Queue の enq が実行されていました。\n\n: 2002-09-11: ((<tempfile/Tempfile#size>))\n\n  追加 ((<ruby-dev:17221>))\n\n: 2002-09-09\n\n  mswin32 版と mingw32 版の ruby で、1.6.6の頃から ruby の子プロセスに環境変数が渡らない\n  バグがありました。((<ruby-dev:18236>))\n\n: 2002-09-03\n\n  Bison を使用してコンパイルした Ruby で、複数回のライブラリロードを行\n  うときの速度が向上しました。(Bison を使用しない場合、ロードの都度明\n  示的に GC が実行されるためライブラリロードの実行速度が低下するのだそ\n  うです) ((<ruby-dev:18145>))\n\n: 2002-08-20 File.expand_path\n\n  Cygwin 1.3.x ((<ruby-bugs-ja:PR#299>))\n\n        p File.expand_path('file', 'c:/')\n\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           /tmp/c:/file\n        => ruby 1.6.7 (2002-08-21) [i586-linux]\n           c:/file\n\n: 2002-08-19 Thread (win)\n\n  Ruby のスレッドと Win32 の構造化例外（Win32 API からのコールバッ\n  クを含む）を同時に使うと落ちてしまう不具合が修正されたのだそうです。\n  ((<ruby-win32:273>))\n\n: 2002-08-12 Hash#==\n\n  Hash オブジェクトはデフォルト値 (((<Hash/default>))) も == で等しい\n  ときに等しいとみなされるようになりました。\n\n        p Hash.new(\"foo\") == Hash.new(\"bar\")\n\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           true\n        => ruby 1.6.7 (2002-08-21) [i586-linux]\n           false\n\n# : 2002-08-01 IO#read, gets ..., etc.\n# \n#    File::NONBLOCK を指定した IO の読み込みで EWOULDBLOCK が発生すると、\n#    途中まで読んだデータが失われることがありました。\n#    ((<ruby-dev:17855>))\n#    ((-これはまだマージされてません。1.6に入るかも不明です。-))\n\n: 2002-07-11 String#slice!\n\n  範囲外の文字列を指定したときに例外を返す場合がありましたが、常に nil \n  を返すようになりました。(String#[]やString#slice と同じ結果を返すと\n  いうことです)\n\n        p \"foo\".slice!(\"bar\")   # <- 以前からこちらは nil を返していた\n        p \"foo\".slice!(5,10)\n\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           nil\n           -:2:in `slice!': index 5 out of string (IndexError)\n                from -:2\n        => ruby 1.6.7 (2002-08-01) [i586-linux]\n           nil\n           nil\n\n: 2002-07-05 String#split\n\n  最初の引数に nil を指定できるようになりました。((<ruby-talk:43513>)) \n  この場合、$; を分割文字列として使用します。以前までは $; が有効にな\n  るのは引数省略時だけでした。\n\n    $; = \":\"\n    p \"a:b:c\".split(nil)\n    => -:2:in `split': bad separator (ArgumentError)\n            from -:2\n       ruby 1.6.7 (2002-03-01) [i586-linux]\n\n    => ruby 1.6.7 (2002-07-30) [i586-linux]\n       [\"a\", \"b\", \"c\"]\n\n: 2002-06-15 Dir.glob\n\n  リンクの切れたシンボリックリンクに対して、Dir.glob がマッチしません\n  でした。\n\n        File.symlink(\"foo\", \"bar\")\n        p Dir.glob(\"bar\")\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           []\n        => ruby 1.6.7 (2002-08-01) [i586-linux]\n           [\"bar\"]\n\n: 2002-06-13 Hash[]\n\n  Hash[] で、キーとなる文字列を dup & freeze していませんでした。\n\n        a = \"key\"\n        h = Hash[a,\"val\"]\n        h.keys[0].upcase!\n        p a\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           \"KEY\"\n        => -:3:in `upcase!': can't modify frozen string (TypeError)\n                from -:3\n           ruby 1.6.7 (2002-08-01) [i586-linux]\n\n: 2002-06-10 Fixnum#>>, <<\n\n  負の数に対して右シフトすると 0 になることがありました。\n  ((<ruby-bugs-ja:PR#247>))\n\n  負の数を引数にした左シフト(つまり右シフト)も同様におかしな挙動をして\n  いました。((<ruby-bugs-ja:PR#248>))\n\n        p(-1 >> 31)\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           0\n        => ruby 1.6.7 (2002-08-01) [i586-linux]\n           -1\n\n        p(-1 << -1)\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           -2147483649\n        => ruby 1.6.7 (2002-08-01) [i586-linux]\n           -1\n\n: 2002-06-05\n: ((<Math/Math.acosh>))\n: ((<Math/Math.asinh>))\n: ((<Math/Math.atanh>))\n\n  追加。\n\n: 2002-06-03\n: String#[]=\n\n  インデックスとして指定した文字列がレシーバに含まれない場合に、何もせ\n  ず右辺を返していました。\n\n    foo = \"foo\"\n    p foo[\"bar\"] = \"baz\"\n    p foo\n\n    => ruby 1.6.7 (2002-03-01) [i586-linux]\n       \"baz\"\n       \"foo\"\n    => -:2:in `[]=': string not matched (IndexError)\n            from -:2\n       ruby 1.6.7 (2002-07-30) [i586-linux]\n\n: 2002-06-03 sprintf()\n\n  \"%d\" で引数を整数にするときに、((<組み込み関数/Integer>)) と同じ規則を\n  使用するようになりました。\n\n        p sprintf(\"%d\", nil)\n\n        => -:1:in `sprintf': no implicit conversion from nil (TypeError)\n                from -:1\n           ruby 1.6.7 (2002-03-01) [i586-linux]\n\n        => ruby 1.6.7 (2002-07-30) [i586-linux]\n           \"0\"\n\n: 2002-05-23 -* オプション(?)\n\n  以前まで、\n\n    #! ruby -*- mode: ruby -*-\n\n  のような Emacs の '-*-' 指定を使用したスクリプトのために -* 以降を無\n  視する(何もしないオプションとして認識)するようになっていましたが、こ\n  の特別扱いはなくなりました。Emacs の '-*-' 指定は、2行目に書くように\n  するべきです。((<ruby-dev:17193>))\n\n        ruby '-*' -v\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n\n        => ruby: invalid option -*  (-h will show valid options)\n\n: 2002-05-22 parsedate\n\n  バージョンアップ((<ruby-dev:17171>))\n\n: 2002-05-22 -T オプション\n\n  ruby のコマンドラインオプション -T の後に空白を置かずに他のオプショ\n  ンを続けると、-T以降のオプションが無効になっていました。-T の後は数\n  字以外が続いた場合、オプションとみなすようになりました(-0 オプション\n  と同じ) ((<ruby-dev:17179>))\n\n        ruby -Tv  # -v が無効 (ruby 1.6.7 (2002-03-01) [i586-linux])\n\n        => ruby: No program input from stdin allowed in tainted mode (SecurityError)\n\n        => ruby 1.6.7 (2002-07-30) [i586-linux]\n\n: 2002-05-20 IO#close\n\n  双方向のパイプの dup を close_write するとエラーになっていました。\n  ((<ruby-dev:17155>))\n\n    open(\"|-\",\"r+\") {|f|\n      if f\n        f.dup.close_write\n      else\n         sleep 1\n      end\n    }\n\n    => ruby 1.6.7 (2002-03-01) [i586-linux]\n       -:3:in `close_write': closing non-duplex IO for writing (IOError)\n            from -:3\n            from -:1:in `open'\n            from -:1\n\n\n    => ruby 1.6.7 (2002-07-30) [i586-linux]\n\n: 2002-05-02 Regexp.quote\n\n  # はバックスラッシュクォートするようになりました。これは、quote した\n  正規表現を //x に正しく埋め込めるようにするためです。\n  ((<ruby-bugs-ja:PR#231>))\n\n        p Regexp.quote(\"#\")\n\n        p /a#{Regexp.quote(\"#\")}b/x =~ \"ab\"\n\n        => -:3: warning: ambiguous first argument; make sure\n           ruby 1.6.7 (2002-03-01) [i586-linux]\n           \"#\"\n           0\n\n        => -:3: warning: ambiguous first argument; make sure\n           ruby 1.6.7 (2002-07-30) [i586-linux]\n           \"\\\\#\"\n           nil\n\n: 2002-04-29: rb_find_file()\n\n  $SAFE >= 4 で、絶対パス指定でない場合、SecurityError 例外が発生する\n  ようになりました。\n\n: 2002-04-26: Regexp.quote\n\n  ((<ruby-bugs-ja:PR#231>))\n\n        p Regexp.quote(\"\\t\")\n\n        p /a#{Regexp.quote(\"\\t\")}b/x =~ \"ab\"\n\n        => -:3: warning: ambiguous first argument; make sure\n           ruby 1.6.7 (2002-03-01) [i586-linux]\n           \"\\t\"\n           0\n\n        => -:3: warning: ambiguous first argument; make sure\n           ruby 1.6.7 (2002-05-04) [i586-linux]\n           \"\\\\t\"\n           nil\n\n: 2002-04-20: Regexp#inspect\n\n  /x フラグ付きの正規表現オブジェクトの inspect が改行を \\n に変換して\n  いました。((<ruby-bugs-ja:PR#225>))\n\n        p /a\n                b/x\n\n        => -:1: warning: ambiguous first argument; make sure\n           ruby 1.6.7 (2002-03-01) [i586-linux]\n           /a\\n                b/x\n\n        => -:1: warning: ambiguous first argument; make sure\n           ruby 1.7.2 (2002-04-24) [i586-linux]\n           /a\n                           b/x\n: 2002-04-19: 終了処理\n\n  以下のスクリプトで 2 回シグナルを送らないと終了しない不具合が修正さ\n  れました。((<ruby-bugs-ja:PR#223>))\n\n    trap(:TERM, \"EXIT\")\n\n    END{\n      puts \"exit\"\n    }\n\n    Thread.start { Thread.stop }\n    sleep\n\n: 2002-04-17: Regexp#inspect\n\n  ((<ruby-bugs-ja:PR#222>))\n\n    p %r{\\/}\n\n    => ruby 1.6.7 (2002-03-01) [i586-linux]\n       /\\\\//\n\n    => ruby 1.6.7 (2002-05-04) [i586-linux]\n       /\\//\n\n: 2002-04-15: pack('U')\n\n  pack('U') を unpack('U') すると元に戻らないバグが修正されました。\n  (unpack は、バイト単位でなく文字単位の処理になりました)\n  ((<ruby-bugs-ja:PR#220>))\n\n    p [128].pack(\"U\")\n    p [128].pack(\"U\").unpack(\"U\")\n\n    => ruby 1.6.7 (2002-03-01) [i586-linux]\n       \"\\302\\200\"\n       [0]\n\n    => ruby 1.6.7 (2002-05-04) [i586-linux]\n       \"\\302\\200\"\n       [128]\n\n: 2002-04-11: IO#write\n\n  ソケットやパイプに対する EPIPE の検出に失敗することがありました。\n  ((<ruby-dev:16849>))\n\n: 2002-04-11: ((<\"cgi/session\">))    (*ドキュメント未反映*)\n\n  support for multipart form.\n\n: 2002-04-10: Object#((<Object/remove_instance_variable>))\n\n  指定したインスタンス変数が定義されていない場合例外 NameError を起こ\n  すようになりました。((<ruby-bugs-ja:PR#216>))\n\n        Object.new.instance_eval {\n          p remove_instance_variable :@foo\n        }\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           nil\n\n        => -:2:in `remove_instance_variable': instance variable @foo not defined (NameError)\n           ruby 1.6.7 (2002-04-10) [i586-linux]\n\n: 2002-04-04: Integer#((<Integer/step>))\n\n  第二引数が 1 よりも小さい場合に 0 を指定したと見なされエラーになって\n  いました。\n\n    1.step(2, 0.1) {|f| p f }\n\n    => -:1:in `step': step cannot be 0 (ArgumentError)\n            from -:1\n       ruby 1.6.7 (2002-03-01) [i586-linux]\n\n    => ruby 1.6.7 (2002-04-10) [i586-linux]\n       1\n       1.1\n        :\n       1.9\n\n: 2002-04-01: ((<組み込み変数/$~>))\n\n  $~ に nil を代入できないバグが修正されました。((<ruby-dev:16697>))\n\n    /foo/ =~ \"foo\"\n    p $~\n    $~ = nil\n    p $~\n    => ruby 1.6.7 (2002-03-01) [i586-linux]\n       #<MatchData:0x401b1be4>\n       -:3: wrong argument type nil (expected Match) (TypeError)\n                                              ^^^^^ MatchData の間違い\n    => ruby 1.6.7 (2002-04-04) [i586-linux]\n       #<MatchData:0x401b1c98>\n       nil\n\n: 2002-03-25 ((<BasicSocket/BasicSocket.do_not_reverse_lookup>))\n\n  $SAFE > 3 で値を設定できなくなりました。\n  ((<ruby-dev:16554>))\n\n: 2002-03-23 IO#((<IO/read>))\n\n  サイズが 0 で中身のあるファイル(Linux の /proc ファイルシステムでこ\n  のような場合があります)が File#read などで読めないバグが修正されまし\n  た。\n\n        p File.open(\"/proc/#$$/cmdline\").read\n\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           \"\"\n\n        => ruby 1.6.7 (2002-03-29) [i586-linux]\n           \"ruby-1.6\\000-v\\000-\"\n\n: 2002-03-22 ((<Module/module_eval>))\n\n  ((<Module/module_eval>)) のブロック内で定数やクラス変数のスコープが\n  変わることはなくなりました。((<ruby-dev:17876>))\n\n        class Foo\n          FOO = 1\n          @@foo = 1\n        end\n\n        FOO = 2\n        @@foo = 2\n\n        Foo.module_eval { p FOO, @@foo }\n\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           1\n           1\n\n        => ruby 1.6.7 (2002-03-29) [i586-linux]\n           2\n           2\n\n: 2002-03-22 ((<\"net/http\">))\n\n  Net::HTTP.new がブロックなしのときに nil を返していました。\n  ((<ruby-bugs-ja:PR#214>))\n\n  net/protocol は削除される方向にあるようで、その準備時に\n  エンバグしたそうです。\n\n: 2002-03-20 ((<File/File.expand_path>))\n\n  メモリの解放洩れがありました。((<ruby-bugs:PR#276>))\n\n: 2002-03-18 文字列リテラル\n\n  漢字コードの扱いが #{..} の中などで不完全な部分がありました。\n  ((<ruby-list:34478>))\n\n        #! ruby -Ks\n        p a = \"#{\"表\"}\"\n        => -:1: compile error in string expansion (SyntaxError)\n           -:1: unterminated string meets end of file\n           ruby 1.6.7 (2002-03-15) [i586-linux]\n        => ruby 1.6.7 (2002-03-19) [i586-linux]\n           \"表\"\n\n        #! ruby -Ks\n        p %[評価]\n        => -:2: parse error\n                   p %[評価]\n                           ^\n           ruby 1.6.7 (2002-03-15) [i586-linux]\n\n        => ruby 1.6.7 (2002-03-19) [i586-linux]\n           \"評価\"\n\n: 2002-03-16 $~\n\n  正規表現マッチのメソッドが実際には内部でマッチを実行しない場合に \n  $~ の状態をクリアしていませんでした。\n  ((<ruby-bugs-ja:PR#208>))\n\n        /foo/ =~ \"foo\"\n        /foo/ =~ nil\n        p $~\n\n        /foo/ =~ \"foo\"\n        $_ = nil; ~\"foo\"\n        p $~\n\n        /foo/ =~ \"foo\"\n        \"foo\".index(/bar/, 4)\n        p $~\n\n        /foo/ =~ \"foo\"\n        \"foo\".rindex(/bar/, -4)\n        p $~\n\n        => ruby 1.6.7 (2002-03-06) [i586-linux]\n           #<MatchData:0x401b1be4>\n           #<MatchData:0x401b198c>\n           #<MatchData:0x401b1644>\n           #<MatchData:0x401b1414>\n        => ruby 1.6.7 (2002-03-19) [i586-linux]\n           nil\n           nil\n           nil\n           nil\n\n: 2002-03-14 拡張ライブラリの autoload\n\n  拡張ライブラリに対して autoload が効いていませんでした。((<ruby-dev:16379>))\n\n    autoload :Fcntl, \"fcntl\"\n    require \"fcntl\"\n\n    => -:2:in `require': uninitialized constant Fcntl (NameError)\n            from -:2\n       ruby 1.6.7 (2002-03-01) [i586-linux]\n\n    => ruby 1.6.7 (2002-03-15) [i586-linux]\n\n: 2002-03-13 ((<getopts>))\n\n  refine. ((<ruby-dev:16193>)), ((<ruby-dev:16213>))\n\n: 2002-03-11 正規表現中の 8 進コード\n\n  正規表現中の \\nnn による 8 進記法で先頭が 0 の場合だけ、4桁を許して\n  いました。((<ruby-bugs-ja:PR#207>))\n\n    p /\\0001/ =~ \"\\0001\"   # equivalent to \"\\0\" + \"1\"\n    => -:1: warning: ambiguous first argument; make sure\n       ruby 1.6.7 (2002-03-01) [i586-linux]\n       nil\n    => -:1: warning: ambiguous first argument; make sure\n       ruby 1.6.7 (2002-03-15) [i586-linux]\n       0\n\n: 2002-03-11 trap\n\n  ((<ruby-bugs-ja:PR#206>))\n\n    trap('EXIT','Foo')\n    => -:1: [BUG] Segmentation fault\n       ruby 1.6.7 (2002-03-01) [i586-linux]\n    => ruby 1.6.7 (2002-03-15) [i586-linux]\n\n: 2002-03-10 メソッドの戻り値\n\n  以下のメソッドの戻り値が正しくなりました。((<ruby-bugs-ja:PR#205>))\n\n  * ((<Enumerable/each_with_index>)) が self を返すようになった(以前は nil)\n  * ((<Process/Process.setpgrp>)) が返す値が不定だった。\n  * ((<String/ljust>)), ((<String/rjust>)), ((<String/center>)) の結果に\n    変化がなくても常に dup した文字列を返すようになった\n\n: 2002-03-08 class variable\n\n  ((<ruby-talk:35122>))\n\n    class C\n      class << self\n        def test\n          @@cv = 5\n          p @@cv\n        end\n      end\n\n      test\n    end\n    => -:5:in `test': uninitialized class variable @@cv in C (NameError)\n            from -:9\n       ruby 1.6.7 (2002-03-01) [i586-linux]\n\n    => ruby 1.6.6 (2001-12-26) [i586-linux]\n       5\n\n: 2002-03-03 ((<Marshal/Marshal.load>))\n\n  Marshal.load が 1.7 のメソッド Proc#yield を呼んでいました。\n  ((<ruby-dev:16178>))\n\n    Marshal.load(Marshal.dump('foo'), proc {|o| p o})\n    => -:1:in `load': undefined method `yield' for #<Proc:0x401b1b30> (NameError)\n            from -:1\n       ruby 1.6.7 (2002-03-01) [i586-linux]\n\n    => ruby 1.6.6 (2001-12-26) [i586-linux]\n       \"foo\"\n\n== 1.6.6 (2001-12-26) -> 1.6.7 (2002-03-01)\n\n: 2002-02-20 true/false/nil の特異メソッド定義\n\n  これら擬似変数に特異クラス定義形式で特異メソッドを定義できるようにな\n  りました。\n\n        class <<true\n          def foo\n           \"foo\"\n          end\n        end\n        p true.foo\n        => -:1: no virtual class for true (TypeError)\n           ruby 1.6.6 (2001-12-26) [i586-linux]\n\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           \"foo\"\n\n: ((<time>)), URI\n\n  追加されました。\n\n: Ruby/Tk\n\n  バグ修正、機能追加 ((<ruby-dev:16139>)),((<ruby-dev:16153>))。\n\n: 数値リテラルの `_'\n\n  `_' を置ける場所の規則が見直され、String#hex などの数値変換メソッド\n  の挙動と共に規則が統一されました。((<rubyist:1018>)), ((<ruby-dev:15684>)),\n  ((<ruby-dev:15757>))\n\n: ((<Module/include>))\n\n  モジュールが再帰的に include されないようになりました。\n\n    module Foo; end\n    module Bar; include Foo; end\n    module Foo; include Bar; end\n\n    p Foo.ancestors\n\n    => ruby 1.6.6 (2001-12-26) [i586-linux]\n       [Foo, Bar, Foo]\n\n    => -:3:in `append_features': cyclic include detected (ArgumentError)\n            from -:3:in `include'\n            from -:3\n       ruby 1.6.6 (2002-01-28) [i586-linux]\n\n: メソッドの戻り値\n\n  以下のメソッドの戻り値が正しくなりました。\n  ((<ruby-bugs-ja:PR#182>)), ((<rubyist:1016>))\n\n  * Hash#default= が右辺を返すようになった(以前は self を返していた)。\n\n  * Dir#pos= が右辺を返すようになった(以前は self を返していた)。\n    (Dir#seek は、変わらず self を返します)\n\n  * Dir.glob がブロックを伴うとき nil を返すようになった(以前は false)\n\n  * IO#close がクローズ済みな IO に対して IOError を起こすようになった。\n\n  * IO#each_byte が self を返すようになった(以前は nil)\n\n: rb_define_module_under()\n\n  C 関数 rb_define_module_under() でモジュールを定義するときに同名の定\n  数が既に定義されていると失敗していました。((<ruby-talk:30203>))\n\n        Constants = 1\n        require 'syslog'\n        p Syslog::Constants\n\n        => -:2:in `require': Syslog::Fixnum is not a module (TypeError)\n                from -:2\n           ruby 1.6.6 (2001-12-26) [i586-linux]\n\n        => ruby 1.6.6 (2002-01-07) [i586-linux]\n           Syslog::Constants\n\n  このバグにより 1.6.7 が近いうちにリリースされるかもしれません\n  ((<ruby-talk:30387>))(やっぱそんなことはなかったようです。\n  これを見て、1.6.6 の stable-snapshot を使用している方は、2002/1/30 \n  の以下の変更(ChangeLog)\n\n        * re.c (rb_reg_search): should set regs.allocated.\n\n  で、メモリリークが起こるようになってることに注意してください。\n  2002/2/13 以降の修正版で直ってます。っと一度ハマッたので書いておきま\n  す)。\n\n== 1.6.5 (2001-09-19) -> 1.6.6 (2001-09-19)\n\n: ((<Syslog>))\n\n  追加されました。\n\n: CGI\n\n  Netscape(バージョンは？) のバグに対処しました\n  ((<ruby-list:32089>))\n\n: Time#localtime\n: Time#gmtime\n\n  フリーズした Time オブジェクトに対して一度だけ呼び出しを許しました。\n\n        t = Time.new.freeze\n        p t.gmtime\n        p t.localtime\n\n        => -:2:in `gmtime': can't modify frozen Time (TypeError)\n                from -:2\n           ruby 1.6.5 (2001-09-19) [i586-linux]\n\n        => ruby 1.6.5 (2001-11-01) [i586-linux]\n           Mon Nov 05 18:08:34 UTC 2001\n           -:3:in `localtime': can't modify frozen Time (TypeError)\n                from -:3\n\n: File::SEPARATOR\n: File::ALT_SEPARATOR\n: File::PATH_SEPARATOR\n: RUBY_PLATFORM\n: RUBY_RELEASE_DATE\n: RUBY_VERSION\n\n  これらは、freeze された文字列になりました。\n\n        p File::SEPARATOR.frozen?\n        p File::ALT_SEPARATOR.frozen?\n        p File::PATH_SEPARATOR.frozen?\n\n        => ruby 1.6.5 (2001-09-19) [i586-linux]\n           false\n           false\n           false\n\n        => ruby 1.6.5 (2001-11-01) [i586-linux]\n           true\n           false  # ここでは実行環境がLinuxなので ALT_SEPARATOR は nil\n           true\n\n: Integer[nth]\n\n  大きな値のインデックスに対して例外が発生していました。\n  ((<ruby-bugs-ja:PR#114>))\n\n        p(-1[10000000000])\n\n        => -:1:in `[]': bignum too big to convert into `int' (RangeError)\n                from -:1\n           ruby 1.6.5 (2001-09-19) [i586-linux]\n\n        => ruby 1.6.5 (2001-11-01) [i586-linux]\n           1\n\n  整数の負のインデックスに対して 0 を返すようにな・・・ってません。あれ？\n  ((<ruby-bugs-ja:PR#122>))\n\n        p(-1[-1])\n\n        => ruby 1.6.5 (2001-09-19) [i586-linux]\n           1\n        => ruby 1.6.5 (2001-11-01) [i586-linux]\n           1\n\n: Numeric#remainder\n\n  ((<ruby-bugs-ja:PR#110>))\n\n        p( 3.remainder(-3))\n        p(-3.remainder(3))\n\n        => ruby 1.6.5 (2001-09-19) [i586-linux]\n           3\n           -3\n        => ruby 1.6.5 (2001-11-01) [i586-linux]\n           0\n           0\n\n: END { ... }\n\n  END ブロックの中の END ブロックが実行されていませんでした。\n  ((<ruby-bugs-ja:PR#107>))\n\n        END {\n          p 1\n          END { p 2 }\n        }\n\n        => ruby 1.6.5 (2001-09-19) [i586-linux]\n           1\n\n        => ruby 1.6.5 (2001-11-01) [i586-linux]\n           1\n           2\n\n: String#succ\n\n((<ruby-talk:22557>))\n\n        p \"***\".succ\n        p \"*\".succ\n        p sprintf(\"%c\", 255).succ\n        p sprintf(\"*%c\", 255).succ\n        p sprintf(\"**%c\", 255).succ\n\n        => ruby 1.6.5 (2001-09-19) [i586-linux]\n           \"**+\"\n           \"\\001+\"\n           \"\\001\\000\"\n           \"\\001+\\000\"\n           \"*+\\000\"\n\n        => ruby 1.6.5 (2001-11-01) [i586-linux]\n           \"**+\"\n           \"+\"\n           \"\\001\\000\"\n           \"+\\000\"\n           \"*+\\000\"\n\n: method_missing\n\n  以下が Segmentation Fault していました。((<ruby-dev:14942>))\n\n        Module.constants.each {|c|\n          c = eval c\n          if c.instance_of?(Class)\n            p c\n            c.instance_methods.each {|m|\n              c.module_eval \"undef #{m};\"\n            }\n            c.module_eval {undef initialize}\n          end\n        }\n\n        => ruby 1.6.5 (2001-09-19) [i586-linux]\n           NotImplementedError\n           MatchData\n           Exception\n           Numeric\n           MatchData\n           Segmentation fault\n\n        => ruby 1.6.5 (2001-10-15) [i586-linux]\n           MatchData\n           NotImplementedError\n           FloatDomainError\n           LoadError\n           Float\n           Binding\n           SignalException\n           Module\n           -:6:in `method_missing': stack level too deep (SystemStackError)\n\n: %q(...)\n\n  % 記法によるリテラル表記でその区切り文字として英数字を指定\n  できなくなりました。\n\n     p %q1..1\n\n    => ruby 1.6.5 (2001-10-10) [i586-linux]\n       \"..\"\n    => -:1: unknown type of %string\n            p %q1..1\n                 ^\n       ruby 1.6.5 (2001-10-15) [i586-linux]\n\n: String#=~\n\n  String#=~ の呼出で両辺ともリテラルであったときに速度重視のためにメソッ\n  ドコールを行わなくなりました。(実際は、前からこのようにしようとして\n  いたがバグによりメソッドが呼び出されていた(しかもString#=~ でなく \n  Regexp#=~))\n\n    class String\n      def =~(arg)\n        [\"String#=~\", self, arg]\n      end\n    end\n\n    class Regexp\n      def =~(arg)\n        [\"Regexp#=~\", self, arg]\n      end\n    end\n\n    p \"foo\" =~ /foo/\n    p \"foo\" =~ Regexp.new(\"foo\")\n\n    => -:2: warning: discarding old =~\n       -:8: warning: discarding old =~\n       ruby 1.6.5 (2001-09-19) [i586-linux]\n       [\"Regexp#=~\", /foo/, \"foo\"]\n       [\"String#=~\", \"foo\", /foo/]\n\n    => -:2: warning: discarding old =~\n       -:8: warning: discarding old =~\n       ruby 1.6.5 (2001-10-10) [i586-linux]\n       0\n       [\"String#=~\", \"foo\", /foo/]\n\n  (((*組み込みのメソッドはこのような最適化が行われることがあるのでメソッ\n  ドの再定義の効果が及ばないことがある点に注意*))というか、メソッドが\n  再定義されたかどうかで、最適化の on/off をしてほしいなあ)\n\n: class 定義\n\n  既にクラスが定義されていて、そのクラスと異なるスーパークラスを明示的\n  に指定して再定義したとき、指定したスーパークラスが反映されていません\n  でした。((<ruby-bugs-ja:PR#87>))\n\n    class A\n      p self.id\n    end\n    class A < String\n      p self.id\n      p self.superclass\n    end\n\n    => ruby 1.6.5 (2001-09-19) [i586-linux]\n       537760880\n       -:4: warning: already initialized constant A\n       537757180\n       Object\n    => ruby 1.6.5 (2001-10-10) [i586-linux]\n       537760960\n       -:4: warning: already initialized constant A\n       537757200\n       String\n\n: %w(...)\n\n  配列リテラル %w(...) が構文解析器により文字列リテラルとして判断されて\n  いたため、以下のようなコードで異常な状態になっていました。\n  ((<ruby-bugs-ja:PR#91>))\n\n    %w!a! \"b\" \n    => -:1: tried to allocate too big memory (NoMemoryError)\n       ruby 1.6.5 (2001-09-19) [i586-linux]\n\n    => -:1: parse error\n           %w!a! \"b\" \n                    ^\n       ruby 1.6.5 (2001-10-10) [i586-linux]\n\n: Thread\n\n  Thread#status が aborting 状態に対して \"run\" を返していたバグが修正\n  されました。また、Thread#priority = val が val でなく self を返して\n  いました。((<rubyist:0820>)), ((<ruby-dev:14903>))\n\n: ((<Marshal>))\n\n  無名のクラス／モジュールは dump できないようになりました。\n\n    p Marshal.dump(Class.new)\n\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       \"\\004\\005c\\031#<Class 0lx401a6b44>\"\n\n    => -:1:in `dump': can't dump anonymous class #<Class 0lx401ab980> (ArgumentError)\n            from -:1\n       ruby 1.6.5 (2001-10-05) [i586-linux]\n\n: UNIXSocket#addr\n\n  UNIXSocket#addr がゴミを返していました(BSD の場合？)。\n  ((<ruby-bugs-ja:PR#85>))\n\n        # server\n        require 'socket'\n        File.unlink(\"/tmp/sss\")\n        sock = UNIXServer.new(\"/tmp/sss\").accept\n\n        # client\n        require 'socket'\n        sock = UNIXSocket.new(\"/tmp/sss\").addr\n\n        => [\"AF_UNIX\", \"\\031((\\306\\031(\\010\"]\n\n        => [\"AF_UNIX\", \"\"]\n\n: ???\n        ((<ruby-talk:21722>))\n\n        class Ptr\n                def initialize(obj) @obj = obj end\n                def []=() @obj = obj end\n                def []() @obj end\n        end\n        module Kernel\n                def _ptr() Ptr.new(self) end\n        end\n\n        def foo(int)\n                int[] += 1\n        end\n        x = 1._ptr\n        foo(x)\n        puts x[]\n\n        => -:11: [BUG] Segmentation fault\n           ruby 1.6.5 (2001-09-19) [i586-linux]\n\n        => -:11:in `[]=': wrong # of arguments(1 for 0) (ArgumentError)\n                   from -:11:in `foo'\n                   from -:14\n           ruby 1.6.5 (2001-10-05) [i586-linux]\n\n: Subclass of String and Array\n\n  String, Array のサブクラスで特定のメソッドを呼ぶと、String, Array\n  になっていました。\n\n        class Foo < String\n        end\n        p Foo.new(\"\").class\n        p Foo.new(\"foo\")[0,0].class              # String ???\n        p Foo.new(\"foo\")[1,1].class\n        p Foo.new(\"foo\").succ.class\n        p Foo.new(\"foo\").reverse.class\n        p((Foo.new(\"foo\") * 5).class)\n        p Foo.new(\"foo\").gsub(/foo/, \"bar\").class\n        p Foo.new(\"foo\").sub(/foo/, \"bar\").class\n        p Foo.new(\"foo\").ljust(10).class\n        p Foo.new(\"foo\").rjust(10).class\n        p Foo.new(\"foo\").center(10).class\n\n        => ruby 1.6.5 (2001-09-19) [i586-linux]\n           Foo\n           String\n           String\n           String\n           String\n           String\n           String\n           Foo\n           String\n           String\n           String\n\n        => ruby 1.6.5 (2001-10-05) [i586-linux]\n           Foo\n           String\n           Foo\n           Foo\n           Foo\n           Foo\n           Foo\n           Foo\n           Foo\n           Foo\n           Foo\n\n        class Bar < Array\n        end\n        bar = Bar.new\n        p bar.class\n        p bar.push(1,2,3)\n        p bar.class\n        p bar[0,0].class            # => Array ???\n        p bar[0,1].class\n        p ((bar * 5).class)\n\n        => -:9: warning: p (...) interpreted as method call\n           ruby 1.6.5 (2001-09-19) [i586-linux]\n           Bar\n           [1, 2, 3]\n           Bar\n           Array\n           Array\n           Array\n        => -:9: warning: p (...) interpreted as method call\n           ruby 1.6.5 (2001-10-05) [i586-linux]\n           Bar\n           [1, 2, 3]\n           Bar\n           Array\n           Bar\n           Bar\n\n== 1.6.4 (2001-06-04) -> 1.6.5 (2001-09-19)\n\n: $_, $~, if a..b\n\n  関数の中からThread#runを使うと、そのスレッドとスコープを共有する親スレッ\n  ドの$_, $~が、子スレッドのもので上書きされてしまっていました。\n  ((<ruby-dev:14743>))\n\n        def foo(t)\n          t.run\n        end\n\n        t = Thread.start do\n          t = $_= \"sub\"\n          loop{Thread.stop;puts \"sub:#$_\"}\n        end\n\n        $_ = \"main\"\n        t.run                   # => sub:sub\n        puts \"main:#$_\"         # => main:main\n        foo(t)                  # => sub:sub\n        puts \"main:#$_\"         # => main:sub\n        => ruby 1.6.4 (2001-06-04) [i586-linux]\n           sub:sub\n           main:main\n           sub:sub\n           main:sub\n        => ruby 1.6.5 (2001-09-19) [i586-linux]\n           sub:sub\n           main:main\n           sub:sub\n           main:main\n\n: net/telnet\n\n  Net::Telnet が特定のホストへ接続後、動かない事がありました。\n  ((<ruby-list:31303>))\n\n: CGI#header\n\n  以下のようなスクリプトでTEXT_PLAINが\"text/plain; charset=iso-8859-1\"\n  のように書き換えられていました。\n  ((<ruby-dev:14716>))\n\n        require 'cgi'\n\n        TEXT_PLAIN = \"text/plain\"\n\n        cgi = CGI.new\n        print cgi.header(\"type\" => TEXT_PLAIN,\n                         \"charset\" => \"iso-8859-1\")\n        printf(\"TEXT_PLAIN: %s\\n\", TEXT_PLAIN)\n\n        => ruby 1.6.4 (2001-06-04) [i586-linux]\n           Content-Type: text/plain; charset=iso-8859-1\n           ^M\n           TEXT_PLAIN: text/plain; charset=iso-8859-1\n           TEXT_PLAIN: text/plain\n\n        => ruby 1.6.5 (2001-09-19) [i586-linux]\n           Content-Type: text/plain; charset=iso-8859-1\n           ^M\n           TEXT_PLAIN: text/plain\n\n: Dir.chdir\n\n        環境変数 HOME, LOGDIR のいずれも定義されていないとき引数なしの \n        Dir.chdir で ArgumentError 例外を起こすようになりました\n\n        ENV['HOME'] = nil\n        ENV['LOGDIR'] = nil\n        Dir.chdir\n        => -:3:in `chdir': Bad address (Errno::EFAULT)\n                from -:3\n           ruby 1.6.4 (2001-08-26) [i586-linux]\n        => -:3:in `chdir': HOME/LOGDIR not set (ArgumentError)\n                from -:3\n           ruby 1.6.5 (2001-09-19) [i586-linux]\n\n: Dir.glob\n\n  以下のコードが無限ループになっていました。\n\n        Dir.mkdir(\"test?\") rescue nil\n        p Dir.glob(\"test?/*\")\n        => ruby 1.6.5 (2001-09-19) [i586-linux]\n           []\n\n: jcode\n  バグがいくつか修正されました。((<ruby-list:31238>))\n\n\n〜この間、空白期間〜\n\n: ((<Dir>)).glob\n\n  Dir.glob(\"*/**/*\")がサブディレクトリのファイルを二度返していました。\n  ((<ruby-dev:14576>))\n\n    Dir.mkdir('foo') rescue nil\n    Dir.mkdir('foo/bar') rescue nil\n    p Dir.glob('*/**/*')\n\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       [\"foo/bar\", \"foo/bar\"]\n\n    => ruby 1.6.4 (2001-08-26) [i586-linux]\n       [\"foo/bar\"]\n\n: ((<UnboundMethod>))#bind\n\n  モジュールの UnboundMethod オブジェクトを bind することができませんでした。\n  ((<rubyist:0728>))\n\n    module Foo\n      def foo\n        :foo\n      end\n    end\n\n    class Bar\n      include Foo\n    end\n\n    m = Foo.instance_method :foo\n    p m.bind(Bar.new).call\n\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       -:12:in `bind': first argument must be an instance of Foo (TypeError)\n            from -:12\n\n    => ruby 1.6.4 (2001-08-23) [i586-linux]\n       :foo\n\n: 組み込みクラスの置き換え\n\n  組み込みクラス／モジュール(を代入した定数)への代入を行ったときに警告を\n  出すようになりました。\n\n    Array = nil\n    p Array\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       nil\n\n    => -:1: warning: already initialized constant Array\n       ruby 1.6.4 (2001-08-23) [i586-linux]\n       nil\n\n: ((<Regexp>))\n\n  括弧の数より大きな数のバックリファレンスが何にでもマッチしていました。\n  ((<ruby-list:30975>))\n\n    p /(foo)\\2/ =~ \"foobar\"\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       0\n    => ruby 1.6.4 (2001-08-23) [i586-linux]\n       nil\n\n: ((<TCPSocket>)).open\n\n  ((<Cygwin>)) で ((<TCPSocket>)).open がタイミングによってエラー(Errno::EINVAL,\n  EALREADY)になることがある問題に対処しました。(1.6.4 20010712以降)\n  ((<ruby-talk:9939>)), ((<ruby-talk:16632>)),\n  ((<ruby-list:24702>)), ((<ruby-list:27805>)), ((<ruby-list:30512>)) 等など\n\n: resolv, resolv-replace\n\n  追加。rubyで実装したリゾルバ(DNSの名前解決) とSocket関連のクラスでこ\n  のライブラリを使用するためのライブラリです。\n\n  rubyで実装したリゾルバは、timeout の制御が効きます(つまり、名前解\n  決中にThreadが切替え可能ということです)\n\n    require 'resolv'\n    p Resolv.new.getaddress(\"www.ruby-lang.org\").to_s\n\n    => /usr/local/lib/ruby/1.6/resolv.rb:160: warning: timeout (...) interpreted as method call\n       /usr/local/lib/ruby/1.6/resolv.rb:55: warning: instance variable @initialized not initialized\n       /usr/local/lib/ruby/1.6/resolv.rb:113: warning: instance variable @initialized not initialized\n       /usr/local/lib/ruby/1.6/resolv.rb:392: warning: instance variable @initialized not initialized\n       ruby 1.6.4 (2001-08-23) [i586-linux]\n       \"210.251.121.214\"\n\n: ((<Digest|digest>)) モジュール\n\n  SHA1, MD5 は Digest::SHA1, Digest::MD5 に置き換えられました。\n  Digest::SHA256, Digest::SHA384,  Digest::SHA512, Digest::RMD160\n  も新たに追加されました。\n\n    require 'digest/md5'\n    include Digest\n\n    md = MD5.new\n    md << \"abc\"\n    puts md\n\n    puts MD5.hexdigest(\"123\")\n\n: ((<Struct>))\n\n  フリーズされた構造体オブジェクトが変更できていました。また、$SAFE =\n  4 のときの変更を禁止するようにしました。((<ruby-talk:19167>))\n\n    cat = Struct.new(\"Cat\", :name, :age, :life)\n    a = cat.new(\"cat\", 12, 7).freeze\n    a.name = \"dog\"\n    p a\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       #<Struct::Cat name=\"dog\", age=12, life=7>\n    => ruby 1.6.4 (2001-08-06) [i586-linux]\n       -:4:in `name=': can't modify frozen Struct (TypeError)\n            from -:4\n\n    cat = Struct.new(\"Cat\", :name, :age, :life)\n    a = cat.new(\"cat\", 12, 7)\n    Thread.new do\n       abort_on_exception = true\n       $SAFE = 4\n       a.life -= 1\n    end.join\n    p a.life\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       6\n    => ruby 1.6.4 (2001-08-06) [i586-linux]\n       -:6:in `life=': Insecure: can't modify Struct (SecurityError)\n            from -:3:in `join'\n            from -:3\n\n: ((<String>))#rindex\n\n  rindex に正規表現を渡したときの動作にバグがありました。((<ruby-dev:13843>))\n  (1.6.4 リリース後のバグです)\n\n    p \"foobar\".rindex(/b/)\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       3\n\n    => ruby 1.6.4 (2001-06-19) [i386-freebsd5.0]\n       nil\n\n    => ruby 1.6.4 (2001-08-06) [i586-linux]\n       3\n\n: ((<require|組み込み関数>))\n\n  requireに ~ で始まるファイル名を指定したとき、拡張子がついてな\n  いとロードできなくなっていました。((<ruby-dev:13756>))\n\n    $ echo p __FILE__ > ~/a.rb\n    $ ruby17 -v -r~/a -e0\n    ruby 1.7.1 (2001-07-03) [i686-linux]\n    0: No such file to load -- ~/a (LoadError)\n    $ ruby16 -v -r~/a -e0\n    ruby 1.6.4 (2001-07-02) [i686-linux]\n    0: No such file to load -- ~/a (LoadError)\n    $ ruby14 -v -r~/a -e0\n    ruby 1.4.6 (2000-08-16) [i686-linux]\n    \"/home/nobu/a.rb\"\n\n: ((<String>))#each_line\n\n  正しく汚染が伝搬していませんでした。((<ruby-dev:13755>))\n\n    \"foo\\nbar\\n\".taint.each_line {|v| p v.tainted?}\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       false\n       true\n    => ruby 1.6.4 (2001-08-06) [i586-linux]\n       true\n       true\n\n: ((<NKF|nkf>)).nkf\n\n  正しく汚染が伝搬していませんでした。((<ruby-dev:13754>))\n\n    require 'nkf'\n    p NKF.nkf(\"-j\", \"a\".taint).tainted?\n\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       false\n    => ruby 1.6.4 (2001-08-06) [i586-linux]\n       true\n\n: ruby -x\n\n  オプション ((<Rubyの起動/-x[directory]>)) を指定したときにスクリ\n  プトを実行せずに終了することがありました。((<ruby-dev:13752>))\n\n: attr_*\n\n  アクセサに余計な引数を渡してもエラーになりませんでした。\n  ((<ruby-dev:13748>))\n\n    class C\n      def initialize\n        @message = 'ok'\n      end\n      attr_reader :message\n    end\n    puts C.new.message(1,2,3)\n\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       ok\n    => ruby 1.6.4 (2001-08-06) [i586-linux]\n       -:7:in `message': wrong # of arguments(3 for 0) (ArgumentError)\n            from -:7\n\n: ((<Readline|readline>)).completion_append_character\n: ((<Readline|readline>)).completion_append_character=\n\n  追加。GNU Readline ライブラリの変数 (({rl_completion_append_character}))\n  のアクセサ。(この変数は GNU readline 2.1 以降で使えます)\n  ((<ruby-ext:01760>))\n\n: ((<Socket::Constants>))\n\n  ソケット関連の定数のうち以下が新規に追加されました(システムに定義さ\n  れている場合に限る)。\n\n    SO_PASSCRED\n    SO_PEERCRED\n    SO_RCVLOWAT\n    SO_SNDLOWAT\n    SO_RCVTIMEO\n    SO_SNDTIMEO\n    SO_SECURITY_AUTHENTICATION\n    SO_SECURITY_ENCRYPTION_TRANSPORT\n    SO_SECURITY_ENCRYPTION_NETWORK\n    SO_BINDTODEVICE\n    SO_ATTACH_FILTER\n    SO_DETACH_FILTER\n    SO_PEERNAME\n    SO_TIMESTAMP\n\n: ((<require|組み込み関数>)) / $LOAD_PATH\n\n  Changed to use a new algorithm to locate a library.\n\n  Now when requiring \"foo\", the following directories are searched for\n  the library in the order listed.\n\n    $prefix/lib/ruby/site_ruby/$ver/foo.rb\n    $prefix/lib/ruby/site_ruby/$ver/foo.so\n    $prefix/lib/ruby/site_ruby/$ver/$arch/foo.rb\n    $prefix/lib/ruby/site_ruby/$ver/$arch/foo.so\n    $prefix/lib/ruby/site_ruby/foo.rb\n    $prefix/lib/ruby/site_ruby/foo.so\n    $prefix/lib/ruby/$ver/foo.rb\n    $prefix/lib/ruby/$ver/foo.so\n    $prefix/lib/ruby/$ver/$arch/foo.rb\n    $prefix/lib/ruby/$ver/$arch/foo.so\n    ./foo.rb\n    ./foo.so\n\n  The previous behavior had a potential security risk because a\n  foo.rb (if exists) in the current directory is located prior to a\n  foo.so in $prefix/lib/ruby/site_ruby/$ver/$arch.\n\n  ((<ruby-bugs:PR#140>)), ((<ruby-ext:01778>)), ((<ruby-dev:13659>))\n\n: sync\n: mutex_m\n\n  Fixed for obj.extend(Sync_m) and obj.extend(Mutex_m).((<ruby-dev:13463>))\n\n    $ ruby -v -rsocket -rmutex_m -e 's=TCPSocket.new(\"localhost\",25); s.extend(Mutex_m)'\n    ruby 1.6.4 (2001-06-04) [i386-linux]\n    /usr/lib/ruby/1.6/mutex_m.rb:104:in `initialize': wrong # of arguments (0 for 1) (ArgumentError)\n            from /usr/lib/ruby/1.6/mutex_m.rb:104:in `initialize'\n            from /usr/lib/ruby/1.6/mutex_m.rb:50:in `mu_extended'\n            from /usr/lib/ruby/1.6/mutex_m.rb:34:in `extend_object'\n            from -e:1:in `extend'\n            from -e:1\n\n: $SAFE / ((<load|組み込み関数>))\n\n  1 <= $SAFE <= 3 で、第二引数が true のとき汚染されたファイル名を\n  指定しても load() できてしまうバグが修正されました。((<ruby-dev:13481>))\n\n    $SAFE = 1\n    filename = \"foo\"\n    filename.taint\n    p load(filename, true)\n\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       true\n\n    => ruby 1.6.4 (2001-08-06) [i586-linux]\n       -:4:in `load': Insecure operation - load (SecurityError)\n            from -:4\n\n: ((<Regexp>))\n\n  以下で、前者がマッチしませんでした。((<ruby-talk:16233>))\n\n    puts \"OK 1\" if /(.|a)bd/ =~ \"cxbd\"\n    puts \"OK 2\" if /(a|.)bd/ =~ \"cxbd\"\n\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       OK 2\n    => ruby 1.6.4 (2001-08-06) [i586-linux]\n       OK 1\n       OK 2\n\n: ((<Marshal>))\n\n  モジュールのロードの型チェックに誤りがありました。この変更によりdump\n  フォーマットのマイナーバージョンが1あがりました\n\n    p Marshal.dump(Object.new).unpack(\"CC\").join(\".\")\n        => ruby 1.6.4 (2001-06-04) [i586-linux]\n           \"4.5\"\n    p Marshal.dump(Object.new).unpack(\"CC\").join(\".\")\n        => ruby 1.6.4 (2001-06-11) [i586-linux]\n           \"4.6\"\n\n: $SAFE / ((<クラス／メソッドの定義/def>))\n\n  doc/NEWS には\n\n    Fixed so defining a new method is allowed under $SAFE == 4, which\n    previously wasn't.\n\n  とあるけど実際にはできません。\n\n    $SAFE = 4; def a; end\n\n    => -:1: Insecure operation `(null)' at level 4 (SecurityError)\n       ruby 1.6.4 (2001-06-04) [i586-linux]\n\n    => -:1: Insecure: can't define method (SecurityError)\n       ruby 1.6.4 (2001-08-06) [i586-linux]\n\n  対応するChangeLogは以下のようです。\n\n    Tue Jun  5 15:16:06 2001  Yukihiro Matsumoto  <matz@ruby-lang.org>\n\n            * eval.c (rb_add_method): should not call rb_secure(), for\n              last_func may not be set.\n\n  差分は以下のようです。\n\n    @@ -227,10 +227,7 @@ rb_add_method(klass, mid, node, noex)\n         NODE *body;\n\n         if (NIL_P(klass)) klass = rb_cObject;\n    -    if (klass == rb_cObject) {\n    -       rb_secure(4);\n    -    }\n    -    if (rb_safe_level() >= 4 && !OBJ_TAINTED(klass)) {\n    +    if (rb_safe_level() >= 4 && (klass == rb_cObject || !OBJ_TAINTED(klass))) {\n            rb_raise(rb_eSecurityError, \"Insecure: can't define method\");\n         }\n         if (OBJ_FROZEN(klass)) rb_error_frozen(\"class/module\");\n\n  また今度調べ直します。\n\n: ((<IO>))#ioctl\n\n  第二引数に Bignum も受け付けるようになりました(long int の範囲をカバー\n  するため)\n\n== 1.6.3 (2001-03-19) -> 1.6.4 (2001-06-04)\n\n: ((<Hash>))#replace\n\n  ハッシュのイテレート中に、そのハッシュのある要素を削除して、\n  他のハッシュへreplaceするとAbortしていました。((<ruby-dev:13432>))\n\n    h  = { 10 => 100, 20 => 200 }\n    h2 = { }\n\n    h.each { |k, v|\n      if (k == 10)\n        h.delete(10)\n        h2.replace(h)  # => Abort core dumped\n      end\n    }\n\n: $SAFE / ((<File>)).unlink\n\n  File.unlink は引数が汚染されてなくても $SAFE >= 2 の環境下では\n  禁止するようになりました。((<ruby-dev:13426>))\n\n    touch foo\n    ruby -v -e '$SAFE=2;File.unlink(\"foo\")'\n\n    => ruby 1.6.3 (2001-03-19) [i586-linux]\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       -e:1:in `unlink': Insecure operation `unlink' at level 2 (SecurityError)\n               from -e:1\n\n: ((<Object>))#untaint\n\n  凍結したオブジェクトに対してuntaintできないようにしました。((<ruby-dev:13409>))\n\n    a = Object.new\n    a.taint\n    a.freeze\n    a.untaint\n\n    => ruby 1.6.3 (2001-03-19) [i586-linux]\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       -:4:in `untaint': can't modify frozen object (TypeError)\n               from -:4\n\n: ruby -T4\n\n  オプション ((<-T4|Rubyの起動/-T[level]>)) を指定したとき、ARGV を\n  変更できないためプログラムの実行ができませんでした。\n  ((<ruby-dev:13401>))\n\n    touch foo\n    ruby-1.6.3 -v -T4 foo\n    => ruby 1.6.3 (2001-03-19) [i586-linux]\n       foo: Insecure: can't modify array (SecurityError)\n\n: ((<Regexp>))\n\n  正規表現中の \\1 .. \\9 は常にバックリファレンスとして解釈されるように\n  なりました(以前は対応する括弧があればバックリファレンス、なければ8進\n  の文字コードとして解釈されていました)。\n\n  正規表現で8進文字コードを指定するには \\001 のように3桁で指定します。\n\n  また、対応する括弧のないバックリファレンスや対応する括弧が自身を含む\n  バックリファレンスは常にマッチに失敗するようになりました。\n\n    p /(foo)\\2/ =~ \"foo\\002\"\n    => ruby 1.6.3 (2001-03-19) [i586-linux]\n       0\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       0\n    => ruby 1.6.4 (2001-08-23) [i586-linux]\n       nil\n\n  (上記の通り 1.6.4 にはまだバグがありました 2001-08-23 あたりで修正さ\n  れています ((<ruby-list:30975>)))\n\n    p /(foo\\1)/ =~ \"foo\"\n    => ruby 1.6.3 (2001-03-19) [i586-linux]\n       0\n    => ruby 1.6.4 (2001-06-04) [i586-linux]\n       nil\n\n: 汚染文字列の伝搬\n\n  以下は、すべて true を返すようになりました。((<ruby-dev:13340>))\n\n    # []=\n    s1 = \"abc\"\n    s2 = \"cde\".taint\n    s1[0]= s2\n    p s1.tainted?             # => false\n\n    # crypt\n    s = \"abc\".taint\n    p s.crypt(\"cd\").tainted?  # => false\n\n    # ljust\n    s = \"abc\".taint\n    p s.ljust(10).tainted?    # => false\n\n    # rjust\n    s = \"abc\".taint\n    p s.rjust(10).tainted?    # => false\n\n    # center\n    s = \"abc\".taint\n    p s.center(10).tainted?   # => false\n\n: rb_yield_0()\n\n  C API から yield されたとき 1 つの引数が 1 要素の配列として渡されていました。\n  ((<ruby-dev:13299>))\n\n    class X\n      include Enumerable\n\n      def each(&block)\n        block.call(1,2)\n        block.call(2,3)\n        block.call(3,4)\n      end\n    end\n\n    x = X.new\n    p x.to_a #=> [[1], [2], [3]]\n\n    # => ruby 1.6.3 (2001-03-19) [i586-linux]\n         [[1], [2], [3]]\n\n    # => ruby 1.6.4 (2001-06-04) [i586-linux]\n         [1, 2, 3]\n\n: $SAFE / alias\n\n  $SAFE = 4 のときグローバル変数のエイリアスを許さないようにしました。\n  ((<ruby-dev:13287>))\n\n: ((<open3/Open3.popen3>))\n\n  終了したプロセスが at_exit を呼ばないようにしました。\n  (exit を exit! に修正) ((<ruby-dev:13170>))\n\n: ((<SizedQueue>))#pop\n\n  以下のコードでデッドロックが起こらないようにしました。((<ruby-dev:13169>))\n\n    ruby -r thread -e 'q = SizedQueue.new(1); q.push(1);'\\\n                   -e 'Thread.new{sleep 1; q.pop}; q.push(1);'\n\n: ((<SizedQueue>))#max=\n\n  maxが現在値より大きい時にその差の分だけ待ちスレッドを起こす処理\n  の判定に誤りがありました。((<ruby-dev:13170>))\n\n: ((<Queue>))\n: ((<SizedQueue>))\n\n  ((<Thread>))#run を呼ぶ直前にスレッドが死んでいた場合に ((<ThreadError>))\n  が発生する問題に対処しました。((<ruby-dev:13194>))\n\n: Ctrl-C (Interrupt)が効かなくなる\n\n  ((<ruby-dev:13195>))\n\n    th1 = Thread.start {\n      begin\n        Thread.stop\n      ensure\n        Thread.pass\n        Thread.stop\n      end\n    }\n    sleep 1\n\n  (確認できる限りでは ruby-1.7.0 (2001-05-17) 以降で治ってますが、\n  1.6 には取り込まれていません)\n\n: ((<Array>))#&\n: ((<Array>))#|\n: ((<Array>))#uniq\n\n  結果の配列の要素が freeze され変更不可になっていました。((<ruby-list:29665>))\n\n    (%w(foo bar) & %w(foo baz))[0].upcase!\n    => -:1:in `upcase!': can't modify frozen string (TypeError)\n\n    %w(foo bar bar baz).uniq[0].upcase!\n    => -:1:in `upcase!': can't modify frozen string (TypeError)\n\n: ((<shell>))\n\n    shell 0.6 が標準ライブラリとして新規に追加されました。\n    (ドキュメントが doc ディレクトリにあります)\n\n: ((<forwardable>))\n\n    forwardable 1.1 が標準ライブラリとして新規に追加されました。\n    (ドキュメントが doc ディレクトリにあります)\n\n: ((<irb>)) & irb-tools\n\n    irb と irb-tools がそれぞれ 0.7.4 と 0.7.1 にバージョンアップしました。\n\n: 夏時間\n\n  夏時間の考慮に不備がありました(？) ((<ruby-bugs-ja:PR#46>))\n\n    env TZ=America/Managua ruby -e 'p Time.local(1998,12,1,0,59,59)'\n    => Mon Nov 30 01:59:59 EST 1998\n    env TZ=America/Managua ruby -e 'p Time.local(1998,12,1,0,59,59).tv_sec'   \n    => 912409199\n\n: SIGINFO\n\n  4.4BSD のシグナル SIGINFO に対応しました。((<ruby-bugs-ja:PR#45>))\n\n: ((<Thread>)).stop で SEGV\n\n  ((<Thread>)).stop で SEGV することがありました。((<ruby-dev:13189>))\n\n: rescue 修飾\n\n  以下が 1.6.3 で parse error になっていたバグが修正されました。\n  ((<ruby-dev:13073>)), ((<ruby-dev:13292>))\n\n    raise \"\" rescue []\n    raise \"\" rescue (p \"foo\"; true)\n    raise \"\" rescue -1\n    raise \"\" rescue (-1)\n\n: ((<Thread>))\n\n  以下は dead lock にならなくなりました。\n\n    Thread.start { Thread.stop }\n    sleep\n\n    => deadlock 0x40199b58: 2:0  - -:1\n       deadlock 0x401a2528: 2:4 (main) - -:2\n       -:2:in `sleep': Thread: deadlock (fatal)\n               from -:2\n       ruby 1.6.3 (2001-03-19) [i586-linux]\n\n: ((<Module>))#const_defined?\n: ((<Module>))#const_get\n: ((<Module>))#const_set\n\n  これらのメソッドが定数以外にアクセス可能になっていたバグが修正されました\n  ((<ruby-dev:13019>))\n\n: ((<Marshal>)).dump\n\n  ((<Float>)) を dump するときの精度が \"%.12g\" から \"%.16g\" になりました。\n  ((<ruby-list:29349>))\n\n: ((<Fixnum>))#[]\n\n  sizeof(long) > sizeof(int) なシステムでのバグが修正されたようです。\n\n: 正規表現\n\n  まれなバグが2件修正されました ((<ruby-talk:13658>)), ((<ruby-talk:13744>))\n\n: retry\n\n  以下が 1.6.3 で正常に機能しませんでした((<ruby-talk:13957>))\n\n        def WHILE(cond)\n          return if not cond\n          yield\n          retry\n        end\n\n        i=0\n        WHILE(i<3) {\n          print i\n          i+=1\n        }\n\n        ruby 1.6.2 (2000-12-25) [i586-linux]\n        => 012\n\n        ruby 1.6.3 (2001-03-19) [i586-linux]\n        => 0\n\n        ruby 1.6.4 (2001-05-02) [i586-linux]\n        => 012\n\n: ((<File::Stat>))#size\n\n  1G byte 以上のファイルに対して正しくファイルサイズを返していませんでした。\n\n        File.open(\"/tmp/1GB\", \"w\") {|f|\n          f.seek(2**30-1, 0)\n          f.puts\n          f.flush\n          p f.stat.size\n        }\n\n        # => ruby 1.6.3 (2001-04-03) [i586-linux]\n             -1073741824\n        # => ruby 1.6.4 (2001-04-19) [i586-linux]\n             1073741824\n\n: ((<Float>))#modulo, ((<Float>))#divmod\n\n  なんか修正されたみたいです ((<ruby-dev:12718>))\n\n: ((<ObjectSpace>))#_id2ref\n\n  不正に例外を返す場合がありました。\n\n: malloc の再帰呼び出し問題\n\n  stdio が内部で malloc() を呼び出す場合、Thread と相性が悪かったことに対\n  処しました。(setvbuf() を使用することで malloc() が呼ばれるのを避けた)\n  ((<ruby-dev:12795>))\n\n: ((<File>))#flock\n\n  File#flock がロック済みの場合に false を返さず Errno::EACCES 例外を\n  あげる場合がありました(flock()がないシステムの場合)\n\n: ((<File::Stat>)).new(filename)\n\n  追加 ((<ruby-dev:12803>))\n\n: ((<Bignum>))#% の計算誤り\n\n  % の計算に誤りが出ることがあるバグが(再度)修正されました\n\n        a = 677330545177305025495135714080\n        b = 14269972710765292560\n        p a % b  #=> 0\n        p -a % b #=> \n\n        => ruby 1.6.3 (2001-04-02) [i386-cygwin]\n           0\n           14269972710765292560\n\n        => ruby 1.6.4 (2001-04-19) [i586-linux]\n           0\n           0\n\n: ((<Marshal>))\n  Bignum を dump -> load した結果が元の値と異なる場合がありました。\n\n  これに関連する修正が 1.6.3 リリース後、3回ほど行われています。\n  stable-snapshot の\n    ruby 1.6.3 (2001-03-22)\n  以降を使用してください。\n\n: Universal Naming Convention(UNC) のサポート(win32)\n  UNC 形式のパス名 (//host/share) がサポートされました。\n  バックスラッシュ(`(({\\}))')ではなくスラッシュ(`(({/}))')を使います。\n  (元もとサポートされてたのがバグ修正された？？)\n\n: ((<Dir>)).glob (win32)\n  カレントディレクトリ(./)に対するglobが失敗していました。\n        p Dir[\"./*.c\"]\n        => []\n\n== 1.6.2 -> 1.6.3 (2001-03-19)\n\n: do .. end と { .. }\n  結合強度の違いがなくなっていたバグが修正されました。\n\n  1.6.0 から 1.6.2 までのバージョンでは、\n     method v { .. }\n     method v do .. end\n  の両者に違いがありませんでした。本来の挙動は((<メソッド呼び出し/イテレータ>))\n  に書かれた通りです。\n\n: ((<Bignum>))#% の計算誤り\n  % の計算に誤りが出ることがあるバグが修正されました\n\n    ruby-1.6.2 -ve 'p 6800000000%4000000000'\n    => ruby 1.6.2 (2000-12-25) [i586-linux]\n       -1494967296\n\n    ruby-1.6.3 -ve 'p 6800000000%4000000000'\n    => ruby 1.6.3 (2001-03-10) [i586-linux]\n       2800000000\n\n: 特異メソッド定義\n  通常のメソッド定義と同様に rescue, ensure 節の指定が可能になりました\n\n    obj = Object.new\n    def obj.foo\n    rescue\n    ensure\n    end\n\n: ((<String>))#count\n: ((<String>))#delete\n: ((<String>))#squeeze\n: ((<String>))#tr\n: ((<String>))#tr_s\n  '\\-' で '-' を指定可能になりました(tr! 等、bang method も同様)。\n  以前は、文字列の先頭または末尾の'-'だけを'-'と見なしていました。\n\n    p \"-\".tr(\"a-z\",  \"+\")  # => \"-\"\n    p \"-\".tr(\"-az\",  \"+\")  # => \"+\"\n    p \"-\".tr(\"az-\",  \"+\")  # => \"+\"\n    p \"-\".tr('a\\-z', \"+\")  # => \"+\" # シングルクォート文字列であることに注意\n    p \"-\".tr(\"a\\\\-z\", \"+\") # => \"+\" # \"\" では二重に\\が必要\n\n: ((<Regexp>))#==\n  すべてのオプションも同じならば同じと判断するようになりました。\n  以前は、漢字コード指定と /i (case-insensitive) の指定が同じで\n  あれば同じと判断していました。\n\n: %q(), %w()\n  リテラルの終了文字(`)'など)をバックスラッシュエスケープ可能になりました。\n\n: ((<Dir>)).glob\n  \"**/\" がシンボリックリンクを辿らなくなりました。\n\n: ((<String>))#[]\n  \"a\"[1,2] が \"\" を返すようになりました。\n\n    p \"a\"[1,2]\n    => \"\"\n\n  これは本来の挙動です。過去のバージョン(1.4.6など)もこの値を返していました。\n  1.6.0 以降 1.6.2 までは上記は (({nil})) になります。\n\n  (({p \"a\"[2,1]})) は、(({nil})) を返します。\n\n: ((<Object>))#taint\n  ((<freeze|Object>)) したオブジェクトに対して (({taint})) できなくなりました\n\n    obj = Object.new.freeze\n    obj.taint\n    => -:2:in `taint': can't modify frozen object (TypeError)\n               from -:2",
          "snippets": []
        }
      ],
      "related_entries": []
    },
    {
      "signature": "NEWS for Ruby 3.0.0",
      "score": 415.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "NEWS for Ruby 3.0.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f3_0_0.html",
          "description": "NEWS for Ruby 3.0.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストはリンク先を参照してください。\n\n== 言語仕様の変更\n\n  * Keyword arguments are now separated from positional arguments.\n    Code that resulted in deprecation warnings in Ruby 2.7 will now\n    result in ArgumentError or different behavior. 14183\n  * Procs accepting a single rest argument and keywords are no longer\n    subject to autosplatting.  This now matches the behavior of Procs\n    accepting a single rest argument and no keywords.\n    16166\n\n//emlist[][ruby]{\npr = proc{|*a, **kw| [a, kw]}\n\npr.call([1])\n# 2.7 => [[1], {}]\n# 3.0 => [[[1]], {}]\n\npr.call([1, {a: 1}])\n# 2.7 => [[1], {:a=>1}] # and deprecation warning\n# 3.0 => a=>1}, {}]\n//}\n\n  * Arguments forwarding (`...`) now supports leading arguments.\n    16378\n\n//emlist{\ndef method_missing(meth, ...)\n  send(:\"do_#{meth}\", ...)\nend\n//}\n\n    * Pattern matching (`case/in`) is no longer experimental. 17260\n    * One-line pattern matching is redesigned.  [EXPERIMENTAL]\n        * `=>` is added. It can be used like a rightward assignment.\n          17260\n      * `in` is changed to return `true` or `false`. 17371\n\n//emlist{\n0 => a\np a #=> 0\n\n{b: 0, c: 1} => {b:}\np b #=> 0\n//}\n\n//emlist{\n# version 3.0\n0 in 1 #=> false\n\n# version 2.7\n0 in 1 #=> raise NoMatchingPatternError\n//}\n\n  * Find-pattern is added.  [EXPERIMENTAL]\n    16828\n\n//emlist{\ncase [\"a\", 1, \"b\", \"c\", 2, \"d\", \"e\", \"f\", 3]\nin [*pre, String => x, String => y, *post]\n  p pre  #=> [\"a\", 1]\n  p x    #=> \"b\"\n  p y    #=> \"c\"\n  p post #=> [2, \"d\", \"e\", \"f\", 3]\nend\n//}\n\n  * Endless method definition is added.  [EXPERIMENTAL]\n    16746\n\n//emlist{\ndef square(x) = x * x\n//}\n\n  * Interpolated String literals are no longer frozen when\n    `# frozen-string-literal: true` is used. 17104\n  * Magic comment `shareable_constant_value` added to freeze constants.\n    See {Magic Comments}[rdoc-ref:doc/syntax/comments.rdoc@Magic+Comments] for more details.\n    17273\n  * A {static analysis}[rdoc-label:label-Static+analysis] foundation is\n    introduced.\n      * {RBS}[rdoc-label:label-RBS] is introduced. It is a type definition\n        language for Ruby programs.\n      * {TypeProf}[rdoc-label:label-TypeProf] is experimentally bundled. It is a\n        type analysis tool for Ruby programs.\n  * Deprecation warnings are no longer shown by default (since Ruby 2.7.2).\n    Turn them on with `-W:deprecated` (or with `-w` to show other warnings too).\n    16345\n  * `$SAFE` and `$KCODE` are now normal global variables with no special behavior.\n    C-API methods related to `$SAFE` have been removed.\n    16131 17136\n  * yield in singleton class definitions in methods is now a SyntaxError\n    instead of a warning. yield in a class definition outside of a method\n    is now a SyntaxError instead of a LocalJumpError.  15575\n  * When a class variable is overtaken by the same definition in an\n    ancestor class/module, a RuntimeError is now raised (previously,\n    it only issued a warning in verbose mode).  Additionally, accessing a\n    class variable from the toplevel scope is now a RuntimeError.\n    14541\n  * Assigning to a numbered parameter is now a SyntaxError instead of\n    a warning.\n\n== Command line options\n\n=== `--help` option\n\nWhen the environment variable `RUBY_PAGER` or `PAGER` is present and has\na non-empty value, and the standard input and output are tty, the `--help`\noption shows the help message via the pager designated by the value.\n16754\n\n=== `--backtrace-limit` option\n\nThe `--backtrace-limit` option limits the maximum length of a backtrace.\n8661\n\n== Core classes updates\n\nOutstanding ones only.\n\n  * Array\n    * The following methods now return Array instances instead of subclass instances when called on subclass instances: 6087\n      * Array#drop\n      * Array#drop_while\n      * Array#flatten\n      * Array#slice!\n      * Array#slice / Array#[]\n      * Array#take\n      * Array#take_while\n      * Array#uniq\n      * Array#*\n    * Can be sliced with Enumerator::ArithmeticSequence\n\n//emlist[][ruby]{\ndirty_data = ['--', 'data1', '--', 'data2', '--', 'data3']\ndirty_data[(1..).step(2)] # take each second element\n# => [\"data1\", \"data2\", \"data3\"]\n//}\n\n  * Binding\n    * Binding#eval when called with one argument will use `\"(eval)\"` for `__FILE__` and `1` for `__LINE__` in the evaluated code. 4352 17419\n  * ConditionVariable\n    * ConditionVariable#wait may now invoke the `block`/`unblock` scheduler hooks in a non-blocking context. 16786\n  * Dir\n    * Dir.glob and Dir.[] now sort the results by default, and accept the `sort:` keyword option.  8709\n  * ENV\n    * ENV.except has been added, which returns a hash excluding the given keys and their values.  15822\n    * Windows: Read ENV names and values as UTF-8 encoded Strings 12650\n  * Encoding\n    * Added new encoding IBM720.  16233\n    * Changed default for Encoding.default_external to UTF-8 on Windows 16604\n  * Fiber\n    * Fiber.new(blocking: true/false) allows you to create non-blocking execution contexts. 16786\n    * Fiber#blocking? tells whether the fiber is non-blocking. 16786\n    * Fiber#backtrace and Fiber#backtrace_locations provide per-fiber backtrace. 16815\n    * The limitation of Fiber#transfer is relaxed. 17221\n  * GC\n    * GC.auto_compact= and GC.auto_compact have been added to control when compaction runs.  Setting `auto_compact=` to `true` will cause compaction to occur during major collections.  At the moment, compaction adds significant overhead to major collections, so please test first!  17176\n  * Hash\n    * Hash#transform_keys and Hash#transform_keys! now accept a hash that maps keys to new keys.  16274\n    * Hash#except has been added, which returns a hash excluding the given keys and their values.  15822\n  * IO\n    * IO#nonblock? now defaults to `true`. 16786\n    * IO#wait_readable, IO#wait_writable, IO#read, IO#write and other related methods (e.g. IO#puts, IO#gets) may invoke the scheduler hook `#io_wait(io, events, timeout)` in a non-blocking execution context. 16786\n  * Kernel\n    * Kernel#clone when called with the `freeze: false` keyword will call `#initialize_clone` with the `freeze: false` keyword. 14266\n    * Kernel#clone when called with the `freeze: true` keyword will call `#initialize_clone` with the `freeze: true` keyword, and will return a frozen copy even if the receiver is unfrozen. 16175\n    * Kernel#eval when called with two arguments will use `\"(eval)\"` for `__FILE__` and `1` for `__LINE__` in the evaluated code. 4352\n    * Kernel#lambda now warns if called without a literal block. 15973\n    * Kernel.sleep invokes the scheduler hook `#kernel_sleep(...)` in a non-blocking execution context. 16786\n  * Module\n    * Module#include and Module#prepend now affect classes and modules that have already included or prepended the receiver, mirroring the behavior if the arguments were included in the receiver before the other modules and classes included or prepended the receiver. 9573\n    * Module#public, Module#protected, Module#private, Module#public_class_method, Module#private_class_method, toplevel \"private\" and \"public\" methods now accept single array argument with a list of method names. 17314\n    * Module#attr_accessor, Module#attr_reader, Module#attr_writer and Module#attr methods now return an array of defined method names as symbols. 17314\n    * Module#alias_method now returns the defined alias as a symbol. 17314\n\n//emlist[][ruby]{\nclass C; end\nmodule M1; end\nmodule M2; end\nC.include M1\nM1.include M2\np C.ancestors #=> [C, M1, M2, Object, Kernel, BasicObject]\n//}\n\n  * Mutex\n    * `Mutex` is now acquired per-`Fiber` instead of per-`Thread`. This change should be compatible for essentially all usages and avoids blocking when using a scheduler. 16792\n  * Proc\n    * Proc#== and Proc#eql? are now defined and will return true for separate Proc instances if the procs were created from the same block. 14267\n  * Queue / SizedQueue\n    * Queue#pop, SizedQueue#push and related methods may now invoke the `block`/`unblock` scheduler hooks in a non-blocking context. 16786\n  * Ractor\n    * New class added to enable parallel execution. See rdoc-ref:ractor.md for more details.\n  * Random\n    * `Random::DEFAULT` now refers to the `Random` class instead of being a `Random` instance, so it can work with `Ractor`. 17322\n    * `Random::DEFAULT` is deprecated since its value is now confusing and it is no longer global, use `Kernel.rand`/`Random.rand` directly, or create a `Random` instance with `Random.new` instead. 17351\n  * String\n    * The following methods now return or yield String instances instead of subclass instances when called on subclass instances: 10845\n      * String#*\n      * String#capitalize\n      * String#center\n      * String#chomp\n      * String#chop\n      * String#delete\n      * String#delete_prefix\n      * String#delete_suffix\n      * String#downcase\n      * String#dump\n      * String#each_char\n      * String#each_grapheme_cluster\n      * String#each_line\n      * String#gsub\n      * String#ljust\n      * String#lstrip\n      * String#partition\n      * String#reverse\n      * String#rjust\n      * String#rpartition\n      * String#rstrip\n      * String#scrub\n      * String#slice!\n      * String#slice / String#[]\n      * String#split\n      * String#squeeze\n      * String#strip\n      * String#sub\n      * String#succ / String#next\n      * String#swapcase\n      * String#tr\n      * String#tr_s\n      * String#upcase\n  * Symbol\n    * Symbol#to_proc now returns a lambda Proc.  16260\n    * Symbol#name has been added, which returns the name of the symbol if it is named.  The returned string is frozen.  16150\n  * Fiber\n    * Introduce Fiber.set_scheduler for intercepting blocking operations and Fiber.scheduler for accessing the current scheduler. See rdoc-ref:fiber.md for more details about what operations are supported and how to implement the scheduler hooks. 16786\n    * Fiber.blocking? tells whether the current execution context is blocking. 16786\n    * Thread#join invokes the scheduler hooks `block`/`unblock` in a non-blocking execution context. 16786\n  * Thread\n    * Thread.ignore_deadlock accessor has been added for disabling the default deadlock detection, allowing the use of signal handlers to break deadlock. 13768\n  * Warning\n    * Warning#warn now supports a category keyword argument. 17122\n\n== Stdlib updates\n\nOutstanding ones only.\n\n  * BigDecimal\n    * Update to BigDecimal 3.0.0\n    * This version is Ractor compatible.\n  * Bundler\n    * Update to Bundler 2.2.3\n  * CGI\n    * Update to 0.2.0\n    * This version is Ractor compatible.\n  * CSV\n    * Update to CSV 3.1.9\n  * Date\n    * Update to Date 3.1.1\n    * This version is Ractor compatible.\n  * Digest\n    * Update to Digest 3.0.0\n    * This version is Ractor compatible.\n  * Etc\n    * Update to Etc 1.2.0\n    * This version is Ractor compatible.\n  * Fiddle\n    * Update to Fiddle 1.0.5\n  * IRB\n    * Update to IRB 1.2.6\n  * JSON\n    * Update to JSON 2.5.0\n    * This version is Ractor compatible.\n  * Set\n    * Update to set 1.0.0\n    * SortedSet has been removed for dependency and performance reasons.\n    * Set#join is added as a shorthand for `.to_a.join`.\n    * Set#<=> is added.\n  * Socket\n    * Add :connect_timeout to TCPSocket.new 17187\n  * Net::HTTP\n    * Net::HTTP#verify_hostname= and Net::HTTP#verify_hostname have been added to skip hostname verification.  16555\n    * Net::HTTP.get, Net::HTTP.get_response, and Net::HTTP.get_print can take the request headers as a Hash in the second argument when the first argument is a URI.  16686\n  * Net::SMTP\n    * Add SNI support.\n    * Net::SMTP.start arguments are keyword arguments.\n    * TLS should not check the host name by default.\n  * OpenStruct\n    * Initialization is no longer lazy. 12136\n    * Builtin methods can now be overridden safely. 15409\n    * Implementation uses only methods ending with `!`.\n    * Ractor compatible.\n    * Improved support for YAML. 8382\n    * Use officially discouraged. Read OpenStruct@Caveats section.\n  * Pathname\n    * Ractor compatible.\n  * Psych\n    * Update to Psych 3.3.0\n    * This version is Ractor compatible.\n  * Reline\n    * Update to Reline 0.1.5\n  * RubyGems\n    * Update to RubyGems 3.2.3\n  * StringIO\n    * Update to StringIO 3.0.0\n    * This version is Ractor compatible.\n  * StringScanner\n    * Update to StringScanner 3.0.0\n    * This version is Ractor compatible.\n\n== Compatibility issues\n\nExcluding feature bug fixes.\n\n  * Regexp literals and all Range objects are frozen. 8948 16377 15504\n\n//emlist[][ruby]{\n/foo/.frozen? #=> true\n(42...).frozen? # => true\n//}\n\n  * EXPERIMENTAL: Hash#each consistently yields a 2-element array. 12706\n    * Now `{ a: 1 }.each(&->(k, v) { })` raises an ArgumentError due to lambda's arity check.\n  * When writing to STDOUT redirected to a closed pipe, no broken pipe error message will be shown now.  14413\n  * `TRUE`/`FALSE`/`NIL` constants are no longer defined.\n  * Integer#zero? overrides Numeric#zero? for optimization.  16961\n  * Enumerable#grep and Enumerable#grep_v when passed a Regexp and no block no longer modify Regexp.last_match. 17030\n  * Requiring 'open-uri' no longer redefines `Kernel#open`. Call `URI.open` directly or `use URI#open` instead. 15893\n  * SortedSet has been removed for dependency and performance reasons.\n\n== Stdlib compatibility issues\n\n  * Default gems\n    * The following libraries are promoted to default gems from stdlib.\n      * English\n      * abbrev\n      * base64\n      * drb\n      * debug\n      * erb\n      * find\n      * net-ftp\n      * net-http\n      * net-imap\n      * net-protocol\n      * open-uri\n      * optparse\n      * pp\n      * prettyprint\n      * resolv-replace\n      * resolv\n      * rinda\n      * set\n      * securerandom\n      * shellwords\n      * tempfile\n      * tmpdir\n      * time\n      * tsort\n      * un\n      * weakref\n    * The following extensions are promoted to default gems from stdlib.\n      * digest\n      * io-nonblock\n      * io-wait\n      * nkf\n      * pathname\n      * syslog\n      * win32ole\n  * Bundled gems\n    * net-telnet and xmlrpc have been removed from the bundled gems. If you are interested in maintaining them, please comment on your plan to https://github.com/ruby/xmlrpc or https://github.com/ruby/net-telnet.\n  * SDBM has been removed from the Ruby standard library. 8446\n    * The issues of sdbm will be handled at https://github.com/ruby/sdbm\n  * WEBrick has been removed from the Ruby standard library. 17303\n    * The issues of WEBrick will be handled at https://github.com/ruby/webrick\n\n== C API updates\n\n  * C API functions related to `$SAFE` have been removed. 16131\n  * C API header file `ruby/ruby.h` was split. https://github.com/ruby/ruby/pull/2991 This should have no impact on extension libraries, but users might experience slow compilations.\n  * Memory view interface [EXPERIMENTAL]\n    * The memory view interface is a C-API set to exchange a raw memory area, such as a numeric array or a bitmap image, between extension libraries. The extension libraries can share also the metadata of the memory area that consists of the shape, the element format, and so on. Using these kinds of metadata, the extension libraries can share even a multidimensional array appropriately. This feature is designed by referring to Python's buffer protocol. 13767 14722\n  * Ractor related C APIs are introduced (experimental) in \"include/ruby/ractor.h\".\n\n== Implementation improvements\n\n  * New method cache mechanism for Ractor. 16614\n    * Inline method caches pointed from ISeq can be accessed by multiple Ractors in parallel and synchronization is needed even for method caches. However, such synchronization can be overhead so introducing new inline method cache mechanisms, (1) Disposable inline method cache (2) per-Class method cache and (3) new invalidation mechanism. (1) can avoid per-method call synchronization because it only uses atomic operations. See the ticket for more details.\n  * The number of hashes allocated when using a keyword splat in a method call has been reduced to a maximum of 1, and passing a keyword splat to a method that accepts specific keywords does not allocate a hash.\n  * `super` is optimized when the same type of method is called in the previous call if it's not refinements or an attr reader or writer.\n\n=== JIT\n\n  * Performance improvements of JIT-ed code\n    * Microarchitectural optimizations\n        * Native functions shared by multiple methods are deduplicated on JIT compaction.\n        * Decrease code size of hot paths by some optimizations and partitioning cold paths.\n    * Instance variables\n        * Eliminate some redundant checks.\n        * Skip checking a class and a object multiple times in a method when possible.\n        * Optimize accesses in some core classes like Hash and their subclasses.\n    * Method inlining support for some C methods\n        * `Kernel`: `#class`, `#frozen?`\n        * `Integer`: `#-@`, `#~`, `#abs`, `#bit_length`, `#even?`, `#integer?`, `#magnitude`, `#odd?`, `#ord`, `#to_i`, `#to_int`, `#zero?`\n        * `Struct`: reader methods for 10th or later members\n    * Constant references are inlined.\n    * Always generate appropriate code for `==`, `nil?`, and `!` calls depending on a receiver class.\n    * Reduce the number of PC accesses on branches and method returns.\n    * Optimize C method calls a little.\n  * Compilation process improvements\n    * It does not keep temporary files in /tmp anymore.\n    * Throttle GC and compaction of JIT-ed code.\n    * Avoid GC-ing JIT-ed code when not necessary.\n    * GC-ing JIT-ed code is executed in a background thread.\n    * Reduce the number of locks between Ruby and JIT threads.\n\n== Static analysis\n\n=== RBS\n\n  * RBS is a new language for type definition of Ruby programs. It allows writing types of classes and modules with advanced types including union types, overloading, generics, and _interface types_ for duck typing.\n  * Ruby ships with type definitions for core/stdlib classes.\n  * `rbs` gem is bundled to load and process RBS files.\n\n=== TypeProf\n\n  * TypeProf is a type analysis tool for Ruby code based on abstract interpretation.\n    * It reads non-annotated Ruby code, tries inferring its type signature, and prints the analysis result in RBS format.\n    * Though it supports only a subset of the Ruby language yet, we will continuously improve the coverage of language features, analysis performance, and usability.\n\n//emlist[][ruby]{\n# test.rb\ndef foo(x)\n  if x > 10\n    x.to_s\n  else\n    nil\n  end\nend\n\nfoo(42)\n//}\n\n//emlist{\n$ typeprof test.rb\n# Classes\nclass Object\n  def foo : (Integer) -> String?\nend\n//}\n\n== Miscellaneous changes\n\n  * Methods using `ruby2_keywords` will no longer keep empty keyword splats, those are now removed just as they are for methods not using `ruby2_keywords`.\n  * When an exception is caught in the default handler, the error message and backtrace are printed in order from the innermost. 8661\n  * Accessing an uninitialized instance variable no longer emits a warning in verbose mode. 17055",
          "snippets": []
        }
      ],
      "related_entries": []
    },
    {
      "signature": "Object#enum_for(method = :each, *args) -> Enumerator",
      "score": 385.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "Enumerator.new(self, method, *args) を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Object/i/enum_for.html",
          "description": "Enumerator.new(self, method, *args) を返します。\n\nブロックを指定した場合は Enumerator#size がブロックの評価結果を返\nします。ブロックパラメータは引数 args です。\n\n\n@param method メソッド名の文字列かシンボルです。\n@param args 呼び出すメソッドに渡される引数です。\n\n//emlist[][ruby]{\nstr = \"xyz\"\n\nenum = str.enum_for(:each_byte)\np(a = enum.map{|b| '%02x' % b }) #=> [\"78\", \"79\", \"7a\"]\n\n# protects an array from being modified\na = [1, 2, 3]\np(a.to_enum) #=> #<Enumerator: [1, 2, 3]:each>\n//}\n\n//emlist[例(ブロックを指定する場合)][ruby]{\nmodule Enumerable\n  def repeat(n)\n    raise ArgumentError, \"#{n} is negative!\" if n < 0\n    unless block_given?\n      # __method__ はここでは :repeat\n      return to_enum(__method__, n) do\n        # size メソッドが nil でなければ size * n を返す。\n        sz = size\n        sz * n if sz\n      end\n    end\n    each do |*val|\n      n.times { yield *val }\n    end\n  end\nend\n\n%i[hello world].repeat(2) { |w| puts w }\n# => 'hello', 'hello', 'world', 'world'\nenum = (1..14).repeat(3)\n# => #<Enumerator: 1..14:repeat(3)>\nenum.first(4) # => [1, 1, 1, 2]\nenum.size # => 42\n//}\n\n@see Enumerator, Enumerator#size",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        },
        {
          "key": "Object",
          "label": "Object",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Object/"
        }
      ]
    },
    {
      "signature": "Object#enum_for(method = :each, *args) {|*args| ... } -> Enumerator",
      "score": 385.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "Enumerator.new(self, method, *args) を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Object/i/enum_for.html",
          "description": "Enumerator.new(self, method, *args) を返します。\n\nブロックを指定した場合は Enumerator#size がブロックの評価結果を返\nします。ブロックパラメータは引数 args です。\n\n\n@param method メソッド名の文字列かシンボルです。\n@param args 呼び出すメソッドに渡される引数です。\n\n//emlist[][ruby]{\nstr = \"xyz\"\n\nenum = str.enum_for(:each_byte)\np(a = enum.map{|b| '%02x' % b }) #=> [\"78\", \"79\", \"7a\"]\n\n# protects an array from being modified\na = [1, 2, 3]\np(a.to_enum) #=> #<Enumerator: [1, 2, 3]:each>\n//}\n\n//emlist[例(ブロックを指定する場合)][ruby]{\nmodule Enumerable\n  def repeat(n)\n    raise ArgumentError, \"#{n} is negative!\" if n < 0\n    unless block_given?\n      # __method__ はここでは :repeat\n      return to_enum(__method__, n) do\n        # size メソッドが nil でなければ size * n を返す。\n        sz = size\n        sz * n if sz\n      end\n    end\n    each do |*val|\n      n.times { yield *val }\n    end\n  end\nend\n\n%i[hello world].repeat(2) { |w| puts w }\n# => 'hello', 'hello', 'world', 'world'\nenum = (1..14).repeat(3)\n# => #<Enumerator: 1..14:repeat(3)>\nenum.first(4) # => [1, 1, 1, 2]\nenum.size # => 42\n//}\n\n@see Enumerator, Enumerator#size",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        },
        {
          "key": "Object",
          "label": "Object",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Object/"
        }
      ]
    },
    {
      "signature": "Object#to_enum(method = :each, *args) -> Enumerator",
      "score": 385.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "Enumerator.new(self, method, *args) を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Object/i/enum_for.html",
          "description": "Enumerator.new(self, method, *args) を返します。\n\nブロックを指定した場合は Enumerator#size がブロックの評価結果を返\nします。ブロックパラメータは引数 args です。\n\n\n@param method メソッド名の文字列かシンボルです。\n@param args 呼び出すメソッドに渡される引数です。\n\n//emlist[][ruby]{\nstr = \"xyz\"\n\nenum = str.enum_for(:each_byte)\np(a = enum.map{|b| '%02x' % b }) #=> [\"78\", \"79\", \"7a\"]\n\n# protects an array from being modified\na = [1, 2, 3]\np(a.to_enum) #=> #<Enumerator: [1, 2, 3]:each>\n//}\n\n//emlist[例(ブロックを指定する場合)][ruby]{\nmodule Enumerable\n  def repeat(n)\n    raise ArgumentError, \"#{n} is negative!\" if n < 0\n    unless block_given?\n      # __method__ はここでは :repeat\n      return to_enum(__method__, n) do\n        # size メソッドが nil でなければ size * n を返す。\n        sz = size\n        sz * n if sz\n      end\n    end\n    each do |*val|\n      n.times { yield *val }\n    end\n  end\nend\n\n%i[hello world].repeat(2) { |w| puts w }\n# => 'hello', 'hello', 'world', 'world'\nenum = (1..14).repeat(3)\n# => #<Enumerator: 1..14:repeat(3)>\nenum.first(4) # => [1, 1, 1, 2]\nenum.size # => 42\n//}\n\n@see Enumerator, Enumerator#size",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        },
        {
          "key": "Object",
          "label": "Object",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Object/"
        }
      ]
    },
    {
      "signature": "Object#to_enum(method = :each, *args) {|*args| ... } -> Enumerator",
      "score": 385.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "Enumerator.new(self, method, *args) を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Object/i/enum_for.html",
          "description": "Enumerator.new(self, method, *args) を返します。\n\nブロックを指定した場合は Enumerator#size がブロックの評価結果を返\nします。ブロックパラメータは引数 args です。\n\n\n@param method メソッド名の文字列かシンボルです。\n@param args 呼び出すメソッドに渡される引数です。\n\n//emlist[][ruby]{\nstr = \"xyz\"\n\nenum = str.enum_for(:each_byte)\np(a = enum.map{|b| '%02x' % b }) #=> [\"78\", \"79\", \"7a\"]\n\n# protects an array from being modified\na = [1, 2, 3]\np(a.to_enum) #=> #<Enumerator: [1, 2, 3]:each>\n//}\n\n//emlist[例(ブロックを指定する場合)][ruby]{\nmodule Enumerable\n  def repeat(n)\n    raise ArgumentError, \"#{n} is negative!\" if n < 0\n    unless block_given?\n      # __method__ はここでは :repeat\n      return to_enum(__method__, n) do\n        # size メソッドが nil でなければ size * n を返す。\n        sz = size\n        sz * n if sz\n      end\n    end\n    each do |*val|\n      n.times { yield *val }\n    end\n  end\nend\n\n%i[hello world].repeat(2) { |w| puts w }\n# => 'hello', 'hello', 'world', 'world'\nenum = (1..14).repeat(3)\n# => #<Enumerator: 1..14:repeat(3)>\nenum.first(4) # => [1, 1, 1, 2]\nenum.size # => 42\n//}\n\n@see Enumerator, Enumerator#size",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        },
        {
          "key": "Object",
          "label": "Object",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Object/"
        }
      ]
    },
    {
      "signature": "NEWS for Ruby 2.0.0",
      "score": 379.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "NEWS for Ruby 2.0.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f2_0_0.html",
          "description": "NEWS for Ruby 2.0.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストは ChangeLog ファイルか bugs.ruby-lang.org の issue を参照してください。\n\n== 1.9.3 以降の変更\n\n=== 言語仕様の変更\n\n  * キーワード引数を追加しました\n  * %i, %I をシンボルの配列作成のために追加しました。(%w, %W に似ています)\n  * デフォルトのソースエンコーディングを US-ASCII から UTF-8 に変更しました\n  * '_' で始まる使用されていない変数は警告しなくなりました\n\n=== 組み込みクラスの更新\n\n  * ARGF.class\n    * 追加: ARGF.class#codepoints, ARGF.class#each_codepoint\n      IO にある同名のメソッドに対応します\n\n  * Array\n    * 追加: Array#bsearch 二分探索します\n    * 非互換:\n      * Array#shuffle! と Array#sample の random パラメータには最大値のみを指定することが可能になりました\n      * Array#values_at に Range オブジェクトを与えた場合、配列の範囲外のインデックスについては nil を返します\n\n  * Enumerable\n    * 追加: Enumerable#lazy 遅延列挙のためのメソッドです\n\n  * Enumerator\n    * 追加: Enumerator#size サイズを遅延評価するためのメソッドです\n    * 拡張: Enumerator.new サイズの遅延評価のための引数を一つ受け取るようになりました\n    * 新規クラス: Enumerator::Lazy 遅延列挙用のクラス\n\n  * ENV\n    * ENV.to_h は ENV.to_hash へのエイリアスです\n\n  * Fiber\n    * 非互換: Fiber#resume は Fiber#transfer を呼び出したファイバーを再開できなくなりました\n\n  * File\n    * 拡張: File.fnmatch? は File::FNM_EXTGLOB(File::Constants::FNM_EXTGLOB) オプションが与えられていればブレースを展開します\n        \n  * GC\n    * 改良:\n      * ビットマップマーキングを導入しました。Copy-on-Write を使用してページをコピーするのでメモリ使用量が減少します\n      * 非再帰的なマーキングを導入しました。期待しないスタックオーバーフローを避けるためです\n\n  * GC::Profiler\n    * 追加: GC::Profiler.raw_data GCの加工していないプロファイルデータを返します\n\n  * Hash\n    * 追加: Hash#to_h 明示的に変換するメソッドです。Array#to_a に似ています\n    * 拡張: Hash#default_proc= default proc をクリアするために nil を渡せるようになりました\n\n  * IO\n    * 非推奨: IO#lines, #bytes, #chars, #codepoints\n\n  * Kernel\n    * 追加: Kernel.#Hash という変換メソッド。Kernel.#Array, Kernel.#Float に似ています\n    * 追加: Kernel.#__dir__ 現在のソースファイル(__FILE__)のあるディレクトリ名を正規化された絶対パ スで返します。\n    * 追加: Kernel.#caller_locations フレーム情報の配列を返します\n    * 拡張: Kernel.#warn Kernel.#puts のように複数の引数を受け付けるようになりました\n    * 拡張: Kernel.#caller 第2引数で取得するスタックのサイズを指定できるようになりました\n    * 拡張: Object#to_enum Object#enum_for サイズの遅延評価のためにブロックを受け取るようになりました\n    * 非互換: Kernel.#system, Kernel.#exec は非標準のファイルディスクリプタを閉じます\n      :close_others オプションのデフォルト値を true に変更しました\n    * 非互換: respond_to? は protected なメソッドに対して false を返します。第2引数に true を指定すると true を返します。\n    * 非互換: Kernel.#__callee__ はオリジナルの振舞いに戻りました。定義したときの名前ではなく呼び出したときの名前を返します。\n    * 非互換: Object#inspect は #to_s を呼び出さなくなりました。再定義された #to_s を呼び出すためです。\n\n  * LoadError\n    * 追加: LoadError#path ロードできなかったファイルのパスを返します\n\n  * Module\n    * 追加: Module#prepend 指定したモジュールを self の継承チェインの先頭に\n      「追加する」ことで self の定数、メソッド、モジュール変数を「上書き」します。 \n    * 追加: Module.prepended, Module.prepend_features は Module.included と Module.append_features に似ています\n    * 追加(実験的): Module#refine, スコープを限定してクラスやモジュールを拡張します。\n    * 拡張: Module#define_method は UnboundMethod を受け付けるようになりました\n    * 拡張: Module#const_get 修飾された定数名の文字列を受け付けるようになりました。\n//emlist{\n        Object.const_get(\"Foo::Bar::Baz\")\n//}\n\n  * Mutex\n    * 追加(実験的): Mutex#owned? mutex が現在のスレッドに所持されているかどうかを返します\n    * 非互換: \n      * Mutex#lock, Mutex#unlock, Mutex#try_lock, Mutex#synchronize, Mutex#sleep\n        はトラップハンドラの中では使えなくなりました。そのようなときは ThreadError が発生します\n      * Mutex#sleep may spurious wakeup. Check after wakeup.\n\n  * NilClass\n    * 追加: NilClass#to_h 空のハッシュを返します\n\n  * ObjectSpace::WeakMap\n    * 弱い参照を保持するための低レベルのクラスです。\n\n  * Proc\n    * 非互換: Proc#== と #eql? を削除。\n\n  * Process\n    * 追加: Process#getsid  session id を取得します(unix のみ)。\n\n  * Range\n    * 追加: Range#size サイズの遅延評価\n    * 追加: Range#bsearch 二分探索\n\n  * RubyVM (MRI specific)\n    * 追加: RubyVM::InstructionSequence.of to get the instruction sequence\n      from a method or a block.\n    * 追加: RubyVM::InstructionSequence#path,\n      RubyVM::InstructionSequence#absolute_path,\n      RubyVM::InstructionSequence#label,\n      RubyVM::InstructionSequence#base_label,\n      RubyVM::InstructionSequence#first_lineno to retrieve information from where\n      the instruction sequence was defined.\n    * スタックの使用量を指定するための環境変数を追加(起動時にチェックします):\n      * RUBY_THREAD_VM_STACK_SIZE: vm stack size used at thread creation.\n        default: 128KB (32bit CPU) or 256KB (64bit CPU).\n      * RUBY_THREAD_MACHINE_STACK_SIZE: machine stack size used at thread\n        creation. default: 512KB or 1024KB.\n      * RUBY_FIBER_VM_STACK_SIZE: vm stack size used at fiber creation.\n        default: 64KB or 128KB.\n      * RUBY_FIBER_MACHINE_STACK_SIZE: machine stack size used at fiber\n        creation. default: 256KB or 512KB.\n    * 追加: RubyVM::DEFAULT_PARAMS という定数を追加しました。RubyVM のデフォルトのパラメータを返します。\n\n  * Signal\n    * 追加: Signal.signame シグナルの名前を返します\n   \n    * 非互換: Signal.trap は :SEGV, :BUS, :ILL, :FPE, :VTALRM が指定されると ArgumentError を発生させます\n\n  * String\n    * 追加: String#b エンコーディングを ASCII-8BIT に設定したコピーされた文字列を返します\n    * 返り値変更:\n      * String#lines Enumerator ではなく Array を返します\n      * String#chars Enumerator ではなく Array を返します\n      * String#codepoints Enumerator ではなく Array を返します\n      * String#bytes Enumerator ではなく Array を返します\n\n  * Struct\n    * 追加: Struct#to_h インスタンス変数の名前と値をハッシュのキーと値にしたハッシュを生成して返します\n\n  * Thread\n    * 追加: Thread#thread_variable_get スレッドローカルな変数を取得します\n      (these are different than Fiber local variables).\n    * 追加: Thread#thread_variable_set スレッドローカルな変数をセットします\n    * 追加: Thread#thread_variables スレッドローカルな変数の名前のリストを取得します\n    * 追加: Thread#thread_variable? 与えられた名前がスレッドローカルな変数であるかどうか返します\n    * 追加: Thread.handle_interrupt as well as instance and singleton methods\n      Thread.pending_interrupt? for asynchronous handling of exceptions\n    * 追加: Thread#backtrace_locations Kernel#caller_locations に似た情報を返します\n    * 新規クラス: Thread::Backtrace::Location to hold backtrace location\n      information. These are returned by Thread#backtrace_locations and\n      Kernel#caller_locations\n    * 非互換: Thread#join, Thread#value は対象のスレッドがメインスレッドか現在のスレッドである場合、\n      ThreadError を発生させます\n\n  * Time\n    * 返り値変更:\n      * Time#to_s now returns US-ASCII encoding instead of BINARY.\n\n  * TracePoint\n    * new class. This class is replacement of set_trace_func.\n      Easy to use and efficient implementation.\n\n  * toplevel\n    * added method:\n      * added main.define_method which defines a global function.\n      * added main.using, which imports refinements into the current file or\n        eval string. [experimental]\n\n=== 組み込みクラスの互換性 (機能追加とバグ修正を除く)\n\n  * Array#values_at\n    上を参照\n\n  * String#lines, String#chars, String#codepoints, String#bytes\n    これらのメソッドはもはや Enumerator を返しませんが、ブロックを与えた場合の動作は後方互換性のためまだサポートしています。\n//emlist{\n    str.lines.with_index(1) {|line, lineno| ... } # str.lines が配列を返すのでもう動かない\n    str.each_line.with_index(1) {|line, lineno| ... } # このように each_line に置き換える\n//}\n\n  * IO#lines, IO#chars, IO#codepoints, IO#bytes, ARGF#lines, ARGF#chars,\n    ARGF#bytes, StringIO#lines, StringIO#chars, StringIO#codepoints, StringIO#bytes,\n    Zlib::GzipReader#lines, Zlib::GzipReader#bytes\n    * これらのメソッドは非推奨になりました。each_line, each_byte, each_char, each_codepoint を使ってください。\n\n  * Proc#==, m:Proc#eql?\n    * 削除されました。2つの Proc オブジェクトは同じオブジェクトである場合のみ等しい。\n\n  * Fixnum, Bignum, Float\n    * フリーズされました。\n\n  * Signal.trap\n    * 上を参照\n\n  * Onigmo をマージしました。\n    https://github.com/k-takata/Onigmo\n\n  * The :close_others option is true by default for system() and exec().\n    Also, the close-on-exec flag is set by default for all new file descriptors.\n    This means file descriptors doesn't inherit to spawned process unless\n    explicitly requested such as system(..., fd=>fd).\n\n  * Kernel#respond_to? against a protected method now returns false\n    unless the second argument is true.\n\n  * Object#respond_to_missing?, Object#initialize_clone, Object#initialize_dup\n    * private になりました\n\n  * Thread#join, Thread#value\n    * 上を参照\n\n  * Mutex#lock, Mutex#unlock, Mutex#try_lock, Mutex#synchronize, Mutex#sleep\n    * 上を参照\n\n=== 標準添付ライブラリの更新 (優れたもののみ)\n\n  * cgi\n    * HTML5 用のタグメーカーを追加しました\n    * CGI#header は CGI#http_header に名前を変更しました。CGI#header は別名として残っています。\n    * HTML5 用のタグメーカーを呼び出すと CGI#header を header 要素を生成するために上書きします。\n\n  * csv\n    * CSV.dump と CSV.load を削除しました。ユーザーを危険なシリアライゼーションに関する脆弱性から保護するためです。\n\n  * iconv\n    * 削除しました。String#encode を使ってください。\n\n  * io/console\n    * 追加: IO#cooked which sets the terminal to cooked mode within the given block.\n    * 追加: IO#cooked! which sets the terminal to cooked.\n    * 拡張: IO#raw, IO#raw!, IO#getch キーワード引数 :min, :time を受け付けます。\n\n  * io/wait\n    * 追加: IO#wait_writable\n    * 追加: IO#wait_readable は IO#wait の別名です。\n\n  * json\n    * 1.7.7 に更新\n\n  * net/http\n    * 新機能\n      * Proxies are now automatically detected from the http_proxy environment\n        variable.  See Net::HTTP.new for details.\n      * gzip and deflate compression are now requested for all requests by\n        default.  See Net::HTTP for details.\n      * SSL sessions are now reused across connections for a single instance.\n        This speeds up connection by using a previously negotiated session.\n      * Requests may be created from a URI which sets the request_uri and host\n        header of the request (but does not change the host connected to).\n      * Responses contain the URI requested which allows easier implementation of\n        redirect following.\n    * 追加: Net::HTTP#local_host\n    * 追加: Net::HTTP#local_host=\n    * 追加: Net::HTTP#local_port\n    * 追加: Net::HTTP#local_port=\n    * 拡張: Net::HTTP#connect uses local_host and local_port if specified.\n\n  * net/imap\n    * 追加: Net::IMAP.default_port\n    * 追加: Net::IMAP.default_imap_port\n    * 追加: Net::IMAP.default_tls_port\n    * 追加: Net::IMAP.default_ssl_port\n    * 追加: Net::IMAP.default_imaps_port\n\n  * objspace\n    * 追加: ObjectSpace.#reachable_objects_from\n\n  * openssl\n    * Consistently raise an error when trying to encode nil values. All instances\n      of OpenSSL::ASN1::Primitive now raise TypeError when calling to_der on an\n      instance whose value is nil. All instances of OpenSSL::ASN1::Constructive\n      raise NoMethodError in the same case. Constructing such values is still\n      permitted.\n    * TLS 1.1 & 1.2 support by setting OpenSSL::SSL::SSLContext#ssl_version to\n      :TLSv1_2, :TLSv1_2_server, :TLSv1_2_client or :TLSv1_1, :TLSv1_1_server\n      :TLSv1_1_client. The version being effectively used can be queried\n      with OpenSSL::SSL#ssl_version. Furthermore, it is also possible to\n      blacklist the new TLS versions with OpenSSL::SSL:OP_NO_TLSv1_1 and\n      OpenSSL::SSL::OP_NO_TLSv1_2.\n    * Added OpenSSL::SSL::SSLContext#renegotiation_cb. A user-defined callback\n      may be set which gets called whenever a new handshake is negotiated. This\n      also allows to programmatically decline (client) renegotiation attempts.\n    * Support for \"0/n\" splitting of records as BEAST mitigation via\n      OpenSSL::SSL::OP_DONT_INSERT_EMPTY_FRAGMENTS.\n    * The default options for OpenSSL::SSL::SSLContext have changed to\n      OpenSSL::SSL::OP_ALL & ~OpenSSL::SSL::OP_DONT_INSERT_EMPTY_FRAGMENTS\n      instead of OpenSSL::SSL::OP_ALL only. This enables the countermeasure for\n      the BEAST attack by default.\n    * OpenSSL requires passwords for decrypting PEM-encoded files to be at least\n      four characters long. This led to awkward situations where an export with\n      a password with fewer than four characters was possible, but accessing the\n      file afterwards failed. OpenSSL::PKey::RSA, OpenSSL::PKey::DSA and\n      OpenSSL::PKey::EC therefore now enforce the same check when exporting a\n      private key to PEM with a password - it has to be at least four characters\n      long.\n    * SSL/TLS support for the Next Protocol Negotiation extension. Supported\n      with OpenSSL 1.0.1 and higher.\n    * OpenSSL::OPENSSL_FIPS allows client applications to detect whether OpenSSL\n      is FIPS-enabled. OpenSSL.fips_mode= allows turning on and off FIPS mode\n      manually in order to adapt to situations where FIPS mode would be an\n      explicit requirement.\n    * Authenticated Encryption with Associated Data (AEAD) is supported via\n      Cipher#auth_data= and Cipher#auth_tag/Cipher#auth_tag=.\n      Currently (OpenSSL 1.0.1c), only GCM mode is supported.\n\n  * ostruct\n    * 追加: OpenStruct#[] , OpenStruct#[]=\n    * 追加: OpenStruct#each_pair\n    * 追加: OpenStruct#eql?\n    * 追加: OpenStruct#hash\n    * 追加: OpenStruct#to_h\n    * 拡張: OpenStruct.new OpenStruct/Struct のインスタンスを受け付けるようになりました\n\n  * pathname\n    * 拡張: Pathname#find ブロックを与えない場合 Enumerator を返すようになりました\n\n  * rake\n    * 0.9.5 に更新\n      * This version is backwards-compatible with previous rake versions and\n        contains many bug fixes.\n      * See http://rake.rubyforge.org/doc/release_notes/rake-0_9_5_rdoc.html\n\n  * rdoc\n    * 4.0 に更新\n      * 後方互換性に関する大きな変更がありました。注目すべき最大の変更は ri データベースのフォーマットを変更したことです。\n        (riのデータを再生成する必要があります)\n        その他のAPIの変更は内部的なものなので、ほとんどのユーザーに影響はないでしょう。\n    * 注目すべき変更\n      * riがページをサポートしました。これはGemでも動作します。\n//emlist{\n  # ruby に含まれるページリストを表示する\n  $ ri ruby:\n  # リテラルに関する文法を表示する\n  $ ri ruby:syntax/literals\n  # RSpec の README を表示する\n  $ ri rspec:README\n//}\n    * Markdown をサポートしました。RDoc::Markdown を見てください。\n    * https://github.com/ruby/rdoc/blob/master/History.rdoc\n\n  * resolv\n    * 追加: Resolv::DNS#timeouts=\n    * 追加: Resolv::DNS::Config#timeouts=\n\n  * rexml\n    * REXML::Document#write はハッシュ引数をサポートしました\n    * REXML::Document#write は :encoding オプションをサポートしました。\n      XMLドキュメントのエンコーディングを変更します。:encodingオプションなしの場合、XMLの宣言をXMLドキュメントのエンコーディングとして使います。\n\n  * rubygems\n    * 2.0.0に更新。\n      * RubyGems 2.0.0 は以下の改良を含みます。\n      * Ruby2.0.0以上で導入した default gems のサポートを改良しました\n      * 任意のメタデータを持てるようになりました Gem::Specification#metadata\n      * `gem search` はデフォルトでリモートの gem を探すようになりました\n      * --document オプションを追加して --rdoc, --ri オプションを置き換えました。\n        --no-document オプションを使ってドキュメントの生成を無効化することができます。\n        --document=rdoc を使うと rdoc だけを生成できます。\n      * デフォルトでは ri フォーマットだけを生成します\n      * `gem server` はHTMLを生成するために RDoc::Servlet を使います。\n      * https://github.com/rubygems/rubygems/blob/master/History.txt\n\n  * shellwords\n    * Shellwords#shellescape 与えられたオブジェクトを to_s で文字列化するようになりました\n    * Shellwords#shelljoin 与えられた配列に含まれる文字列でないオブジェクトは to_s で文字列化するようになりました\n\n  * stringio\n    * 非推奨: StringIO#lines, StringIO#bytes, StringIO#chars, StringIO#codepoints\n\n  * syslog\n    * 追加: Syslog::Logger Syslog上に Logger API を提供します\n    * 追加: Syslog::Priority, Syslog::Level, Syslog::Option, Syslog::Macros\n      システムで定義されている定数を簡単に検知するために導入しました。\n\n  * tmpdir\n    * 非互換: Dir.mktmpdir は FileUtils.#remove_entry_secure ではなく FileUtils.#remove_entry を使うようになりました。\n      これはアプリケーションが作成された一時ディレクトリを全ユーザから書き込み可能に変更すべきではないことを意味します。\n\n  * yaml\n    * Syck は削除しました。インストールされている libyaml に依存するようになりました。\n    * libyaml がインストールされていない場合のために libyaml を同梱するようになりました。\n\n  * zlib\n    * Zlib::Inflate, Zlib::Deflate にストリーミングサポートを追加しました。\n      大量のメモリを消費せずに、ストリームを処理できるようになりました。\n    * 展開用に新しい戦略を追加しました。Zlib::RLE, Zlib::FIXED\n    * Zlib のストリームは GVL なしで処理するようになりました。gzip, zlib, deflate のストリームを並列に処理できるようになりました。\n    * 非推奨: Zlib::GzipReader#lines, Zlib::GzipReader#bytes\n\n=== 標準添付ライブラリの互換性 (機能追加とバグ修正を除く)\n\n  * OpenStruct の新しいメソッドはカスタム属性の名前を衝突するかもしれません。\n    \"each_pair\", \"eql?\", \"hash\" or \"to_h\".\n\n  * Dir.mktmpdir は lib/tmpdir.rb にあります。上を参照してください。\n  \n=== C API の更新\n\n  * 追加: NUM2SHORT(), NUM2USHORT()\n    これは NUM2INT に似ています。\n\n  * 追加: rb_newobj_of(), NEWOBJ_OF()\n    与えられたクラスの新しいオブジェクトを作ります",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "ARGF.class",
          "label": "ARGF.class",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ARGF.class/"
        },
        {
          "key": "ArgumentError",
          "label": "ArgumentError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ArgumentError/"
        },
        {
          "key": "Array",
          "label": "Array",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Array/"
        },
        {
          "key": "Bignum",
          "label": "Bignum",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Bignum/"
        },
        {
          "key": "ENV",
          "label": "ENV",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ENV/"
        },
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerable/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        },
        {
          "key": "Enumerator::Lazy",
          "label": "Enumerator::Lazy",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator%3A%3ALazy/"
        },
        {
          "key": "Fiber",
          "label": "Fiber",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Fiber/"
        },
        {
          "key": "File",
          "label": "File",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:File/"
        },
        {
          "key": "Fixnum",
          "label": "Fixnum",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Fixnum/"
        },
        {
          "key": "Float",
          "label": "Float",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Float/"
        },
        {
          "key": "GC",
          "label": "GC",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:GC/"
        },
        {
          "key": "GC::Profiler",
          "label": "GC::Profiler",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:GC%3A%3AProfiler/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Hash/"
        },
        {
          "key": "IO",
          "label": "IO",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IO/"
        },
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Kernel/"
        },
        {
          "key": "LoadError",
          "label": "LoadError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:LoadError/"
        },
        {
          "key": "Module",
          "label": "Module",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Module/"
        },
        {
          "key": "Mutex",
          "label": "Mutex",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Mutex/"
        },
        {
          "key": "NilClass",
          "label": "NilClass",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:NilClass/"
        },
        {
          "key": "ObjectSpace::WeakMap",
          "label": "ObjectSpace::WeakMap",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ObjectSpace%3A%3AWeakMap/"
        },
        {
          "key": "OpenStruct",
          "label": "OpenStruct",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:OpenStruct/"
        },
        {
          "key": "Proc",
          "label": "Proc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Proc/"
        },
        {
          "key": "Process",
          "label": "Process",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Process/"
        },
        {
          "key": "RDoc::Markdown",
          "label": "RDoc::Markdown",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RDoc%3A%3AMarkdown/"
        },
        {
          "key": "RDoc::Servlet",
          "label": "RDoc::Servlet",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RDoc%3A%3AServlet/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Range/"
        },
        {
          "key": "RubyVM",
          "label": "RubyVM",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RubyVM/"
        },
        {
          "key": "Signal",
          "label": "Signal",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Signal/"
        },
        {
          "key": "String",
          "label": "String",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:String/"
        },
        {
          "key": "Struct",
          "label": "Struct",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Struct/"
        },
        {
          "key": "Syslog::Level",
          "label": "Syslog::Level",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Syslog%3A%3ALevel/"
        },
        {
          "key": "Syslog::Logger",
          "label": "Syslog::Logger",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Syslog%3A%3ALogger/"
        },
        {
          "key": "Syslog::Macros",
          "label": "Syslog::Macros",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Syslog%3A%3AMacros/"
        },
        {
          "key": "Syslog::Option",
          "label": "Syslog::Option",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Syslog%3A%3AOption/"
        },
        {
          "key": "Syslog::Priority",
          "label": "Syslog::Priority",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Syslog%3A%3APriority/"
        },
        {
          "key": "Thread",
          "label": "Thread",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Thread/"
        },
        {
          "key": "Thread::Backtrace::Location",
          "label": "Thread::Backtrace::Location",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Thread%3A%3ABacktrace%3A%3ALocation/"
        },
        {
          "key": "ThreadError",
          "label": "ThreadError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ThreadError/"
        },
        {
          "key": "Time",
          "label": "Time",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Time/"
        },
        {
          "key": "TracePoint",
          "label": "TracePoint",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:TracePoint/"
        },
        {
          "key": "UnboundMethod",
          "label": "UnboundMethod",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:UnboundMethod/"
        },
        {
          "key": "Zlib::Deflate",
          "label": "Zlib::Deflate",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Zlib%3A%3ADeflate/"
        },
        {
          "key": "Zlib::FIXED",
          "label": "Zlib::FIXED",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Zlib%3A%3AFIXED/"
        },
        {
          "key": "Zlib::Inflate",
          "label": "Zlib::Inflate",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Zlib%3A%3AInflate/"
        },
        {
          "key": "Zlib::RLE",
          "label": "Zlib::RLE",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Zlib%3A%3ARLE/"
        },
        {
          "key": "cgi",
          "label": "cgi",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:cgi/"
        },
        {
          "key": "csv",
          "label": "csv",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:csv/"
        },
        {
          "key": "io/console",
          "label": "io/console",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:io%2Fconsole/"
        },
        {
          "key": "io/wait",
          "label": "io/wait",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:io%2Fwait/"
        },
        {
          "key": "json",
          "label": "json",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:json/"
        },
        {
          "key": "net/http",
          "label": "net/http",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:net%2Fhttp/"
        },
        {
          "key": "net/imap",
          "label": "net/imap",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:net%2Fimap/"
        },
        {
          "key": "objspace",
          "label": "objspace",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:objspace/"
        },
        {
          "key": "openssl",
          "label": "openssl",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:openssl/"
        },
        {
          "key": "ostruct",
          "label": "ostruct",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ostruct/"
        },
        {
          "key": "pathname",
          "label": "pathname",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:pathname/"
        },
        {
          "key": "rake",
          "label": "rake",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rake/"
        },
        {
          "key": "rdoc",
          "label": "rdoc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rdoc/"
        },
        {
          "key": "resolv",
          "label": "resolv",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:resolv/"
        },
        {
          "key": "rexml",
          "label": "rexml",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rexml/"
        },
        {
          "key": "rubygems",
          "label": "rubygems",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rubygems/"
        },
        {
          "key": "shellwords",
          "label": "shellwords",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:shellwords/"
        },
        {
          "key": "stringio",
          "label": "stringio",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:stringio/"
        },
        {
          "key": "syslog",
          "label": "syslog",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:syslog/"
        },
        {
          "key": "tmpdir",
          "label": "tmpdir",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:tmpdir/"
        },
        {
          "key": "yaml",
          "label": "yaml",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:yaml/"
        },
        {
          "key": "zlib",
          "label": "zlib",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:zlib/"
        }
      ]
    },
    {
      "signature": "TSort#strongly_connected_components -> Array",
      "score": 376.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "強連結成分の集まりを配列の配列として返します。\nこの配列は子から親に向かってソートされています。\n各要素は強連結成分を表す配列です。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/TSort/i/strongly_connected_components.html",
          "description": "強連結成分の集まりを配列の配列として返します。\nこの配列は子から親に向かってソートされています。\n各要素は強連結成分を表す配列です。\n\n//emlist[使用例][ruby]{\nrequire 'tsort'\n\nclass Hash\n  include TSort\n  alias tsort_each_node each_key\n  def tsort_each_child(node, &block)\n    fetch(node).each(&block)\n  end\nend\n\nnon_sort = {1=>[2], 2=>[3, 4], 3=>[2], 4=>[]}\n\np non_sort.strongly_connected_components\n#=> [[4], [2, 3], [1]]\n//}\n\n@see TSort.strongly_connected_components",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "TSort",
          "label": "TSort",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:TSort/"
        }
      ]
    },
    {
      "signature": "TSort#tsort -> Array",
      "score": 376.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "頂点をトポロジカルソートして得られる配列を返します。\nこの配列は子から親に向かってソートされています。\nすなわち、最初の要素は子を持たず、最後の要素は親を持ちません。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/TSort/i/tsort.html",
          "description": "頂点をトポロジカルソートして得られる配列を返します。\nこの配列は子から親に向かってソートされています。\nすなわち、最初の要素は子を持たず、最後の要素は親を持ちません。\n\n@raise TSort::Cyclic 閉路が存在するとき、発生します。\n\n//emlist[使用例][ruby]{\nrequire 'tsort'\n\nclass Hash\n  include TSort\n  alias tsort_each_node each_key\n  def tsort_each_child(node, &block)\n    fetch(node).each(&block)\n  end\nend\n\nsorted = {1=>[2, 3], 2=>[3], 3=>[], 4=>[]}.tsort\np sorted #=> [3, 2, 1, 4]\n//}\n\n@see TSort.tsort",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "TSort",
          "label": "TSort",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:TSort/"
        }
      ]
    },
    {
      "signature": "Enumerable#drop(n) -> Array",
      "score": 340.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "Enumerable オブジェクトの先頭の n 要素を捨てて、\n残りの要素を配列として返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerable/i/drop.html",
          "description": "Enumerable オブジェクトの先頭の n 要素を捨てて、\n残りの要素を配列として返します。\n\n@param n 捨てる要素数。\n\n//emlist[例][ruby]{\ne = [1, 2, 3, 4, 5, 0].each\ne.drop(3)             # => [4, 5, 0]\n//}\n\n@see Array#drop",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:Enumerable/"
        }
      ]
    },
    {
      "signature": "Enumerable#first(n) -> Array",
      "score": 340.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "Enumerable オブジェクトの最初の要素、もしくは最初の n 要素を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerable/i/first.html",
          "description": "Enumerable オブジェクトの最初の要素、もしくは最初の n 要素を返します。\n\nEnumerable オブジェクトが空の場合、引数を指定しない形式では nil を返します。\n引数を指定する形式では、空の配列を返します。\n\n@param n 取得する要素数。\n\n//emlist[例][ruby]{\ne = \"abcd\".each_byte\ne.first #=> 97\ne.first(2) #=> [97,98]\ne = \"\".each_byte\ne.first #=> nil\ne.first(2) #=> []\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:Enumerable/"
        }
      ]
    },
    {
      "signature": "Enumerable#take(n) -> Array",
      "score": 340.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "Enumerable オブジェクトの先頭から n 要素を配列として返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerable/i/take.html",
          "description": "Enumerable オブジェクトの先頭から n 要素を配列として返します。\n\n@param n 要素数を指定します。\n\n//emlist[例][ruby]{\ne = [1, 2, 3, 4, 5, 0].each\ne.take(3)             # => [1, 2, 3]\n//}\n\n@see Array#take",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:Enumerable/"
        }
      ]
    },
    {
      "signature": "Enumerable#take_while {|element| ... } -> Array",
      "score": 340.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "Enumerable オブジェクトの要素を順に偽になるまでブロックで評価します。\n最初に偽になった要素の手前の要素までを配列として返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerable/i/take_while.html",
          "description": "Enumerable オブジェクトの要素を順に偽になるまでブロックで評価します。\n最初に偽になった要素の手前の要素までを配列として返します。\n\n//emlist[例][ruby]{\ne = [1, 2, 3, 4, 5, 0].each\ne.take_while {|i| i < 3 }   # => [1, 2]\n//}\n\nブロックを省略した場合は Enumerator を返します。\n\n@see Array#take_while",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:Enumerable/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Enumerator#next_values -> Array",
      "score": 340.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "「次」のオブジェクトを配列で返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerator/i/next_values.html",
          "description": "「次」のオブジェクトを配列で返します。\n\nEnumerator#next とほぼ同様の挙動をします。終端まで到達した場合は\nStopIteration 例外を発生させます。\n\nこのメソッドは、\n  yield\nと\n  yield nil\nを区別するために使えます。\n\nnext メソッドによる外部列挙の状態は他のイテレータメソッドによる\n内部列挙には影響を与えません。\nただし、 IO#each_line のようにおおもとの列挙メカニズムが副作用を\n伴っている場合には影響があり得ます。\n\n//emlist[例: next と next_values の違いを][ruby]{\no = Object.new\ndef o.each\n  yield\n  yield 1\n  yield 1, 2\n  yield nil\n  yield [1, 2]\nend\ne = o.to_enum\np e.next_values\np e.next_values\np e.next_values\np e.next_values\np e.next_values\ne = o.to_enum\np e.next\np e.next\np e.next\np e.next\np e.next\n\n## yield args       next_values      next\n#  yield            []               nil\n#  yield 1          [1]              1\n#  yield 1, 2       [1, 2]           [1, 2]\n#  yield nil        [nil]            nil\n#  yield [1, 2]     [[1, 2]]         [1, 2]\n//}\n\n@raise StopIteration 列挙状態が既に最後へ到達しているとき\n@see Enumerator#next, Enumerator#peek, Enumerator#peek_values",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Enumerator/"
        },
        {
          "key": "StopIteration",
          "label": "StopIteration",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:StopIteration/"
        }
      ]
    },
    {
      "signature": "CSV.parse(str, options = Hash.new) -> Array",
      "score": 322.0,
      "metadata": { "type": "singleton-method", "versions": ["3.2.0"] },
      "summary": "このメソッドは文字列を簡単にパースすることができます。\nブロックを与えた場合は、ブロックにそれぞれの行を渡します。\nブロックを省略した場合は、配列の配列を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/CSV/s/parse.html",
          "description": "このメソッドは文字列を簡単にパースすることができます。\nブロックを与えた場合は、ブロックにそれぞれの行を渡します。\nブロックを省略した場合は、配列の配列を返します。\n\n@param str 文字列を指定します。\n\n@param options CSV.new のオプションと同じオプションを指定できます。\n\n//emlist[例][ruby]{\nrequire 'csv'\nrequire 'pp'\n\ns = <<EOS\nid,first name,last name,age\n1,taro,tanaka,20\n2,jiro,suzuki,18\nEOS\n\npp CSV.parse(s)\n# => [[\"id\", \"first name\", \"last name\", \"age\"],\n#     [\"1\", \"taro\", \"tanaka\", \"20\"],\n#     [\"2\", \"jiro\", \"suzuki\", \"18\"]]\n\nCSV.parse(s, headers: true).each do |row|\n  p [row['first name'], row['age']]\nend\n# => [\"taro\", \"20\"]\n#    [\"jiro\", \"18\"]\n//}\n\n//emlist[例][ruby]{\nrequire \"csv\"\n\ncsv = \"id|first name|last name|age\\n1|taro|tanaka|20\\n2|jiro|suzuki|18\"\nCSV.parse(csv, col_sep: '|') do |row|\n  p [row[1], row[2]]\nend\n# => [\"first name\", \"last name\"]\n# => [\"taro\", \"tanaka\"]\n# => [\"jiro\", \"suzuki\"]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "CSV",
          "label": "CSV",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:CSV/"
        }
      ]
    },
    {
      "signature": "Enumerator#peek_values -> Array",
      "score": 322.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "Enumerator#next_values のように「次」のオブジェクトを\n配列で返しますが、列挙状態を変化させません。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerator/i/peek_values.html",
          "description": "Enumerator#next_values のように「次」のオブジェクトを\n配列で返しますが、列挙状態を変化させません。\n\nEnumerator#next, Enumerator#next_values のように\n現在までの列挙状態に応じて「次」のオブジェクトを返しますが、\nnext と異なり列挙状態を変更しません。\n\n列挙が既に最後へ到達している場合は、StopIteration 例外を発生します。\n\nこのメソッドは Enumerator#next_values と同様\n  yield\nと\n  yield nil\nを区別するために使えます。\n\n//emlist[例][ruby]{\no = Object.new\ndef o.each\n  yield\n  yield 1\n  yield 1, 2\nend\ne = o.to_enum\np e.peek_values    #=> []\ne.next\np e.peek_values    #=> [1]\np e.peek_values    #=> [1]\ne.next\np e.peek_values    #=> [1, 2]\ne.next\np e.peek_values    # raises StopIteration\n//}\n\n@raise StopIteration 列挙状態が既に最後へ到達しているとき\n@see Enumerator#next, Enumerator#next_values, Enumerator#peek_values",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Enumerator/"
        },
        {
          "key": "StopIteration",
          "label": "StopIteration",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:StopIteration/"
        }
      ]
    },
    {
      "signature": "NEWS for Ruby 2.4.0",
      "score": 271.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "NEWS for Ruby 2.4.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f2_4_0.html",
          "description": "NEWS for Ruby 2.4.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストは ChangeLog ファイルか bugs.ruby-lang.org の issue を参照してください。\n\n== 2.3.0 以降の変更\n\n=== 言語仕様の変更\n\n  * 条件式での多重代入ができるようになりました 10617\n  * Symbol#to_proc でメソッド呼び出し元での Refinements が有効になりました 9451\n  * Object#send や BasicObject#__send__ でメソッドを呼び出したときに Refinements が有効になりました 11476\n  * 後置 rescue をメソッドの引数内に書けるようになりました 12686\n  * トップレベルで return を書けるようになりました 4840\n\n=== 組み込みクラスの更新\n\n  * Array\n    * Array#concat 12333\n      複数の引数を取れるようになりました。\n    * Array#max, Array#min 12172\n      この変更は小さな非互換の原因となります:\n      Enumerable#max だけを再定義しているとき、max を配列に対して呼び出しても無視されます。\n      このようなときは Array#max も再定義してください。\n    * Array#pack 12754\n      既にアロケートされているバッファを再利用するためにオプションキーワード引数 buffer: を取るようになりました。\n    * Array#sum 12217\n      Enumerable#sum と違って each メソッドに依存しません。\n\n  * Comparable\n    * Comparable#clamp を追加 10594\n\n  * Dir\n    * Dir.empty? を追加 10121\n\n  * Enumerable\n    * Enumerable#chunk ブロックを省略した場合 Enumerator を返すようになりました。2172\n    * Enumerable#sum を追加 12217\n    * Enumerable#uniq を追加 11090\n\n  * Enumerator::Lazy\n    * Enumerator::Lazy#chunk_while を追加 https://github.com/ruby/ruby/pull/1186\n    * Enumerator::Lazy#uniq を追加 11090\n\n  * File\n    * File.empty? を追加 9969\n\n  * Float\n    * Float#ceil, Float#floor, Float#truncate は\n      Float#roundと同じように省略可能な桁を指定する引数を受け付けるようになりました。12245\n    * Float#round は half というキーワード引数を受け付けるようになりました。\n      half には :even, :up, :down が指定可能です。 12548 12958 12953\n\n  * Hash\n    * Hash#compact, Hash#compact! を追加 11818\n    * Hash#transform_values Hash#transform_values! を追加 12512\n\n  * Integer\n    * Fixnum と Bignum は Integer に統合されました 12005\n    * Integer#ceil, Integer#floor, Integer#truncate は\n      Integer#round と同じように省略可能な桁を指定する引数を受け付けるようになりました 12245\n    * Integer#digits を追加。 12447\n      位置記法のために各桁を展開するためのメソッドです。\n    * Integer#round は half というキーワード引数を受け付けるようになりました。\n      half には :even, :up, :down が指定可能です。 12548 12958 12953\n\n  * IO\n    * IO#gets, IO#readline, IO#each_line, IO#readlines, IO.foreach は\n      chomp というキーワード引数を受け付けるようになりました。12553\n\n  * Kernel\n    * Kernel#clone は freeze というキーワード引数を受け付けるようになりました。\n      12300\n\n  * MatchData\n    * MatchData#named_captures を追加 11999\n    * MatchData#values_at は named captures をサポートするようになりました 9179\n\n  * Module\n    * Module#refine 引数としてモジュールを許可するようになりました 12534\n    * Module.used_modules を追加 7418\n\n  * Numeric\n    * Numeric#finite?, Numeric#infinite? を追加 12039\n\n  * Process\n    * macOS 10.12 から導入された CLOCK_MONOTONIC_RAW_APPROX, CLOCK_UPTIME_RAW,\n      CLOCK_UPTIME_RAW_APPROX をサポートしました\n\n  * Rational\n    * Rational#round は half というキーワード引数を受け付けるようになりました。12548 12958\n      half には :even, :up, :down が指定可能です。12953\n\n  * Regexp\n    * meta character \\X matches Unicode 9.0 characters with some workarounds\n      for UTR #51 Unicode Emoji, Version 4.0 emoji zwj sequences.\n    * Regexp#match? を追加 8110\n      true/false を返し、バックリファレンスを生成しません。\n    * Onigmo 6.0.0 に更新 (Ruby 2.4.0)\n    * Onigmo 6.1.1 に更新 (Ruby 2.4.1)\n      * 非包含オペレータ(absence operator)をサポートしました https://github.com/k-takata/Onigmo/issues/82\n\n  * Regexp/String: Unicodeのバージョンを8.0.0から9.0.0に更新しました 12513\n\n  * RubyVM::Env\n    * 削除しました\n\n  * String\n    * String#casecmp? を追加 12786\n    * String#concat, String#prepend 複数の引数を受け付けるようになりました 12333\n    * String#each_line, String#lines 省略可能なキーワード引数 chomp を受け付けるようになりました 12553\n    * String#match? を追加 12898\n    * String#unpack1 を追加 12752\n    * String#upcase, String#downcase, String#capitalize, String#swapcase,\n      String#upcase!, String#downcase!, String#capitalize!, String#swapcase!\n      は全てのUnicodeに対して動作するようになりました。もはやASCIIのみに限定されていません。\n      UTF-8, UTF-16BE/LE, UTF-32BE/LE, ISO-8859-1~16 をサポートしています。\n      Variations are available with options. 10085\n    * String.new(capacity: size) 12024\n\n  * StringIO\n    * StringIO#gets, StringIO#readline, StringIO#each_line, StringIO#readlines\n      省略可能なキーワード引数 chomp を受け付けるようになりました 12553\n\n  * Symbol\n    * Symbol#casecmp? を追加 12786\n    * Symbol#match は MatchData を返すようになりました 11991\n    * Symbol#match? を追加 12898\n    * Symbol#upcase, Symbol#downcase, Symbol#capitalize, Symbol#swapcase は\n      全ての Unicode に対して動作するようになりました。10085\n\n  * Thread\n    * Thread#report_on_exception, Thread.report_on_exception を追加 6647\n\n  * TracePoint\n    * TracePoint#callee_id を追加 12747\n\n  * Warning\n    * Warningという名前のモジュールを導入しました。\n      デフォルトでは Warning.#warn という特異メソッドだけ定義されているモジュールです。\n      サードパーティのライブラリが警告を扱う方法を制御できるようになります。\n      12299\n\n=== 標準添付ライブラリの更新 (優れたもののみ)\n\n  * cgi\n    * \",\" をクッキーの区切り文字として許可しなくなりました 12791\n\n  * csv\n    * liberal_parsing オプションを追加 11839\n\n  * ipaddr\n    * IPAddr#==, IPAddr#<=> で引数のオブジェクトを IPAddr に変換する処理に失敗しても例外が発生しなくなりました\n      12799\n\n  * irb\n    * Binding#irb binding.pryと同じようにREPLのセッションを開始します。r56624.\n\n  * logger\n    * Logger.new のキーワード引数に level, progname, datetime_format, formatter を追加し、\n      Loggerインスタンス生成時に属性をセットできるようにしました。 12224\n    * Logger.new のキーワード引数に shift_period_suffix を追加 10772\n\n  * net/http\n    * Net::HTTP.post を追加 12375\n\n  * net/ftp\n    * TLSをサポート 4217\n    * Net::FTP.new の引数をキーワード引数に対応しました\n    * Net::FTP#status に省略可能なキーワード引数 pathname を追加\n      solebox による貢献。https://github.com/ruby/ruby/pull/1478 12965\n\n  * openssl\n    * Ruby/OpenSSL 2.0\n      OpenSSL は https://github.com/ruby/openssl に分離されましたが、デフォルトGemとして残っています。\n\n  * optparse\n    * OptionParser#parseやOptionParser#orderにキーワード引数 into を追加 11191\n\n  * pathname\n    * Pathname#empty? を追加 12596\n\n  * readline\n    * Readline.quoting_detection_proc, Readline.quoting_detection_proc= を追加\n      12659\n\n  * rexml\n    * REXML::Element#[] : If String or Symbol is specified, attribute\n      value is returned. Otherwise, Nth child is returned. This is\n      backward compatible change.\n\n  * set\n    * Set#compare_by_identity, Set#compare_by_identity? を追加\n      12210\n\n  * webrick\n    * \",\" をクッキーの区切り文字として許可しなくなりました 12791\n\n=== 互換性 (機能追加とバグ修正を除く)\n\n  * Array#sum と Enumerable#sum を追加しました。 12217\n    Ruby2.4以前ではArray#sumはなかったのでRuby自身には互換性の問題はありません。\n    しかし、多くのサードパーティ製のGem(activesupport, facets, simple_stats, etc)で\n    sumメソッドを定義しています。それらの実装はほとんど互換ですが、微妙な違いがあります。\n    Rubyのsumメソッドは概ね互換であるべきですが、全てのサードパーティ製の実装と完全に互換性を保つことは不可能です。\n\n  * FixnumとBignumはIntegerに統合されました。12005\n    FixnumクラスとBignumクラスは削除されました。\n    Integerクラスは抽象クラスから具象クラスに変更されました。\n    Cレベルの定数 rb_cFixnumとrb_cBignumは削除されました。これらを使用している場合、\n    コンパイルエラーになります。\n//emlist{\n        # 0のクラスはInteger\n        0.class # => Integer\n        Fixnum  # => Integer\n        Bignum  # => Integer\n\n        # 以下の2つは同じ\n        obj.kind_of?(Fixnum)\n        obj.kind_of?(Integer)\n\n        /* Cレベルでは以下の2つを使ってFixnumとBignumを区別すべき */\n        FIXNUM_P(obj)\n        RB_TYPE_P(obj, T_BIGNUM)\n\n        /* Cレベルではこの機能を検出するために以下の定数を使います */\n        RUBY_INTEGER_UNIFICATION\n\n        # Rubyレベルでは以下のコードでこの機能を検出できます\n        0.class == Integer\n//}\n\n  * String/Symbol#upcase/downcase/swapcase/capitalize(!) はASCIIだけでなく全てのUnicodeに対して動作するようになりました。10085\n    No change is needed if the data is in ASCII anyway or if the limitation\n    to ASCII was only tolerated while waiting for a more extensive implementation.\n    :asciiオプションを使うようにする変更が必要なのは、Unicodeのデータを処理するときに、\n    ASCIIのみ変換したい場合です。国際化ドメイン名の処理はよい例です。\n\n  * TRUE / FALSE / NIL\n    これらは廃止されました。12574\n    true / false / nil を使用してください。\n\n=== 標準添付ライブラリの互換性(機能追加とバグ修正を除く)\n\n  * DateTime\n    * DateTime#to_time はタイムゾーンを保つようになりました 12189\n\n  * PSych\n    * Psych 2.2.2 に更新\n\n  * RDoc\n    * RDoc 5.0.0 に更新\n\n  * RubyGems\n    * RubyGems 2.6.8 に更新\n\n  * shellwords\n    * Shellwords.shellwords (shellsplit) はダブルクオートの中で\n      後続の文字が次の文字の時だけバックスラッシュをエスケープとして\n      扱います:\n      $ ` \" \\ <newline>\n      10055\n      http://pubs.opengroup.org/onlinepubs/9699919799/utilities/contents.html\n\n  * Time\n    * Time#to_time はタイムゾーンを保つようになりました 12271\n\n  * thread\n    * the extension library is removed.  Till 2.0 it was a pure ruby script\n      \"thread.rb\", which has precedence over \"thread.so\", and has been provided\n      in $LOADED_FEATURES since 2.1.\n\n  * Tk\n    * 標準添付ライブラリから削除されました 8539\n      https://github.com/ruby/tk が新しいリポジトリです。\n\n  * XMLRPC\n    * 標準添付ライブラリから削除されてbundled Gem になりました 1216074239\n      https://github.com/ruby/xmlrpcが新しいリポジトリです。\n\n  * Zlib\n    * Zlib.gzip, Zlib.gunzip を追加 13020\n\n=== C API の更新\n\n  * ruby_show_version() will no longer exits the process, if\n    RUBY_SHOW_COPYRIGHT_TO_DIE is set to 0.  This will be the default in\n    the future.\n\n  * rb_gc_adjust_memory_usage() [Feature #12690]\n\n=== サポートするプラットフォームの変更\n\n  * FreeBSD < 4 はもうサポートしていません\n\n=== 実装の改善\n\n  * いくつかの条件で [x,y].max と [x,y].min が一時的な配列を生成しないよう最適化されました。\n    Math.max(x, y) と書くようなほとんどのカジュアルで実際にありそうなユースケースで効果があります。\n    具体的な条件は実装の詳細ですが以下の通りです:\n    * 配列リテラルに splat が含まれないこと\n    * must have at least one expression but literal\n    * 配列の長さが0x100(256)以下であること\n    * Array#max や Array#min が再定義されていないこと\n\n  * スレッドのデッドロックを検知するとバックトレースと依存関係を出力します 8214\n\n  * st_table (st.c) 内部のデータ構造が改善されました 12142\n\n  * Rational は大幅に最適化されました 12484\n\n=== その他の変更\n\n  * ChangeLogファイルはリポジトリから削除されました。\n    Subversion にあるコミットメッセージから make dist によって生成されます。\n    人々はGitスタイルのコミットメッセージに従うべきです。\n    以下を参照してください。https://git-scm.com/book/ch5-2.html\n    12283",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Array/"
        },
        {
          "key": "Comparable",
          "label": "Comparable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Comparable/"
        },
        {
          "key": "Dir",
          "label": "Dir",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Dir/"
        },
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerable/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        },
        {
          "key": "Enumerator::Lazy",
          "label": "Enumerator::Lazy",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator%3A%3ALazy/"
        },
        {
          "key": "File",
          "label": "File",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:File/"
        },
        {
          "key": "Float",
          "label": "Float",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Float/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Hash/"
        },
        {
          "key": "IO",
          "label": "IO",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IO/"
        },
        {
          "key": "Integer",
          "label": "Integer",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Integer/"
        },
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Kernel/"
        },
        {
          "key": "MatchData",
          "label": "MatchData",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:MatchData/"
        },
        {
          "key": "Module",
          "label": "Module",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Module/"
        },
        {
          "key": "Numeric",
          "label": "Numeric",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Numeric/"
        },
        {
          "key": "Process",
          "label": "Process",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Process/"
        },
        {
          "key": "Rational",
          "label": "Rational",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Rational/"
        },
        {
          "key": "Regexp",
          "label": "Regexp",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Regexp/"
        },
        {
          "key": "String",
          "label": "String",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:String/"
        },
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:StringIO/"
        },
        {
          "key": "Symbol",
          "label": "Symbol",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Symbol/"
        },
        {
          "key": "Thread",
          "label": "Thread",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Thread/"
        },
        {
          "key": "TracePoint",
          "label": "TracePoint",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:TracePoint/"
        },
        {
          "key": "Warning",
          "label": "Warning",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Warning/"
        },
        {
          "key": "cgi",
          "label": "cgi",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:cgi/"
        },
        {
          "key": "csv",
          "label": "csv",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:csv/"
        },
        {
          "key": "ipaddr",
          "label": "ipaddr",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ipaddr/"
        },
        {
          "key": "irb",
          "label": "irb",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:irb/"
        },
        {
          "key": "logger",
          "label": "logger",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:logger/"
        },
        {
          "key": "net/ftp",
          "label": "net/ftp",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:net%2Fftp/"
        },
        {
          "key": "net/http",
          "label": "net/http",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:net%2Fhttp/"
        },
        {
          "key": "openssl",
          "label": "openssl",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:openssl/"
        },
        {
          "key": "optparse",
          "label": "optparse",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:optparse/"
        },
        {
          "key": "pathname",
          "label": "pathname",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:pathname/"
        },
        {
          "key": "readline",
          "label": "readline",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:readline/"
        },
        {
          "key": "rexml",
          "label": "rexml",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rexml/"
        },
        {
          "key": "set",
          "label": "set",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:set/"
        },
        {
          "key": "webrick",
          "label": "webrick",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:webrick/"
        }
      ]
    },
    {
      "signature": "NEWS for Ruby 2.3.0",
      "score": 253.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "NEWS for Ruby 2.3.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f2_3_0.html",
          "description": "NEWS for Ruby 2.3.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストは ChangeLog ファイルか bugs.ruby-lang.org の issue を参照してください。\n\n== 2.2.0 以降の変更\n\n=== 言語仕様の変更\n\n  * frozen-string-literal プラグマ:\n    * 実験的な機能として fronzen-string-literal というプラグマが導入されました。\n      8976\n    * さらに --enable/--disable=frozen-string-literal というコマンドラインオプションも導入されました\n      8976\n    * コマンドラインオプションに --debug または --debug=frozen-string-literal を付けて実行すると、\n      freeze された文字列を操作しようとして RuntimeError が発生したときにそのオブジェクトが生成された位置を表示します。\n      11725\n\n  * safe navigation operator (ぼっち演算子):\n    * object&.foo という形式のメソッド呼び出し形式が追加されました。これは object が nil でないときにメソッド foo を呼び出します。\n      Active Support の try! と似ていますが、メソッド名は文法的に必須であるという点が異なります。\n      11537\n//emlist{\n          obj.try! {} # valid\n          obj&. {}    # syntax error\n//}\n      * 引数はメソッドが呼び出された場合のみ評価されます。\n//emlist{\n          obj.try!(:foo, bar())  # bar() は常に評価されます\n          obj&.foo(bar())        # bar() は条件付きで評価されます\n//}\n      * 属性値の代入にも使えます\n//emlist{\n          obj&.attr += 1\n//}\n\n  * did_you_mean gem:\n    * 名前のタイポによって NameError や NoMethodError が起きたときに、自動的に他の似た名前を提案してくれます。\n//emlist{\n      \"Yuki\".starts_with?(\"Y\")\n      # => NoMethodError: undefined method `starts_with?' for \"Yuki\":String\n      #    Did you mean?  start_with?\n//}\n\n  * インデントされたヒアドキュメント:\n    * 新しい文字列リテラルとして <<~ で始まるヒアドキュメントが追加されました\n      9098\n\n=== 組み込みクラスの更新\n\n  * ARGF\n    * ARGF.read_nonblock は IO#read_nonblock と同じように `exception: false' オプションをサポートします\n      11358\n\n  * Array\n    * Array#bsearch_index を追加\n      10730\n    * Array#dig を追加\n      11643\n\n  * Comparable\n    * Comparable#==はもはや例外を rescue しません\n      7688\n\n  * Encoding\n    * Encoding::IBM037 (alias ebcdic-cp-us; dummy) を追加\n\n  * Enumerable\n    * Enumerable#grep_v を追加\n      11049\n    * Enumerable#chunk_while\n      10769\n\n  * Enumerator::Lazy\n    * Enumerator::Lazy#grep_v を追加\n      11773\n\n  * File\n    * File.mkfifo\n      11536\n    * O_TMPFILE に対応する File::TMPFILE(File::Constants::TMPFILE) を追加\n\n  * Hash\n    * Hash#fetch_values を追加\n      10017\n    * Hash#dig を追加\n      11643\n    * Hash#<=, Hash#<, Hash#>=, Hash#> を追加\n      10984\n    * Hash#to_proc を追加\n      11653\n\n  * IO\n    * 新しいフラグ File::SHARE_DELETE(File::Constants::SHARE_DELETE) が使用できます。\n      Windows で開いているファイルを削除することを許可しますが、現在はファイルをバイナリモードで開いているときのみ効果があります。\n      11218\n    * `flags` オプションの追加。\n      this parameter is bitwise-ORed to oflags generated by normal mode argument.\n      11253\n    * IO#advise はもはや Errno::ENOSYS を起こしません。\n      サポートの有無を実行時ではなくビルド時に検出するためです。\n      11806\n\n  * Kernel\n    * Kernel.#loop は StopIteration で停止したときに nil ではなく最後に評価した要素を返します。\n      11498\n\n  * Module\n    * Module#deprecate_constant を追加\n      11398\n\n  * NameError\n    * レシーバーオブジェクトを返す NameError#receiver を追加\n      10881\n\n  * Numeric\n    * Numeric#positive?, Numeric#negative? を追加\n      11151\n\n  * Proc\n    * Proc#call ( Proc#[] , Proc#===, Proc#yield) は最適化されました。\n      Backtrace doesn't show each method (show block lines directly).\n      TracePoint also ignores these calls.\n      11569\n\n  * Queue (Thread::Queue)\n    * 終了を通知するために Queue#close(Thread::Queue#close) を追加\n      10600\n\n  * Regexp/String: Unicode のバージョンを 7.0.0 から 8.0.0 に更新\n\n  * RubyVM::InstructionSequence\n    * 実験的な機能としてiseqローダー用の低レベルな操作をするメソッドをいくつか追加\n      使用例は sample/iseq_loader.rb を見てください。\n      ローダーには検証機能がないので、編集したバイナリや壊れたバイナリをロードすると簡単に致命的な問題を起こすことができます。\n      11788\n      * RubyVM::InstructionSequence#to_binary(extra_data = nil)\n      * RubyVM::InstructionSequence.load_from_binary(binary)\n      * RubyVM::InstructionSequence.load_from_binary_extra_data(binary)\n\n  * String\n    * フリーズされていない文字列を生成するString#+@ を追加\n    * フリーズされた文字列を生成する String#-@ を追加\n      11782\n    * String.new に `encoding` オプションが追加されました\n      11785\n\n  * Struct\n    * Struct#dig を追加\n      11688\n\n  * Thread\n    * スレッド名を扱うために Thread#name, Thread#name= を追加\n      11251\n\n=== 組み込みクラスの互換性 (機能追加とバグ修正を除く)\n\n  * Array\n    * Array#select!, Array#keep_if, Array#reject!, Array#delete_if\n      ブロックが評価される度にレシーバーの配列をすぐに変更しないようになりました。\n      10714\n    * Array#flatten と Array#flatten! は与えられたレベルを越えた要素には\n      `#to_ary`を呼ばないようになりました。\n      10748\n    * Array#inspect はその要素の文字列が Encoding.default_external と\n      互換性のないエンコーディングであっても例外が発生しなくなりました。\n      11801\n\n  * Enumerable\n    * Enumerable#chunk と Enumerable#slice_before は初期状態を引数として受け取らなくなりました。\n      状態の管理にはローカル変数を使ってください。\n      10958\n\n  * File::Stat\n    * Windows では File::Stat#ino は常に 0 を返していましたが、\n      BY_HANDLE_FILE_INFORMATION.nFileIndexHigh/Low を返すようになりました。\n      11216\n\n  * Hash\n    * Hash#inspect はその要素の文字列が Encoding.default_external と\n      互換性のないエンコーディングであっても例外が発生しなくなりました。\n      11801\n\n  * IO\n    * クローズ済みのIOオブジェクトに IO#close を呼んでも例外が発生しなくなりました。\n      10718\n    * IO#each_codepoint は、変換時、EOFの前に不完全な文字があると例外が発生するようになりました。\n      11444\n\n  * Module\n    * Module#define_method と Object#define_singleton_method は\n      メソッド本体(Procオブジェクト、Methodオブジェクト、またはブロック )が必須になりました。\n      ブロックが与えられない場合は ArgumentError が発生します。\n      11283\n\n  * pack/unpack (Array/String)\n    * `j`と`J`が追加されました。\n      11215\n\n\n=== 標準添付ライブラリの更新 (優れたもののみ)\n\n  * Logger\n    * Logger#level= はシンボルと文字列でログレベルを指定できるようになりました。(大文字・小文字を区別しません)\n      11695\n    * ログデバイスを開きなおすために Logger#reopen が追加されました。\n      11696\n\n  * io/wait\n    * IO#wait_readable は FIONREAD をチェックしなくなりました。\n      ソケットのようなバイトストリームではないIOで使われます。\n\n  * Net::FTP\n    * Net::FTP#mlst を追加。\n    * Net::FTP#mlsd を追加。\n\n  * nkf\n    * nkf 2.1.4 をマージしました。\n\n  * ObjectSpace (objspace)\n    * ObjectSpace.#count_symbols を追加。\n    * ObjectSpace.#count_imemo_objects を追加。\n    * ObjectSpace.#internal_class_of を追加。\n    * ObjectSpace.#internal_super_of を追加。\n\n  * OpenSSL\n    * OpenSSL::SSL::SSLSocket#accept_nonblock と\n      OpenSSL::SSL::SSLSocket#connect_nonblock は `exception: false` オプションをサポートするようになりました。\n      10532\n\n  * Pathname\n    * Pathname#descend と Pathname#ascend はブロックなしでの呼び出しができるようになりました。\n      11052\n\n  * Socket\n    * Socket#connect_nonblock, Socket#accept_nonblock,\n      TCPServer#accept_nonblock, UNIXServer#accept_nonblock,\n      BasicSocket#recv_nonblock, BasicSocket#recvmsg_nonblock,\n      BasicSocket#sendmsg_nonblock に `exception: false` オプションを追加しました。\n      例外 IO::WaitReadable や IO::WaitWritable を発生させるかわりに :wait_readable, :wait_writable を返すためです。\n      10532\n      11229\n    * BasicSocket#recv と BasicSocket#recv_nonblock は GC のオーバーヘッドを減らすために\n      IO#read や IO#read_nonblock と同じように出力用の文字列を引数として受けとれるようになりました。\n      11242\n\n  * StringIO\n    * リードオンリーモードでは、StringIO#set_encoding はそのバッファ文字列にエンコーディングをセットしないようになりました。\n      StringIO#set_encoding を使わずに文字列のエンコーディングを設定すると予期しない動作の原因となるかもしれません。\n      11827\n\n  * timeout\n    * Object#timeoutは呼び出すと非推奨として警告されるようになりました。\n\n=== 標準添付ライブラリの互換性 (機能追加とバグ修正を除く)\n\n  * ext/coverage/coverage.c\n    * Coverage.peek_result を追加。カバレッジツールを停止することなくカバレッジに関する情報を取得することができます。\n      https://bugs.ruby-lang.org/issues/10816\n\n  * Fiddle\n    * Fiddle::Function#call は GVL を解放するようになりました。\n      11607\n\n  * io/console\n    * io-console 0.4.5になりました。\n      ライセンスが BSD 2-clause \"Simplified\" License に変更されました。\n\n  * base64\n    * Base64.#urlsafe_encode64 に パディング文字(\"=\")を抑制するために \"padding\" オプションが追加されました。\n      10740\n    * Base64.#urlsafe_decode64: パディングされていない入力だけでなく正しくパディングされた入力も受け付けるようになりました。\n      10740\n\n  * drb\n    * 使用していない引数を削除しました。\n      https://github.com/ruby/ruby/pull/515\n\n  * matrix\n    * Vector#roundを追加。\n      https://github.com/ruby/ruby/pull/802\n\n  * webrick/utils\n    * 使用していない引数を削除しました。\n      https://github.com/ruby/ruby/pull/356\n\n  * Net::FTP\n    * パッシブモードでの接続がデフォルトになりました。\n      Net::FTP.default_passive= で変更することができます。\n      11612\n\n  * Net::HTTP\n    * Net::HTTP#open_timeout のデフォルト値が 60 になりました。(以前は nil でした)\n\n  * Net::Telnet\n    * Net::Telnet は net-telnet gem になりました。\n      11083\n\n  * psych\n    * Psych 2.0.17 に更新しました。\n\n  * Rake\n    * Rake は標準添付ライブラリから削除されて bundled gem になりました。\n      11025\n\n  * RDoc\n    * RDoc 4.2.1 に更新しました。\n      * https://github.com/ruby/rdoc/blob/master/History.rdoc#421--2015-12-22\n\n  * RubyGems\n    * RubyGems 2.5.1 に更新しました。\n      * http://docs.seattlerb.org/rubygems/History_txt.html#label-2.5.0+-2F+2015-11-03\n      * http://docs.seattlerb.org/rubygems/History_txt.html#label-2.5.1+-2F+2015-12-10\n\n=== 組込みのグローバル変数の互換性に影響のある変更\n\n  * $SAFE\n    * $SAFE=2 と $SAFE=3 が廃止されました。$SAFE を2以上にすると ArgumentError が発生します。\n      5455\n\n=== C API の更新\n\n  * rb_define_class_id_under() は既にクラスが定義済みなのに、\n    そのスーパークラスが与えられたスーパークラスと一致しないとき\n    Rubyレベルの定義と同じように TypeError を発生させるようになりました。\n\n  * 現在日時を timespec 構造体として取得する rb_timespec_now() が追加されました。\n    11558\n\n  * 起算時からの経過秒数、ナノ秒、UTCからの時差から Time オブジェクトを\n    生成する rb_time_timespec_new() が追加されました。\n    11558\n\n  * rb_autoload() は非推奨になりました。rb_funcall() を使ってください。\n    11664\n\n  * rb_compile_error_with_enc(), rb_compile_error(), rb_compile_bug() が非推奨になりました。\n    これらの関数は公開されていますが、内部利用のためなので外部のライブラリでは使用するべきではありません。\n\n=== サポートしているプラットフォームの変更\n\n  * OS/2 はもうサポートされていません。\n  * BeOS はもうサポートされていません。\n  * Borland-C はもうサポートされていません。\n  * Haiku は安定しています。ベストエフォートです。\n\n=== 実装の改善\n\n  * Proc#call をメソッドフレームの構築を取り除いて最適化しました。\n    11569\n\n  * メソッドエントリのデータ構造を再考しました。\n    11278\n\n  * メソッドテーブルなどに使用する新しいテーブルデータ構造を導入しました。\n    新しいテーブル構造は st_table よりもシンプルで速いです。\n    11420\n\n  * オブジェクトアロケーションとメソッド呼び出しのために機械語レベルのチューニングをしました。\n    r52099, r52254\n\n  * 将来の改善のために RubyVM::InstructionSequence が拡張されました。\n    11788\n\n  * nil, true, false の case 式のディスパッチが最適化されました。\n    以前は文字列、シンボル、整数、浮動小数のみが最適化されていました。\n    11769\n\n  * ピュアRubyではないクラス(T_DATA, T_FILE など)上のインスタンス変数は以前よりも保存にコストがかからなくなりました。\n    11170\n\n  * 巨大な Struct のオブジェクトのメンバーへのアクセスが定数時間になりました。\n    以前は、最初の10要素を越えると線形にスキャンしていました。\n    10585\n\n  * Set の速度は向上しました。\n    10754\n    [r52591]\n\n  * Socket と I/O関連の改善\n    * 11229 でI/Oのメソッドに導入された新しいキーワード引数によるオーバーヘッドは\n      11339 でC APIでの非効率なキーワード引数のパースを避けることによって削減されました。\n    * 改善された例外なしのノンブロッキングI/Oによって標準添付ライブラリが更新されました。\n      11229\n      これによって、コストのかかる例外が減ったのでデバッグモード時のアウトプットが少なくなりました。\n      11044\n    * (Linuxのみ) 標準添付ライブラリ内で、一つのFDをselect(2)で待つ箇所がなくなりました。\n      大きい番号のFDで遅くなり辛くなりました。\n      11081\n      11377\n\n  * CGI.escapeHTML はC拡張で最適化されました。\n    https://github.com/ruby/ruby/pull/1164",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "ARGF",
          "label": "ARGF",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ARGF/"
        },
        {
          "key": "Array",
          "label": "Array",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Array/"
        },
        {
          "key": "Comparable",
          "label": "Comparable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Comparable/"
        },
        {
          "key": "Encoding",
          "label": "Encoding",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Encoding/"
        },
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerable/"
        },
        {
          "key": "Enumerator::Lazy",
          "label": "Enumerator::Lazy",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator%3A%3ALazy/"
        },
        {
          "key": "Fiddle",
          "label": "Fiddle",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Fiddle/"
        },
        {
          "key": "File",
          "label": "File",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:File/"
        },
        {
          "key": "File::Stat",
          "label": "File::Stat",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:File%3A%3AStat/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Hash/"
        },
        {
          "key": "IO",
          "label": "IO",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IO/"
        },
        {
          "key": "IO::WaitReadable",
          "label": "IO::WaitReadable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IO%3A%3AWaitReadable/"
        },
        {
          "key": "IO::WaitWritable",
          "label": "IO::WaitWritable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IO%3A%3AWaitWritable/"
        },
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Kernel/"
        },
        {
          "key": "Logger",
          "label": "Logger",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Logger/"
        },
        {
          "key": "Module",
          "label": "Module",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Module/"
        },
        {
          "key": "NameError",
          "label": "NameError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:NameError/"
        },
        {
          "key": "Net::FTP",
          "label": "Net::FTP",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Net%3A%3AFTP/"
        },
        {
          "key": "Net::HTTP",
          "label": "Net::HTTP",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Net%3A%3AHTTP/"
        },
        {
          "key": "Numeric",
          "label": "Numeric",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Numeric/"
        },
        {
          "key": "ObjectSpace",
          "label": "ObjectSpace",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ObjectSpace/"
        },
        {
          "key": "OpenSSL",
          "label": "OpenSSL",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:OpenSSL/"
        },
        {
          "key": "Pathname",
          "label": "Pathname",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Pathname/"
        },
        {
          "key": "Proc",
          "label": "Proc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Proc/"
        },
        {
          "key": "Queue",
          "label": "Queue",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Queue/"
        },
        {
          "key": "Regexp",
          "label": "Regexp",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Regexp/"
        },
        {
          "key": "RubyVM::InstructionSequence",
          "label": "RubyVM::InstructionSequence",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RubyVM%3A%3AInstructionSequence/"
        },
        {
          "key": "Set",
          "label": "Set",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Set/"
        },
        {
          "key": "Socket",
          "label": "Socket",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Socket/"
        },
        {
          "key": "String",
          "label": "String",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:String/"
        },
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:StringIO/"
        },
        {
          "key": "Struct",
          "label": "Struct",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Struct/"
        },
        {
          "key": "Thread",
          "label": "Thread",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Thread/"
        },
        {
          "key": "Thread::Queue",
          "label": "Thread::Queue",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Thread%3A%3AQueue/"
        },
        {
          "key": "Time",
          "label": "Time",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Time/"
        },
        {
          "key": "base64",
          "label": "base64",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:base64/"
        },
        {
          "key": "drb",
          "label": "drb",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:drb/"
        },
        {
          "key": "io/console",
          "label": "io/console",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:io%2Fconsole/"
        },
        {
          "key": "io/wait",
          "label": "io/wait",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:io%2Fwait/"
        },
        {
          "key": "matrix",
          "label": "matrix",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:matrix/"
        },
        {
          "key": "nkf",
          "label": "nkf",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:nkf/"
        },
        {
          "key": "objspace",
          "label": "objspace",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:objspace/"
        },
        {
          "key": "psych",
          "label": "psych",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:psych/"
        },
        {
          "key": "timeout",
          "label": "timeout",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:timeout/"
        },
        {
          "key": "webrick/utils",
          "label": "webrick/utils",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:webrick%2Futils/"
        }
      ]
    },
    {
      "signature": "rss",
      "score": 235.0,
      "metadata": { "type": "library", "versions": ["3.2.0"] },
      "summary": "RSS を扱うためのライブラリです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/library/rss.html",
          "description": "RSS を扱うためのライブラリです。\n\n=== 参考\n\n  * RSS 0.91 http://backend.userland.com/rss091\n  * RSS 1.0  http://purl.org/rss/1.0/spec\n  * RSS 2.0  http://www.rssboard.org/rss-specification\n  * Atom 1.0 https://www.ietf.org/rfc/rfc4287.txt\n\n=== 注意\n\nRSS ParserはRSS 0.9x/1.0/2.0, Atom 1.0 をサポートしていますが，RSS 0.90\nはサポートしてません．ごめんなさい．\n\nRSS のモジュールはそれぞれ、\n * Dublin Core モジュール http://web.resource.org/rss/1.0/modules/dc/ \n * Syndication モジュール http://web.resource.org/rss/1.0/modules/syndication/\n * Content モジュール http://web.resource.org/rss/1.0/modules/content/\n * Trackback モジュール http://madskills.com/public/xml/rss/module/trackback/\n * Image モジュール http://web.resource.org/rss/1.0/modules/image/\nをサポートしています。\nただし，Content モジュールは content:encoded しかサポートしていません．\n\n=== パース\n\nRSS をパースしたい場合は RSS::Parser クラスを使います。\nRSS::Parser.parse は String の RSSを パースします(使用するXMLパー\nサによっては File や IO オブジェクトなどでもパース可能です)。\n * RSS 1.0をパースした場合は RSS::RDF オブジェクト\n * RSS 0.9x/2.0をパースした場合は RSS::Rss オブジェクト\n * Atom をパースした場合は RSS::Atom::Feed オブジェクト\nをそれぞれ返します。パースした\nString が well formed な XML で無い場合は，\n例外 RSS::NotWellFormedError が発生します。well formed な\nXML だが，RSS 0.9x/1.0/2.0, Atom のいずれでもない場合は，nil が\n返ります．\n\n例えば、RSS 1.0 をバリデーション付きでパースするには以下のよ\nうにします。ここで、変数 rss_source には RSS 1.0 形式の文\n字列が格納されているものとします。\n\n  require 'rss'\n  rss = RSS::Parser.parse(rss_source, true)\n\nRSS::Parser.parse の第二引数は省略すると true が指定されたもの\nとみなされるので、これは以下のようにも書けます。\n\n  require 'rss'\n  rss = RSS::Parser.parse(rss_source)\n\n最初はバリデーション付きでパースして，valid ではない RSS だった\n場合はバリデーション無しでパースするには以下のように書きます。\n\n  require 'rss'\n  rss = nil\n  begin\n    rss = RSS::Parser.parse(rss_source)\n  rescue RSS::InvalidRSSError\n    rss = RSS::Parser.parse(rss_source, false)\n  end\n\nこれは rss_source が RSS 0.9x/1.0/2.0 のどれか分からない時\nにも有効です。RSS 1.0としてバリデー\nション付きでパースし、バリデーションに失敗すると RSS 0.9x/(壊\nれた)1.0/2.0 のいずれかとしてパースします。\n\n==== 知らない要素の扱い\n\nパーサはデフォルトでは知らない要素(仕様書に規定されていない\n要素)を無視します。もし、知らない要素に遭遇した時に例外を発\n生させたければ，RSS::Parser.parse の第三引数に false を指定して\nください。こうすると、パース中に知らない要素に遭遇した時に\nRSS::UnknownTagError 例外が発生します。RSS::UnknownTagError\nクラスは RSS::InvalidError クラスのサブクラスです。\n\n以下のようにすると，より厳密にパースできます。\n\n  RSS::Parser.parse(rss_source, true, false)\n\n=== パースされたフィード\n\nフィードをパースすると  RSS::RDF, RSS::RDF::Channel,\nRSS::Rss, RSS::Atom::Feed 等のオブジェクトになります。\n各オブジェクトで子要素オブジェクトにアクセスするために，要素名と\n同じ名前のアクセサがあります。\n\n==== リーダ(reader)\n\nrdf:RDF 要素の子要素である channel 要素を参照するには，以下のよう\nにします。\n\n  rss = RSS::Parser.parse(rss_source)\n  rss.channel # => /rdf:RDF/channel要素; RSS::RDF::Channel\n\nもし、要素が子要素も属性も持たない場合は String が返ってきます。\nその要素が省略可能ならばnilが返って来るかもしれません。これ\nは要素が子要素または属性を持つ場合も同様です。\n\n  rss = RSS::Parser.parse(rss_source)\n  rss.channel.description # => /rdf:RDF/channel/text(); String\n\n属性にアクセスする時も同様です。channel要素のrdf:about属性に\nアクセスするには以下のようにします。属性の値はStringかnilで\nす。\n\n  rss = RSS::Parser.parse(rss_source)\n  rss.channel.about # => /rdf:RDF/channel/@about属性; String または nil\n\n同名の複数の子要素があるかもしれないときも同様です。ただし、\nリーダに引数を指定しないと最初の子要素が返ってきます。例えば、\nrdf:RDF要素の最初のitem要素にアクセスするには以下のようにし\nます。\n\n  rss = RSS::Parser.parse(rss_source)\n  rss.item # => /rdf:RDF/item[1]要素; RSS::RDF::Item\n\n3番目のitem要素にアクセスするには以下のようにします。省略さ\nれなかったリーダの引数はArray#[]の引数と同じように扱われます。\n\n  rss = RSS::Parser.parse(rss_source)\n  rss.item(2) # => /rdf:RDF/item[3]要素; RSS::RDF::Item\n\n子要素すべてを取得したいときは要素名の複数形がリーダとなりま\nす。すべてのitem要素を取得するには以下のようにします。\n\n  rss = RSS::Parser.parse(rss_source)\n  rss.items # => /rdf:RDF/item要素の配列; [RSS::RDF::Item, ...]\n\n==== ライタ(writer)\n\nrdf:RDF要素の子要素であるchannel要素を設定するには以下のよう\nにします。RSS::RDF::Channel.newの第一引数にはrdf:about属性の\n値を指定することもできます。\n\n  rss = RSS::Parser.parse(rss_source)\n  rss.channel = RSS::RDF::Channel.new(rdf_about_value)\n\n属性値を設定する場合も同様です。\n\n  rss = RSS::Parser.parse(rss_source)\n  rss.channel.about = \"http://cozmixng.www.cozmixng.org/\"\n\n同名の複数の子要素が存在する場合は少し異なります．要素名の複\n数形でのメソッドで要素の配列を取得して，その配列に対して\nArray#<<やArray#[]=などを用いて要素を設定します．\n\n  rss = RSS::Parser.parse(rss_source)\n  item = RSS::RDF::Item.new(rdf_about_value)\n  rss.items << item\n  rss.items.last == item # => true\n\n注意: item=/set_itemなどはRubyっぽくないので使わないでくださ\nい．\n\n=== 出力\n\nRSS Parserといっているので誤解されがちですが，RSS/Atomを出力する\nこともできます．\n\n==== 基本\n\nto_sするとRSSまたはAtom形式の文字列を返します．\n\nRSS/Atomを出力する流れは以下のようになります．\n\n  * RSS/Atomオブジェクト（RSS::RDFとかRSS::Rssクラスとか\n    RSS::Atom::Feedのオブジェクト）を作成する\n\n  * 出力エンコーディングを指定する(省略可)\n\n  * RSSオブジェクトのto_sメソッドを呼ぶ\n\n==== xml-stylesheet\n\nxml-stylesheetも出力することができます．\n\nRSSのルート要素（RSS::RDFまたはRSS::Rss）オブジェ\nクトおよびAtomのルート要素（RSS::Atom::Feedまたは\nRSS::Atom::Entry）オブジェクトはxml_stylesheetsという\n名前の配列を持っています．この配列にRSS::XMLStyleSheet\nオブジェクトを挿入することでRSS/Atomにxml-stylesheetを\n関連づけることができます．\n\n  rss.xml_stylesheets << RSS::XMLStyleSheet.new(...)\n\nRSS::XMLStyleSheet.newには以下のようなHashまたは\n連想配列を渡します．作成されるRSS::XMLStyleSheetオブジェ\nクトは与えられた引数によって初期化されます．\n\nHash:\n\n  {\n    :href => \"...\",\n    :type => \"...\",\n    :title => \"...\",\n    :media => \"...\",\n    :charset => \"...\",\n    :alternate => \"...\",\n  }\n\n連想配列:\n\n  [\n    [:href, \"...\"],\n    [:type, \"...\"],\n    [:title, \"...\"],\n    [:media, \"...\"],\n    [:charset, \"...\"],\n    [:alternate, \"...\"],\n  ]\n\n全てのキーは省略可能です．\n\n例えば，xml-stylesheetとしてsample.xslを指定する場合は以下の\nようにします．\n\n  rss.xml_stylesheets << RSS::XMLStyleSheet.new({:href => \"sample.xsl\"})\n\n本当は{:type => \"text/xsl\"}も指定しないといけないとこ\nろですが，拡張子が.xslまたは，.cssの場合は適当に推測してくれ\nるので省略可能です．\n\n==== RSS/Atomオブジェクトを作る\n\n既存のRSS/Atomをパースせずに，一から新しくRSS/Atomを作成するには\nRSS Makerが便利です．\n\n\n以下のように使います．\n\n  require \"rss\"\n\n  rss = RSS::Maker.make(\"バージョン\") do |maker|\n    maker.XXX = YYY\n    ...\n  end\n\n===== シンプルなRSS\n\n例えば，\n\n  * http://example.com/にある\n  * Example Siteという説明文を持つ\n  * Exampleというサイトを\n  * http://example.com/index.rdfという名前のRSS 1.0\n\nを生成するには以下のようにします．\n\n  require \"rss\"\n\n  rss = RSS::Maker.make(\"1.0\") do |maker|\n    maker.channel.about = \"http://example.com/index.rdf\"\n    maker.channel.title = \"Example\"\n    maker.channel.description = \"Example Site\"\n    maker.channel.link = \"http://example.com/\"\n  end\n\nもし，\n\n  * http://example.com/article.htmlにある\n  * Sample Articleというタイトルの\n\nエントリを含めたければ以下のようにします．\n\n  require \"rss\"\n\n  rss = RSS::Maker.make(\"1.0\") do |maker|\n    maker.channel.about = \"http://example.com/index.rdf\"\n    maker.channel.title = \"Example\"\n    maker.channel.description = \"Example Site\"\n    maker.channel.link = \"http://example.com/\"\n\n    item = maker.items.new_item\n    item.link = \"http://example.com/article.html\"\n    item.title = \"Sample Article\"\n  end\n\n===== 更新時刻を追加\n\nもし，先のエントリが\n\n  * 2004/11/1 10:10\n\nのものならこうします．\n\n  require \"rss\"\n\n  rss = RSS::Maker.make(\"1.0\") do |maker|\n    maker.channel.about = \"http://example.com/index.rdf\"\n    maker.channel.title = \"Example\"\n    maker.channel.description = \"Example Site\"\n    maker.channel.link = \"http://example.com/\"\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article.html\"\n      item.title = \"Sample Article\"\n      item.date = Time.parse(\"2004/11/1 10:10\")\n    end\n  end\n\nサンプル中の\n\n  item.date = ...\n\nは\n\n  item.dc_date = ...\n\nでも構いません．#dc_date=は#date=の単なる別名で\nす．\n\n===== さらにエントリを追加\n\nさらに，\n\n  * http://example.com/article2.htmlにある\n  * Sample Article2という\n  * 2004/11/2 10:10に作成された\n\nエントリを持つなら以下のようにします．\n\n  require \"rss\"\n\n  rss = RSS::Maker.make(\"1.0\") do |maker|\n    maker.channel.about = \"http://example.com/index.rdf\"\n    maker.channel.title = \"Example\"\n    maker.channel.description = \"Example Site\"\n    maker.channel.link = \"http://example.com/\"\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article.html\"\n      item.title = \"Sample Article\"\n      item.date = Time.parse(\"2004/11/1 10:10\")\n    end\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article2.html\"\n      item.title = \"Sample Article2\"\n      item.date = Time.parse(\"2004/11/2 10:10\")\n    end\n  end\n\n===== エントリを並び替える\n\nもし，更新日が新しい順に並び替えたければ\n\n  maker.items.do_sort = true\n\nを追加し，以下のようにします．\n\n  require \"rss\"\n\n  rss = RSS::Maker.make(\"1.0\") do |maker|\n    maker.channel.about = \"http://example.com/index.rdf\"\n    maker.channel.title = \"Example\"\n    maker.channel.description = \"Example Site\"\n    maker.channel.link = \"http://example.com/\"\n\n    maker.items.do_sort = true\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article.html\"\n      item.title = \"Sample Article\"\n      item.date = Time.parse(\"2004/11/1 10:10\")\n    end\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article2.html\"\n      item.title = \"Sample Article2\"\n      item.date = Time.parse(\"2004/11/2 10:10\")\n    end\n  end\n\n===== ロゴの指定\n\nもし，サイトに\n\n  * Example Siteという名前の\n  * http://example.com/logo.pngというロゴ\n\nがある場合は以下のようにします．\n\n  require \"rss\"\n\n  rss = RSS::Maker.make(\"1.0\") do |maker|\n    maker.channel.about = \"http://example.com/index.rdf\"\n    maker.channel.title = \"Example\"\n    maker.channel.description = \"Example Site\"\n    maker.channel.link = \"http://example.com/\"\n\n    maker.items.do_sort = true\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article.html\"\n      item.title = \"Sample Article\"\n      item.date = Time.parse(\"2004/11/1 10:10\")\n    end\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article2.html\"\n      item.title = \"Sample Article2\"\n      item.date = Time.parse(\"2004/11/2 10:10\")\n    end\n\n    maker.image.title = \"Example Site\"\n    maker.image.url = \"http://example.com/logo.png\"\n  end\n\n===== 検索ページの指定\n\nもし，\n\n  * http://example.com/search.cgiに\n  * keywordというパラメタ名で検索できる\n  * Search Example Siteという名前で\n  * Search Example Site's all textという説明付きの\n\n検索用ページがあったら以下のようにします．\n\n  require \"rss\"\n\n  rss = RSS::Maker.make(\"1.0\") do |maker|\n    maker.channel.about = \"http://example.com/index.rdf\"\n    maker.channel.title = \"Example\"\n    maker.channel.description = \"Example Site\"\n    maker.channel.link = \"http://example.com/\"\n\n    maker.items.do_sort = true\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article.html\"\n      item.title = \"Sample Article\"\n      item.date = Time.parse(\"2004/11/1 10:10\")\n    end\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article2.html\"\n      item.title = \"Sample Article2\"\n      item.date = Time.parse(\"2004/11/2 10:10\")\n    end\n\n    maker.image.title = \"Example Site\"\n    maker.image.url = \"http://example.com/logo.png\"\n\n    maker.textinput.title = \"Search Example Site\"\n    maker.textinput.description = \"Search Example Site's all text\"\n    maker.textinput.name = \"keyword\"\n    maker.textinput.link = \"http://example.com/search.cgi\"\n  end\n\n===== XMLスタイルシートの指定\n\nもし，\n\n  * http://example.com/index.xslにある\n\nxml-stylesheetを追加したい場合は以下のようにします．\n\n  require \"rss\"\n\n  rss = RSS::Maker.make(\"1.0\") do |maker|\n    xss = maker.xml_stylesheets.new_xml_stylesheet\n    xss.href = \"http://example.com/index.xsl\"\n\n    maker.channel.about = \"http://example.com/index.rdf\"\n    maker.channel.title = \"Example\"\n    maker.channel.description = \"Example Site\"\n    maker.channel.link = \"http://example.com/\"\n\n    maker.items.do_sort = true\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article.html\"\n      item.title = \"Sample Article\"\n      item.date = Time.parse(\"2004/11/1 10:10\")\n    end\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article2.html\"\n      item.title = \"Sample Article2\"\n      item.date = Time.parse(\"2004/11/2 10:10\")\n    end\n\n    maker.image.title = \"Example Site\"\n    maker.image.url = \"http://example.com/logo.png\"\n\n    maker.textinput.title = \"Search Example Site\"\n    maker.textinput.description = \"Search Example Site's all text\"\n    maker.textinput.name = \"keyword\"\n    maker.textinput.link = \"http://example.com/search.cgi\"\n  end\n\n===== RSS 2.0の生成\n\nもし，RSS 2.0を生成したい場合は以下のように，\nRSS::Maker.makeの第一引数を変更します．\n\n  require \"rss\"\n\n  rss = RSS::Maker.make(\"2.0\") do |maker|\n    xss = maker.xml_stylesheets.new_xml_stylesheet\n    xss.href = \"http://example.com/index.xsl\"\n\n    maker.channel.about = \"http://example.com/index.rdf\"\n    maker.channel.title = \"Example\"\n    maker.channel.description = \"Example Site\"\n    maker.channel.link = \"http://example.com/\"\n\n    maker.items.do_sort = true\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article.html\"\n      item.title = \"Sample Article\"\n      item.date = Time.parse(\"2004/11/1 10:10\")\n    end\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article2.html\"\n      item.title = \"Sample Article2\"\n      item.date = Time.parse(\"2004/11/2 10:10\")\n    end\n\n    maker.image.title = \"Example Site\"\n    maker.image.url = \"http://example.com/logo.png\"\n\n    maker.textinput.title = \"Search Example Site\"\n    maker.textinput.description = \"Search Example Site's all text\"\n    maker.textinput.name = \"keyword\"\n    maker.textinput.link = \"http://example.com/search.cgi\"\n  end\n\n===== RSS 0.91の生成\n\nもし，RSS 0.91を生成したい場合は，RSS 2.0の場合と同様に\nRSS::Maker.make の第一引数を\"0.91\"に変更します．\n\nただし、RSS 0.91では言語指定が必須なので、言語を指定する必要\nがあります。ここでは日本語であると指定します。\n\n  rss = RSS::Maker.make(\"0.91\") do |maker|\n    maker.channel.language = \"ja\"\n    ...\n  end\n\nRSS 1.0など、/rdf:RDF/channel/language要素がないフィードの場\n合でも、単に無視したりdc:languageとして扱ったりと適切に処理し\nます。そのため、以下のように「バージョンが\"0.91\"のとき\nだけ言語を指定する」というように書く必要はありません。\nフィードのバージョンに関わらず言語を指定してください。\n\n  rss = RSS::Maker.make(\"0.91\") do |maker|\n    maker.channel.language = \"ja\" if maker.feed_version == \"0.91\"\n    ...\n  end\n\n===== Atom 1.0の生成\n\nもし，Atom 1.0を生成したい場合は，RSS 0.91や2.0の場合と同様に\nRSS::Maker.makeの第一引数を\"atom\"に変更します．\n\n  rss = RSS::Maker.make(\"atom\") do |maker|\n    ...\n  end\n\nただし、これだけでは十分ではありません。これは、Atom 1.0では\nRSS 1.0/2.0/0.91では必須ではなかった以下の情報が必要となるか\nらです。\n\n  * このAtom 1.0の作者\n  * このAtom 1.0の更新日\n\nよって、これまでのスクリプトをAtom 1.0を出力するようにするた\nめには以下のように変更する必要があります。\n\n  * RSS::Maker.makeの第一引数を\"atom\"に変更\n  * maker.channel.authorを設定\n  * maker.channel.dateを設定\n\nもし、\n\n  * 作者がBobで\n  * たった今、作成された\n\nAtom 1.0なら以下のようになります。\n\n  require \"rss\"\n\n  atom = RSS::Maker.make(\"atom\") do |maker|\n    xss = maker.xml_stylesheets.new_xml_stylesheet\n    xss.href = \"http://example.com/index.xsl\"\n\n    maker.channel.about = \"http://example.com/atom.xml\"\n    maker.channel.title = \"Example\"\n    maker.channel.description = \"Example Site\"\n    maker.channel.link = \"http://example.com/\"\n\n    maker.channel.author = \"Bob\"\n    maker.channel.date = Time.now\n\n    maker.items.do_sort = true\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article.html\"\n      item.title = \"Sample Article\"\n      item.date = Time.parse(\"2004/11/1 10:10\")\n    end\n\n    maker.items.new_item do |item|\n      item.link = \"http://example.com/article2.html\"\n      item.title = \"Sample Article2\"\n      item.date = Time.parse(\"2004/11/2 10:10\")\n    end\n\n    maker.image.title = \"Example Site\"\n    maker.image.url = \"http://example.com/logo.png\"\n\n    maker.textinput.title = \"Search Example Site\"\n    maker.textinput.description = \"Search Example Site's all text\"\n    maker.textinput.name = \"keyword\"\n    maker.textinput.link = \"http://example.com/search.cgi\"\n  end\n\nAtom 1.0用の情報を加えたこのスクリプトを最初のRSS 1.0を出\n力するスクリプトに戻す場合は、RSS::Maker.makeの第一引\n数を\"1.0\"に変えるだけです。Atom 1.0用に追加した情報を\n削除する必要はありません。それらは単に無視されます。\n\n==== RSS/Atomオブジェクトを変換する\n\nフィードの種類がRSS 1.0/2.0でもAtomでもパースするためのAPIは\n以下のように共通です。\n\n  feed = RSS::Parser.parse(feed_xml)\n\nしかし、返ってくるオブジェクトはRSS 1.0オブジェクト\n（RSS::RDF）かもしれませんし、Atomオブジェクト\n（RSS::Atom::Feed）かもしれません。このため、パースした結果\nを使う場合はフィードの種類を意識しなくてはならず、\n使いづらくなります。\n\nRSS Parserが提供する解決方法はユーザに好みのフィードの種類を\n選んでもらうというものです。例えば、以下のようにしてRSS 1.0\nをRSS 2.0に変換することができます。\n\n  require 'rss'\n  rss10 = RSS::Parser.parse(rss10_xml)\n  rss20 = rss10.to_feed(\"rss2.0\")\n\n種類がわからない複数のフィードを扱う場合は以下のようにし、す\nべてのフィードをRSS 2.0のように扱うことができます。\n\n  feeds.each do |xml|\n    rss20 = RSS::Parser.parse(xml).to_feed(\"rss2.0\")\n    ...\n  end\n\nまた、to_feedは以下のように書くことも出来ます。\n\n  feed.to_rss(\"1.0\") # == feed.to_feed(\"rss1.0\")\n  feed.to_rss(\"2.0\") # == feed.to_feed(\"rss2.0\")\n  feed.to_atom(\"1.0\") # == feed.to_feed(\"atom1.0\")\n\n形式を変換したときに問題になるのは、変換元のオブジェクトが変\n換後の形式に必須の情報を持っていない場合です。この場合は変換\nに失敗します（RSS::Errorのサブクラスの例外が発生します）。そ\nのため、適宜、必要な情報を補う必要があります。たとえば、RSS\n1.0では各item要素にタイトルが必須ですが、RSS 2.0では省略可能\nです。そのような場合に対応するために、以下のようにブロックを\n使用することが出来ます。\n\n  rss10 = feed.to_rss(\"1.0\") do |maker|\n    maker.items.each do |item|\n      item.title.content ||= \"No title\"\n    end\n  end\n\nto_feedのブロック内で出来ることを理解するためには、to_feedが\nどのように動作するかを理解するとよいです。パース結果のオブジェ\nクトはフィードの種類に関わらずsetup_makerというメソッドを持っ\nています。これは、自分が持っている情報をRSS Makerに与えるメソッ\nドです。to_feedはRSS::Maker.makeで作ったRSS Makerに対して\nsetup_makerを行い、他の形式に変換しようとします。ブロックには\nsetup_makerを行った後のRSS Makerが渡されます。つまり、\nto_feedのブロック内で出来ることはRSS Makerに対して出来ること\nと同じです。\n\n==== フィードの形式を変換する\n\n上記の方法でパース済みのオブジェクトを変換できるので、フィー\nドを異なる形式のXMLへ変換することは簡単です。\n\n  feed = RSS::Parser.parse(feed_xml)\n  new_feed_xml = feed.to_feed(\"atom1.0\").to_s\n\nこれを行うための便利なメソッドto_xmlがあります。to_xmlを使う\nと以下のように書き直すことができます。\n\n  feed = RSS::Parser.parse(feed_xml)\n  new_feed_xml = feed.to_xml(\"atom1.0\")\n\n。。。あまり変わりませんね。to_feedを用いた場合と同じように\nブロックを指定してRSS Makerを操作することも出来ます。ますま\nす変わりませんね。\n\nto_feed().to_sではなく、to_xmlを使うことには一長一短がありま\nす。to_xmlは変換元のフィードの種類と変換後のフィードの種類が\n同じ場合は単にto_sを呼び出すだけです。これにより、同じ形式に\n変換する場合の速度があがります（RSS Makerを作って変換、という\nことを省略するので当然です）。しかし、ブロックを指定して変換\n後の結果を調整することができません。例えば、以下のようにRSS\n1.0からRSS 2.0に変換する場合はブロックが呼ばれます。\n\n  rss10.to_xml(\"rss2.0\") do |maker|\n    # makerを操作できる\n  end\n\nしかし、以下のようにRSS 1.0からRSS 1.0に変換しようとした場合\nはブロックは呼び出されません。\n\n  rss10.to_xml(\"rss1.0\") do |maker|\n    # ブロックが呼び出されないのでmakerを操作できない。\n  end\n\nこのAPIに関しては、どうしたらよいのかまだ悩んでいます。もし、\nなにかアイディアがあれば教えてください。\n\n=== サンプル\n\nRSS Parser のサンプルスクリプトをいくつか紹介します．これらの\nスクリプトは sample/ 以下に入っています．\n\n==== サンプル1 - 項目一覧\n\nそれでは、複数のフィードをパースしてitem要素を表示するスクリプト\nを書いてみましょう。\n\nまず、RSS 0.9x/1.0/2.0, Atom 1.0をパースできるように以下のようにrequireします。\n\n  require 'rss'\n\nパースするフィードはファイルに保存されていて引数で与えられるものとします。\n\n  ARGV.each do |fname|\n    feed = nil\n    begin\n      feed = RSS::Parser.parse(File.read(fname), false)\n    rescue RSS::Error\n    end\n\n    if feed.nil?\n      puts \"#{fname}はRSS 0.9x/1.0/2.0, Atom 1.0のいずれでもありません。\"\n    else\n      print_items(feed)\n    end\n  end\n\nあとはprint_itemsというメソッドを定義するだけです。\n\nRSS::RDF/RSS::Rss/RSS::Atom::Feed/RSS::Atom::Entryには便利の\nためにitemsというメソッドとimageというメソッドが定義されています。\n\nitemsはそれぞれ以下を返します。\n\n  * RSS::RDF: 全ての/rdf:RDF/item要素の配列\n  * RSS::Rss: 全ての/rss/channel/item要素の配列\n  * RSS::Atom::Feed: 全ての/atom:feed/atom:entry要素の配列\n  * RSS::Atom::Entry: /atom:entry要素のみが含まれる配列\n\nimageはそれぞれ以下を返します。\n\n  * RSS::RDF: /rdf:RDF/image要素\n  * RSS::Rss: /rss/channel/image要素\n\nここでは、itemsを使って各項目を表示します。\n\n  def print_items(feed)\n    feed.items.each do |item|\n      puts \"#{item.title} : #{item.description}\"\n    end\n  end\n\nこれは、RSSフィードに対してはうまく動きますが、Atomフィードに\n対してはうまく動きません。それはAtomフィードにはdescription要\n素がないからです。そこで、AtomフィードもRSSフィードに変えて\n扱うことにします。\n\n  def print_items(feed)\n    convert_to_rss10(feed).items.each do |item|\n      puts \"#{item.title} : #{item.description}\"\n    end\n  end\n\nconvert_to_rss10は以下のようになります。\n\n  def convert_to_rss10(feed)\n    feed.to_rss(\"1.0\") do |maker|\n      maker.channel.about ||= maker.channel.link\n      maker.channel.description.content ||= \"No description\"\n      maker.items.each do |item|\n        item.title.content ||= \"No title\"\n        item.link ||= \"UNKNOWN\"\n      end\n    end\n  end\n\n未設定の可能性がある要素にデフォルト値を設定しています。\n\n出力する文字コードを変更するにはoutput_encoding=が使えます。\nもし、変換できないエンコーディングを指定された場合は\nRSS::UnknownConversionMethodError例外が発生します。\n\n先程のprint_itemsをEUC-JPで出力するように書き換えてみましょう。\n\n  def print_items(feed)\n    rss10 = convert_to_rss10(feed)\n    begin\n      rss10.output_encoding = \"EUC-JP\"\n    rescue RSS::UnknownConversionMethodError\n    end\n    rss10.items.each do |item|\n      puts \"#{item.title} : #{item.description}\"\n    end\n  end\n\n==== サンプル2 - 更新順表示\n\n次はDublin Coreモジュールのdate属性を使って更新順にitemを表\n示してみましょう。\n\n最初に現れたDublin Coreモジュールの要素にアクセスするには\n「dc_要素名」というアクセサが用意されています。全ての要素の\n配列にアクセスするには「dc_要素の複数形」（dc_rightsは\ndc_rights_listになります）とします．\n\n複数形でアクセスした場合は「要素の内容を表す文字列」ではなく，\n「要素を表すオブジェクト」の配列が返ります．「要素を表すオブ\nジェクト」から「要素の内容を表す文字列」を取得するには\ncontentメソッドやその別名であるvalueメソッドを利\n用します．「要素の内容を表す文字列」を設定するには\ncontent=メソッドやその別名であるvalue=メソッドを\n利用します．\n\n  rss.channel.dc_title  # => 「要素の内容を表す文字列」\n                        # （\"My site\"など）\n\n  rss.channel.dc_titles # => 「要素を表すオブジェクト」の配列\n                        # （[DublinCoreTitleオブジェクト, ...]）\n\n  rss.channel.dc_titles.collect {|title| title.value}\n                        # => 「要素の内容を表す文字列」の配列\n                        # （[\"My site\", ...]など）\n\n  rss.channel.dc_titles.first.value == rss.channel.dc_title\n                        # => true\n  # 厳密にはこう\n  first_title = rss.channel.dc_titles.first\n  first_title = first_title.value if first_title\n  first_title == rss.channel.dc_title\n                        # => true\n\nちなみにSyndicationモジュールの要素にアクセスするには「sy_要\n素名」というアクセサが，Contentモジュールの要素にアクセスす\nるには「content_要素名」というアクセサが用意されています。\n\nサンプル1と同じようにパースするRSSはファイルに保存されていて\n引数で与えられるものとします。\n\n  require 'rss'\n  items = []\n  ARGV.each do |fname|\n    rss_source = nil\n    File.open(fname) do |f|\n      rss_source = f.read\n    end\n\n    rss = nil\n    begin\n      rss = RSS::Parser.parse(rss_source, true)\n    rescue RSS::Error\n    end\n\n    if rss.nil?\n      puts \"#{fname}はRSS 1.0ではありません。\"\n    else\n      begin\n        rss.output_encoding = \"euc-jp\"\n      rescue RSS::UnknownConversionMethodError\n      end\n      rss.items.each do |item|\n        items << item if item.dc_date\n      end\n    end\n  end\n  print_items(items)\n\nあとはprint_itemsというメソッドを定義するだけです。\n\nItem#dc_dateはTimeオブジェクトかnilを返します。引数の\nitemsにはdc_dateがnilではないものしか含まれていないは\nずなので以下のようにソートできます。\n\n  def print_items(items)\n    items.sort do |x, y|\n      y.dc_date <=> x.dc_date\n    end.each do |item|\n      puts \"#{item.dc_date.localtime.iso8601} : #{item.title} : #{item.description}\"\n    end\n  end",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "DublinCoreModel",
          "label": "DublinCoreModel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:DublinCoreModel/"
        },
        {
          "key": "RSS::BaseTrackBackModel",
          "label": "RSS::BaseTrackBackModel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ABaseTrackBackModel/"
        },
        {
          "key": "RSS::ContentModel",
          "label": "RSS::ContentModel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AContentModel/"
        },
        {
          "key": "RSS::ConversionError",
          "label": "RSS::ConversionError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AConversionError/"
        },
        {
          "key": "RSS::DublinCoreModel",
          "label": "RSS::DublinCoreModel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ADublinCoreModel/"
        },
        {
          "key": "RSS::Element",
          "label": "RSS::Element",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AElement/"
        },
        {
          "key": "RSS::Error",
          "label": "RSS::Error",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AError/"
        },
        {
          "key": "RSS::ImageFaviconModel",
          "label": "RSS::ImageFaviconModel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AImageFaviconModel/"
        },
        {
          "key": "RSS::ImageFaviconModel::ImageFavicon",
          "label": "RSS::ImageFaviconModel::ImageFavicon",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AImageFaviconModel%3A%3AImageFavicon/"
        },
        {
          "key": "RSS::ImageItemModel",
          "label": "RSS::ImageItemModel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AImageItemModel/"
        },
        {
          "key": "RSS::ImageItemModel::ImageItem",
          "label": "RSS::ImageItemModel::ImageItem",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AImageItemModel%3A%3AImageItem/"
        },
        {
          "key": "RSS::ImageModelUtils",
          "label": "RSS::ImageModelUtils",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AImageModelUtils/"
        },
        {
          "key": "RSS::InvalidRSSError",
          "label": "RSS::InvalidRSSError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AInvalidRSSError/"
        },
        {
          "key": "RSS::Maker",
          "label": "RSS::Maker",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker/"
        },
        {
          "key": "RSS::Maker::Base",
          "label": "RSS::Maker::Base",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ABase/"
        },
        {
          "key": "RSS::Maker::ChannelBase",
          "label": "RSS::Maker::ChannelBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AChannelBase/"
        },
        {
          "key": "RSS::Maker::ChannelBase::CategoriesBase",
          "label": "RSS::Maker::ChannelBase::CategoriesBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AChannelBase%3A%3ACategoriesBase/"
        },
        {
          "key": "RSS::Maker::ChannelBase::CategoriesBase::CategoryBase",
          "label": "RSS::Maker::ChannelBase::CategoriesBase::CategoryBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AChannelBase%3A%3ACategoriesBase%3A%3ACategoryBase/"
        },
        {
          "key": "RSS::Maker::ChannelBase::SkipDaysBase",
          "label": "RSS::Maker::ChannelBase::SkipDaysBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AChannelBase%3A%3ASkipDaysBase/"
        },
        {
          "key": "RSS::Maker::ChannelBase::SkipDaysBase::DayBase",
          "label": "RSS::Maker::ChannelBase::SkipDaysBase::DayBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AChannelBase%3A%3ASkipDaysBase%3A%3ADayBase/"
        },
        {
          "key": "RSS::Maker::ChannelBase::SkipHoursBase",
          "label": "RSS::Maker::ChannelBase::SkipHoursBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AChannelBase%3A%3ASkipHoursBase/"
        },
        {
          "key": "RSS::Maker::ChannelBase::SkipHoursBase::HourBase",
          "label": "RSS::Maker::ChannelBase::SkipHoursBase::HourBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AChannelBase%3A%3ASkipHoursBase%3A%3AHourBase/"
        },
        {
          "key": "RSS::Maker::ImageBase",
          "label": "RSS::Maker::ImageBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AImageBase/"
        },
        {
          "key": "RSS::Maker::ItemsBase",
          "label": "RSS::Maker::ItemsBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AItemsBase/"
        },
        {
          "key": "RSS::Maker::ItemsBase::ItemBase",
          "label": "RSS::Maker::ItemsBase::ItemBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AItemsBase%3A%3AItemBase/"
        },
        {
          "key": "RSS::Maker::ItemsBase::ItemBase::CategoriesBase",
          "label": "RSS::Maker::ItemsBase::ItemBase::CategoriesBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AItemsBase%3A%3AItemBase%3A%3ACategoriesBase/"
        },
        {
          "key": "RSS::Maker::ItemsBase::ItemBase::EnclosureBase",
          "label": "RSS::Maker::ItemsBase::ItemBase::EnclosureBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AItemsBase%3A%3AItemBase%3A%3AEnclosureBase/"
        },
        {
          "key": "RSS::Maker::ItemsBase::ItemBase::GuidBase",
          "label": "RSS::Maker::ItemsBase::ItemBase::GuidBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AItemsBase%3A%3AItemBase%3A%3AGuidBase/"
        },
        {
          "key": "RSS::Maker::ItemsBase::ItemBase::SourceBase",
          "label": "RSS::Maker::ItemsBase::ItemBase::SourceBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AItemsBase%3A%3AItemBase%3A%3ASourceBase/"
        },
        {
          "key": "RSS::Maker::RSS09::Channel",
          "label": "RSS::Maker::RSS09::Channel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AChannel/"
        },
        {
          "key": "RSS::Maker::RSS09::Channel::Categories",
          "label": "RSS::Maker::RSS09::Channel::Categories",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AChannel%3A%3ACategories/"
        },
        {
          "key": "RSS::Maker::RSS09::Channel::Categories::Category",
          "label": "RSS::Maker::RSS09::Channel::Categories::Category",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AChannel%3A%3ACategories%3A%3ACategory/"
        },
        {
          "key": "RSS::Maker::RSS09::Channel::SkipDays",
          "label": "RSS::Maker::RSS09::Channel::SkipDays",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AChannel%3A%3ASkipDays/"
        },
        {
          "key": "RSS::Maker::RSS09::Channel::SkipDays::Day",
          "label": "RSS::Maker::RSS09::Channel::SkipDays::Day",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AChannel%3A%3ASkipDays%3A%3ADay/"
        },
        {
          "key": "RSS::Maker::RSS09::Channel::SkipHours",
          "label": "RSS::Maker::RSS09::Channel::SkipHours",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AChannel%3A%3ASkipHours/"
        },
        {
          "key": "RSS::Maker::RSS09::Channel::SkipHours::Hour",
          "label": "RSS::Maker::RSS09::Channel::SkipHours::Hour",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AChannel%3A%3ASkipHours%3A%3AHour/"
        },
        {
          "key": "RSS::Maker::RSS09::Image",
          "label": "RSS::Maker::RSS09::Image",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AImage/"
        },
        {
          "key": "RSS::Maker::RSS09::Items",
          "label": "RSS::Maker::RSS09::Items",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AItems/"
        },
        {
          "key": "RSS::Maker::RSS09::Items::Item",
          "label": "RSS::Maker::RSS09::Items::Item",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AItems%3A%3AItem/"
        },
        {
          "key": "RSS::Maker::RSS09::Items::Item::Categories",
          "label": "RSS::Maker::RSS09::Items::Item::Categories",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AItems%3A%3AItem%3A%3ACategories/"
        },
        {
          "key": "RSS::Maker::RSS09::Items::Item::Enclosure",
          "label": "RSS::Maker::RSS09::Items::Item::Enclosure",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AItems%3A%3AItem%3A%3AEnclosure/"
        },
        {
          "key": "RSS::Maker::RSS09::Items::Item::Guid",
          "label": "RSS::Maker::RSS09::Items::Item::Guid",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AItems%3A%3AItem%3A%3AGuid/"
        },
        {
          "key": "RSS::Maker::RSS09::Items::Item::Source",
          "label": "RSS::Maker::RSS09::Items::Item::Source",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3AItems%3A%3AItem%3A%3ASource/"
        },
        {
          "key": "RSS::Maker::RSS09::Textinput",
          "label": "RSS::Maker::RSS09::Textinput",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS09%3A%3ATextinput/"
        },
        {
          "key": "RSS::Maker::RSS10",
          "label": "RSS::Maker::RSS10",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS10/"
        },
        {
          "key": "RSS::Maker::RSS10::Channel",
          "label": "RSS::Maker::RSS10::Channel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS10%3A%3AChannel/"
        },
        {
          "key": "RSS::Maker::RSS10::Channel::Categories",
          "label": "RSS::Maker::RSS10::Channel::Categories",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS10%3A%3AChannel%3A%3ACategories/"
        },
        {
          "key": "RSS::Maker::RSS10::Channel::Categories::Category",
          "label": "RSS::Maker::RSS10::Channel::Categories::Category",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS10%3A%3AChannel%3A%3ACategories%3A%3ACategory/"
        },
        {
          "key": "RSS::Maker::RSS10::Image",
          "label": "RSS::Maker::RSS10::Image",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS10%3A%3AImage/"
        },
        {
          "key": "RSS::Maker::RSS10::Items",
          "label": "RSS::Maker::RSS10::Items",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS10%3A%3AItems/"
        },
        {
          "key": "RSS::Maker::RSS10::Items::Item",
          "label": "RSS::Maker::RSS10::Items::Item",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS10%3A%3AItems%3A%3AItem/"
        },
        {
          "key": "RSS::Maker::RSS10::Textinput",
          "label": "RSS::Maker::RSS10::Textinput",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS10%3A%3ATextinput/"
        },
        {
          "key": "RSS::Maker::RSS20",
          "label": "RSS::Maker::RSS20",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20/"
        },
        {
          "key": "RSS::Maker::RSS20::Channel",
          "label": "RSS::Maker::RSS20::Channel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AChannel/"
        },
        {
          "key": "RSS::Maker::RSS20::Channel::Categories",
          "label": "RSS::Maker::RSS20::Channel::Categories",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AChannel%3A%3ACategories/"
        },
        {
          "key": "RSS::Maker::RSS20::Channel::Categories::Category",
          "label": "RSS::Maker::RSS20::Channel::Categories::Category",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AChannel%3A%3ACategories%3A%3ACategory/"
        },
        {
          "key": "RSS::Maker::RSS20::Channel::SkipDays",
          "label": "RSS::Maker::RSS20::Channel::SkipDays",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AChannel%3A%3ASkipDays/"
        },
        {
          "key": "RSS::Maker::RSS20::Channel::SkipDays::Day",
          "label": "RSS::Maker::RSS20::Channel::SkipDays::Day",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AChannel%3A%3ASkipDays%3A%3ADay/"
        },
        {
          "key": "RSS::Maker::RSS20::Channel::SkipHours",
          "label": "RSS::Maker::RSS20::Channel::SkipHours",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AChannel%3A%3ASkipHours/"
        },
        {
          "key": "RSS::Maker::RSS20::Channel::SkipHours::Hour",
          "label": "RSS::Maker::RSS20::Channel::SkipHours::Hour",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AChannel%3A%3ASkipHours%3A%3AHour/"
        },
        {
          "key": "RSS::Maker::RSS20::Image",
          "label": "RSS::Maker::RSS20::Image",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AImage/"
        },
        {
          "key": "RSS::Maker::RSS20::Items",
          "label": "RSS::Maker::RSS20::Items",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AItems/"
        },
        {
          "key": "RSS::Maker::RSS20::Items::Item",
          "label": "RSS::Maker::RSS20::Items::Item",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AItems%3A%3AItem/"
        },
        {
          "key": "RSS::Maker::RSS20::Items::Item::Categories",
          "label": "RSS::Maker::RSS20::Items::Item::Categories",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AItems%3A%3AItem%3A%3ACategories/"
        },
        {
          "key": "RSS::Maker::RSS20::Items::Item::Enclosure",
          "label": "RSS::Maker::RSS20::Items::Item::Enclosure",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AItems%3A%3AItem%3A%3AEnclosure/"
        },
        {
          "key": "RSS::Maker::RSS20::Items::Item::Guid",
          "label": "RSS::Maker::RSS20::Items::Item::Guid",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AItems%3A%3AItem%3A%3AGuid/"
        },
        {
          "key": "RSS::Maker::RSS20::Items::Item::Source",
          "label": "RSS::Maker::RSS20::Items::Item::Source",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3AItems%3A%3AItem%3A%3ASource/"
        },
        {
          "key": "RSS::Maker::RSS20::Textinput",
          "label": "RSS::Maker::RSS20::Textinput",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSS20%3A%3ATextinput/"
        },
        {
          "key": "RSS::Maker::RSSBase",
          "label": "RSS::Maker::RSSBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ARSSBase/"
        },
        {
          "key": "RSS::Maker::TextinputBase",
          "label": "RSS::Maker::TextinputBase",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3ATextinputBase/"
        },
        {
          "key": "RSS::Maker::XMLStyleSheets::XMLStyleSheet",
          "label": "RSS::Maker::XMLStyleSheets::XMLStyleSheet",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMaker%3A%3AXMLStyleSheets%3A%3AXMLStyleSheet/"
        },
        {
          "key": "RSS::MissingAttributeError",
          "label": "RSS::MissingAttributeError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMissingAttributeError/"
        },
        {
          "key": "RSS::MissingTagError",
          "label": "RSS::MissingTagError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AMissingTagError/"
        },
        {
          "key": "RSS::NSError",
          "label": "RSS::NSError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ANSError/"
        },
        {
          "key": "RSS::NotAvailableValueError",
          "label": "RSS::NotAvailableValueError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ANotAvailableValueError/"
        },
        {
          "key": "RSS::NotExpectedTagError",
          "label": "RSS::NotExpectedTagError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ANotExpectedTagError/"
        },
        {
          "key": "RSS::NotSetError",
          "label": "RSS::NotSetError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ANotSetError/"
        },
        {
          "key": "RSS::NotValidXMLParser",
          "label": "RSS::NotValidXMLParser",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ANotValidXMLParser/"
        },
        {
          "key": "RSS::NotWellFormedError",
          "label": "RSS::NotWellFormedError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ANotWellFormedError/"
        },
        {
          "key": "RSS::OverlappedPrefixError",
          "label": "RSS::OverlappedPrefixError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AOverlappedPrefixError/"
        },
        {
          "key": "RSS::Parser",
          "label": "RSS::Parser",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AParser/"
        },
        {
          "key": "RSS::RDF",
          "label": "RSS::RDF",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARDF/"
        },
        {
          "key": "RSS::RDF::Channel",
          "label": "RSS::RDF::Channel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARDF%3A%3AChannel/"
        },
        {
          "key": "RSS::RDF::Channel::Image",
          "label": "RSS::RDF::Channel::Image",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARDF%3A%3AChannel%3A%3AImage/"
        },
        {
          "key": "RSS::RDF::Channel::ImageFavicon",
          "label": "RSS::RDF::Channel::ImageFavicon",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARDF%3A%3AChannel%3A%3AImageFavicon/"
        },
        {
          "key": "RSS::RDF::Channel::Items",
          "label": "RSS::RDF::Channel::Items",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARDF%3A%3AChannel%3A%3AItems/"
        },
        {
          "key": "RSS::RDF::Channel::Textinput",
          "label": "RSS::RDF::Channel::Textinput",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARDF%3A%3AChannel%3A%3ATextinput/"
        },
        {
          "key": "RSS::RDF::Image",
          "label": "RSS::RDF::Image",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARDF%3A%3AImage/"
        },
        {
          "key": "RSS::RDF::Item",
          "label": "RSS::RDF::Item",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARDF%3A%3AItem/"
        },
        {
          "key": "RSS::RDF::Textinput",
          "label": "RSS::RDF::Textinput",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARDF%3A%3ATextinput/"
        },
        {
          "key": "RSS::RootElementMixin",
          "label": "RSS::RootElementMixin",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARootElementMixin/"
        },
        {
          "key": "RSS::Rss",
          "label": "RSS::Rss",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARss/"
        },
        {
          "key": "RSS::Rss::Channel",
          "label": "RSS::Rss::Channel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARss%3A%3AChannel/"
        },
        {
          "key": "RSS::Rss::Channel::Cloud",
          "label": "RSS::Rss::Channel::Cloud",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARss%3A%3AChannel%3A%3ACloud/"
        },
        {
          "key": "RSS::Rss::Channel::Image",
          "label": "RSS::Rss::Channel::Image",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARss%3A%3AChannel%3A%3AImage/"
        },
        {
          "key": "RSS::Rss::Channel::Item",
          "label": "RSS::Rss::Channel::Item",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARss%3A%3AChannel%3A%3AItem/"
        },
        {
          "key": "RSS::Rss::Channel::Item::Category",
          "label": "RSS::Rss::Channel::Item::Category",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARss%3A%3AChannel%3A%3AItem%3A%3ACategory/"
        },
        {
          "key": "RSS::Rss::Channel::Item::Enclosure",
          "label": "RSS::Rss::Channel::Item::Enclosure",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARss%3A%3AChannel%3A%3AItem%3A%3AEnclosure/"
        },
        {
          "key": "RSS::Rss::Channel::Item::Guid",
          "label": "RSS::Rss::Channel::Item::Guid",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARss%3A%3AChannel%3A%3AItem%3A%3AGuid/"
        },
        {
          "key": "RSS::Rss::Channel::Item::Source",
          "label": "RSS::Rss::Channel::Item::Source",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARss%3A%3AChannel%3A%3AItem%3A%3ASource/"
        },
        {
          "key": "RSS::Rss::Channel::TextInput",
          "label": "RSS::Rss::Channel::TextInput",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARss%3A%3AChannel%3A%3ATextInput/"
        },
        {
          "key": "RSS::Rss::SkipDays",
          "label": "RSS::Rss::SkipDays",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARss%3A%3ASkipDays/"
        },
        {
          "key": "RSS::Rss::SkipHours",
          "label": "RSS::Rss::SkipHours",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ARss%3A%3ASkipHours/"
        },
        {
          "key": "RSS::SyndicationModel",
          "label": "RSS::SyndicationModel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ASyndicationModel/"
        },
        {
          "key": "RSS::TaxonomyTopicModel",
          "label": "RSS::TaxonomyTopicModel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ATaxonomyTopicModel/"
        },
        {
          "key": "RSS::TaxonomyTopicModel::TaxonomyTopic",
          "label": "RSS::TaxonomyTopicModel::TaxonomyTopic",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ATaxonomyTopicModel%3A%3ATaxonomyTopic/"
        },
        {
          "key": "RSS::TaxonomyTopicsModel",
          "label": "RSS::TaxonomyTopicsModel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ATaxonomyTopicsModel/"
        },
        {
          "key": "RSS::TaxonomyTopicsModel::TaxonomyTopics",
          "label": "RSS::TaxonomyTopicsModel::TaxonomyTopics",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ATaxonomyTopicsModel%3A%3ATaxonomyTopics/"
        },
        {
          "key": "RSS::TooMuchTagError",
          "label": "RSS::TooMuchTagError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ATooMuchTagError/"
        },
        {
          "key": "RSS::TrackBackModel10",
          "label": "RSS::TrackBackModel10",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ATrackBackModel10/"
        },
        {
          "key": "RSS::TrackBackModel10::TrackBackAbout",
          "label": "RSS::TrackBackModel10::TrackBackAbout",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ATrackBackModel10%3A%3ATrackBackAbout/"
        },
        {
          "key": "RSS::TrackBackModel10::TrackBackPing",
          "label": "RSS::TrackBackModel10::TrackBackPing",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ATrackBackModel10%3A%3ATrackBackPing/"
        },
        {
          "key": "RSS::TrackBackModel20",
          "label": "RSS::TrackBackModel20",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ATrackBackModel20/"
        },
        {
          "key": "RSS::TrackBackModel20::TrackBackAbout",
          "label": "RSS::TrackBackModel20::TrackBackAbout",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ATrackBackModel20%3A%3ATrackBackAbout/"
        },
        {
          "key": "RSS::TrackBackModel20::TrackBackPing",
          "label": "RSS::TrackBackModel20::TrackBackPing",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3ATrackBackModel20%3A%3ATrackBackPing/"
        },
        {
          "key": "RSS::UnknownConversionMethodError",
          "label": "RSS::UnknownConversionMethodError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AUnknownConversionMethodError/"
        },
        {
          "key": "RSS::UnknownTagError",
          "label": "RSS::UnknownTagError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AUnknownTagError/"
        },
        {
          "key": "RSS::XMLParserNotFound",
          "label": "RSS::XMLParserNotFound",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AXMLParserNotFound/"
        },
        {
          "key": "RSS::XMLStyleSheet",
          "label": "RSS::XMLStyleSheet",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AXMLStyleSheet/"
        },
        {
          "key": "RSS::XMLStyleSheetMixin",
          "label": "RSS::XMLStyleSheetMixin",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS%3A%3AXMLStyleSheetMixin/"
        },
        {
          "key": "author",
          "label": "author",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:author/"
        },
        {
          "key": "comments",
          "label": "comments",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:comments/"
        },
        {
          "key": "generator",
          "label": "generator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:generator/"
        },
        {
          "key": "guid",
          "label": "guid",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:guid/"
        },
        {
          "key": "pubDate",
          "label": "pubDate",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:pubDate/"
        },
        {
          "key": "ttl",
          "label": "ttl",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ttl/"
        }
      ]
    },
    {
      "signature": "NEWS for Ruby 2.6.0",
      "score": 217.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "NEWS for Ruby 2.6.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f2_6_0.html",
          "description": "NEWS for Ruby 2.6.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストは ChangeLog ファイルか bugs.ruby-lang.org の issue を参照してください。\n\n== 2.5.0 以降の変更\n\n=== 言語仕様の変更\n\n  * $SAFE はプロセスグローバルで扱われることになると共に、0以外を設定した後に0に戻せるようになりました。 14250\n\n  * Refinements がブロック引数にも反映されるようになりました。  14223\n\n  * Refinements が Object#public_send にも反映されるようになりました。  15326\n\n  * Refinements が Object#respond_to? にも反映されるようになりました。  15327\n\n  * rescue 節なしの else 節がシンタックスエラーを発生するようになりました。 [実験的] 14606\n\n  * 定数名の先頭の文字に ASCII 以外の大文字も使えるようになりました。 13770\n\n  * 終端なし Range が導入されました。 終端なし Range は (0..) や (0...) のように使うことができます。  12912\n    典型的なユースケースは以下の通りです:\n//emlist{\n      ary[1..]                              # ary[1..-1] と同じ\n      (1...).each {|index| block }          # index が 1 から始まる無限ループ\n      ary.zip(1..) {|elem, index| block }   # ary.each.with_index(1) { }\n//}\n  * キーワード引数のハッシュに Symbol 以外のキーが含まれると例外が発生するようになりました。\n\n  * \"shadowing outer local variable\" という警告が削除されました。  12490\n    以下のようなコードを警告なしに書くことができます:\n//emlist{\n      user = users.find {|user| cond(user) }\n//}\n  * 例外が捕捉されず、バックトレースとエラーメッセージが表示されるときに、\n    例外の Exception#cause も表示されるようになりました。 8257\n\n  * フリップフロップが非推奨になりました。 5400\n\n=== 組み込みクラスの更新\n\n  * Array\n    * 新規メソッド\n      * Array#union と Array#difference 14097\n    * 変更されたメソッド\n      * Array#to_h はブロックを受け取りキーと値のペアを新しいキーと値に変換できるようになりました。 15143\n    * 別名\n      * Array#filter が Array#select の別名として追加されました。 13784\n      * Array#filter! が Array#select! の別名として追加されました。 13784\n\n  * Binding\n    * 新規メソッド\n      * Binding#source_location 追加 14230\n        * bindingのソースコード上の位置を __FILE__ と __LINE__ の二要素配列として返します。\n          従来でも eval(\"[__FILE__, __LINE__]\", binding) とすることでこれらの情報は得られましたが、\n          将来的に Kernel.#eval は binding のソースコード行を無視する変更を予定しているため 4352、\n          この新しいメソッドを用いることが今後は推奨されます。\n\n  * Dir\n    * 新規メソッド\n      * Dir#each_child と Dir#children 追加 13969\n\n  * Enumerable\n    * 新規メソッド\n      * Enumerable#chain はレシーバと引数のそれぞれの要素を順番にイテレートする\n        Enumerator::Chain オブジェクトを返します。 15144\n    * 変更されたメソッド\n      * Enumerable#to_h はブロックを受け取りキーと値のペアを新しいキーと値に変換できるようになりました。 15143\n    * 別名\n      * Enumerable#filter が Enumerable#select の別名として追加されました。 13784\n\n  * Enumerator::ArithmeticSequence\n    * 等差数列(隣接する項が共通の差(公差)を持つ数列)のジェネレーターを表現する新しいクラスです。\n      Python のスライスのようなものを表現するために使えます。\n      このクラスのインスタンスは Numeric#step や Range#step で得られます。\n\n  * Enumerator::Chain\n    * 1個の Enumerator で複数の Enumerable の連鎖を表現する新しいクラスです。\n      Enumerable#chain や Enumerator#+ で生成されます。\n\n  * Enumerator::Lazy\n    * 別名\n      * Enumerator::Lazy#filter が Enumerator::Lazy#select の別名として追加されました。 13784\n\n  * Enumerator\n    * 新規メソッド\n      * Enumerator#+ はレシーバの要素とオペランドの要素を順番にイテレートする\n        Enumerator オブジェクトを返します。 15144\n\n  * ENV\n    * 変更されたメソッド\n      * ENV.to_h はブロックを受け取り、環境変数名と値のペアを新しいキーと値に変換できるようになりました。 15143\n\n  * Exception\n    * 新規オプション\n      * Exception#full_message が :highlight と :order を受け付けるようになりました。 14324\n\n  * Hash\n    * 変更されたメソッド\n      * Hash#merge, Hash#merge!, Hash#update が引数を複数受け付けるようになりました。 15111\n      * Hash#to_h はブロックを受け取りキーと値のペアを新しいキーと値に変換できるようになりました。 15143\n    * 別名\n      * Hash#filter が Hash#select の別名として追加されました。 13784\n      * Hash#filter! が Hash#select! の別名として追加されました。 13784\n\n  * IO\n    * 新規オプション\n      * 排他的ファイルオープンを表すモード文字 'x' が追加されました。 11258\n\n  * Kernel\n    * 別名\n      * Object#then が Object#yield_self の別名として追加されました。 14594\n    * 新規オプション\n      * Kernel.#Complex, Kernel.#Float, Kernel.#Integer,\n        Kernel.#Rational にエラー処理方法を指定する :exception オプションが\n        追加されました。 12732\n      * Kernel.#system に失敗時に例外を発生する :exception オプションが\n        追加されました。 14386\n    * 非互換な変更\n      * Kernel.#system と Kernel.#exec が非標準にファイルディスクリプタを閉じなくなりました。\n        (:close_others オプションのデフォルトが false になりまりました。\n        しかし、引き続き Ruby 自体が作成するディスクリプタに FD_CLOEXEC フラグは設定されます。) 14907\n\n  * KeyError\n    * 新規オプション\n      * KeyError.new に :receiver と :key にオプションが追加されて\n        Ruby コードからも設定できるようになりました。 14313\n\n  * Method\n    * 新規メソッド\n      * 関数合成用に Method#<< と Method#>> が追加されました。 6284\n\n  * Module\n    * 変更されたメソッド\n      * Module#method_defined?, Module#private_method_defined?,\n        Module#protected_method_defined? が省略可能な第2引数を受け取るように\n        なりました。 true (デフォルト値) のとき、祖先のモジュールやクラスもチェックします。\n        それ以外の場合はそのクラス自身のみチェックします。 14944\n\n  * NameError\n    * 新規オプション\n      * NameError.new に :receiver オプションが追加されて\n       Ruby コードからも設定できるようになりました。 14313\n\n  * NilClass\n    * 新規メソッド\n      * 互換性のため、NilClass#=~ が追加されました。 15231\n\n  * NoMethodError\n    * 新規オプション\n      * NoMethodError.new に :receiver オプションが追加されて\n        Ruby コードからも設定できるようになりました。 14313\n\n  * Numeric\n    * 非互換な変更\n      * Numeric#step が Enumerator クラスのインスタンスではなく\n        Enumerator::ArithmeticSequence クラスのインスタンスを返すようになりました。\n\n  * OpenStruct\n    * 変更されたメソッド\n      * OpenStruct#to_h はブロックを受け取りキーと値のペアを新しいキーと値に変換できるようになりました。 15143\n\n  * Proc\n    * 新規メソッド\n      * 関数合成用に Proc#<< と Proc#>> が追加されました。 6284\n    * 非互換な変更\n      * Proc#call が $SAFE を変更しなくなりました。 14250\n\n  * Random\n    * 新規メソッド\n      * Random.bytes が追加されました。 4938\n\n  * Range\n    * 新規メソッド\n      * Range#% が追加されました。 14697\n\n    * 非互換な変更\n      * Range#=== が Range#include? メソッドではなく Range#cover? メソッドを使うようになりました。 14575\n      * Range#cover? が Range オブジェクトを受け付けるようになりました。 14473\n      * Range#step が Enumerator クラスのインスタンスではなく\n        Enumerator::ArithmeticSequence クラスのインスタンスを返すようになりました。\n\n  * Regexp/String\n      * Unicode のバージョンを 10.0.0 から 11.0.0 に更新しました。 14802\n        これは書記素クラスタ (/\\X/) アルゴリズムの書き換えと String#downcase での\n        Georgian MTAVRULI の special-casing を含みます。\n      * Update Emoji version from 5.0 to 11.0.0 14802\n\n  * RubyVM::AbstractSyntaxTree\n    * 新規メソッド\n      * RubyVM::AbstractSyntaxTree.parse は文字列をパースして AST ノードを返します。 [実験的]\n      * RubyVM::AbstractSyntaxTree.parse_file はファイルをパースして AST ノードを返します。 [実験的]\n      * RubyVM::AbstractSyntaxTree.of は proc やメソッドに対応する AST ノードを返します。 [実験的]\n\n  * RubyVM\n    * 新規メソッド\n      * RubyVM.resolve_feature_path は \"require(feature)\" で読み込むファイルを\n        特定します。 [実験的] 15230\n\n  * String\n    * String#crypt は非推奨になりました。 14915\n    * 新機能\n      * String#split はブロックが渡されていたら部分文字列ごとに呼び出すようになりました。 4780\n\n  * Struct\n    * 変更されたメソッド\n      * Struct#to_h はブロックを受け取りキーと値のペアを新しいキーと値に変換できるようになりました。 15143\n    * 別名\n      * Struct#filter が Struct#select の別名として追加されました。 13784\n\n  * Time\n    * 新機能\n      * Time.new と Time#getlocal が UTC オフセット文字列と同様に\n        タイムゾーンオブジェクトを受け付けるようになりました。Time#+,\n        Time#-, Time#succ もタイムゾーンを維持します。 14850\n\n  * TracePoint\n    * 新機能\n      * \"script_compiled\" イベントがサポートされました。 15287\n    * 新規メソッド\n      * TracePoint#parameters 14694\n      * TracePoint#instruction_sequence 15287\n      * TracePoint#eval_script 15287\n    * 変更されたメソッド\n      * TracePoint#enable がキーワード引数 \"target:\" と \"target_line:\" を\n        受け付けるようになりました。 15289\n\n=== 標準添付ライブラリの更新\n\n  * BigDecimal\n    * バージョン 1.4.0 に更新されました。\n      このバージョンは様々な非互換な点を含んでいます。\n      詳細は下の互換性についてのセクションを参照してください。\n    * 変更されたメソッド\n      * Kernel.#BigDecimal() は Kernel.#Float() のように\n        キーワード引数 \"exception:\" を受け付けるようになりました。\n    * 最近のバージョンでの変更点に関する注意事項\n      以下の情報を元に適切な bigdecimal のバージョンを選んでください。\n      * 1.3.5 の BigDecimal.new は \"exception:\" キーワードをサポートしていません。\n        \"-w\" オプションをつけた時に BigDecimal.new は非推奨警告を表示します。\n      * 1.4.0 の BigDecimal.new は \"exception:\" キーワードをサポートしてます。\n        BigDecimal.new は常に非推奨警告を表示します。\n        Object#to_d メソッドは Kernel.#BigDecimal() や\n        BigDecimal.new とは違いがあります。\n      * 2.0.0 は Ruby 2.6.0 のリリース後すぐにリリースされる予定です。\n        このバージョンは BigDecimal.new メソッドを含みません。\n\n  * Bundler\n    * Bundler が標準添付ライブラリに追加されました。 12733\n    * 最新安定版の 1.17.2 が使われます。\n\n  * Coverage\n    * oneshot_lines モードが追加されました。 15022\n      * このモードは「各行が何回実行されたか」の代わりに\n       「各行が少なくとも1回実行されたかどうか」をチェックします。\n        行ごとのフックは少なくとも1回実行されて、実行後はフックフラグが削除されます。\n        言い換えるとオーバーヘッドがなくなります。\n    * 新規オプション\n      * :oneshot_lines キーワード引数が Coverage.start に追加されました。\n      * :stop と :clear キーワード引数が Coverage.result に追加されました。\n        clear が真の時、カウンターが0クリアされます。\n        stop が真の時、カバレッジ計測を停止します。\n    * 新規メソッド\n      * Coverage.line_stub はソースコードからラインカバレッジ用のスタブを\n        作成するシンプルなヘルパー関数です。\n\n  * CSV\n    * 3.0.2 に更新されました。\n      特に書き出しの高速化を含んでいます。\n      書き出しは約2倍高速化しています。\n      https://github.com/ruby/csv/blob/master/NEWS.md を参照してください。\n\n  * ERB\n    * 新規オプション\n      * :trim_mode と :eoutvar キーワード引数が ERB.new に追加されました。\n        最初の引数以外のキーワード引数ではない引数はやんわりと非推奨になり、\n        Ruby 2.5 が EOL になった時に削除される予定です。 14256\n      * erb コマンドの -S オプションは非推奨になりました。次のバージョンで削除予定です。\n\n  * FileUtils\n    * 新規メソッド\n      * FileUtils.#cp_lr 4189\n\n  * Matrix\n    * 新規メソッド\n      * Matrix#antisymmetric?, Matrix#skew_symmetric?\n      * Matrix#map!, Matrix#collect! 14151\n      * Matrix#[]=\n      * Vector#map!, Vector#collect!\n      * Vector#[]=\n\n  * Net::HTTP\n    * 新規オプション\n      * :write_timeout キーワード引数が Net::HTTP.new に追加されました。 13396\n    * 新規メソッド\n      * Net::HTTP#write_timeout と Net::HTTP#write_timeout= が追加されました。 13396\n    * 新規定数\n      * Net::HTTPClientException が追加されて Net::HTTPServerException が非推奨になりました。\n        誤解を招く名称だったため。 14688\n\n  * NKF\n    * nkf v2.1.5 に更新されました。\n\n  * Psych\n    * Psych 3.1.0 に更新されました。\n\n  * RDoc\n    * 約2倍高速化されました。\n    * ファイル生成に SOURCE_DATE_EPOCH を使うようになりました。\n    * メソッドの行番号がずれていたのを修正しました。\n    * 無視されていた --width, --exclude, --line-numbers を有効にしました。\n    * デフォルトのマークアップ記法で \">>>\" による引用をサポートしました。\n    * TomDoc 記法で \"Raises\" 行をサポートしました。\n    * シンタックスエラー出力を修正しました。\n    * 多数のパース中のバグを修正しました。\n\n  * REXML\n    * REXML 3.1.9 に更新されました。\n      https://github.com/ruby/rexml/blob/master/NEWS.md を参照してください。\n    * いくつかの XPath 実装を改善:\n      * concat() 関数: 結合前に全ての引数を文字列化\n      * string() 関数: コンテキストノードをサポート\n      * string() 関数: 処理命令 (PI) ノードをサポート\n      * XPath 2.0 で\"*:#{ELEMENT_NAME}\" 記法をサポート\n    * いくつかの XPath 実装を修正:\n      * \"//#{ELEMENT_NAME}[#{POSITION}]\" の問題\n      * string() 関数: function(document) がルート要素の外のノードを返すのを修正\n      * \"/ #{ELEMENT_NAME} \" の問題\n      * \"/ #{ELEMENT_NAME} [ #{PREDICATE} ]\" の問題\n      * \"/ #{AXIS}::#{ELEMENT_NAME}\" の問題\n      * \"#{N}-#{M}\" の問題: 1個以上の空白が \"-\" の前に必要でした\n      * \"/child::node()\" の問題\n      * \"#{FUNCTION}()/#{PATH}\" の問題\n      * \"@#{ATTRIBUTE}/parent::\" の問題\n      * \"name(#{NODE_SET})\" の問題\n\n  * RSS\n    * 新規オプション\n      * RSS::Parser.parse が Hash としてオプションを受け付けるようになりました。\n        :validate, :ignore_unknown_element, :parser_class オプションが利用可能です。\n\n  * RubyGems\n    * RubyGems 3.0.1 に更新されました。\n    * https://blog.rubygems.org/2018/12/19/3.0.0-released.html\n    * https://blog.rubygems.org/2018/12/23/3.0.1-released.html\n\n  * Set\n    * 別名\n      * Set#filter! が Set#select! の別名として追加されました。 13784\n\n  * URI\n    * 新規定数\n      * URI::File が file URI スキームを扱うために追加されました。 14035\n\n=== 互換性 (機能追加とバグ修正を除く)\n\n  * Dir\n    * Dir.glob に '\\0'区切りのパターンリストを渡すのは非推奨になる予定で、\n      今は警告が出ます。 14643\n\n  * File\n    * File.read, File.binread, File.write, File.binwrite,\n      File.foreach, File.readlines はパスがパイプ文字 '|' で始まっていても\n      外部コマンドを実行しなくなりました。 14245\n\n  * Object\n    * Object#=~ は非推奨になりました。 15231\n\n=== 標準添付ライブラリの互換性 (機能追加とバグ修正を除く)\n\n  * 以下の標準添付ライブラリがデフォルト gem になりました。\n    * e2mmap\n    * forwardable\n    * irb\n    * logger\n    * matrix\n    * mutex_m\n    * ostruct\n    * prime\n    * rexml\n    * rss\n    * shell\n    * sync\n    * thwait\n    * tracer\n\n  * BigDecimal\n    * 以下のメソッドが削除されました。\n      * BigDecimal.allocate\n      * BigDecimal.ver\n    * 全ての BigDecimal オブジェクトが frozen になりました。 13984\n    * Kernel.#BigDecimal() が文字列を Kernel.#Float() のように\n      パースするようになりました。\n    * String#to_d がレシーバの文字列を String#to_f のように\n      パースするようになりました。\n    * BigDecimal.new はバージョン 2.0 で削除予定です。\n\n  * Pathname\n    * Pathname#read, Pathname#binread, Pathname#write,\n      Pathname#binwrite, Pathname#each_line, Pathname#readlines は\n      パスがパイプ文字 '|' で始まっていても外部コマンドを実行しなくなりました。\n      これは 14245 の続きです。\n\n=== 実装の改善\n\n  * Proc#call が高速化しました。\n    もう $SAFE を気にしなくてもよくなったためです。 14318\n    * Proc#call を何度も使っている lc_fizzbuzz ベンチマークで1.4倍の改善を\n      計測できています。 10212\n  * ブロックパラメーターとして渡された block に対する block.call が高速化されました。 14330\n    * Ruby 2.5 ではブロック渡しのパフォーマンスを改善されました。 14045\n    * さらに Ruby 2.6 では渡されたブロックの呼び出しのパフォーマンスが改善されました。\n\n  * JIT (Just-in-time) コンパイラの初期実装が導入されました。 14235 [実験的]\n    * JIT を有効化する --jit コマンドラインオプションが追加されました。\n      「--jit-verbose=1」が調査に有用です。\n      他のオプションは「ruby --help」を参照してください。\n    * 機械語を生成するため、この JIT コンパイラはインタプリタをビルドするのに使用した C コンパイラを使用します。\n      現在は GCC, Clang, Microsoft Visual C++ をサポートしています。\n    * configure に「--disable-mjit-support」オプションが追加されました。\n      これは JIT デバッグのために追加されましたが、JIT 用のヘッダファイルのビルドでエラーが発生した場合、\n      回避策としてこのオプションを使うとビルドをスキップできます。\n    * JIT で作成されたプロセスとの互換性を維持するために Unix 系のプラットフォームで\n      rb_waitpid が再実装されました。 14867\n\n  * 生成される VM をより最適化できるようにするために VM 生成スクリプトが一新されました。\n    https://github.com/ruby/ruby/pull/1779\n\n  * pthread プラットフォームでスレッドキャッシュを有効にしました。\n    (Thread.new と Thread.start) 14757\n\n  * POSIX タイマーのあるプラットフォームでタイマースレッドが取り除かれました。 14937\n\n  * Transient Heap (theap) がサポートされました。 14858 14989\n    * theap は短命なメモリオブジェクトのための管理されたヒープです。\n      例えば小さくて短命の Hash オブジェクトは2倍高速化されました。\n    * rdoc ベンチマークでは 6から7%のパフォーマンスの改善を計測できました。\n\n  * コルーチンのネイティブ実装(arm32, arm64, ppc64le, win32, win64, x86, amd64) により\n    Fiber のパフォーマンスを大きく改善 14739\n\n=== その他の変更\n\n  * macOS で共有ライブラリの名前に Ruby のフルバージョンを含めなくなりました。\n    この変更によって macOS プラットフォームのユーザが teeny リリース毎に全ての\n    拡張ライブラリをリビルドする必要がある負担がなくなります。\n    *  変更前:\n      * libruby.2.6.0.dylib\n      * libruby.2.6.dylib -> libruby.2.6.0.dylib\n      * libruby.dylib -> libruby.2.6.0.dylib\n    * 変更後:\n      * libruby.2.6.dylib\n      * libruby.dylib -> libruby.2.6.dylib\n\n  * misc/*.el ファイルが https://github.com/ruby/elisp に分離されました。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Array/"
        },
        {
          "key": "BigDecimal",
          "label": "BigDecimal",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:BigDecimal/"
        },
        {
          "key": "Binding",
          "label": "Binding",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Binding/"
        },
        {
          "key": "CSV",
          "label": "CSV",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:CSV/"
        },
        {
          "key": "Coverage",
          "label": "Coverage",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Coverage/"
        },
        {
          "key": "Dir",
          "label": "Dir",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Dir/"
        },
        {
          "key": "ENV",
          "label": "ENV",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ENV/"
        },
        {
          "key": "ERB",
          "label": "ERB",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ERB/"
        },
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerable/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        },
        {
          "key": "Enumerator::ArithmeticSequence",
          "label": "Enumerator::ArithmeticSequence",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator%3A%3AArithmeticSequence/"
        },
        {
          "key": "Enumerator::Chain",
          "label": "Enumerator::Chain",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator%3A%3AChain/"
        },
        {
          "key": "Enumerator::Lazy",
          "label": "Enumerator::Lazy",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator%3A%3ALazy/"
        },
        {
          "key": "Exception",
          "label": "Exception",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Exception/"
        },
        {
          "key": "File",
          "label": "File",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:File/"
        },
        {
          "key": "FileUtils",
          "label": "FileUtils",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:FileUtils/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Hash/"
        },
        {
          "key": "IO",
          "label": "IO",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IO/"
        },
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Kernel/"
        },
        {
          "key": "KeyError",
          "label": "KeyError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:KeyError/"
        },
        {
          "key": "Matrix",
          "label": "Matrix",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Matrix/"
        },
        {
          "key": "Method",
          "label": "Method",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Method/"
        },
        {
          "key": "Module",
          "label": "Module",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Module/"
        },
        {
          "key": "NKF",
          "label": "NKF",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:NKF/"
        },
        {
          "key": "NameError",
          "label": "NameError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:NameError/"
        },
        {
          "key": "Net::HTTP",
          "label": "Net::HTTP",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Net%3A%3AHTTP/"
        },
        {
          "key": "Net::HTTPClientException",
          "label": "Net::HTTPClientException",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Net%3A%3AHTTPClientException/"
        },
        {
          "key": "Net::HTTPServerException",
          "label": "Net::HTTPServerException",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Net%3A%3AHTTPServerException/"
        },
        {
          "key": "NilClass",
          "label": "NilClass",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:NilClass/"
        },
        {
          "key": "NoMethodError",
          "label": "NoMethodError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:NoMethodError/"
        },
        {
          "key": "Numeric",
          "label": "Numeric",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Numeric/"
        },
        {
          "key": "Object",
          "label": "Object",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Object/"
        },
        {
          "key": "OpenStruct",
          "label": "OpenStruct",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:OpenStruct/"
        },
        {
          "key": "Pathname",
          "label": "Pathname",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Pathname/"
        },
        {
          "key": "Proc",
          "label": "Proc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Proc/"
        },
        {
          "key": "Psych",
          "label": "Psych",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Psych/"
        },
        {
          "key": "RDoc",
          "label": "RDoc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RDoc/"
        },
        {
          "key": "REXML",
          "label": "REXML",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:REXML/"
        },
        {
          "key": "RSS",
          "label": "RSS",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS/"
        },
        {
          "key": "Random",
          "label": "Random",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Random/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Range/"
        },
        {
          "key": "Regexp",
          "label": "Regexp",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Regexp/"
        },
        {
          "key": "RubyVM",
          "label": "RubyVM",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RubyVM/"
        },
        {
          "key": "RubyVM::AbstractSyntaxTree",
          "label": "RubyVM::AbstractSyntaxTree",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RubyVM%3A%3AAbstractSyntaxTree/"
        },
        {
          "key": "Set",
          "label": "Set",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Set/"
        },
        {
          "key": "String",
          "label": "String",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:String/"
        },
        {
          "key": "Struct",
          "label": "Struct",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Struct/"
        },
        {
          "key": "Time",
          "label": "Time",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Time/"
        },
        {
          "key": "TracePoint",
          "label": "TracePoint",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:TracePoint/"
        },
        {
          "key": "URI",
          "label": "URI",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:URI/"
        },
        {
          "key": "URI::File",
          "label": "URI::File",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:URI%3A%3AFile/"
        }
      ]
    },
    {
      "signature": "NEWS for Ruby 3.1.0",
      "score": 181.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "NEWS for Ruby 3.1.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f3_1_0.html",
          "description": "NEWS for Ruby 3.1.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストはリンク先を参照してください。\n\n== 言語仕様の変更\n\n  * The block argument can now be anonymous if the block will only be passed to another method. [[Feature #11256]]\n\n//emlist{\ndef foo(&)\n  bar(&)\nend\n//}\n\n  * Pin operator now takes an expression. [[Feature #17411]]\n\n//emlist{\nPrime.each_cons(2).lazy.find_all{_1 in [n, ^(n + 2)]}.take(3).to_a\n#=> [[3, 5], [5, 7], [11, 13]]\n//}\n\n  * Pin operator now supports instance, class, and global variables. [[Feature #17724]]\n\n//emlist{\n@n = 5\nPrime.each_cons(2).lazy.find{_1 in [n, ^@n]}\n#=> [3, 5]\n//}\n\n  * One-line pattern matching is no longer experimental.\n\n  * Parentheses can be omitted in one-line pattern matching. [[Feature #16182]]\n\n//emlist{\n[0, 1] => _, x\n{y: 2} => y:\nx #=> 1\ny #=> 2\n//}\n\n  * Multiple assignment evaluation order has been made consistent with single assignment evaluation order. With single assignment, Ruby uses a left-to-right evaluation order.  With this code:\n\n//emlist[][ruby]{\nfoo[0] = bar\n//}\n\nThe following evaluation order is used:\n\n  1. `foo`\n  2. `bar`\n  3. `[]=` called on the result of `foo`\n\nIn Ruby before 3.1.0, multiple assignment did not follow this evaluation order.  With this code:\n\n//emlist[][ruby]{\nfoo[0], bar.baz = a, b\n//}\n\nVersions of Ruby before 3.1.0 would evaluate in the following order\n\n  1. `a`\n  2. `b`\n  3. `foo`\n  4. `[]=` called on the result of `foo`\n  5. `bar`\n  6. `baz=` called on the result of `bar`\n\nStarting in Ruby 3.1.0, the evaluation order is now consistent with single assignment, with the left-hand side being evaluated before the right-hand side:\n\n  1. `foo`\n  2. `bar`\n  3. `a`\n  4. `b`\n  5. `[]=` called on the result of `foo`\n  6. `baz=` called on the result of `bar`\n\n    [[Bug #4443]]\n\n  * Values in Hash literals and keyword arguments can be omitted. [[Feature #14579]]\n\n    For example,\n\n    * `{x:, y:}` is a syntax sugar of `{x: x, y: y}`.\n    * `foo(x:, y:)` is a syntax sugar of `foo(x: x, y: y)`.\n\n    Constant names, local variable names, and method names are allowed as\n    key names.  Note that a reserved word is considered as a local\n    variable or method name even if it's a pseudo variable name such as\n    `self`.\n\n  * Non main-Ractors can get instance variables (ivars) of classes/modules if ivars refer to shareable objects. [[Feature #17592]]\n\n  * A command syntax is allowed in endless method definitions, i.e., you can now write `def foo = puts \"Hello\"`. Note that `private def foo = puts \"Hello\"` does not parse. [[Feature #17398]]\n\n== コマンドラインオプション\n\n  * `--disable-gems` is now explicitly declared as \"just for debugging\". Never use it in any real-world codebase. [[Feature #17684]]\n\n== 主要クラスの更新\n\nNote: We're only listing outstanding class updates.\n\n  * Array\n    * Array#intersect? is added. [[Feature #15198]]\n  * Class\n    * Class#subclasses, which returns an array of classes\n      directly inheriting from the receiver, not\n      including singleton classes.\n      [[Feature #18273]]\n\n//emlist[][ruby]{\nclass A; end\nclass B < A; end\nclass C < B; end\nclass D < A; end\nA.subclasses    #=> [D, B]\nB.subclasses    #=> [C]\nC.subclasses    #=> []\n//}\n\n  * Enumerable\n    * Enumerable#compact is added. [[Feature #17312]]\n    * Enumerable#tally now accepts an optional hash to count. [[Feature #17744]]\n    * Enumerable#each_cons and each_slice to return a receiver. [[GH-1509]]\n\n//emlist[][ruby]{\n[1, 2, 3].each_cons(2){}\n# 3.0 => nil\n# 3.1 => [1, 2, 3]\n\n[1, 2, 3].each_slice(2){}\n# 3.0 => nil\n# 3.1 => [1, 2, 3]\n//}\n\n  * Enumerator::Lazy\n    * Enumerator::Lazy#compact is added. [[Feature #17312]]\n  * File\n    * File.dirname now accepts an optional argument for the level to strip path components. [[Feature #12194]]\n  * GC\n    * \"GC.measure_total_time = true\" enables the measurement of GC.\n      Measurement can introduce overhead. It is enabled by default.\n      GC.measure_total_time returns the current setting.\n      GC.stat[:time] or GC.stat(:time) returns measured time\n      in milli-seconds. [[[Feature #10917]]]\n    * GC.total_time returns measured time in nano-seconds. [[[Feature #10917]]]\n  * Integer\n    * Integer.try_convert is added. [[Feature #15211]]\n  * Kernel\n    * Kernel#load now accepts a module as the second argument, and will load the file using the given module as the top-level module. [[Feature #6210]]\n  * Marshal\n    * Marshal.load now accepts a `freeze: true` option. All returned objects are frozen except for `Class` and `Module` instances. Strings are deduplicated. [[Feature #18148]]\n  * MatchData\n    * MatchData#match is added [[Feature #18172]]\n    * MatchData#match_length is added [[Feature #18172]]\n  * Method / UnboundMethod\n    * Method#public?, Method#private?, Method#protected?, UnboundMethod#public?, UnboundMethod#private?, UnboundMethod#protected? have been added. [[Feature #11689]]\n  * Module\n    * Module#prepend now modifies the ancestor chain if the receiver already includes the argument. Module#prepend still does not modify the ancestor chain if the receiver has already prepended the argument. [[Bug #17423]]\n    * Module#private, #public, #protected, and #module_function will now return their arguments.  If a single argument is given, it is returned. If no arguments are given, nil is returned.  If multiple arguments are given, they are returned as an array. [[Feature #12495]]\n  * Process\n    * Process.\\_fork is added. This is a core method for fork(2). Do not call this method directly; it is called by existing fork methods: Kernel.#fork, Process.fork, and IO.popen(\"-\"). Application monitoring libraries can overwrite this method to hook fork events. [[Feature #17795]]\n  * Struct\n    * Passing only keyword arguments to Struct#initialize is warned. You need to use a Hash literal to set a Hash to a first member. [[Feature #16806]]\n    * StructClass#keyword_init? is added [[Feature #18008]]\n  * String\n    * Update Unicode version to 13.0.0 [[Feature #17750]] and Emoji version to 13.0 [[Feature #18029]]\n    * String#unpack and String#unpack1 now accept an `offset:` keyword argument to start the unpacking after an arbitrary number of bytes have been skipped. If `offset` is outside of the string bounds `ArgumentError` is raised. [[Feature #18254]]\n  * Thread\n    * Thread#native_thread_id is added. [[Feature #17853]]\n  * Thread::Backtrace\n    * Thread::Backtrace.limit, which returns the value to limit backtrace length set by `--backtrace-limit` command line option, is added. [[Feature #17479]]\n  * Thread::Queue\n    * Thread::Queue.new now accepts an Enumerable of initial values. [[Feature #17327]]\n  * Time\n    * Time.new now accepts optional `in:` keyword argument for the timezone, as well as `Time.at` and `Time.now`, so that is now you can omit minor arguments to `Time.new`. [[Feature #17485]]\n\n//emlist[][ruby]{\nTime.new(2021, 12, 25, in: \"+07:00\")\n#=> 2021-12-25 00:00:00 +0700\n//}\n\n      At the same time, time component strings are converted to integers more strictly now.\n\n//emlist[][ruby]{\nTime.new(2021, 12, 25, \"+07:30\")\n#=> invalid value for Integer(): \"+07:30\" (ArgumentError)\n//}\n\n      Ruby 3.0 or earlier returned probably unexpected result `2021-12-25 07:00:00`, not `2021-12-25 07:30:00` nor `2021-12-25 00:00:00 +07:30`.\n\n    * Time#strftime supports RFC 3339 UTC for unknown offset local time, `-0000`, as `%-z`. [[Feature #17544]]\n\n  * TracePoint\n    * TracePoint.allow_reentry is added to allow reenter while TracePoint callback. [[Feature #15912]]\n  * $LOAD_PATH\n    * $LOAD_PATH.resolve_feature_path does not raise. [[Feature #16043]]\n  * Fiber Scheduler\n    * Add support for `Addrinfo.getaddrinfo` using `address_resolve` hook. [[Feature #17370]]\n    * Introduce non-blocking `Timeout.timeout` using `timeout_after` hook. [[Feature #17470]]\n    * Introduce new scheduler hooks `io_read` and `io_write` along with a low level `IO::Buffer` for zero-copy read/write. [[Feature #18020]]\n    * IO hooks `io_wait`, `io_read`, `io_write`, receive the original IO object where possible. [[Bug #18003]]\n    * Make `Monitor` fiber-safe. [[Bug #17827]]\n    * Replace copy coroutine with pthread implementation. [[Feature #18015]]\n  * Refinement\n    * New class which represents a module created by Module#refine. `include` and `prepend` are deprecated, and `import_methods` is added instead. [[Bug #17429]]\n\n== 標準添付ライブラリの更新\n  * The following default gem are updated.\n    * RubyGems 3.3.3\n    * base64 0.1.1\n    * benchmark 0.2.0\n    * bigdecimal 3.1.1\n    * bundler 2.3.3\n    * cgi 0.3.1\n    * csv 3.2.2\n    * date 3.2.2\n    * did_you_mean 1.6.1\n    * digest 3.1.0\n    * drb 2.1.0\n    * erb 2.2.3\n    * error_highlight 0.3.0\n    * etc 1.3.0\n    * fcntl 1.0.1\n    * fiddle 1.1.0\n    * fileutils 1.6.0\n    * find 0.1.1\n    * io-console 0.5.10\n    * io-wait 0.2.1\n    * ipaddr 1.2.3\n    * irb 1.4.1\n    * json 2.6.1\n    * logger 1.5.0\n    * net-http 0.2.0\n    * net-protocol 0.1.2\n    * nkf 0.1.1\n    * open-uri 0.2.0\n    * openssl 3.0.0\n    * optparse 0.2.0\n    * ostruct 0.5.2\n    * pathname 0.2.0\n    * pp 0.3.0\n    * prettyprint 0.1.1\n    * psych 4.0.3\n    * racc 1.6.0\n    * rdoc 6.4.0\n    * readline 0.0.3\n    * readline-ext 0.1.4\n    * reline 0.3.0\n    * resolv 0.2.1\n    * rinda 0.1.1\n    * ruby2_keywords 0.0.5\n    * securerandom 0.1.1\n    * set 1.0.2\n    * stringio 3.0.1\n    * strscan 3.0.1\n    * tempfile 0.1.2\n    * time 0.2.0\n    * timeout 0.2.0\n    * tmpdir 0.1.2\n    * un 0.2.0\n    * uri 0.11.0\n    * yaml 0.2.0\n    * zlib 2.1.1\n  * The following bundled gems are updated.\n    * minitest 5.15.0\n    * power_assert 2.0.1\n    * rake 13.0.6\n    * test-unit 3.5.3\n    * rexml 3.2.5\n    * rbs 2.0.0\n    * typeprof 0.21.1\n  * The following default gems are now bundled gems.\n    * net-ftp 0.1.3\n    * net-imap 0.2.2\n    * net-pop 0.1.1\n    * net-smtp 0.3.1\n    * matrix 0.4.2\n    * prime 0.1.2\n    * debug 1.4.0\n  * The following gems has been removed from the Ruby standard library.\n    * dbm\n    * gdbm\n    * tracer\n\n  * Coverage measurement now supports suspension. You can use `Coverage.suspend` to stop the measurement temporarily, and `Coverage.resume` to restart it. See [[Feature #18176]] in detail.\n  * Random::Formatter is moved to random/formatter.rb, so that you can use `Random#hex`, `Random#base64`, and so on without SecureRandom. [[Feature #18190]]\n\n== 互換性\n\nNote: Excluding feature bug fixes.\n\n* `rb_io_wait_readable`, `rb_io_wait_writable` and `rb_wait_for_single_fd` are deprecated in favour of `rb_io_maybe_wait_readable`, `rb_io_maybe_wait_writable` and `rb_io_maybe_wait` respectively. `rb_thread_wait_fd` and `rb_thread_fd_writable` are deprecated. [[Bug #18003]]\n\n== 標準添付ライブラリの互換性\n\n  * `ERB#initialize` warns `safe_level` and later arguments even without -w. [[Feature #14256]]\n  * `lib/debug.rb` is replaced with `debug.gem`\n  * `Kernel#pp` in `lib/pp.rb` uses the width of `IO#winsize` by default. This means that the output width is automatically changed depending on your terminal size. [[Feature #12913]]\n  * Psych 4.0 changes `Psych.load` as `safe_load` by the default. You may need to use Psych 3.3.2 for migrating to this behavior. [[Bug #17866]]\n\n== C API の更新\n\n  * Documented. [[GH-4815]]\n  * `rb_gc_force_recycle` is deprecated and has been changed to a no-op. [[Feature #18290]]\n\n== 実装の改善\n  * Inline cache mechanism is introduced for reading class variables. [[Feature #17763]]\n  * `instance_eval` and `instance_exec` now only allocate a singleton class when required, avoiding extra objects and improving performance. [[GH-5146]]\n  * The performance of `Struct` accessors is improved. [[GH-5131]]\n  * `mandatory_only?` builtin special form to improve performance on builtin methods. [[GH-5112]]\n  * Experimental feature Variable Width Allocation in the garbage collector. This feature is turned off by default and can be enabled by compiling Ruby with flag `USE_RVARGC=1` set. [[Feature #18045]] [[Feature #18239]]\n\n== JIT\n  * Rename Ruby 3.0's `--jit` to `--mjit`, and alias `--jit` to `--yjit` on non-Windows x86-64 platforms and to `--mjit` on others.\n\n=== MJIT\n  * The default `--mjit-max-cache` is changed from 100 to 10000.\n  * JIT-ed code is no longer cancelled when a TracePoint for class events is enabled.\n  * The JIT compiler no longer skips compilation of methods longer than 1000 instructions.\n  * `--mjit-verbose` and `--mjit-warning` output \"JIT cancel\" when JIT-ed code is disabled because TracePoint or GC.compact is used.\n\n=== YJIT: New experimental in-process JIT compiler\n\nNew JIT compiler available as an experimental feature. [[Feature #18229]]\n\nSee [this blog post](https://shopify.engineering/yjit-just-in-time-compiler-cruby) introducing the project.\n\n  * Disabled by default, use `--yjit` command-line option to enable YJIT.\n  * Performance improvements on benchmarks based on real-world software, up to 22% on railsbench, 39% on liquid-render.\n  * Fast warm-up times.\n  * Limited to Unix-like x86-64 platforms for now.\n\n== 静的解析\n\n=== RBS\n  * Generics type parameters can be bounded ([PR](https://github.com/ruby/rbs/pull/844)).\n\n//emlist{\n# `T` must be compatible with the `_Output` interface.\n# `PrettyPrint[String]` is ok, but `PrettyPrint[Integer]` is a type error.\nclass PrettyPrint[T < _Output]\n  interface _Output\n    def <<: (String) -> void\n  end\n\n  attr_reader output: T\n\n  def initialize: (T output) -> void\nend\n//}\n\n  * Type aliases can be generic. ([PR](https://github.com/ruby/rbs/pull/823))\n\n//emlist{\n# Defines a generic type `list`.\ntype list[T] = [ T, list[T] ]\n             | nil\n\ntype str_list = list[String]\ntype int_list = list[Integer]\n//}\n\n  * [rbs collection](https://github.com/ruby/rbs/blob/cdd6a3a896001e25bd1feda3eab7f470bae935c1/docs/collection.md) has been introduced to manage gems’ RBSs.\n  * Many signatures for built-in and standard libraries have been added/updated.\n  * It includes many bug fixes and performance improvements too.\n\nSee the [CHANGELOG.md](https://github.com/ruby/rbs/blob/cdd6a3a896001e25bd1feda3eab7f470bae935c1/CHANGELOG.md) for more information.\n\n=== TypeProf\n  * [Experimental IDE support](https://github.com/ruby/typeprof/blob/ca15c5dae9bd62668463165f8409bd66ce7de223/doc/ide.md) has been implemented.\n  * Many bug fixes and performance improvements since Ruby 3.0.0.\n\n== Debugger\n\n  * A new debugger [debug.gem](https://github.com/ruby/debug) is bundled. debug.gem is a fast debugger implementation, and it provides many features like remote debugging, colorful REPL, IDE (VSCode) integration, and more. It replaces `lib/debug.rb` standard library.\n  * `rdbg` command is also installed into `bin/` directory to start and control debugging execution.\n\n== error_highlight\n\nA built-in gem called error_highlight has been introduced.\nIt shows fine-grained error locations in the backtrace.\n\nExample: `title = json[:article][:title]`\n\nIf `json` is nil, it shows:\n\n//emlist{\n$ ruby test.rb\ntest.rb:2:in `<main>': undefined method `[]' for nil:NilClass (NoMethodError)\n\ntitle = json[:article][:title]\n            ^^^^^^^^^^\n//}\n\nIf `json[:article]` returns nil, it shows:\n\n//emlist{\n$ ruby test.rb\ntest.rb:2:in `<main>': undefined method `[]' for nil:NilClass (NoMethodError)\n\ntitle = json[:article][:title]\n                      ^^^^^^^^\n//}\n\nThis feature is enabled by default.\nYou can disable it by using a command-line option `--disable-error_highlight`.\nSee [the repository](https://github.com/ruby/error_highlight) in detail.\n\n== IRB Autocomplete and Document Display\n\nThe IRB now has an autocomplete feature, where you can just type in the code, and the completion candidates dialog will appear. You can use Tab and Shift+Tab to move up and down.\n\nIf documents are installed when you select a completion candidate, the documentation dialog will appear next to the completion candidates dialog, showing part of the content. You can read the full document by pressing Alt+d.\n\n== その他の変更\n\n  * lib/objspace/trace.rb is added, which is a tool for tracing the object\n    allocation. Just by requiring this file, tracing is started *immediately*.\n    Just by `Kernel#p`, you can investigate where an object was created.\n    Note that just requiring this file brings a large performance overhead.\n    This is only for debugging purposes. Do not use this in production.\n    [[Feature #17762]]\n\n  * Now exceptions raised in finalizers will be printed to `STDERR`, unless\n    `$VERBOSE` is `nil`.  [[Feature #17798]]\n\n  * `ruby -run -e httpd` displays URLs to access.  [[Feature #17847]]\n\n  * Add `ruby -run -e colorize` to colorize Ruby code using\n    `IRB::Color.colorize_code`.",
          "snippets": []
        }
      ],
      "related_entries": []
    },
    {
      "signature": "tsort",
      "score": 181.0,
      "metadata": { "type": "library", "versions": ["3.2.0"] },
      "summary": "tsort はトポロジカルソートと強連結成分に関するモジュールを提供します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/library/tsort.html",
          "description": "tsort はトポロジカルソートと強連結成分に関するモジュールを提供します。\n\n=== Example\n\n//emlist[][ruby]{\nrequire 'tsort'\n\nclass Hash\n  include TSort\n  alias tsort_each_node each_key\n  def tsort_each_child(node, &block)\n    fetch(node).each(&block)\n  end\nend\n\n{1=>[2, 3], 2=>[3], 3=>[], 4=>[]}.tsort\n#=> [3, 2, 1, 4]\n\n{1=>[2], 2=>[3, 4], 3=>[2], 4=>[]}.strongly_connected_components\n#=> [[4], [2, 3], [1]]\n//}\n\n=== より現実的な例\n\n非常に単純な `make' に似たツールは以下のように実装できます。\n\n//emlist[][ruby]{\nrequire 'tsort'\n\nclass Make\n  def initialize\n    @dep = {}\n    @dep.default = []\n  end\n\n  def rule(outputs, inputs=[], &block)\n    triple = [outputs, inputs, block]\n    outputs.each {|f| @dep[f] = [triple]}\n    @dep[triple] = inputs\n  end\n\n  def build(target)\n    each_strongly_connected_component_from(target) {|ns|\n      if ns.length != 1\n        fs = ns.delete_if {|n| Array === n}\n        raise TSort::Cyclic.new(\"cyclic dependencies: #{fs.join ', '}\")\n      end\n      n = ns.first\n      if Array === n\n        outputs, inputs, block = n\n        inputs_time = inputs.map {|f| File.mtime f}.max\n        begin\n          outputs_time = outputs.map {|f| File.mtime f}.min\n        rescue Errno::ENOENT\n          outputs_time = nil\n        end\n        if outputs_time == nil ||\n            inputs_time != nil && outputs_time <= inputs_time\n          sleep 1 if inputs_time != nil && inputs_time.to_i == Time.now.to_i\n          block.call\n        end\n      end\n    }\n  end\n\n  def tsort_each_child(node, &block)\n    @dep[node].each(&block)\n  end\n  include TSort\nend\n\ndef command(arg)\n  print arg, \"\\n\"\n  system arg\nend\n\nm = Make.new\nm.rule(%w[t1]) { command 'date > t1' }\nm.rule(%w[t2]) { command 'date > t2' }\nm.rule(%w[t3]) { command 'date > t3' }\nm.rule(%w[t4], %w[t1 t3]) { command 'cat t1 t3 > t4' }\nm.rule(%w[t5], %w[t4 t2]) { command 'cat t4 t2 > t5' }\nm.build('t5')\n//}\n\n=== Bugs\n\ntsort という名前は正確ではありません。なぜなら\nこのライブラリは Tarjan の強連結成分に関するアルゴリズムを使っているからです。\nとはいえ strongly_connected_components という正確な名前は長過ぎます。\n\n=== References\nR. E. Tarjan,\nDepth First Search and Linear Graph Algorithms,\nSIAM Journal on Computing, Vol. 1, No. 2, pp. 146-160, June 1972.",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "TSort",
          "label": "TSort",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:TSort/"
        },
        {
          "key": "TSort::Cyclic",
          "label": "TSort::Cyclic",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:TSort%3A%3ACyclic/"
        }
      ]
    },
    {
      "signature": "yaml",
      "score": 181.0,
      "metadata": { "type": "library", "versions": ["3.2.0"] },
      "summary": "構造化されたデータを表現するフォーマットであるYAML (YAML Ain't Markup Language) を扱うためのライブラリです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/library/yaml.html",
          "description": "構造化されたデータを表現するフォーマットであるYAML (YAML Ain't Markup Language) を扱うためのライブラリです。\n\n//emlist[例1: 構造化された配列][ruby]{\nrequire 'yaml'\n\ndata = [\"Taro san\", \"Jiro san\", \"Saburo san\"]\nstr_r = YAML.dump(data)\n\nstr_l = <<~YAML_EOT\n  ---\n  - Taro san\n  - Jiro san\n  - Saburo san\nYAML_EOT\n\np str_r == str_l  # => true\n//}\n\n//emlist[例2: 構造化されたハッシュ][ruby]{\nrequire 'yaml'\nrequire 'date'\n\nstr_l = <<~YAML_EOT\n  Tanaka Taro: {age: 35, birthday: 1970-01-01}\n  Suzuki Suneo: {\n    age: 13,\n    birthday: 1992-12-21\n  }\nYAML_EOT\n\nstr_r = {}\nstr_r[\"Tanaka Taro\"] = {\n  \"age\" => 35,\n  \"birthday\" => Date.new(1970, 1, 1)\n}\nstr_r[\"Suzuki Suneo\"] = {\n  \"age\" => 13,\n  \"birthday\" => Date.new(1992, 12, 21)\n}\n\np str_r == YAML.load(str_l)  # => true\n//}\n\n//emlist[例3: 構造化されたログ][ruby]{\nrequire 'yaml'\nrequire 'stringio'\n\nstrio_r = StringIO.new(<<~YAML_EOT)\n  ---\n  time: 2008-02-25 17:03:12 +09:00\n  target: YAML\n  version: 4\n  log: |\n    例を加えた。\n    アブストラクトを修正した。\n  ---\n  time: 2008-02-24 17:00:35 +09:00\n  target: YAML\n  version: 3\n  log: |\n    アブストラクトを書いた。\n\nYAML_EOT\n\nYAML.load_stream(strio_r).sort_by{ |a| a[\"version\"] }.each do |obj|\n  puts \"version %d\\ntime %s\\ntarget:%s\\n%s\\n\" % obj.values_at(\"version\", \"time\", \"target\", \"log\")\nend\n\n# =>\n#  version 3\n#  time 2008-02-24 17:00:35 +0900\n#  target:YAML\n#  アブストラクトを書いた。\n#\n#  version 4\n#  time 2008-02-25 17:03:12 +0900\n#  target:YAML\n#  例を加えた。\n#  アブストラクトを修正した。\n#\n//}\n\n=== バックエンドの選択\n\nyaml ライブラリでは、以下のライブラリをバックエンドとして使用します。\n\n * psych ライブラリ: YAML バージョン 1.1 を扱う事ができます。\n\n\n=== タグの指定\n\n!ruby/sym :foo などのようにタグを指定することで、読み込み時に記述した値\nの型を指定できます。\n\n//emlist[例][ruby]{\nrequire 'yaml'\np YAML.load(<<~EOS)\n  ---\n  !ruby/sym :foo\nEOS\n# => :foo\n//}\n\nyaml では、Ruby 向けに以下のローカルタグを扱えます。\n\n * !ruby/array: Array オブジェクト\n * !ruby/class: Class オブジェクト\n * !ruby/hash:  Hash オブジェクト\n * !ruby/module:  Module オブジェクト\n * !ruby/regexp:  Regexp オブジェクト\n * !ruby/range: Range オブジェクト\n * !ruby/string: String オブジェクト\n * !ruby/struct: Struct オブジェクト\n * !ruby/sym(もしくは !ruby/symbol): Symbol オブジェクト\n * !ruby/encoding: Encoding オブジェクト\n * !ruby/exception: 例外オブジェクト\n * !ruby/object:<クラス名>: 上記以外のオブジェクト\n\n//emlist[例][ruby]{\nrequire 'yaml'\np YAML.load(<<~EOS)\n  ---\n  array: !ruby/array [1, 2, 3]\n  hash: !ruby/hash {foo: 1, bar: 2}\n  regexp: !ruby/regexp /foo|bar/\n  range: !ruby/range 1..10\nEOS\n# => {\"regexp\"=>/foo|bar/, \"hash\"=>{\"foo\"=>1, \"bar\"=>2}, \"array\"=>[1, 2, 3], \"range\"=>1..10}\n//}\n\nこれらは tag:ruby.yaml.org,2002:array のように指定する事もできます。\n\n//emlist[例][ruby]{\nrequire 'yaml'\np YAML.load(<<~EOS)\n  ---\n  array: !tag:ruby.yaml.org,2002:array [1, 2, 3]\n  hash: !tag:ruby.yaml.org,2002:hash {foo: 1, bar: 2}\nEOS\n# => {\"hash\"=>{\"foo\"=>1, \"bar\"=>2}, \"array\"=>[1, 2, 3]}\n//}\n\n自分で定義したクラスなどは !ruby/object:<クラス名> を指定します。なお、\n読み込む場合には既にそのクラスが定義済みでないと読み込めません。\n\nまた、キーと値を指定する事でインスタンス変数を代入できます。\n\n//emlist[例1][ruby]{\nrequire 'yaml'\n\nclass Foo\n  def initialize\n    @bar = \"test\"\n  end\nend\n\np YAML.load(<<~EOS)\n  ---\n  !ruby/object:Foo\n  bar: \"test.modified\"\nEOS\n# => #<Foo:0xf743f754 @bar=\"test.modified\">\n//}\n\n//emlist[例2][ruby]{\nrequire 'yaml'\n\nmodule Foo\n  class Bar\n  end\nend\n\np YAML.load(<<~EOS)\n  ---\n  !ruby/object:Foo\nEOS\n# => #<Foo::Bar:0xf73907b8>\n//}\n\n\n=== 注意\n\n無名クラスを YAML 形式に変換すると TypeError が発生します。また、\nIO や Thread オブジェクトなどはインスタンス変数がオブジェク\nトの状態を保持していないため、変換はできますが、YAML.load した時に完全\nに復元できない事に注意してください。\n\n標準添付の yaml 関連ライブラリには以下のようなRuby 独自の拡張、制限があ\nります。標準添付ライブラリ以外で yaml を扱うライブラリを使用する場合な\nどに注意してください。\n\n * \":foo\" のような文字列はそのまま Symbol として扱える\n * \"y\" や \"n\" は真偽値として扱われない\n\n=== 参考\n\nYAML Specification\n\n * https://yaml.org/spec/\n * https://yaml.org/type/\n\nYAML4R\n\n * http://yaml4r.sourceforge.net/\n * http://yaml4r.sourceforge.net/cookbook/(http://yaml.org/YAML_for_ruby.html)\n * http://yaml4r.sourceforge.net/doc/\n\nRubyist Magazine: https://magazine.rubyist.net/\n\n * プログラマーのための YAML 入門 (初級編): https://magazine.rubyist.net/articles/0009/0009-YAML.html\n * プログラマーのための YAML 入門 (中級編): https://magazine.rubyist.net/articles/0010/0010-YAML.html\n * プログラマーのための YAML 入門 (実践編): https://magazine.rubyist.net/articles/0011/0011-YAML.html\n * プログラマーのための YAML 入門 (検証編): https://magazine.rubyist.net/articles/0012/0012-YAML.html\n * プログラマーのための YAML 入門 (探索編): https://magazine.rubyist.net/articles/0013/0013-YAML.html\n\nその他\n\n * Ruby with YAML: http://www.namikilab.tuat.ac.jp/~sasada/prog/yaml.html",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "YAML",
          "label": "YAML",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:YAML/"
        },
        {
          "key": "yaml/dbm",
          "label": "yaml/dbm",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:yaml%2Fdbm/"
        },
        {
          "key": "yaml/store",
          "label": "yaml/store",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:yaml%2Fstore/"
        }
      ]
    },
    {
      "signature": "Enumerator",
      "score": 175.0,
      "metadata": { "type": "class", "versions": ["3.2.0"] },
      "summary": "each 以外のメソッドにも Enumerable の機能を提供するためのラッパークラスです。\nまた、外部イテレータとしても使えます。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/class/Enumerator.html",
          "description": "each 以外のメソッドにも Enumerable の機能を提供するためのラッパークラスです。\nまた、外部イテレータとしても使えます。\n\nEnumerable モジュールは、 Module#include 先のクラスが持つ\neach メソッドを元に様々なメソッドを提供します。\n例えば Array#map は Array#each の繰り返しを元にして定義されます。\nEnumerator を介することにより String#each_byte のような\n異なる名前のイテレータについても each と同様に Enumerable の機能を利用できます。\n\nEnumerator を生成するには Enumerator.newあるいは\nObject#to_enum, Object#enum_for を利用します。また、一部の\nイテレータはブロックを渡さずに呼び出すと繰り返しを実行する代わりに\nenumerator を生成して返します。\n\n=== 注意\n外部イテレータとしての機能は Fiber を用いて実装されているため Fiber と同じ制限があります。\n例えば以下のようなスレッドをまたいだ呼び出しはエラーになります。\n\n//emlist[例][ruby]{\na = nil\nThread.new do\n  a = [1, 2, 3].each\n  a.next\nend.join\n\np a.next\n#=> t.rb:7:in `next': fiber called across threads (FiberError)\n#      from t.rb:7:in `<main>'\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerable/"
        },
        {
          "key": "Fiber",
          "label": "Fiber",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Fiber/"
        }
      ]
    },
    {
      "signature": "Enumerable",
      "score": 133.0,
      "metadata": { "type": "module", "versions": ["3.2.0"] },
      "summary": "繰り返しを行なうクラスのための Mix-in。このモジュールの\nメソッドは全て each を用いて定義されているので、インクルード\nするクラスには each が定義されていなければなりません。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/class/Enumerable.html",
          "description": "繰り返しを行なうクラスのための Mix-in。このモジュールの\nメソッドは全て each を用いて定義されているので、インクルード\nするクラスには each が定義されていなければなりません。\n\nArray, Hash, Range, Enumerator等のクラスで、\nEnumerableモジュールはインクルードされています。ただし、効率化のため、\nそのクラスでEnumerableと同名･同等の機能を再定義(オーバーライド)しているケースも少なくなく、\n特にArrayクラスでは同名のメソッドを再定義していることが多いです。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Array/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Hash/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Range/"
        }
      ]
    },
    {
      "signature": "ruby 1.8.4 feature",
      "score": 127.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "ruby 1.8.4 feature \nruby 1.8.4 での ruby 1.8.3 からの変更点です。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f1=2e8=2e4.html",
          "description": "ruby 1.8.4 feature \nruby 1.8.4 での ruby 1.8.3 からの変更点です。\n\n掲載方針\n\n*バグ修正の影響も含めて動作が変わるものを収録する。\n*単にバグを直しただけのものは収録しない。\n*ライブラリへの単なる定数の追加は収録しない。\n\n以下は各変更点に付けるべきタグです。\n\n記号について(特に重要なものは大文字(主観))\n\n# * カテゴリ\n#   * [ruby]: ruby インタプリタの変更\n#   * [api]: 拡張ライブラリ API\n#   * [lib]: ライブラリ\n* レベル\n  * [bug]: バグ修正\n  * [new]: 追加されたクラス／メソッドなど\n  * [compat]: 変更されたクラス／メソッドなど\n    * 互換性のある変更\n    * only backward-compatibility\n    * 影響の範囲が小さいと思われる変更もこちら\n  * [change]: 変更されたクラス／メソッドなど(互換性のない変更)\n  * [obsolete]: 廃止された(される予定の)機能\n  * [platform]: 対応プラットフォームの追加\n\n== 目次\n\n* ((<ruby 1.8.4 feature/Ruby本体>))\n  * ((<ruby 1.8.4 feature/Symbol [bug]>))\n  * ((<ruby 1.8.4 feature/Symbol [bug]>))\n  * ((<ruby 1.8.4 feature/super [bug]>))\n  * ((<ruby 1.8.4 feature/正規表現 [bug]>))\n  * ((<ruby 1.8.4 feature/シグナル [bug]>))\n* ((<ruby 1.8.4 feature/組み込みライブラリ>))\n  * ((<ruby 1.8.4 feature/UnboundMethod#bind [bug]>))\n  * ((<ruby 1.8.4 feature/set_trace_func [bug]>))\n  * ((<ruby 1.8.4 feature/set_trace_func [change]>))\n  * ((<ruby 1.8.4 feature/printf [bug]>))\n  * ((<ruby 1.8.4 feature/Hash [bug]>))\n  * ((<ruby 1.8.4 feature/test [bug]>))\n  * ((<ruby 1.8.4 feature/File.identical? [new]>))\n  * ((<ruby 1.8.4 feature/FileTest.identical? [new]>))\n  * ((<ruby 1.8.4 feature/File.split [change]>))\n  * ((<ruby 1.8.4 feature/File.basename [change]>))\n  * ((<ruby 1.8.4 feature/File.dirname [change]>))\n  * ((<ruby 1.8.4 feature/Dir.glob (Win全般) [bug]>))\n  * ((<ruby 1.8.4 feature/File.basename (Win全般) [change]>))\n  * ((<ruby 1.8.4 feature/File.dirname (Win全般) [bug]>))\n  * ((<ruby 1.8.4 feature/File::Stat#pipe? [bug]>))\n  * ((<ruby 1.8.4 feature/Array#fill [bug]>))\n  * ((<ruby 1.8.4 feature/String#scan [bug]>))\n  * ((<ruby 1.8.4 feature/File.join [bug]>))\n  * ((<ruby 1.8.4 feature/Thread#pass [bug]>))\n  * ((<ruby 1.8.4 feature/Module#const_missing [bug]>))\n  * ((<ruby 1.8.4 feature/IO [bug]>))\n* ((<ruby 1.8.4 feature/添付ライブラリ>))\n  * ((<ruby 1.8.4 feature/\"Ruby/Tk\">))\n  * ((<ruby 1.8.4 feature/REXML [compat]>))\n  * ((<ruby 1.8.4 feature/TCPSocket#initialize [bug]>))\n  * ((<ruby 1.8.4 feature/TCPServer#initialize [bug]>))\n  * ((<ruby 1.8.4 feature/\"optparse\">))\n  * ((<ruby 1.8.4 feature/\"find\">))\n  * ((<ruby 1.8.4 feature/Iconv>))\n  * ((<ruby 1.8.4 feature/WEBrick::Config::FileHandler [compat]>))\n  * ((<ruby 1.8.4 feature/WEBrick>))\n  * ((<ruby 1.8.4 feature/WEBrick::HTTPRequest#query_string= [new]>))\n  * ((<ruby 1.8.4 feature/Readline [bug]>))\n  * ((<ruby 1.8.4 feature/Syck [bug]>))\n  * ((<ruby 1.8.4 feature/irb [bug]>))\n  * ((<ruby 1.8.4 feature/RDoc [bug]>))\n  * ((<ruby 1.8.4 feature/Win32API [bug]>))\n  * ((<ruby 1.8.4 feature/Rinda [bug]>))\n  * ((<ruby 1.8.4 feature/Iconv [compat]>))\n  * ((<ruby 1.8.4 feature/cgi [bug]>))\n  * ((<ruby 1.8.4 feature/DL [bug]>))\n  * ((<ruby 1.8.4 feature/fileutils [bug]>))\n  * ((<ruby 1.8.4 feature/extmk, mkmf [compat]>))\n  * ((<ruby 1.8.4 feature/mkmf: find_executable() [compat]>))\n* ((<ruby 1.8.4 feature/拡張ライブラリAPI>))\n  * ((<ruby 1.8.4 feature/rb_funcall2() [bug]>))\n  * ((<ruby 1.8.4 feature/rb_respond_to() [change]>))\n  * ((<ruby 1.8.4 feature/rb_obj_respond_to() [new]>))\n* ((<ruby 1.8.4 feature/プラットフォーム固有>))\n  * ((<ruby 1.8.4 feature/bccwin32 [bug]>))\n  * ((<ruby 1.8.4 feature/cygwin [bug]>))\n  * ((<ruby 1.8.4 feature/BeOS [bug]>))\n  * ((<ruby 1.8.4 feature/Sun [bug]>))\n  * ((<ruby 1.8.4 feature/IA64 [bug]>))\n\n== Ruby本体\n\n: Symbol [bug]\n\n#       * parse.y (dsym): prohibit empty symbol literal by interpolation.\n#         fixed: [ruby-talk:166529]\n\n    式展開で空のSymbolを作ることができたバグの修正。 ((<ruby-talk:166529>))\n\n        p :\"\"\n\n        # => ruby 1.8.3 (2005-09-21) [i686-linux]\n             -:1: empty symbol literal\n        # => ruby 1.8.4 (2005-12-16) [i686-linux]\n             -:1: empty symbol literal\n\n        p :\"#{\"\"}\"\n\n        # => ruby 1.8.3 (2005-09-21) [i686-linux]\n             :\n        # => ruby 1.8.4 (2005-12-16) [i686-linux]\n             -:1: empty symbol literal\n\n: Symbol [bug]\n\n#Sat Oct 22 13:26:57 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * object.c (sym_inspect), parse.y (parser_yylex, rb_symname_p): check\n#         if valid as a symbol name more strictly.  [ruby-dev:27478]\n#\n#       * test/ruby/test_symbol.rb: tests for [ruby-core:03573].\n\n    Symbolに適合する文字列を厳密にした。((<ruby-core:03573>)),((<ruby-dev:27478>))\n\n        1) alias :\"foo\" :\"bar\"\n\n            def bar; p \"bar\"; end\n            alias :\"foo\" :\"bar\"\n            foo\n\n            # => ruby 1.8.4 (2005-12-22) [i686-linux]\n                 -:2: syntax error, unexpected tSTRING_CONTENT\n                     alias :\"foo\" :\"bar\"\n                                ^\n                 -:2: warning: unused literal ignored\n            # => ruby 1.9.0 (2005-12-10) [i686-linux]\n                 \"bar\"\n\n\n        2) Symbol#inspect sometimes returns invalid symbol representations:\n\n            puts :\"!\".inspect\n            puts :\"=\".inspect\n            puts :\"0\".inspect\n            puts :\"$1\".inspect\n            puts :\"@1\".inspect\n            puts :\"@@1\".inspect\n            puts :\"@\".inspect\n            puts :\"@@\".inspect\n\n            # => ruby 1.8.3 (2005-09-21) [i686-linux]\n                 :!\n                 :=\n                 :0\n                 :$1\n                 :@1\n                 :@@1\n                 :@\n                 :@@\n            # => ruby 1.8.4 (2005-12-22) [i686-linux]\n                 :\"!\"\n                 :\"=\"\n                 :\"0\"\n                 :$1\n                 :\"@1\"\n                 :\"@@1\"\n                 :\"@\"\n                 :\"@@\"\n\n        3) Symbol#inspect sometimes returns suboptimal symbol representations:\n            puts :foo!.inspect\n            puts :bar?.inspect\n\n            # => ruby 1.8.3 (2005-09-21) [i686-linux]\n                 :\"foo!\"\n                 :\"bar?\"\n            # => ruby 1.8.4 (2005-12-22) [i686-linux]\n                 :foo!\n                 :bar?\n\n        4) :$- always treats next character literally:\n\n            p eval(\":$-\\n\") # => :\"$-\\n\"\n            p :$-( # => :\"$-(\"\n            p :$-  # => :\"$- \"\n            p :$-#.object_id # => 3950350\n\n            # => ruby 1.8.3 (2005-09-21) [i686-linux]\n                 :\"$-\\n\"\n                 :\"$-(\"\n                 :\"$- \"\n                 2631438\n\n            # => ruby 1.8.4 (2005-12-22) [i686-linux]\n                 -:2: syntax error, unexpected '(', expecting $end\n\n#Tue Nov  1 14:20:11 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * eval.c (rb_call_super): should call method_missing if super is\n#         called from Kernel method.\n#\n#       * eval.c (exec_under): frame during eval should preserve external\n#         information.\n\n: super [bug]\n\n    Kernelのメソッド内でsuperを呼んだ時に、存在しないsuperclass\n    にアクセスしようとするバグの修正。\n\n        module Kernel\n          def foo\n            super\n          end\n        end\n\n        foo\n\n        # => ruby 1.8.3 (2005-09-21) [i686-linux]\n             -:3:in `foo': method `foo' called on terminated object (0xb7e06970) (NotImplementedError)\n                from -:7\n        # => ruby 1.8.4 (2005-12-22) [i686-linux]\n             -:3:in `foo'-:3: warning: too many arguments for format string\n             : super: no superclass method `foo' (NoMethodError)\n                from -:7\n\n: 正規表現 [bug]\n\n#Wed Oct 19 01:27:07 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * regex.c (re_compile_pattern): numeric literal inside character class\n#         disabled succeeding backtrack.  fixed: [ruby-list:41328]\n\n    文字コードの形で正規表現の文字クラスを指定すると、それ以降の\n    バックトラックが効かなくなるバグの修正。((<ruby-list:41328>))\n\n        p(/^[a-z]+x[0-9]+$/ =~ \"hogex111\")\n        p(/^[\\x61-\\x7a]+x[0-9]+$/ =~ \"hogex111\")\n\n        # => ruby 1.8.3 (2005-09-21) [i686-linux]\n             0\n             nil\n        # => ruby 1.8.4 (2005-12-22) [i686-linux]\n             0\n             0\n\n: シグナル [bug]\n\n#Sun Oct 16 03:38:07 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * rubysig.h (CHECK_INTS): prevent signal handler to run during\n#         critical section.  [ruby-core:04039]\n\n    シグナルハンドラの実行はクリティカルセクションが終了するまで\n    遅延されるようになりました。((<ruby-core:04039>))\n\n== 組み込みライブラリ\n\n#Thu Dec  8 02:07:19 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * eval.c (umethod_bind): adjust invoking class for module method.\n#         [ruby-dev:27964]\n\n: UnboundMethod#bind [bug]\n\n    UnboundMethod#bindされたモジュールのインスタンスメソッド中で\n    superを使えなかったバグを修正しました。((<ruby-dev:27964>))\n\n        module Foo\n          def initialize\n            super\n          end\n        end\n\n        class Bar\n          include Foo\n          def initialize\n            Foo.instance_method(:initialize).bind(self).call\n          end\n        end\n\n        Bar.new\n\n        # => ruby 1.8.3 (2005-09-21) [i686-linux]\n             -:3:in `initialize': method `initialize' called on terminated object (0xb7dd2bec) (NotImplementedError)\n                from -:10:in `initialize'\n                from -:14\n        # => ruby 1.8.4 (2005-12-16) [i686-linux]\n\n: set_trace_func [bug]\n\n#Thu Dec  8 00:40:52 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * eval.c (call_trace_func): klass parameter should be a\n#         class/module that defines calling method.  [ruby-talk:169307]\n#\n\n    クラスメソッドの実行時に、定義されたクラスではなくメタクラスが\n    traceに渡されていたバグの修正。((<ruby-talk:169307>))\n\n: set_trace_func [change]\n\n#Mon Sep 26 22:32:13 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * eval.c (set_trace_func): add rb_secure(4) to prevent adding\n#         tracing function.\n\n    $SAFE=4でtrace_funcの追加を禁止。\n\n: printf [bug]\n\n#Wed Dec  7 15:31:35 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * sprintf.c (rb_str_format): integer overflow check added.\n#\n#       * sprintf.c (GETASTER): ditto.\n\n    printfのフォーマット指定子にinteger overflowのバグがありました。\n    perl のそれとは違い、セキュリティバグはないそうです。\n    ((<URL:http://www.rubyist.net/~matz/20051207.html#p01>))\n\n        # ruby 1.8.4 (2005-12-01) [i686-linux]\n\n        # ArgumentError\n        printf(\"%2147483648$d\\n\")       # -e:1:in `printf': invalid index - -2147483648$ (ArgumentError)\n        printf(\"%2147483649$d\\n\")       # -e:1:in `printf': invalid index - -2147483647$ (ArgumentError)\n        printf(\"%4294967296$d\\n\")       # -e:1:in `printf': invalid index - 0$ (ArgumentError)\n\n        # overflow\n        printf(\"%4294967297$d\\n\", 1)    # 1\n        printf(\"%4294967298$d\\n\", 1, 2) # 2\n\n        # 1.8.4 では、上記例はすべて以下のエラーになります。\n        # %xx$ に指定できる最大値は 2147483647 です。\n        # -e:1:in `printf': width too big (ArgumentError)\n\n: Hash [bug]\n\n#Wed Nov 23 03:40:49 2005  Guy Decoux  <ts@moulon.inra.fr>\n#\n#       * re.c (KR_REHASH): should cast to unsigned for 64bit CPU.\n#         [ruby-core:06721]\n\n    sizeof(long) > sizeof(int) な環境で、ハッシュ関数のオーバー\n    フローのためにStringをキーとしたHashの検索が失敗していたバグの修正。\n    ((<ruby-core:06721>))\n\n: test [bug]\n\n#Wed Nov 23 01:22:57 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * file.c (test_identical): test if two files are identical.\n#\n#       * file.c (rb_f_test): support DOSISH systems where st_ino is not\n#         reliable.  fixed: [ruby-core:06672]\n#\n#       * win32.h, win32.c (rb_w32_osid): check the running platform.\n\n    i-nodeを持たないシステム(Windows等)でtest(?-, ...)が常にtrueを返し\n    ていたバグを修正。((<ruby-core:06672>))\n\n: File.identical? [new]\n: FileTest.identical? [new]\n\n    test(?-, ...) の代替メソッドとして追加。\n\n: File.split [change]\n: File.basename [change]\n: File.dirname [change]\n\n#Tue Nov 22 14:46:57 2005  NAKAMURA Usaku  <usa@ruby-lang.org>\n#\n#       * file.c (rb_file_s_basename): skip slashes just after UNC top slashes.\n#\n#       * test/ruby/test_path.rb (test_dirname, test_basename): follow new\n#         spec. and add new tests.\n\n    UNCパスに対するFile.dirname・File.basename・File.splitの仕様\n    を変更した(UNCをサポートするプラットフォームのみ)。\n\n      File.split(\"//aaa\")      #=> old: [\"//\", \"aaa\"]  new:[\"//aaa\", \"/\"]\n      File.split(\"//aaa/\")     #=> old: [\"//\", \"aaa\"]  new:[\"//aaa\", \"/\"]\n      File.split(\"//aaa/bbb\")  #=> old:[\"//aaa\", \"bbb\"]  new:[\"//aaa/bbb\", \"/\"]\n      File.split(\"//aaa/bbb/\") #=> old:[\"//aaa\", \"bbb\"]  new:[\"//aaa/bbb\", \"/\"]\n      File.split(\"///aaa\")     #=> old:[\"//\", \"aaa\"]  new:[\"//aaa\", \"/\"]\n\n: Dir.glob (Win全般) [bug]\n\n#Tue Nov 22 13:18:32 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * win32/win32.c (rb_w32_stat): Dir.chdir('//server/shared');\n#         p Dir.glob('*') should work on WinNT. (implemented our own\n#         stat(2) on WinNT) [ruby-list:41552] [ruby-dev:27711]\n#\n\n    共有フォルダの共有名に対する Dir.glob が失敗していたのを修正。（こ\n    れはWinNT における、ランタイムライブラリの stat のバグだと思う）自\n    前で stat を実装することで回避した。((<ruby-list:41552>)),((<ruby-dev:27711>))\n\n: File.basename (Win全般) [change]\n\n#Tue Nov 22 01:45:21 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * file.c (rb_file_s_basename): DOSISH_UNC is defined on cygwin but\n#         DOSISH is not.  fixed: [ruby-dev:27797]\n\n    不完全なUNCを分割しないようにした。((<ruby-dev:27797>))\n\n: File.dirname (Win全般) [bug]\n\n#Fri Nov 18 17:26:06 2005  NAKAMURA Usaku  <usa@ruby-lang.org>\n#\n#       * file.c (rb_file_s_dirname): added checks for some patterns with drive\n#         letter. fixed: [ruby-dev:27738]\n#\n#       * test/ruby/test_path.rb (test_dirname): added tests for above\n#         patterns.\n\n    ドライブレターを含むパスに対するFile.dirnameの問題を修正した\n    (ドライブレターをサポートするプラットフォームのみ)。((<ruby-dev:27738>))\n\n      File.dirname(\"C:a/b\")  #=> old: \"C:a.\"  new: \"C:a\"\n      File.dirname(\"C:a///\") #=> old: \"C:a///\"  new: \"C:a\"\n\n: File::Stat#pipe? [bug]\n\n#Fri Nov 18 12:18:02 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * win32/win32.h (S_IFIFO): r,w = IO.pipe; r.stat.pipe? now\n#         returns true on VisualC++6.\n\n    VisualC++ 6 では S_IFIFO がなく _S_IFIFO しか定義されていないため、\n    パイプに対する stat.pipe? が false を返していたのを修正。\n\n: Array#fill [bug]\n\n#Tue Nov 15 14:39:16 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * array.c (rb_ary_fill): should adjust array length correctly when\n#         an array is expanded in the fill process.  [ruby-core:06625]\n\n    Arrayに対してfillとpopを繰り返すとSEGVするバグを修正しました。((<ruby-core:06625>))\n\n: String#scan [bug]\n\n#Thu Oct 27 16:45:31 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * string.c (scan_once): wrong condition to use mbclen2().\n#         [ruby-dev:27535]\n\n    String#scanで、全角文字に「*」(0回以上の繰り返し)を付けると、空\n    文字列にマッチしたときの次の文字が多バイト文字のときにマッチの\n    開始位置がずれることがあるバグの修正。((<ruby-dev:27535>))\n# であってるのかな?\n\n: File.join [bug]\n\n#Wed Oct 19 08:28:32 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * file.c (rb_file_join): elements may contain null pointer strings.\n#         report and fixed by Lloyd Zusman (hippoman): [ruby-core:06326]\n\n    NULLポインタを持つStringを渡すとFile.joinがSEGVすることがあった\n    バグの修正。((<ruby-core:06326>))\n\n: Thread#pass [bug]\n\n#Sun Oct 16 03:38:07 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * eval.c (load_wait): need not to call rb_thread_schedule()\n#         explicitly.  [ruby-core:04039]\n#\n#       * eval.c (rb_thread_schedule): clear rb_thread_critical.\n#         [ruby-core:04039]\n\n    Thread#passを呼ぶとThread.criticalがクリアされるようになりました。\n    ((<ruby-core:04039>))\n\n: Module#const_missing [bug]\n\n#Thu Sep 29 00:57:35 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * eval.c (ev_const_get), variable.c (rb_const_get_0): retry only when\n#         autoload succeeded.\n#\n#       * variable.c (rb_autoload_load): now return true if autoload\n#         succeeded.  fixed: [ruby-dev:27331]\n\n    const_missingが再定義されていて実行を継続した場合にSEGVする可能性\n    があったバグの修正。((<ruby-dev:27331>))\n\n: IO [bug]\n\n#Wed Sep 28 08:12:18 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * io.c (read_buffered_data): check if reached EOF.  fixed: [ruby-dev:27334]\n\n    Solaris(64bit?)などでEOF後にゴミを読み出すことがあったバグを修正。\n    ((<ruby-dev:27334>))\n\n== 添付ライブラリ\n\n: Ruby/Tk\n\n    * 対応バージョン\n\n       Tcl7.6/Tk4.2, Tcl/Tk8.0 〜 8.4.12, Tcl/Tk8.5a1 〜 a3\n\n       Tcl/Tk 拡張ライブラリについては\n\n          ActiveTcl8.4.12.0 またはそれ以前\n          ( beta 版 は ActiveTcl8.5.0.0b4 またはそれ以前 )\n\n       に含まれるものに対応しています．\n\n       対応している Tcl/Tk 拡張の種類とバージョンとは\n          ext/tk/lib/tkextlib/SUPPPORT_STATUS\n            または\n          <installed lib dir>/tkextlib/SUPPORT_STATUS\n       を参照してください．\n\n       ただし，Tcl/Tk 拡張のバージョンの記述は，対応を行った最新の\n       ものを示していますので，記述された以前のバージョンであっても，\n       極端に古くない限りは対応できているはずです．\n\n       各ライブラリへの対応のための変更履歴は\n          ext/tk/ChangeLog.tkextlib\n       を参照してください．\n\n    * サンプルスクリプト\n\n       : ext/tk/sample/scrollframe.rb [new]\n\n          配置したウィジェットの表示範囲をスクロールすることが\n          できるようなスクロールバー付きフレームウィジェットク\n          ラスのサンプル兼ライブラリ\n\n#Wed Dec  7 01:02:04 2005  Hidetoshi NAGAI  <nagai@ai.kyutech.ac.jp>\n#\n#       * ext/tk/README.macosx-aqua: [new document] tips to avoid the known\n#         bug on platform specific dialogs of Tcl/Tk Aqua on MacOS X.\n\n    MacOS X 上で Aqua 版の Tcl/Tk を用いた際，Aqua 特有のダイアログ表示で\n    フリーズしてしまうという known bug の回避策を記載したドキュメント\n    (ext/tk/README.macosx-aqua) が追加されました．\n\n#Wed Dec  7 01:02:04 2005  Hidetoshi NAGAI  <nagai@ai.kyutech.ac.jp>\n#\n#       * ext/tk/tcltklib.c: fix bug on switching threads and waiting on the\n#         deleted interpreter on vwait and tkwait command.\n\n    削除された Tk インタープリタに対して vwait や tkwait での処理待ちを\n    終了せずに待ち続けてしまう可能性があるというバグを修正しました．\n\n#\n#       * ext/tk/lib/multi-tk.rb: kill the meaningless loop for the deleted Tk\n#         interpreter.\n\n    MultiTkIp で生成した Tk インタープリタを削除した後も，\n    不要となったはずのスレッドが動き続けるバグを修正しました．\n\n#Wed Nov 23 20:59:01 2005  Hidetoshi NAGAI  <nagai@ai.kyutech.ac.jp>\n#\n#       * ext/tk/lib/tk.rb: add Tk.pkgconfig_list and Tk.pkgconfig_get\n#         [Tk8.5 feature].\n#\n#       * ext/tk/lib/tk/text.rb: supports new indices modifiers on a Text\n#         widget [Tk8.5 feature].\n#\n\n    Tcl/Tk8.5a3 への対応のため，Tk.pkgconfig_list および Tk.pkgconfig_get\n    が追加されました．\n    同様に Tcl/Tk8.5a3 への対応のため，テキストウィジェット上のインデック\n    ス指定における新しい modifier である indices に対応しました．\n\n#       * ext/tk/lib/tk/virtevent.rb: add TkNamedVirtualEvent.\n#\n\n    Tcl/Tk 上で名前が規定されている仮想イベントの指定した仮想イベントオブ\n    ジェクトの生成を少し容易にするため，TkNamedVirtualEvent が別名として\n    定義されました．\n\n#       * ext/tk/lib/tk/event.rb: add :data key for virtual events [Tk8.5\n#         feature].\n#\n\n    Tcl/Tk8.5 への対応のため，仮想イベントのイベント情報の一つである data\n    キーの情報を :data で指定できるようになりました．\n\n#Fri Nov 18 17:35:09 2005  Hidetoshi NAGAI  <nagai@ai.kyutech.ac.jp>\n#\n#       * ext/tk/lib/multi-tk.rb: add restriction to access the entried\n#         command table and manipulate other IPs (for reason of security).\n#         Now, a IP object can be controlled by only its master IP or the\n#         default IP.\n#\n#       * ext/tk/lib/remote-tk.rb: add restriction to manipulate.\n#\n#       * ext/tk/tcltklib.c (ip_is_slave_of_p): add TclTkIp#slave_of?(ip)\n#         to check manipulability.\n#\n\n    セキュリティ上の問題を回避するため，MultiTkIp において IP オブジェクト\n    上での操作が許可されるのは，その操作を呼び出した環境 (スレッド) の IP \n    オブジェクトがデフォルトの IP オブジェクト (デフォルトのスレッドグルー\n    プに属するもの．require 'multi-tk' の際に生成される) であるか，操作し\n    ようとしている IP オブジェクトが自らの直接の slave IP であるかの場合に\n    限られるようになりました．\n\n    この修正により，IP オブジェクトの入手に成功することで，ある IP が権限\n    を持たないはずの他の IP を操作できてしまう危険を減少させます．ただし，\n    ObjectSpace にアクセスし，直接に TclTkIp オブジェクトを取り出して操作\n    されることは回避できませんので，ご注意ください。\n\n#       * ext/tk/lib/tk.rb: bug fix on handling of Tcl's namespaces.\n#\n#       * ext/tk/lib/tk/namespace.rb: ditto.\n#\n\n    Tcl/Tk 上の namespace の扱いが正常に行えないというバグを修正しました．\n\n#Wed Nov  2 20:14:53 2005  Hidetoshi NAGAI  <nagai@ai.kyutech.ac.jp>\n#\n#       * ext/tcltklib: merge into ext/tk and remove.\n#\n\n    Ruby のソース上で tcltklib と tk とを Ruby 1.9 系と同様に一体化しました． \n    これにより，tcltklib の生成に失敗した環境で，動くはずのない tk のライ\n    ブラリファイル群がインストールされてしまうことが避けられます．\n    今後はソースに含まれる tcltklib 関連のドキュメントを参照する場合には\n    ext/tk ディレクトリの下を見てください．\n\n#Wed Nov  2 19:03:06 2005  Hidetoshi NAGAI  <nagai@ai.kyutech.ac.jp>\n#\n#       * ext/tcltklib/tcltklib.c (ip_rbUpdateObjCmd,\n#         ip_rb_threadUpdateObjCmd): passed improper flags to DoOneEvent().\n#\n#       * ext/tk/tkutil.c: use rb_obj_respond_to() instead of rb_respond_to().\n#\n\n    update 処理が不適切であるために，一部の環境で menubar のメニュー項目に\n    登録した処理が実行されない場合があるというバグ (ruby-1.8.3 で enbug し\n    ていたもの) を修正しました．\n\n#       * ext/tk/lib/tk.rb, ext/tk/lib/tk/canvas.rb, ext/tk/lib/tk/entry.rb,\n#         ext/tk/lib/tk/frame.rb, ext/tk/lib/tk/image.rb,\n#         ext/tk/lib/tk/itemconfig.rb, ext/tk/lib/tk/labelframe.rb,\n#         ext/tk/lib/tk/listbox.rb, ext/tk/lib/tk/menu.rb,\n#         ext/tk/lib/tk/radiobutton.rb, ext/tk/lib/tk/scale.rb,\n#         ext/tk/lib/tk/spinbox.rb, ext/tk/lib/tk/text.rb,\n#         ext/tk/lib/tk/toplevel.rb: improve conversion of option values.\n#\n#       * ext/tk/lib/tkextlib/*: ditto.\n#\n\n    ウィジェットオブジェクトの属性参照をした場合に属性値として返すオブジェ\n    クトをより適切なものにするように改善しました．その方がより便利であろう\n    と思いますが，一部の属性において，返されるのが文字列であることを期待し\n    てスクリプトを書いている場合には修正が必要になる場合があります．\n\n    例えば bool 値を返す属性については true または false を返すようになり\n    ます．よって，戻り値が \"1\", \"0\" の文字列，あるいは 1, 0 の数値であるこ\n    とを期待している場合には修正が必要となります．本来，Tcl/Tk の真偽値は\n    他にも \"true\", \"false\", \"yes\", \"no\" などもありますので，値の真偽判定は\n    TkComm.bool (TkUtil.bool) メソッドを使って判定することを推奨します．\n\n    また，Tcl/Tk 上の変数が割り当てられている属性において，属性値として\n    Tcl/Tk 上の変数名の文字列ではなく TkVariable オブジェクトが返されるよ\n    うになります．返された値を別のウィジェットの属性値とするなどでそのまま\n    Tk インタープリタに渡している場合や TkVarAccess.new(val) で TkVariable\n    オブジェクト化している場合 (val である TkVariable オブジェクトがそのま\n    ま返されます) には互換性が保たれますが，返された値をそのまま文字列と比\n    較しているような場合には非互換となります．\n\n: REXML [compat]\n\n#Fri Dec  9 23:31:02 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * lib/rexml/encoding.rb (encoding=): give priority to particular\n#         conversion to iconv.  [ruby-core:06520]\n\n    日本語のエンコーディング変換にiconvよりもnkfを優先して使用するようにし\n    ました。((<ruby-list:41325>)), ((<ruby-core:06520>))\n\n: TCPSocket#initialize [bug]\n: TCPServer#initialize [bug]\n\n#Mon Nov 28 18:55:43 2005  NAKAMURA Usaku  <usa@ruby-lang.org>\n#\n#       * ext/socket/socket.c (init_inetsock_internal): remove setting\n#         SO_REUSEADDR option on server socket on Cygwin.\n#         fixed: [ruby-core:6765] ([ ruby-Bugs-2872 ])\n#\n\n    Cygwinの場合のみ、使用中socketに対する再acceptがErrno::EADDRINUSE \n    例外になっていなかった。((<ruby-core:6765>)),((<ruby-bugs:2872>)),((<ruby-dev:27818>))\n\n: optparse\n\n#Tue Nov 22 23:52:06 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * lib/optparse.rb: match incomplete (in current enconding) multibyte\n#         string.  http://inamode6.tokuhirom.dnsalias.org/show/1551\n\n    $KCODEで無効なマルチバイト文字列や、改行を含む文字列を引数に渡\n    すと切り捨てられていたバグの修正。\n\n        require \"optparse\"\n\n        puts \"[#{ARGV * ', '}]\"\n        ARGV.options do |opt|\n          opt.on(\"-n NODE\") {|v| puts v }\n          opt.parse!\n        end\n\n        >ruby -v -Ku a.rb -n 時間\n        ruby 1.8.2 (2004-12-25) [i386-mswin32]\n        [-n, 時間]\n        時\n\n        >ruby -v -Ku a.rb -n 時間\n        ruby 1.8.4 (2005-12-16) [i686-linux]\n        [-n, 時間]\n        時間\n\n: find\n\n#Tue Nov 15 23:46:35 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * lib/find.rb (Find::find): should not ignore symbolic links to\n#         non-existing files.  [ruby-talk:165866]\n\n    broken symbolic link(存在しないファイルに対するシンボリックリン\n    ク)も返すようになりました。((<ruby-talk:165866>))\n\n: Iconv\n\n#Sun Nov  6 23:39:13 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * ext/iconv/iconv.c (Iconv::BrokenLibrary): exception when detected a\n#         bug of underlying library.\n\n    errnoが正しくセットされなかったときの例外を追加(Windowsで\n    iconv.dllの使用するMSVC runtime DLLのバージョンが、ruby本体が使\n    用するものと一致していない場合も含む)\n\n    これはrubyやext/iconv自身のバグではなくて、実行時の環境に問題が\n    ある場合の回避策です。\n\n#: OpenSSL\n#Wed Nov 23 07:26:44 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * ext/openssl/extconf.rb: check for X509V3_EXT_nconf_nid.\n#\n#       * ext/openssl/ossl_x509ext.c (MakeX509ExtFactory): should use\n#         OPENSSL_malloc to allocate X509V3_CTX.\n#\n#       * ext/openssl/ossl_x509ext.c (ossl_x509extfactory_create_ext): use\n#         X509V3_EXT_nconf_nid to avoid SEGV (and to build extensions which\n#         values are placed in separate section).\n#\n#       * test/openssl/test_x509ext.rb: new file.\n#\n# ？\n\n#Tue Nov 01 10:50:17 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * ext/openssl/extconf.rb: should check ERR_peek_last_error().\n#         [ruby-dev:27597]\n#\n#       * ext/openssl/ossl.c (ossl_raise): ditto.\n#\n# ？\n\n#Mon Oct 31 05:49:23 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * ext/openssl/ossl_cipher.c (ossl_cipher_update): input data must\n#         not be empty. [ruby-talk:161220]\n#\n#       * test/openssl/test_cipher.rb: add test for Cipher#update(\"\").\n#\n# ？\n\n#Wed Oct 12 12:52:57 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * ext/openssl/ossl.c (Init_openssl): should call\n#         OpenSSL_add_ssl_algorithms().\n#\n# ？\n\n#: WEBrick\n#Mon Oct 31 05:37:20 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/webrick/httpservlet/cgihandler.rb\n#         (WEBrick::HTTPServlet::CGIHandler#do_GET): the value of Set-Cookie:\n#         header field should be splited into each cookie.  [ruby-Bugs:2199]\n#\n#       * lib/webrick/cookie.rb (WEBrick::Cookie.parse_set_cookie): new method\n#         to parse the value of Set-Cookie: header field.\n#\n#       * test/webrick/test_cookie.rb, test/webrick/test_cgi.rb,\n#         test/webrick/webrick.cgi: add some test for cookie.\n#\n# ？\n\n: WEBrick::Config::FileHandler [compat]\n\n#Fri Oct 14 16:57:32 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/webrick/config.rb (Config::FileHandler): :UserDir should be nil.\n#         It is harmful to permit the access to ~/public_html by default.\n#         suggested by Hiroyuki Iwatsuki.\n\n    WEBrick::Config::FileHandler[:UserDir]のデフォルト値が \n    \"public_html\"からnilになり、意図せずにユーザディレクトリ\n    (/~user/public_html)以下が公開されることがなくなりました。\n    [webrickja:148]\n\n: WEBrick\n\n#Wed Sep 28 15:14:19 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/webrick/cgi.rb (WEBrick::CGI#start): req.query_string should\n#         refer the value of QUERY_STRING. [ruby-list:41186]\n\n    WEBrick::CGI#startでreq.query_stringがオリジナルの\n    QUERY_STRINGを指すように。\n\n: WEBrick::HTTPRequest#query_string= [new]\n\n#Wed Sep 28 15:14:19 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/webrick/httprequest.rb (WEBrick::HTTPRequest#query_string=):\n#         add new method.\n\n    メソッド追加。\n\n: Readline [bug]\n\n#Mon Oct 31 03:19:36 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * ext/readline/readline.c (readline_readline): type check.\n#         [ruby-core:6089]\n\n    IO以外を$stdoutにセットするとreadlineでSEGVしていたバグの修正。((<ruby-core:6089>))\n\n: Syck [bug]\n\n#Tue Dec 20 13:11:59 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * ext/syck/rubyext.c: fixed GC problem (backported HEAD 1.55 - 1.62)\n#         [ruby-dev:27839]\n#\n#       * ext/syck/syck.h (S_FREE): small hack. no need to check if pointer is\n#         NULL or not before S_FREE.\n#\n#       * st.c: uses malloc instead of xmalloc to avoid GC. syck uses st_insert\n#         in gram.c to insert node from rb_syck_bad_anchor_handler into\n#         SyckParser's hash table. if GC occurs in st_insert, it's not under\n#         SyckParser's mark system yet. so RString can be released wrongly.\n#         [ruby-dev:28057]\n\n#Wed Oct 26 09:27:27 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * ext/syck/implicit.c (syck_type_id_to_uri): should return\n#         newly allocated memory. otherwise, type_id will be freed\n#         twice. [ruby-dev:27384] [ruby-core:6385]\n\n    syck のメモリバグを修正。((<ruby-dev:27384>)), ((<ruby-core:6385>)) ((<ruby-dev:27839>))\n\n: irb [bug]\n\n#Tue Oct 25 15:32:00 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * lib/irb.rb (IRB::Irb::eval_input): handle prompts with newlines\n#         in irb auto-indentation mode.  [ruby-core:06358]\n\n    irbのプロンプトに改行文字が含まれているときにオートインデントが\n    ずれるバグの修正。((<ruby-core:06358>))\n\n: RDoc [bug]\n\n#Tue Oct 25 02:12:08 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * lib/rdoc/markup/simple_markup.rb (SM::SimpleMarkup::LABEL_LIST_RE):\n#         reduce redundant backtrack.  [ruby-talk:161771]\n\n    正規表現のバックトラックが深くなりすぎて失敗することがあったバグを修正。\n    ((<ruby-talk:161771>))\n\n: Win32API [bug]\n\n#Mon Oct 24 20:49:45 2005  NAKAMURA Usaku  <usa@ruby-lang.org>\n#\n#       * ext/Win32API/lib/win32/resolv.rb (get_info): support multiple DNS.\n#         fixed: [ruby-list:40058], [ruby-dev:27479]\n#\n\n    DNSを手動で複数設定した場合に正しく動作していなかったバグを修正。\n    ((<ruby-list:40058>)), ((<ruby-dev:27496>))\n\n: Rinda [bug]\n\n#Sun Oct 16 14:30:05 2005  Masatoshi SEKI  <m_seki@mva.biglobe.ne.jp>\n#\n#       * lib/rinda/rinda.rb (Rinda::Tuple#initialize): check remote hash\n#         tuple. fixed: [ruby-list:41227]\n#\n#       * test/rinda/test_rinda.rb: test it.\n\n    Hash全体がdumpできないオブジェクトとして扱われていました。\n    ((<ruby-list:41227>))\n\n: Iconv [compat]\n\n#Sat Oct  8 20:04:40 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * ext/iconv/charset_alias.rb: parse config.charset_alias file directly.\n\n    iconv/charset_alias において、Windows上でもencoding名の別名テー\n    ブルを生成するようにした。\n\n    iconv/charset_alias は、エンコーディング名のプラットフォームに\n    よる違いを吸収するためのユーティリティです。詳細は、((<iconv>)) 参照。\n\n: cgi [bug]\n\n#Fri Oct  7 09:54:00 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * lib/cgi.rb (CGI::Cookie::parse): Cookies from Nokia devices may\n#         not be parsed correctly.  A patch from August Z. Flatby\n#         (augustzf) in [ruby-Patches-2595].  [ruby-core:06183]\n\n    NOKIAの携帯(?)からのCookieを正しくパースできなかった問題の修正。\n    ((<ruby-Patches:2595>)), ((<ruby-core:06183>))\n\n# : xmlrpc\n\n#Wed Oct 05 04:42:38 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/xmlrpc/server.rb (XMLRPC::Server#initialize): should mount the\n#         servlet on \"/\".\n#\n# ？\n\n#Wed Oct 05 03:59:09 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/xmlrpc/server.rb (XMLRPC::Server#serve): delete wrong call\n#         of \"join\".\n#\n# ？\n\n: DL [bug]\n\n#Thu Sep 29 10:26:18 2005  Tanaka Akira  <akr@m17n.org>\n#\n#       * ext/dl/dl.c (rb_io_to_ptr): abolish sizeof(FILE).\n#         [ruby-dev:27317]\n\n    FILEが不完全型としてしか定義されない環境に対応。((<ruby-dev:27317>))\n\n: fileutils [bug]\n\n#Sat Sep 24 08:38:07 2005  Minero Aoki  <aamine@loveruby.net>\n#\n#       * lib/fileutils.rb: fix visibility of FileUtils::NoWrite, Verbose,\n#         DryRun (backported from trunk, rev 1.66). [ruby-core:05954]\n#\n#       * test/fileutils/test_nowrite.rb: test it.\n#\n#       * test/fileutils/test_dryrun.rb: new file.\n#\n#       * test/fileutils/test_verbose.rb: new file.\n\n    FileUtils::NoWrite, Verbose, DryRun のメソッドが呼べなくなっていた\n    のを修正しました。((<ruby-core:05954>))\n\n: extmk, mkmf [compat]\n\n#Sat Oct 22 23:54:07 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * ext/extmk.rb, lib/mkmf.rb (with_config): support --with-extension\n#         options.  [ruby-dev:27449]\n#\n\n    --with-extension オプション追加。((<ruby-dev:27449>))\n\n: mkmf: find_executable() [compat]\n\n#Thu Sep 22 23:36:24 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * lib/mkmf.rb (find_executable0): default path if environment is not\n#         set.  [ruby-dev:27281]\n\n  実行ファイルを探索するときに環境変数 PATH がセットされてい\n  ない場合を考慮しました。((<ruby-dev:27281>))\n\n  PATH がセットされていない場合は、\n    /usr/local/bin:/usr/ucb:/usr/bin:/bin\n  をPATHの代わりに利用してここからコマンドを探索します。\n\n== 拡張ライブラリAPI\n\n: rb_funcall2() [bug]\n\n#Thu Dec  1 00:50:33 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * eval.c (rb_funcall2): allow to call protected methods.\n#         fixed: [ruby-dev:27890]\n\n    拡張ライブラリ(C言語)からRubyメソッドを呼ぶ関数\n    rb_funcall2() が (private メソッドを呼べるのに) protected メソッド\n    を呼べない不具合を修正しました。((<ruby-dev:27890>))\n\n: rb_respond_to() [change]\n\n#Tue Oct 11 21:41:58 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * eval.c (rb_obj_respond_to): check if obj responds to the given\n#         method with the given visibility.  [ruby-dev:27408]\n#\n#       * eval.c (rb_respond_to): conform to Object#respond_to?.  [ruby-dev:27411]\n\n    rb_respond_to()をObject#respond_to?のデフォルトの動作と同じ(public \n    メソッドにしか反応しない)にした。((<ruby-dev:27411>))\n\n: rb_obj_respond_to() [new]\n\n    追加。rb_respond_to() と異なり可視性を指定できる。((<ruby-dev:27408>))\n\n== プラットフォーム固有\n\n: bccwin32 [bug]\n\n#Mon Nov 28 13:08:54 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * win32/win32.c (rb_w32_strerror): remove all CR and LF. (avoid broken\n#         error message on bccwin32 + winsock)\n\n    bccwin32 で winsock のエラーを表示するとき、strerror の返すエラー\n    メッセージの途中に改行が入るために、ruby の出力するエラーメッセー\n    ジが壊れていたのを修正。\n\n: cygwin [bug]\n\n#Sat Nov 26 19:57:45 2005  WATANABE Hirofumi  <eban@ruby-lang.org>\n#\n#       * dln.c (conv_to_posix_path): should initialize posix.\n\n    cygwin環境で、RUBYLIB環境変数が空だと、$LOAD_PATHにゴミが入る。\n    ((<ruby-dev:27830>))\n\n: BeOS [bug]\n\n#Fri Nov 11 07:44:18 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * configure.in: undef HAVE_LINK on BeOS. (link(2) always returns\n#         EINVAL, and this causes error in test/fileutils.)\n#\n#       * file.c: overwride chown(2) and fchown(2) on BeOS. (these functions\n#         should not change user/group id if -1 is passed as corresponding\n#         argument, and this causes error in test/fileutils too)\n#         [ruby-dev:27672]\n#\n#       * file.c (rb_file_s_link): checks HAVE_LINK.\n\n    BeOS でのいくつかのテスト失敗に対処。link(2) が定義されていながら\n    常に失敗するので test/fileutils が誤動作していたのに対処。BeOS に\n    は link(2) は存在しないと見なすようにした。chown、fchown に id と\n    して -1 を渡した場合は、POSIX 的には id を変更すべきでないが、BeOS \n    では (unsigned) -1 に変更してしまっていた。これに対処。((<ruby-dev:27672>))\n\n: Sun [bug]\n\n#Mon Oct 31 17:34:46 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * configure.in: use proper option for Sun linker. A patch from\n#         Shinya Kuwamura <kuwa@labs.fujitsu.com>.  [ruby-dev:27603]\n#\n\n    Sunのコンパイラで拡張ライブラリをリンクできなかった問題の修正。((<ruby-dev:27603>))\n\n: IA64 [bug]\n\n#Wed Oct 26 09:04:51 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * ruby.h (Qfalse, Qtrue, Qnil, Qundef): make sure these immediate\n#         values have VALUE type. there is an environment where sizeof(VALUE)\n#         != sizeof(int) like IA64. if 32bit integer (Qtrue) is passed to ANYARGS\n#         and received by 64bit integer (VALUE), upper bits may have garbage value.\n#         [ruby-dev:27513]\n\n    IA64 で、Qtrue Qfalse Qnil が 64bit 整数でなく 32bit 整数として定\n    義されていたため、ANYARGS を通して Qtrue を渡し、VALUE で受けると、\n    サイズの違いから値が壊れることのあった問題を修正。((<ruby-dev:27513>))\n\n# == 不要\n#\n#Mon Nov 28 09:21:49 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * lib/mkmf.rb (create_makefile): should not change sodir with\n#         dir.gsub!. (bccwin32 failed to install third party exntesions)\n#         [ruby-dev:27834]\n#\n#なんとなく不要かな？\n#\n#    EXTOUT を使わず、extconf.rb で外部拡張ライブラリをインストールする\n#    時に、make ターゲット名が意図せず改変されていたため、bccwin32 で拡\n#    張ライブラリがインストールできなくなっていたのを修正。\n\n#Sun Nov 27 00:56:13 2005  NAKAMURA, Hiroshi  <nahi@ruby-lang.org>\n#\n#       * lib/wsdl/xmlSchema/complexContent.rb: missing\n#         ComplexContent#elementformdefault method.\n#\n# ？\n\n#Tue Nov  8 15:32:27 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/drb/ssl.rb (DRb::SSLConfig#accept): fixed typo.\n#         [ruby-dev:27560] [ruby-core:4627]\n#\n# ？\n\n#Sat Oct  8 20:04:40 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * eval.c (Init_Binding): add Binding#dup method.  [yarv-dev:666]\n#\n# メソッドの追加。不要。\n\n#Sat Oct  8 20:04:40 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * parse.y (rb_parser_malloc, rb_parser_free): manage parser stack on\n#         heap.  [ruby-list:41199]\n#\n# Bison 2.0対応",
          "snippets": []
        }
      ],
      "related_entries": []
    },
    {
      "signature": "メソッド呼び出し(super・ブロック付き・yield)",
      "score": 127.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "メソッド呼び出し(super・ブロック付き・yield) \n  * super\n  * block\n  * yield\n  * block_arg\n  * numbered_parameters\n  * call_method",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/spec=2fcall.html",
          "description": "メソッド呼び出し(super・ブロック付き・yield) \n  * super\n  * block\n  * yield\n  * block_arg\n  * numbered_parameters\n  * call_method\n\n//emlist[例][ruby]{\nfoo.bar()\nfoo.bar\nbar()\nprint \"hello world\\n\"\nprint\nClass.new\nClass::new\n//}\n\n文法:\n\n          [式  `.'] 識別子 [`(' [[`*'] 式] ... [`&' 式] `)']\n          [式 `::'] 識別子 [`(' [[`*'] 式] ... [`&' 式] `)']\n\nメソッド呼び出し式はレシーバ(`.' の左側の式の値)のメソッドを呼び\n出します。レシーバが指定されない時は self のメソッドを呼び出しま\nす。\n\n`.' と `::' とはほぼ同じ意味です。但し、定数を表す場合は、\n`::' を使わなければいけません(例: Math::PI)。逆に、\n\n//emlist[][ruby]{\nKlass::Foo\n//}\n\nとした場合、常に定数と見なされるという制限があります。\n`::' を、クラスメソッド呼び出しに使うという流儀がありますが、\nこの点は要注意です。大文字で始まるメソッド名を使用する場合は\n\n//emlist[][ruby]{\nKlass.Foo\n//}\n\nと `.' を使うか、\n\n//emlist[][ruby]{\nKlass::Foo()\n//}\n\nと括弧でメソッド呼び出しであることを明示する必要があります。\n\nメソッド名には通常の識別子の他、識別子に ? または ! の続い\nたものが許されます。慣習として、述語(真偽値を返すメソッド)には ?\nを、同名の(! の無い)メソッドに比べてより破壊的な作用をもつメソッ\nド(例: tr と tr!)には ! をつけるようになっています。\n\n\n引数の直前に * がついている場合、その引数の値が展開されて\n渡されます。展開はメソッド to_a を経由して行なわれます。つまり:\n\n//emlist[][ruby]{\nfoo(1,*[2,3,4])\nfoo(1,*[])\nfoo(1,*[2,3,4],5)\nfoo(1,*[2,3,4],5,*[6])\n//}\n\nは、それぞれ\n\n//emlist[][ruby]{\nfoo(1,2,3,4)\nfoo(1)\nfoo(1,2,3,4,5)\nfoo(1,2,3,4,5,6)\n//}\n\nと同じです。\n\n最後の引数の直前に & がついている場合、その引数で指定した手続き\nオブジェクト(Proc)やメソッドオブジェクト(Method)がブロック\nとしてメソッドに渡されます。詳細は block を参照してください。\n\nメソッド呼び出しの際、private なメソッドは関数形式(レシーバを省\n略した形式)でしか呼び出すことができません。また protected なメソッ\nドはそのメソッドを持つオブジェクトのメソッド定義式内でなければ呼び出せ\nません。d:spec/def#limit を参照して下さい。\n\nハッシュ式の解説(d:spec/literal#hash)にも書かれている通り、\nメソッド呼出の末尾にHashを渡す場合は {, } を省略することができます。\nこれを用いることでキーワード引数を渡すことができます。\nこの Hash はd:spec/def#methodで解説されているキーワード引数に\n分解されて引き渡されます。\n\nメソッド呼び出しで `.' の代わりに `&.' を使うことができます。\nこの形式でメソッドを呼びだそうとすると、レシーバが nil の場合は\n以下のように働きます。\n\n  * 引数の評価が行なわれない\n  * メソッド呼び出しが行われない\n  * nil を返す\n\nレシーバが nil でない場合は通常のメソッド呼び出しが行われます。\n\n//emlist[][ruby]{\nfoo = 13\nfoo&.to_s # => \"13\"\nfoo = nil\nfoo&.to_s # nil, not \"\"\n//}\n\n`&.' は要素代入(アトリビュート)に対しても使えます。\n\n//emlist[][ruby]{\nfoo&.bar = \"abc\" # for `bar=' method\n//}\n\n\n===[a:super] super\n\n//emlist[例][ruby]{\nsuper\nsuper(1,2,3)\n//}\n\n文法:\n\n          super\n          super(式, ... )\n\nsuper は現在のメソッドがオーバーライドしているメソッドを呼び出し\nます。括弧と引数が省略された場合には現在のメソッドの引数がそのまま引き\n渡されます。引数を渡さずにオーバーライドしたメソッドを呼び出すには\nsuper() と括弧を明示します。\n\n//emlist[例][ruby]{\nclass Foo\n  def foo(arg=nil)\n    p arg\n  end\nend\n\nclass Bar < Foo\n  def foo(arg)\n    super(5)       # 5 を引数にして呼び出す\n    super(arg)     # 5 を引数にして呼び出す\n    super          # 5 を引数にして呼び出す super(arg) の略記法\n    arg = 1\n    super          # 1 を引数にして呼び出す super(arg) の略記法\n    super()        # 引数なしで呼び出す\n  end\nend\nBar.new.foo 5\n//}\n\n===[a:block] ブロック付きメソッド呼び出し\n\n//emlist[例][ruby]{\n[1,2,3].each do |i| print i*2, \"\\n\" end\n[1,2,3].each {|i| print i*2, \"\\n\" }\n//}\n\n文法:\n\n          method(arg1, arg2, ...)  do [`|' 式 ... `|'] 式 ... end\n          method(arg1, arg2, ...) `{' [`|' 式 ... `|'] 式 ... `}'\n          method(arg1, arg2, ..., `&' proc_object)\n\nブロック付きメソッドとは制御構造の抽象化のために用いられる\nメソッドです。最初はループの抽象化のために用いられていたため、\n特にイテレータと呼ばれることもあります。\ndo ... end または { ... }  で囲まれたコードの断片\n(ブロックと呼ばれる)を後ろに付けてメソッドを呼び出すと、その\nメソッドの内部からブロックを評価できます。\nブロック付きメソッドを自分で定義するには yield 式を使います。\n\n{ ...  } の方が do ...  end ブロックよりも強く結合します。\n次に例を挙げますが、このような違いが影響するコードは読み辛いので避けましょう:\n\n//emlist[][ruby]{\nfoobar a, b do body end   # foobarの引数はa, bの値とブロック\nfoobar a, b { body }      # ブロックはメソッドbの引数、aの値とbの返り値とがfoobarの引数\n//}\n\nブロックの中で初めて代入された(宣言された)ローカル変数はその\nブロックの中でだけ有効です。例えば:\n\n//emlist[][ruby]{\nfoobar {\n  i = 20                # ローカル変数 `i' が宣言された\n  # ...\n}\nprint defined? i        # `i' はここでは未定義なので false\nfoobar a, b do\n  i = 11                # まったく別の変数 i の宣言\n  # ...\nend\n//}\n\n以下は逆にブロック外でも有効な例です。\n\n//emlist[][ruby]{\ni = 10\n[1,2,3].each do |m|\n  p i * m               # いきなり i を使える\nend\n//}\n\nブロックの部分だけを先に定義して変数に保存しておき、後からブロック付きメソッドに渡すことも出来ます。\nそれを実現するのが手続きオブジェクト(Proc)です。\nそれをブロックとして渡すにはブロック付きメソッドの最後の引数として `&' で修飾した手続きオブジェクトを渡\nします。Proc の代わりにメソッドオブジェクト(Method)を渡す\nことも出来ます。この場合、そのメソッドを呼ぶ手続きオブジェクトが生成さ\nれ渡されます。\n\n//emlist[][ruby]{\n# 1引数の手続き(その働きは引数をpで印字すること)を生成し、変数pobjに格納\npobj = proc {|v|\n  p v\n}\n\n[1,2,3].each(&pobj) # 手続きオブジェクトをブロックの代わりに渡している\n# => 1\n#    2\n#    3\n//}\n\nto_proc メソッドを持つオブジェクトならば、`&'\n修飾した引数として渡すことができます。デフォルトで Proc、Method オブジェ\nクトは共に to_proc メソッドを持ちます。to_proc はメソッド呼び出し時に実\n行され、Proc オブジェクトを返すことが期待されます。\n\n//emlist[][ruby]{\nclass Foo\n  def to_proc\n    Proc.new {|v| p v}\n  end\nend\n\n[1,2,3].each(&Foo.new)\n# => 1\n#    2\n#    3\n//}\n\nブロック付きメソッドの戻り値は、通常のメソッドと同様ですが、ブロックの中から\nd:spec/control#break により中断された場合は nil を返します。\n\nbreak に引数を指定した場合はその値がブロック付きメソッドの戻り値になります。\n\n===[a:yield] yield\n\n自分で定義したブロック付きメソッドでブロックを呼び出すときに使います。\nyield に渡された値はブロック記法において | と | の間にはさまれた\n変数(ブロックパラメータ)に代入されます。\n\n//emlist[例][ruby]{\nyield data\n//}\n\n文法:\n\n          yield `(' [式 [`,' 式 ... ]] `)'\n          yield [式 [`,' 式 ... ]]\n\n引数をブロックパラメータとして渡してブロックを評価します。yield は\nイテレータを定義するために d:spec/def#method 内で使用します。\n\n//emlist[][ruby]{\n# ブロック付きメソッドの定義、\n# その働きは与えられたブロック(手続き)に引数1, 2を渡して実行すること\ndef foo\n  yield(1,2)\nend\n\n# fooに「2引数手続き、その働きは引数を配列に括ってpで印字する」というものを渡して実行させる\nfoo {|a,b|\n  p [a, b]\n}  # => [1, 2] (要するに p [1, 2] を実行した)\n\n# 今度は「2引数手続き、その働きは足し算をしてpで印字する」というものを渡して実行させる\nfoo {|a, b|\n  p a + b\n}  # => 3 (要するに p 1 + 2 を実行した)\n\n# 今度のブロック付きメソッドの働きは、\n# 与えられたブロックに引数10を渡して起動し、続けざまに引数20を渡して起動し、\n# さらに引数30を渡して起動すること\ndef bar\n  yield 10\n  yield 20\n  yield 30\nend\n\n# barに「1引数手続き、その働きは引数に3を足してpで印字する」というものを渡して実行させる\nbar {|v|\n  p v + 3\n}\n# => 13\n#    23\n#    33 (同じブロックが3つのyieldで3回起動された。\n#        具体的には p 10 + 3; p 20 + 3; p 30 + 3 を実行した)\n\n# Array#eachの(粗製乱造の)類似品\ndef iich(arr) # 引数に配列を取る\n  idx = 0\n  while idx < arr.size\n    yield(arr[idx]) # 引数の各要素毎に、その要素を引数にしてブロックを起動\n    idx += 1\n  end\nend\n\nsum = 0\niich([1, 4, 9, 16, 25]) {|elem|\n  sum += elem\n}\np sum # => 55\n//}\n\nブロックパラメータの代入はd:spec/operator#multiassignと同じルールで行われます。\nまた yield を実行したメソッドにブロックが渡されていない\n(ブロック付きメソッド呼び出しではない)時は例外 LocalJumpError が発生します。\n\nyield はブロック内で最後に評価した式の値を返します。また、\nd:spec/control#next によりブロックの実行が中断された場合は nil\nを返します。\n\nnext に引数を指定した場合はその値が yield の戻り値になります。\n\n====[a:block_arg] ブロックパラメータの挙動\n\n\nメソッド呼び出しと挙動が異なります。\nlambda でないブロックを呼び出したとき\n\n  * 引数の数が違ってもエラーになりません。\n  * 配列をひとつ渡したときにそれが引数の並びとして展開されることがあります。\n\n//emlist[][ruby]{\ndef foo\n  yield 1,2,3\nend\n\nfoo{|v| p v}       #=> 1\n\ndef bar\n  yield [1,2,3]\nend\n\nbar{|a, b, c| p a} #=> 1\n\ndef hoge\n  yield [1,2,3],4,5\nend\n\nhoge{|a, b, c| p a} #=> [1,2,3]\n//}\n\n\nhttp://www.a-k-r.org/d/2007-08.html#a2007_08_16_1\n\n===[a:numbered_parameters] 番号指定パラメータ\n\nブロックに渡された値を参照するには、上記のようにブロックパラメータを定義する方法のほか、_1 や _2 といった暗黙に定義される変数を用いる方法もあります。\nこの変数のことを番号指定パラメータ（Numbered parameters）と言います。番号指定パラメータは、_1 から _9 までの9つが使用可能です。\n\n//emlist[][ruby]{\ndef foo\n  yield \"a\", \"b\", \"c\"\nend\n\nfoo{|a, b, c| p [a, b, c] } # => [\"a\", \"b\", \"c\"]\nfoo{ p [_1, _2, _3] } # => [\"a\", \"b\", \"c\"]\n//}\n\nブロックパラメータと番号指定パラメータを同時に使うことはできません。\n\n//emlist[][ruby]{\ndef foo\n  yield \"a\",\"b\",\"c\"\nend\n\nfoo {|a, b, c| p [_1, a] } # => ordinary parameter is defined (SyntaxError)\n//}\n\nなお、ブロック内で _2 以降が使用されているかどうかで、_1 の意味が異なります。\n\n//emlist[][ruby]{\ndef foo\n  yield [\"a\", \"b\", \"c\"]\nend\n\nfoo {\n  p _1 # => [\"a\", \"b\", \"c\"]\n}\nfoo {\n  p _1 # => \"a\"\n  p _2 # => \"b\"\n}\n//}\n\nこれは、ブロックパラメータを定義した個数によって代入される値が異なることに対応します。\n\n//emlist[][ruby]{\ndef foo\n  yield [\"a\", \"b\", \"c\"]\nend\n\nfoo {|a|\n  p a # => [\"a\", \"b\", \"c\"]\n}\nfoo {|a,b|\n  p a # => \"a\"\n  p b # => \"b\"\n}\n//}\n\n===[a:call_method] .() および ::() 形式のメソッド呼び出し（callメソッドの糖衣構文）\n\n下記はcallメソッドの糖衣構文です。\nProc#callにも言及がありますが、Proc以外のオブジェクトに対しても（callメソッドさえ定義されていれば）使えます。\n\n//emlist[例][ruby]{\nfoo.(100)      # foo.call(100)と全く同じ意味\nfoo::(100)     # foo.call(100)と全く同じ意味\n//}\n\n文法:\n\n          式  `.' `(' [[`*'] 式] ... [`&' 式] `)'\n          式 `::' `(' [[`*'] 式] ... [`&' 式] `)'",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "LocalJumpError",
          "label": "LocalJumpError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:LocalJumpError/"
        },
        {
          "key": "Method",
          "label": "Method",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Method/"
        },
        {
          "key": "Proc",
          "label": "Proc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Proc/"
        }
      ]
    },
    {
      "signature": "NEWS for Ruby 2.1.0",
      "score": 109.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "NEWS for Ruby 2.1.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f2_1_0.html",
          "description": "NEWS for Ruby 2.1.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストは ChangeLog ファイルか bugs.ruby-lang.org の issue を参照してください。\n\n== 2.0.0 以降の変更\n\n=== 言語仕様の変更\n\n  * キーワード引数のデフォルト値が省略可能になりました。これらの「必須キーワード引数」は呼び出し時に明示的に与えなければなりません。\n\n  * 整数や小数のリテラルの末尾に'r','i','ri'という接尾辞を付けられるようになりました\n//emlist{\n    # r を付けると有理数になる\n    42r  # => Rational(42, 1)\n    3.14 # => 3.14.rationalize\n    6.022e+23r # 指数形式と一緒には使えない\n\n    # i を付けると虚数単位 i を掛けた数になる\n    42i  # => Complex(0, 42)\n    3.14i # => Complex(0, 3.14)\n\n    # ri を付けると複素数の虚部が有理数になる\n    42ri   # => Complex(0, 42r)\n    3.14ri # => Complex(0, 3.14r)\n//}\n\n  * def によるメソッド定義式は nil の代わりにメソッド名をシンボルで返します\n\n=== 組み込みクラスの更新\n\n  * Array\n    * 追加: Array#to_h キーと値のペアの配列をハッシュに変換します。\n\n  * Binding\n    * 追加: Binding#local_variable_get\n    * 追加: Binding#local_variable_set\n    * 追加: Binding#local_variable_defined?\n\n  * Enumerable\n    * 追加: Enumerable#to_h キーと値のペアのリストをハッシュに変換します。\n\n  * Exception\n    * 追加: Exception#cause 一つ前の例外を新しい例外を返します。\n      例外を rescue して raise しなおしたときに元の例外が一つ前の例外としてセットされています。\n\n  * GC\n    * 改良: RGenGC として知られている世代別GCが導入しました\n    * 追加した環境変数\n      * RUBY_GC_HEAP_INIT_SLOTS\n      * RUBY_GC_HEAP_FREE_SLOTS\n      * RUBY_GC_HEAP_GROWTH_FACTOR\n      * RUBY_GC_HEAP_GROWTH_MAX_SLOTS\n      * RUBY_GC_MALLOC_LIMIT_MAX\n      * RUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR\n      * RUBY_GC_OLDMALLOC_LIMIT\n      * RUBY_GC_OLDMALLOC_LIMIT_MAX\n      * RUBY_GC_OLDMALLOC_LIMIT_GROWTH_FACTOR\n    * 廃止した環境変数\n      * RUBY_FREE_MIN (RUBY_GC_HEAP_FREE_SLOTS を代わりに使います)\n      * RUBY_HEAP_MIN_SLOTS (RUBY_GC_HEAP_INIT_SLOTS を代わりに使います)\n\n  * Integer\n    * 追加: Fixnum#bit_length\n    * 追加: Bignum#bit_length\n    * Bignum の性能向上\n      * GMP をいくつかの操作で使えるときは使います。\n        乗算、除算、基数変換、GCD\n\n  * IO\n    * 拡張: IO#seek SEEK_DATA と SEEK_HOLE を whence としてサポートしました？？\n    * 拡張: IO#seek 第2引数としてシンボルを受け付けるようになりました (:CUR, :END, :SET, :DATA, :HOLE)\n    * 拡張: IO#read_nonblock シンボルを返すためにキーワード引数 `exception: false` を受け付けるようになりました\n    * 拡張: IO#write_nonblock シンボルを返すためにキーワード引数 `exception: false` を受け付けるようになりました\n\n  * Kernel\n    * 追加: Kernel#singleton_method(Object#singleton_method)\n\n  * Module\n    * 追加: Module#using, which activates refinements of the specified module only\n      in the current class or module definition.\n    * 追加: Module#singleton_class? レシーバーが特異クラスであれば true を返します。\n      レシーバーが通常のクラスやモジュールであれば false を返します。\n    * 拡張: Module#refine はもはや実験的な機能でなくなりました\n    * 拡張: Module#include と Module#prepend はパブリックメソッドになりました\n\n  * Mutex\n    * Mutex#owned? はもはや実験的な機能ではありません。\n\n  * Numeric\n    * 拡張: Numeric#step limit が省略可能になり無限数列を作れるようになりました。\n      キーワード引数の to と by を使いやすさのために導入しました。\n      by に 0 を指定すると無限に同じ数値を生成することができます。\n\n  * Process\n    * 追加: Process.#argv0 オリジナルの $0 の値を返します。\n    * 追加: Process.#setproctitle $0 に影響を与えずにプロセス名をセットできます。\n    * 追加: Process.#clock_gettime\n    * 追加: Process.#clock_getres\n\n  * String\n    * \"literal\".freeze は同じオブジェクトを返すように最適化されました。\n    * 追加: String#scrub, String#scrub! 不正なバイト列を検証して修正します。\n      古いバージョンのRubyと一緒に使いたいときは string-scrub gem を使います。\n\n  * Symbol\n    * 全てのシンボルは freeze されるようになりました\n\n  * pack/unpack (Array/String)\n    * プラットフォームが対応していれば Q! と q! は long long 型を表します\n\n  * toplevel\n    * main.using はもはや実験的な機能ではありません。\n      The method activates refinements in the ancestors of the argument module to\n      support refinement inheritance by Module#include\n\n=== 組み込みクラスの互換性 (機能追加とバグ修正を除く)\n\n  * Hash\n   * 非互換: Hash#reject は将来のバージョンでは単なるハッシュオブジェクトを返すようにする予定です。\n     サブクラス、インスタンス変数、デフォルト値、汚染フラグはコピーされなくなります。\n     そのようなハッシュに対してこのメソッドを呼び出すと警告するようになりました。\n\n  * IO\n    * 非互換: IO.open は外部エンコーディングが ASCII-8BIT のとき内部エンコーディングを無視します。\n\n  * Kernel.#eval, Kernel.#instance_eval, Module#module_eval\n    元の環境のスコープ情報をコピーするようになりました。これは、引数なしの\n    private, protected, public, module_function を文字列として eval しても\n    その外側には影響を与えないという意味です。\n    以下のコードは Foo#foo をプライベートにしません。\n//emlist{\n    class Foo\n      eval \"private\"\n      def foo\n      end\n    end\n//}\n\n  * Object#untrusted?,Object#untrust,Object#trust\n    * これらのメソッドは非推奨になりました。$VERBOSE が true のときは警告を表示します。\n      Object#tainted?,Object#taint,Object#untaint とそれぞれ同じ動作です。\n\n  * Module#ancestors\n    * 特異クラスの祖先はそれ自身を含みます。\n      The ancestors of a singleton class now include singleton classes,\n      in particular itself.\n\n  * Module#define_method Object#define_singleton_method\n    * 定義したメソッドの名前をシンボルで返すようになりました。メソッドオブジェクトではありません。\n\n  * Numeric#quo\n    * レシーバーが to_r メソッドを持たないとき ArgumentError ではなく TypeError を発生させるようになりました。\n\n  * Proc\n    * Returning from lambda proc now always exits from the Proc, not from the\n      method where the lambda is created.  Returning from non-lambda proc exits\n      from the method, same as the former behavior.\n\n  * String\n    * 以下のコードでレシーバーのエンコーディングと変換後のエンコーディングが同一でも\n      不正なバイト列を置き換えるようになりました。\n//emlist{\n    include_invalid_byte_string.encode(\"UTF-8\", invalid: :replace)\n//}\n\n=== 標準添付ライブラリの更新 (優れたもののみ)\n\n  * cgi/util\n    * 全てのクラスメソッドをモジュールに移動しました\n\n  * digest\n    * 拡張: Digest::Class.file コンストラクタのためにオプショナル引数を取れるようになりました\n\n  * matrix\n    * 追加: Vector#cross_product\n\n  * net/smtp\n    * 追加: Net::SMTP#rset RSET コマンドに対応している\n\n  * objspace\n    * 追加: ObjectSpace.#trace_object_allocations\n    * 追加: ObjectSpace.#trace_object_allocations_start\n    * 追加: ObjectSpace.#trace_object_allocations_stop\n    * 追加: ObjectSpace.#trace_object_allocations_clear\n    * 追加: ObjectSpace.#allocation_sourcefile\n    * 追加: ObjectSpace.#allocation_sourceline\n    * 追加: ObjectSpace.#allocation_class_path\n    * 追加: ObjectSpace.#allocation_method_id\n    * 追加: ObjectSpace.#allocation_generation\n    * 追加: ObjectSpace.#reachable_objects_from_root\n    * 追加: ObjectSpace.#dump\n    * 追加: ObjectSpace.#dump_all\n\n  * OpenSSL::BN\n    * 拡張: OpenSSL::BN.new Fixnum や Bignum を引数として取れるようになりました。\n\n  * open-uri\n    * 複数フィールドに同じ名前を使うことをサポートしました (Set-Cookieのように)\n\n  * Pathname\n    * 追加: Pathname#write\n    * 追加: Pathname#binwrite\n\n  * rake\n    * 10.1.0 に更新しました。古い名前空間を削除しました。また、古い rake の機能も削除しました。\n      http://rake.rubyforge.org/doc/release_notes/rake-10_1_0_rdoc.html\n      http://rake.rubyforge.org/doc/release_notes/rake-10_0_3_rdoc.html\n\n  * rbconfig\n    * 追加: RbConfig::SIZEOF C の型のサイズを提供するために追加しました。\n\n  * rdoc\n    * 4.1.0 に更新。主にデフォルトのテンプレートとアクセシビリティを改善しました。\n      https://github.com/ruby/rdoc/blob/v4.1.0.preview.1/History.rdoc\n\n  * resolv\n    * 追加: Resolv::DNS.fetch_resource\n    * One-shot multicast DNS support\n    * Support LOC resources\n\n  * rexml\n    * REXML::Parsers::SAX2Parser\n      * entitydecl イベントの引数が間違っている問題を修正しました。\n        ドキュメントにはエンティティ定義の配列を渡すと書いてあるのに、\n        実装は2つ以上の引数を渡すようになっていた。これは実装のバグだったが、\n        修正したことで後方互換性が壊れました。\n    * REXML::Parsers::StreamParser\n      * entityイベントをサポート\n    * REXML::Text\n      * REXML::Text#<< 'text << \"XXX\" << \"YYY\"' のようなメソッドチェインをサポート\n      * REXML::Text#<< \"raw\" でないモードをサポート\n\n  * rinda\n    * Rinda::RingServer, Rinda::RingFinger\n      * マルチキャストソケットをサポート\n\n  * rubygems\n    * 2.2.0 に更新。  Notable new features include:\n      * Gemfile or gem.deps.rb support including Gem.file.lock (experimental)\n      * Improved, iterative resolver (compared to RubyGems 2.1 and earlier)\n      * Support for a sharing a GEM_HOME across ruby platforms and versions\n      * https://github.com/rubygems/rubygems/tree/master/History.txt\n\n  * set\n    * 追加: Set#intersect?\n    * 追加: Set#disjoint?\n\n  * socket\n    * 追加: Socket.getifaddrs\n\n  * strscan\n    * StringScanner#[]  名前付きキャプチャをサポートしました\n\n  * syslog/logger\n    * ファイリティを追加\n\n  * tempfile\n    * 追加: Tempfile.create\n\n  * timeout\n    * 明示的に例外クラスを指定しない限り、ブロックを抜けるための例外はブロック内部で rescue されなくなりました。\n\n  * tsort\n    * 追加: TSort#tsort\n    * 追加: TSort#tsort_each\n    * 追加: TSort#strongly_connected_components\n    * 追加: TSort#each_strongly_connected_component\n    * 追加: TSort#each_strongly_connected_component_from\n\n  * webrick\n    * レスポンスボディは readpartial や read をサポートする StringIO か他の IO のようなオブジェクトになりました。\n\n  * xmlrpc\n    * XMLRPC::Client\n      * 追加: XMLRPC::Client#http クライアントのために Net::HTTP のインスタンスを返します。\n        通常、それは必要ありません。HTTP クライアントのオプションを少し変更したいときに便利です。\n        HTTPクライアントの主要なオプションを変更するときは XMLRPC::Client のメソッドを使うべきです。\n\n=== 標準添付ライブラリの互換性 (機能追加とバグ修正を除く)\n\n  * set\n    * 非互換: Set#to_set はコピーを生成して返す代わりに self を返すようになりました\n\n  * uri\n    * 非互換: URI.decode_www_form は現在の WHATWG による URL 標準に従います。\n      文字列エンコーディングを指定するために、エンコーディング引数を取ります。\n      いい加減なパーセントエンコードされた文字列を受け入れますが、セパレータにセミコロンは拒否します。\n    * 非互換: URI.decode_www_form は現在の WHATWG による URL 標準に従います。\n      パーセントエンコードする前に、エンコーディング引数を取ります。\n      デフォルトでは、パーセントエンコードする前にUTF-16文字列をUTF-8に変換しません。\n\n  * curses\n    * 削除。curses は gem になりました。\n      https://rubygems.org/gems/curses\n\n=== 組込みのグローバル変数の互換性に影響のある変更\n\n  * $SAFE\n    * $SAFE=4 は廃止されました。$SAFE に4以上の値をセットすると ArgumentError が発生します。\n\n=== C API の更新\n\n  * 非推奨: rb_gc_set_params() Ruby内部でのみ使います。\n\n  * 追加: rb_gc_count() GCが発生した回数を返します。\n\n  * 追加: rb_gc_stat() GC.stat が返す値にオーバーヘッドなしにアクセスできます。\n\n  * 追加: rb_gc_latest_gc_info() GC.latest_gc_info にアクセスできます。\n\n  * 追加: rb_postponed_job_register()  VMが一貫性のある状態になったときに呼ぶコールバック関数を引数に取ります。\n    例えば、Cのシグナルハンドラから実行するために使います。\n\n  * 追加: rb_profile_frames() コールスタックのプロファイルのために現在のRubyのスタックに\n    低コストでアクセスする機能を提供します。\n\n  * rb_tracepoint_new() C言語からアクセス可能な新しい内部的なイベントをサポートしました:\n    * RUBY_INTERNAL_EVENT_NEWOBJ\n    * RUBY_INTERNAL_EVENT_FREEOBJ\n    * RUBY_INTERNAL_EVENT_GC_START\n    * RUBY_INTERNAL_EVENT_GC_END_MARK\n    * RUBY_INTERNAL_EVENT_GC_END_SWEEP\n    * 内部的なイベントを通常のイベントと同時に使うことはできません。\n      (例: RUBY_EVENT_CALL と RUBY_EVENT_RETURN)",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "ArgumentError",
          "label": "ArgumentError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ArgumentError/"
        },
        {
          "key": "Array",
          "label": "Array",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Array/"
        },
        {
          "key": "Bignum",
          "label": "Bignum",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Bignum/"
        },
        {
          "key": "Binding",
          "label": "Binding",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Binding/"
        },
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerable/"
        },
        {
          "key": "Exception",
          "label": "Exception",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Exception/"
        },
        {
          "key": "GC",
          "label": "GC",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:GC/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Hash/"
        },
        {
          "key": "IO",
          "label": "IO",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IO/"
        },
        {
          "key": "Integer",
          "label": "Integer",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Integer/"
        },
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Kernel/"
        },
        {
          "key": "Module",
          "label": "Module",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Module/"
        },
        {
          "key": "Mutex",
          "label": "Mutex",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Mutex/"
        },
        {
          "key": "Net::HTTP",
          "label": "Net::HTTP",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Net%3A%3AHTTP/"
        },
        {
          "key": "Numeric",
          "label": "Numeric",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Numeric/"
        },
        {
          "key": "Pathname",
          "label": "Pathname",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Pathname/"
        },
        {
          "key": "Proc",
          "label": "Proc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Proc/"
        },
        {
          "key": "Process",
          "label": "Process",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Process/"
        },
        {
          "key": "Rinda::RingFinger",
          "label": "Rinda::RingFinger",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Rinda%3A%3ARingFinger/"
        },
        {
          "key": "Rinda::RingServer",
          "label": "Rinda::RingServer",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Rinda%3A%3ARingServer/"
        },
        {
          "key": "String",
          "label": "String",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:String/"
        },
        {
          "key": "Symbol",
          "label": "Symbol",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Symbol/"
        },
        {
          "key": "TypeError",
          "label": "TypeError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:TypeError/"
        },
        {
          "key": "cgi/util",
          "label": "cgi/util",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:cgi%2Futil/"
        },
        {
          "key": "digest",
          "label": "digest",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:digest/"
        },
        {
          "key": "matrix",
          "label": "matrix",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:matrix/"
        },
        {
          "key": "net/smtp",
          "label": "net/smtp",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:net%2Fsmtp/"
        },
        {
          "key": "objspace",
          "label": "objspace",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:objspace/"
        },
        {
          "key": "open-uri",
          "label": "open-uri",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:open-uri/"
        },
        {
          "key": "rake",
          "label": "rake",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rake/"
        },
        {
          "key": "rbconfig",
          "label": "rbconfig",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rbconfig/"
        },
        {
          "key": "rdoc",
          "label": "rdoc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rdoc/"
        },
        {
          "key": "resolv",
          "label": "resolv",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:resolv/"
        },
        {
          "key": "rexml",
          "label": "rexml",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rexml/"
        },
        {
          "key": "rinda",
          "label": "rinda",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rinda/"
        },
        {
          "key": "rubygems",
          "label": "rubygems",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rubygems/"
        },
        {
          "key": "set",
          "label": "set",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:set/"
        },
        {
          "key": "socket",
          "label": "socket",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:socket/"
        },
        {
          "key": "strscan",
          "label": "strscan",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:strscan/"
        },
        {
          "key": "syslog/logger",
          "label": "syslog/logger",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:syslog%2Flogger/"
        },
        {
          "key": "tempfile",
          "label": "tempfile",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:tempfile/"
        },
        {
          "key": "timeout",
          "label": "timeout",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:timeout/"
        },
        {
          "key": "tsort",
          "label": "tsort",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:tsort/"
        },
        {
          "key": "uri",
          "label": "uri",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:uri/"
        },
        {
          "key": "webrick",
          "label": "webrick",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:webrick/"
        },
        {
          "key": "xmlrpc",
          "label": "xmlrpc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:xmlrpc/"
        }
      ]
    },
    {
      "signature": "NEWS for Ruby 2.5.0",
      "score": 109.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "NEWS for Ruby 2.5.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f2_5_0.html",
          "description": "NEWS for Ruby 2.5.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストは ChangeLog ファイルか bugs.ruby-lang.org の issue を参照してください。\n\n== 2.4.0 以降の変更\n\n=== 言語仕様の変更\n\n  * トップレベルの定数参照を削除しました  11547\n  * do/end ブロック内部で rescue/else/ensure を書けるようになりました 12906\n  * 文字列の式展開内部の暗黙の to_s 呼び出しにも refinements が影響するようになりました 13812\n\n=== 組み込みクラスの更新\n\n  * Array\n    * Array#append を追加 12746\n    * Array#prepend を追加 12746\n\n  * Data\n    * 非推奨になりました。C拡張のベースクラスでしたが、Rubyレベルに公開するのをやめました。3072\n\n  * Exception\n    * Exception#full_message を追加 14141 [実験的]\n      例外の文字列表現を取得します。その文字列は捕捉されない例外をRubyが表示しているのと同じ方法でフォーマットされます。\n\n  * Dir\n    * Dir.glob :base というキーワード引数を追加しました 13056\n    * Dir.chdir (ブロックなしで呼び出した場合), Dir.open, Dir.new, Dir.mkdir, Dir.rmdir,\n      Dir.empty? はGVLを解放するようになりました\n    * Dir.children を追加  11302\n    * Dir.each_child を追加 11302\n\n  * Enumerable\n    * Enumerable#any?, Enumerable#all?, Enumerable#none?, Enumerable#one?\n      がブロックを省略して1つの引数を受け取ることができるようになりました 11286\n\n  * File\n    * File.open :newline オプションを指定するとテキストモードになります 13350\n    * File#path はFile::Constants::TMPFILE付きで開いたファイルに対して IOError を発生させます\n      13568\n    * File.stat, File.exist? など rb_stat() を使用しているメソッドではGVLを解放するようになりました\n      13941\n    * File.rename GVL を解放するようになりました 13951\n    * File::Stat#atime, File::Stat#mtime, File::Stat#ctime\n      Windows 8 以降でタイムスタンプの分数表現をサポートしました 13726\n    * File::Stat#ino, File.identical?\n      Windows 8.1 以降で、ReFSの128bitのinoをサポートしました 13731\n    * File.readable?, File.readable_real?, File.writable?, File.writable_real?,\n      File.executable?, File.executable_real?, File.mkfifo, File.readlink,\n      File.truncate, File#truncate, File.chmod, File.lchmod, File.chown,\n      File.lchown, File.unlink, File.utime, File.lstat はGVLを解放するようになりました\n    * File.lutime を追加  4052\n\n  * Hash\n    * Hash#transform_keys を追加 13583\n    * Hash#transform_keys! を追加 13583\n    * Hash#slice を追加 8499\n\n  * IO\n    * IO.copy_stream は copy_file_range(2) を使うようになりました。また、その実装が使えない場合は他の実装へフォールバックするようにしました 13867\n    * IO#pread を追加 4532\n    * IO#pwrite を追加 4532\n    * IO#write 複数の引数を受け取れるようになりました 9323\n\n  * IOError\n    * IO#close 以前は\"stream closed\"というメッセージの例外が発生していましたが、\"stream closed in another thread\"というメッセージに改良しました。\n      このメッセージはユーザーにとってわかりやすいでしょう。 13405\n\n  * Integer\n    * Integer#round, Integer#floor, Integer#ceil, Integer#truncate は常に Integer を返すようになりました\n      13420\n    * Integer#pow を追加 12508 11003\n    * Integer#allbits?, Integer#anybits?, Integer#nobits? を追加 12753\n    * Integer.sqrt を追加 13219\n\n  * Kernel\n    * Object#yield_self を追加  6721\n    * Kernel.#pp をrequireなしで使えるようにしました  14123\n    * Kernel.#warn :uplevel というキーワード引数を追加しました  12882\n\n  * Method\n    * Method#=== は Proc#===と同じようにMethod#callを呼び出します 14142\n\n  * Module\n    * Module#attr, Module#attr_accessor, Module#attr_reader, Module#attr_writer はパブリックメソッドになりました 14132\n    * Module#define_method, Module#alias_method, Module#undef_method, Module#remove_method はパブリックメソッドになりました 14133\n\n  * Numeric\n    * Numeric#step は > で0と比較できない引数が与えられたときcoerce内部で発生したエラーを隠蔽しないようになりました。\n      7688\n    * 数値の比較メソッド(<,<=,>=,>)は、coerceメソッドで発生した例外を隠蔽しなくなりました。\n      coerceがnilを返す場合、変換は不可能です。7688\n\n  * Process\n    * getrusage(2) が存在する場合 Process.#times の精度を改良しました 11952\n    * Process.last_status を追加。$? と同じです 14043\n\n  * Range\n    * Range.new no longer hides exceptions when comparing begin and\n      end with #<=> and raise a \"bad value for range\" ArgumentError\n      but instead lets the exception from the #<=> call go through.\n      7688\n\n  * Regexp\n    *  Onigmo 6.1.3-669ac9997619954c298da971fcfacccf36909d05 に更新\n      * 非包含オペレータ(absence operator)をサポート https://github.com/k-takata/Onigmo/issues/82\n      * Support new 5 emoji-related Unicode character properties\n\n  * RubyVM::InstructionSequence\n    * RubyVM::InstructionSequence#each_child を追加\n    * RubyVM::InstructionSequence#trace_points を追加\n\n  * String\n    * String#-@ はフリーズされていない文字列の重複を排除します。\n      互換性のため、既にフリーズされている文字列には何もしません。  13077\n    * -\"literal\" (String#-@) は同じオブジェクトを返すように最適化しました。\n      (Ruby 2.1以降の \"literal\".freeze と同じです) 13295\n    * String#casecmp, String#casecmp? に文字列でない引数を与えた場合、TypeErrorを発生させずにnilを返すようにしました\n      13312\n    * String#start_with? は正規表現を受け取れるようになりました 13712\n    * String#delete_prefix, String#delete_prefix! を追加 12694\n    * String#delete_suffix, String#delete_suffix! を追加 13665\n    * String#each_grapheme_cluster, String#grapheme_clusters を追加。結合文字を列挙します。\n      13780\n    * String#undump を追加。String#dumpで出力した文字列を元に戻します。12275\n\n  * Struct\n    * Struct.new は :keyword_init というキーワード引数を受け取り、メンバーをキーワード引数で初期化できるようになりました。\n      11925\n\n  * Regexp/String: Unicodeのバージョンを 9.0.0 から 10.0.0 に更新しました。 13685\n\n  * Thread\n    * Thread#name= で設定した名前が Windows 10 で見えるようになりました\n    * Thread#fetch を追加 13009\n    * Thread.report_on_exception のデフォルト値がtrueになりました。\n      スレッドの終了時に捕捉していない例外の情報を $stderr に出力します。 14143\n\n  * Time\n    * Time.at は第2引数の精度を指定するための第3引数を指定できるようになりました\n      13919\n\n  * KeyError\n    * KeyError#receiver を追加 12063\n    * KeyError#key を追加 12063\n\n  * FrozenError\n    * 新しい例外クラスです 13224\n\n=== 標準添付ライブラリの更新\n\n  * bigdecimal\n    * BigDecimal 1.3.4 に更新\n    * BigDecimal::VERSION を追加\n    * 非推奨(1.4.0で削除予定)\n      * BigDecimal.new\n      * BigDecimal.ver\n    * BigDecimal#clone と BigDecimal#dup は新しいインスタンスを作らなくなりました。selfを返します。\n\n  * coverage\n    * ブランチカバレッジとメソッドカバレッジの計測をサポートしました 13901\n      この新機能と一緒にテストスイートを実行すると、テストによって実行された条件分岐やメソッドについて知ることができます。\n      テストスイートのカバレッジをより厳密に評価することができます。\n      Coverage.start に与えるオプションによって計測する対象を指定することができます。\n//emlist[][ruby]{\nCoverage.start(lines: true, branches: true, methods: true)\n//}\n    * Rubyで書かれたファイルをいくつか読み込んでから、Coverage.result を使って結果を取得することができます。\n//emlist[][ruby]{\nCoverage.result\n#=> { \"/path/to/file.rb\"=>\n#     { :lines => [1, 2, 0, nil, ...],\n#       :branches =>\n#         { [:if, 0, 2, 1, 6, 4] =>\n#             { [:then, 1, 3, 2, 3, 8] => 0,\n#               [:else, 2, 5, 2, 5, 8] => 2\n#             }\n#         },\n#       :methods => {\n#          [Object, :foo, 1, 0, 7, 3] => 2\n#       }\n#     }\n#   }\n//}\n    * ラインカバレッジについての変更はありません。ラインカバレッジの結果はただの数値の配列です。\n      数値の入っている要素は実行された行を表し、その数値は実行回数を意味します。\n      nilの入った要素はカバレッジに関係のない行を意味します。\n    * ブランチカバレッジの結果はこのようになります:\n//emlist{\n        { (jump base) => { (jump target) => (counter) } }\n//}\n    * jump base と jump target にはフォーマットがあります:\n//emlist{\n        [type, unique-id, start lineno, start column, end lineno, end column]\n//}\n    * 例えば [:if, 0, 2, 1, 6, 4] は、if式が2行目の1桁目から6行目の4桁目まで、と読みます。\n      [:then, 1, 3, 2, 3, 8] は、then節が3行目の2桁目から3行目の8桁目まで、と読みます。\n      なお、行番号は1から始まり、桁番号は0から始まります。\n      よって、上記の例ではifから最初のthen節は実行されておらず、else節は2回実行されています。\n    * メソッドカバレッジの場合:\n//emlist{\n        { (method key) => (counter) }\n//}\n    * メソッドキーにはフォーマットがあります:\n//emlist{\n        [class, method-name, start lineno, start column, end lineno, end column]\n//}\n    * 例えば [Object, :foo, 1, 0, 7, 3] は Object#foo は1行目の0桁目から7行目の3桁目までで定義されている、と読みます。\n      上記の例では Object#foo は2回実行されています。\n    * Note: 互換性のため、Coverage.start にオプションを与えない場合は、ラインカバレッジのみを計測します。\n      また Coverage.result も旧フォーマットを返します。\n//emlist[][ruby]{\nCoverage.result\n#=> { \"/path/to/file.rb\"=> [1, 2, 0, nil, ...] }\n//}\n\n  * drb\n    * ACL::ACLEntry.new は IPAddr::InvalidPrefixError を抑制しなくなりました\n\n  * erb\n    * ERB#result_with_hash を追加。\n      ハッシュで与えられたローカル変数とともにテンプレートを描画します。8631\n    * erbコマンドのテンプレートファイルのエンコーディングのデフォルトは、ASCII-8BITからUTF-8に変更されました。\n      14095\n    * トリムモードが指定されているときキャリッジリターンを正しくトリムするようにしました。\n      Windowsで重複した改行を削除するようになりました。5339 11464\n\n  * ipaddr\n    * IPAddr は不正なアドレスマスクを受けいれないようになりました 13399\n    * IPAddr#ipv4_compat, IPAddr#ipv4_compat? は非推奨になりました 13769\n    * IPAddr#prefix を追加\n    * IPAddr#loopback? を追加\n    * IPAddr#private? を追加 11666\n    * IPAddr#link_local? を追加 10912\n\n  * irb\n    * バックトレースとエラーメッセージを逆順で表示するようにしました 8661 [実験的]\n    * binding.irb を実行したときに自動的に irb を読み込みます 13099 [実験的]\n    * binding.irb を実行したときに周囲のソースコードを表示します 14124\n\n  * matrix\n    * Matrix.combine, Matrix#combine を追加 10903\n    * Matrix#hadamard_product, Matrix#entrywise_product を追加\n\n  * net/http\n    * Net::HTTP.new が no_proxy パラメータをサポートしました 11195\n    * Net::HTTP#min_version Net::HTTP#max_version を追加 9450\n    * HTTP status を表すクラスをいくつか追加しました\n    * Net::HTTP::STATUS_CODES を追加。HTTPのステータスコードから文字列表現へのハッシュです。 12935\n    * Net::HTTP#proxy_user, Net::HTTP#proxy_pass は 環境変数 http_proxy を反映するようになりました。\n      ただし、システムの環境変数がマルチユーザーセーフである場合のみ。12921\n\n  * open-uri\n    * URI.open を open-uri の Kernel.open の別名として追加しました。\n      将来 open-uri の Kernel.open は非推奨になります。\n\n  * openssl\n    * Ruby/OpenSSLのバージョンを2.0から2.1に更新しました。変更内容はext/openssl/History.mdの\"Version 2.1.0\"セクションにあります。\n\n  * pathname\n    * Pathname#glob を追加 7360\n\n  * psych\n    * Psych 3.0.2 に更新しました\n      * Convert fallback option to a keyword argument\n        https://github.com/ruby/psych/pull/342\n      * Add :symbolize_names option to Psych.load, Psych.safe_load like JSON.parse\n        https://github.com/ruby/psych/pull/333, https://github.com/ruby/psych/pull/337\n      * Add Psych::Handler#event_location\n        https://github.com/ruby/psych/pull/326\n      * Make frozen string literal = true\n        https://github.com/ruby/psych/pull/320\n      * Preserve time zone offset when deserializing times\n        https://github.com/ruby/psych/pull/316\n      * Remove deprecated method aliases for syck gem\n        https://github.com/ruby/psych/pull/312\n\n  * rbconfig\n    * RbConfig::LIMITS is added to provide the limits of C types.\n      This is available when rbconfig/sizeof is loaded.\n\n  * ripper\n    * Ripper::EXPR_BEG and so on for Ripper#state.\n    * Ripper#state を追加。スキャナーの状態を伝えるためです。13686\n\n  * rdoc\n    * RDoc 6.0.1 に更新\n      * Replace IRB based lexer with Ripper.\n        * https://github.com/ruby/rdoc/pull/512\n        * This much improves the speed of generating documents.\n        * It also facilitates supporting new syntax in the future.\n      * Support many new syntaxes of Ruby from the past few years.\n      * Use \"frozen_string_literal: true\".\n        This reduces document generation time by 5%.\n      * Support did_you_mean.\n\n  * rubygems\n    * Rubygems 2.7.3 に更新\n      * https://blog.rubygems.org/2017/11/28/2.7.3-released.html\n      * https://blog.rubygems.org/2017/11/08/2.7.2-released.html\n      * https://blog.rubygems.org/2017/11/03/2.7.1-released.html\n      * https://blog.rubygems.org/2017/11/01/2.7.0-released.html\n      * https://blog.rubygems.org/2017/10/09/2.6.14-released.html\n      * https://blog.rubygems.org/2017/08/27/2.6.13-released.html\n\n  * securerandom\n    * SecureRandom.alphanumeric を追加\n\n  * set\n    * Set#to_s を Set#inspect の別名として追加 13676\n    * Set#=== を Set#include? の別名として追加 13801\n    * Set#reset 6589\n\n  * stringio\n    * StringIO#write は複数の引数を受け取れるようになりました\n\n  * strscan\n    * StringScanner#size, StringScanner#captures, StringScanner#values_at を追加  836\n\n  * uri\n    * Relative path operations no longer collapse consecutive slashes to a single slash. 8352\n\n  * webrick\n    * Server Name Indication (SNI) サポートを追加 13729\n    * WEBrick::HTTPResponse#send_body_proc を追加 855\n    * RubyGem としてリリース 13173\n    * 意図しない振舞いを避けるため Kernel.#open を使用するのをやめました 14216\n\n  * zlib\n    * Zlib::GzipWriter#write は複数の引数を受け取れるようになりました\n\n=== 互換性 (機能追加とバグ修正以外)\n\n  * BasicSocket\n    * BasicSocket#read_nonblock と BasicSocket#write_nonblock で\n      副作用として O_NONBLOCK フラグをセットするのをやめました(Linux のみ)\n      13362\n\n  * Random\n    * Random.raw_seed は Random.urandom に名前を変更しました。\n      シードを必要としない用途で有用です。9569\n\n  * Socket\n    * Socket::Ifaddr#vhid を追加 13803\n\n  * ConditionVariable, Queue, SizedQueue を速度向上のため再実装しました。\n    これらのクラスはStructのサブクラスではなくなりました。13552\n\n=== 標準添付ライブラリの互換性(機能追加とバグ修正を除く)\n\n  * Gemification\n    * 以下の標準添付ライブラリをdefault gemsに変更しました\n      * cmath\n      * csv\n      * date\n      * dbm\n      * etc\n      * fcntl\n      * fiddle\n      * fileutils\n      * gdbm\n      * ipaddr\n      * scanf\n      * sdbm\n      * stringio\n      * strscan\n      * webrick\n      * zlib\n\n  * Logger\n    * Logger.new(\"| command\") は意図せず、コマンドを実行していましたが、禁止されました。\n      Logger#initialize の引数は仕様としてファイル名としてのみ扱うようになりました。\n      14212\n\n  * Net::HTTP\n    * Net::HTTP#start の第3引数のデフォルト値を :ENV にしました。 13351\n      これを避けるには明示的に nil を与えてください。\n\n  * mathn.rb\n    * 標準添付ライブラリから削除しました 10169\n\n  * Rubygems\n    * \"ubygems.rb\" というファイルを標準添付ライブラリから削除しました。Ruby 1.9 から不要でした。\n\n=== C APIの更新\n\n=== Supported platform の変更\n\n  * NaClサポートを削除しました\n    * https://bugs.chromium.org/p/chromium/issues/detail?id=239656#c160\n\n=== 実装の改善\n\n  * (これは「ユーザーに見える機能の変更」ではないが) Hashクラスのhashメソッドのアルゴリズムを SipHash13 にしました\n    13017\n\n  * SecureRandom が OpenSSL の提供する乱数ソースよりもOSの提供する乱数ソースを優先するようにしました 9569\n\n  * Mutex をより小さくより速く書き直しました 13517\n\n  * lazy Proc allocation というテクニックでブロックをメソッドの引数として渡したときの性能が向上しました\n    14045\n\n  * TracePointのためにtrace命令の変わりに命令の動的書き換えを使用するようにしました\n    14104\n\n  * ERB がテンプレートから生成するコードはRuby 2.4 よりも2倍速くなりました\n\n=== その他の変更\n\n  * $stderrが変更されておらず出力先がttyの場合、バックトレースとエラーの表示される順序を逆順にしました。\n    14140 [実験的]\n\n  * $stderrが変更されておらず出力先がttyの場合、エラーメッセージを太字と下線で装飾するようにしました。\n    14140 [実験的]\n\n  * configure オプション --with-ext はその引数を強制できるようになりました。\n    例えば ./configure --with-ext=openssl,+ を実行すると、openssl は必ずビルドされた状態になることが保証されます。\n    その他の拡張ライブラリは、デフォルトの挙動となります。もし、opensslのビルドに失敗した場合は、全体のビルドが失敗します。\n    もし \",+\" を末尾に付けない場合は、openssl 以外はビルドされません。13302",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Array/"
        },
        {
          "key": "BasicSocket",
          "label": "BasicSocket",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:BasicSocket/"
        },
        {
          "key": "ConditionVariable",
          "label": "ConditionVariable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ConditionVariable/"
        },
        {
          "key": "Data",
          "label": "Data",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Data/"
        },
        {
          "key": "Dir",
          "label": "Dir",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Dir/"
        },
        {
          "key": "ERB",
          "label": "ERB",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ERB/"
        },
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerable/"
        },
        {
          "key": "Exception",
          "label": "Exception",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Exception/"
        },
        {
          "key": "File",
          "label": "File",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:File/"
        },
        {
          "key": "FrozenError",
          "label": "FrozenError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:FrozenError/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Hash/"
        },
        {
          "key": "IO",
          "label": "IO",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IO/"
        },
        {
          "key": "IOError",
          "label": "IOError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IOError/"
        },
        {
          "key": "Integer",
          "label": "Integer",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Integer/"
        },
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Kernel/"
        },
        {
          "key": "KeyError",
          "label": "KeyError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:KeyError/"
        },
        {
          "key": "Logger",
          "label": "Logger",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Logger/"
        },
        {
          "key": "Method",
          "label": "Method",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Method/"
        },
        {
          "key": "Module",
          "label": "Module",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Module/"
        },
        {
          "key": "Mutex",
          "label": "Mutex",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Mutex/"
        },
        {
          "key": "Net::HTTP",
          "label": "Net::HTTP",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Net%3A%3AHTTP/"
        },
        {
          "key": "Numeric",
          "label": "Numeric",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Numeric/"
        },
        {
          "key": "OpenSSL",
          "label": "OpenSSL",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:OpenSSL/"
        },
        {
          "key": "Process",
          "label": "Process",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Process/"
        },
        {
          "key": "Queue",
          "label": "Queue",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Queue/"
        },
        {
          "key": "Random",
          "label": "Random",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Random/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Range/"
        },
        {
          "key": "Regexp",
          "label": "Regexp",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Regexp/"
        },
        {
          "key": "RubyVM::InstructionSequence",
          "label": "RubyVM::InstructionSequence",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RubyVM%3A%3AInstructionSequence/"
        },
        {
          "key": "SecureRandom",
          "label": "SecureRandom",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:SecureRandom/"
        },
        {
          "key": "SizedQueue",
          "label": "SizedQueue",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:SizedQueue/"
        },
        {
          "key": "Socket",
          "label": "Socket",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Socket/"
        },
        {
          "key": "String",
          "label": "String",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:String/"
        },
        {
          "key": "Struct",
          "label": "Struct",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Struct/"
        },
        {
          "key": "Thread",
          "label": "Thread",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Thread/"
        },
        {
          "key": "Time",
          "label": "Time",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Time/"
        },
        {
          "key": "TracePoint",
          "label": "TracePoint",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:TracePoint/"
        },
        {
          "key": "bigdecimal",
          "label": "bigdecimal",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:bigdecimal/"
        },
        {
          "key": "coverage",
          "label": "coverage",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:coverage/"
        },
        {
          "key": "drb",
          "label": "drb",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:drb/"
        },
        {
          "key": "erb",
          "label": "erb",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:erb/"
        },
        {
          "key": "ipaddr",
          "label": "ipaddr",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ipaddr/"
        },
        {
          "key": "irb",
          "label": "irb",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:irb/"
        },
        {
          "key": "matrix",
          "label": "matrix",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:matrix/"
        },
        {
          "key": "net/http",
          "label": "net/http",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:net%2Fhttp/"
        },
        {
          "key": "open-uri",
          "label": "open-uri",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:open-uri/"
        },
        {
          "key": "openssl",
          "label": "openssl",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:openssl/"
        },
        {
          "key": "pathname",
          "label": "pathname",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:pathname/"
        },
        {
          "key": "psych",
          "label": "psych",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:psych/"
        },
        {
          "key": "rbconfig",
          "label": "rbconfig",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rbconfig/"
        },
        {
          "key": "rdoc",
          "label": "rdoc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rdoc/"
        },
        {
          "key": "ripper",
          "label": "ripper",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ripper/"
        },
        {
          "key": "rubygems",
          "label": "rubygems",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rubygems/"
        },
        {
          "key": "securerandom",
          "label": "securerandom",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:securerandom/"
        },
        {
          "key": "set",
          "label": "set",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:set/"
        },
        {
          "key": "stringio",
          "label": "stringio",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:stringio/"
        },
        {
          "key": "strscan",
          "label": "strscan",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:strscan/"
        },
        {
          "key": "uri",
          "label": "uri",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:uri/"
        },
        {
          "key": "webrick",
          "label": "webrick",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:webrick/"
        },
        {
          "key": "zlib",
          "label": "zlib",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:zlib/"
        }
      ]
    },
    {
      "signature": "NEWS for Ruby 2.7.0",
      "score": 109.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "NEWS for Ruby 2.7.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f2_7_0.html",
          "description": "NEWS for Ruby 2.7.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストは ChangeLog ファイルか bugs.ruby-lang.org の issue を参照してください。\n\n== 2.6.0 以降の変更\n\n=== 言語仕様の変更\n\n==== パターンマッチ\n\n  * パターンマッチが実験的機能として導入されました。 14912\n\n//emlist[][ruby]{\ncase [0, [1, 2, 3]]\nin [a, [b, *c]]\n  p a #=> 0\n  p b #=> 1\n  p c #=> [2, 3]\nend\n//}\n\n//emlist[][ruby]{\ncase {a: 0, b: 1}\nin {a: 0, x: 1}\n  :unreachable\nin {a: 0, b: var}\n  p var #=> 1\nend\n//}\n\n//emlist[][ruby]{\ncase -1\nin 0 then :unreachable\nin 1 then :unreachable\nend #=> NoMatchingPatternError\n//}\n\n//emlist{\njson = <<END\n{\n  \"name\": \"Alice\",\n  \"age\": 30,\n  \"children\": [{ \"name\": \"Bob\", \"age\": 2 }]\n}\nEND\n\nJSON.parse(json, symbolize_names: true) in {name: \"Alice\", children: [{name: name, age: age}]}\n\np name #=> \"Bob\"\np age  #=> 2\n\nJSON.parse(json, symbolize_names: true) in {name: \"Alice\", children: [{name: \"Charlie\", age: age}]}\n#=> NoMatchingPatternError\n//}\n\n  * 詳細は https://speakerdeck.com/k_tsj/pattern-matching-new-feature-in-ruby-2-dot-7 のスライドを参照してください。\n  * スライドは少し古い内容になっていることに注意してください。\n\n  * パターンマッチに対する警告は「-W:no-experimental」オプションで抑制できます。\n\n==== 3.0 に向けてのキーワード引数の仕様変更\n\n  * キーワード引数と位置引数の自動変換は自動変換が非推奨となりました。\n    この変換はRuby 3で除去される予定です。 14183\n\n  * メソッド呼び出しにおいて最後の引数としてハッシュオブジェクトを渡し、\n    他にキーワード引数を渡さず、かつ、呼ばれたメソッドがキーワード引数を\n    受け取るとき、警告が表示されます。キーワード引数として扱いたい場合は、\n    明示的にdouble splat演算子（**）を足すことで警告を回避できます。\n    このように書けばRuby 3でも同じ意味で動きます。\n\n//emlist[][ruby]{\ndef foo(key: 42); end; foo({key: 42})   # warned\ndef foo(**kw);    end; foo({key: 42})   # warned\ndef foo(key: 42); end; foo(**{key: 42}) # OK\ndef foo(**kw);    end; foo(**{key: 42}) # OK\n//}\n\n  * キーワード引数を受け取るメソッドにキーワード引数を渡すが、必須引数\n    が不足している場合に、キーワード引数は最後の必須引数として解釈され、\n    警告が表示されます。警告を回避するには、キーワードではなく明示的に\n    ハッシュとして渡してください。\n    このように書けばRuby 3でも同じ意味で動きます。\n\n//emlist[][ruby]{\ndef foo(h, **kw); end; foo(key: 42)      # warned\ndef foo(h, key: 42); end; foo(key: 42)   # warned\ndef foo(h, **kw); end; foo({key: 42})    # OK\ndef foo(h, key: 42); end; foo({key: 42}) # OK\n//}\n\n  * メソッドがキーワード引数を受け取るがdouble splat引数は受け取らず、\n    かつ、メソッド呼び出しでSymbolと非Symbolの混ざったハッシュを渡す\n    （もしくはハッシュをdouble splatでキーワードとして渡す）場合、\n    ハッシュは分割され、警告が表示されます。Ruby 3でもハッシュの分割を\n    続けたい場合は、呼び出し側で明示的に分けるようにしてください。\n\n//emlist[][ruby]{\ndef foo(h={}, key: 42); end; foo(\"key\" => 43, key: 42)   # warned\ndef foo(h={}, key: 42); end; foo({\"key\" => 43, key: 42}) # warned\ndef foo(h={}, key: 42); end; foo({\"key\" => 43}, key: 42) # OK\n//}\n\n  * メソッドがキーワード引数を受け取らず、呼び出し側でキーワード引数を\n    渡した場合、ハッシュの引数としてみなされる挙動は変わらず、警告も\n    表示されません。Ruby 3でもこのコードは動き続ける予定です。\n\n//emlist[][ruby]{\ndef foo(opt={});  end; foo( key: 42 )   # OK\n//}\n\n  * メソッドが任意のキーワードを受け取る場合、非Symbolがキーワード引数のキー\n    として許容されるようになります。 14183\n\n  * 2.6.0で非Symbolがキーワード引数のキーとして許容されなくなりましたが、\n    再び許容されるようになりました。 15658\n\n//emlist[][ruby]{\ndef foo(**kw); p kw; end; foo(\"str\" => 1) #=> {\"str\"=>1}\n//}\n\n  * メソッド定義で**nilと書くことで、このメソッドがキーワードを\n    受け取らないことを明示できるようになりました。このようなメソッドを\n    キーワード引数付きで呼び出すとArgumentErrorになります。 14183\n\n//emlist[][ruby]{\ndef foo(h, **nil); end; foo(key: 1)       # ArgumentError\ndef foo(h, **nil); end; foo(**{key: 1})   # ArgumentError\ndef foo(h, **nil); end; foo(\"str\" => 1)   # ArgumentError\ndef foo(h, **nil); end; foo({key: 1})     # OK\ndef foo(h, **nil); end; foo({\"str\" => 1}) # OK\n//}\n\n  * キーワード引数を受け取らないメソッドに対して空のハッシュを\n    double splatで渡すとき、空のハッシュが渡る挙動はなくなりました。\n    ただし、必須引数が不足する場合は空のハッシュが渡され、警告が表示されます。\n    ハッシュの引数として渡したい場合はdouble splatをつけないようにしてください。\n    14183\n\n//emlist[][ruby]{\nh = {}; def foo(*a) a end; foo(**h) # []\nh = {}; def foo(a) a end; foo(**h)  # {} and warning\nh = {}; def foo(*a) a end; foo(h)   # [{}]\nh = {}; def foo(a) a end; foo(h)    # {}\n//}\n\n  * 非推奨に関する警告を止めたい場合は、コマンドライン引数に\n    「-W:no-deprecated」を指定するか、コードの中で\n    「Warning[:deprecated] = false」\n    としてください。\n\n==== 番号指定パラメータ\n\n  * 番号指定パラメータ(Numbered parameters)がデフォルトのブロックの仮引数として\n    導入されました。 4475\n\n//emlist[][ruby]{\n[1, 2, 10].map { _1.to_s(16) }    #=> [\"1\", \"2\", \"a\"]\n[[1, 2], [3, 4]].map { _1 + _2 }  #=> [3, 7]\n//}\n\n  * 「_1」などはまだローカル変数名として使えて、ローカル変数が優先されますが、\n    警告が表示されます。\n\n  _1 = 0            #=> warning: `_1' is reserved for numbered parameter; consider another name\n  [1].each { p _1 } # prints 0 instead of 1\n\n==== ブロックなしの proc/lambda が deprecated\n\n  * ブロック付きで呼び出されたメソッドの中で、ブロックなしでProc.newやKernel#procを\n    呼び出すと警告が表示されるようになりました。\n\n//emlist[][ruby]{\ndef foo\n  proc\nend\nfoo { puts \"Hello\" } #=> warning: Capturing the given block using Kernel#proc is deprecated; use `&block` instead\n//}\n\n  * 非推奨に関する警告を止めたい場合は、コマンドライン引数に\n    「-W:no-deprecated」を指定するか、コードの中で\n    「Warning[:deprecated] = false」\n    としてください。\n\n  * ブロック付きで呼び出されたメソッドの中で、Kernel#lambdaをブロックなしで呼び出すと\n    例外が発生するようになりました。\n\n//emlist[][ruby]{\ndef bar\n  lambda\nend\nbar { puts \"Hello\" } #=> tried to create Proc object without a block (ArgumentError)\n//}\n\n==== その他の変更\n\n  * 始端なしRangeが実験的に導入されました。\n    caseやComparable#clampや定数やDSLなどで便利かもしれません。\n    14799\n\n//emlist[][ruby]{\nary[..3]  # identical to ary[0..3]\n\ncase RUBY_VERSION\nwhen ...\"2.4\" then puts \"EOL\"\n# ...\nend\n\nage.clamp(..100)\n\nwhere(sales: ..100)\n//}\n\n  * 「$;」にnil以外の値を設定すると警告が出るようになりました。 14240\n    nil以外の時はString#splitで参照した時も警告が出ます。\n    この警告は「-W:no-deprecated」オプションで止められます。\n\n  * 「$,」にnil以外の値を設定すると警告が出るようになりました。 14240\n    nil以外の時はArray#joinで参照した時も警告が出ます。\n    この警告は「-W:no-deprecated」オプションで止められます。\n\n  * ヒアドキュメントの識別子の引用符は同じ行で閉じる必要があります。\n\n//emlist{\n<<\"EOS\n\" # This had been warned since 2.4; Now it raises a SyntaxError\nEOS\n//}\n\n  * フリップフロップが非推奨になったのが元に戻されました。 5400\n\n  * 以下のような場所にコメントを書けるようになりました。\n\n//emlist[][ruby]{\nfoo\n  # .bar\n  .baz # => foo.baz\n//}\n\n  * リテラルの「self」をレシーバーとしたプライベートメソッド呼び出しが\n    できるようになりました。 11297 16123\n\n  * 多重代入でのrescue修飾子が単一の代入と同じ振る舞いになりました。 8279\n\n//emlist[][ruby]{\na, b = raise rescue [1, 2]\n# Previously parsed as: (a, b = raise) rescue [1, 2]\n# Now parsed as:         a, b = (raise rescue [1, 2])\n//}\n\n  * 特異クラス構文での yield は警告を表示するようになりました。\n    これは deprecated です。 15575\n    この警告は「-W:no-deprecated」オプションで止められます。\n\n//emlist[][ruby]{\ndef foo\n  class << Object.new\n    yield #=> warning: `yield' in class syntax will not be supported from Ruby 3.0. 15575\n  end\nend\nfoo { p :ok }\n//}\n\n  * 引数を転送する記法「(...)」が導入されました。 16253\n    * foo の全ての引数(キーワード引数やブロックを含む)を bar に転送します。\n      注意点として括弧は必須です。「bar ...」は終端なし Range と解釈されます。\n\n//emlist[][ruby]{\ndef foo(...)\n  bar(...)\nend\n//}\n\n  * 「$SAFE」の参照や代入は警告が表示されるようになりました。\n    Ruby 3.0 で「$SAFE」は普通のグローバル変数になる予定です。 16131\n\n  * Object#taint,Object#untaint,Object#trust,Object#untrustと関連する\n    C の関数は何もしなくなりました。(全てのオブジェクトは untainted 扱いです。)\n    verbose モードでは警告が表示されます。\n    この警告は Ruby 3.0 では verbose モードでなくても表示され、Ruby 3.2 で削除される\n    予定です。 16131\n\n  * Object#methodとModule#instance_methodがrefinementsを考慮するようになりました。 15373\n\n=== コマンドラインオプション\n\n==== 警告オプション\n\nカテゴリ化された警告を管理するために「-W」オプションが「:」を続けられるように\n拡張されました。 16345 16420\n\n  * 非推奨警告を止める例:\n\n//emlist{\n$ ruby -e '$; = \"\"'\n-e:1: warning: `$;' is deprecated\n\n$ ruby -W:no-deprecated -e '$; = //'\n//}\n\n  * RUBYOPT環境変数での使用例:\n\n//emlist{\n$ RUBYOPT=-W:no-deprecated ruby -e '$; = //'\n//}\n\n  * 実験的機能の警告を止める例:\n\n//emlist{\n$ ruby -e '0 in a'\n-e:1: warning: Pattern matching is experimental, and the behavior may change in future versions of Ruby!\n\n$ ruby -W:no-experimental -e '0 in a'\n//}\n\n  * RUBYOPTで両方止めるにはスペース区切りで指定します:\n\n//emlist{\n$ RUBYOPT='-W:no-deprecated -W:no-experimental' ruby -e '($; = \"\") in a'\n//}\n\n組み込みクラスの更新のWarningも参照してください。\n\n=== 組み込みクラスの更新 (注目すべきもののみ)\n\n  * Array\n    * 新規メソッド\n      * Array#intersectionが追加されました。 16155\n      * Array#minmaxがEnumerable#minmaxより高速な実装として追加されました。 15929\n\n  * Comparable\n    * 変更されたメソッド\n      * Comparable#clampがRangeを引数として受け付けるようになりました。 14784\n\n//emlist[][ruby]{\n-1.clamp(0..2) #=> 0\n 1.clamp(0..2) #=> 1\n 3.clamp(0..2) #=> 2\n# With beginless and endless ranges:\n-1.clamp(0..)  #=> 0\n 3.clamp(..2)  #=> 2\n//}\n\n  * Complex\n    * 新規メソッド\n      * Complex#<=>が追加されました。\n        その結果、「0 <=> 0i」がNoMethodErrorを発生しなくなりました。 15857\n\n  * Dir\n    * 変更されたメソッド\n      * Dir.globとDir.[]  がNUL文字区切りのグロブパターンを受け付けなくなりました。\n        代わりにArrayを使ってください。 14643\n\n  * Encoding\n    * 新規エンコーディング\n      * CESU-8が追加されました。 15931\n\n  * Enumerable\n    * 新規メソッド\n      * Enumerable#filter_mapが追加されました。 15323\n      * Enumerable#tallyが追加されました。 11076\n//emlist[Enumerable#filter_map][ruby]{\n[1, 2, 3].filter_map {|x| x.odd? ? x.to_s : nil } #=> [\"1\", \"3\"]\n//}\n//emlist[Enumerable#tally][ruby]{\n[\"A\", \"B\", \"C\", \"B\", \"A\"].tally #=> {\"A\"=>2, \"B\"=>2, \"C\"=>1}\n//}\n\n  * Enumerator\n    * 新規メソッド\n      * 任意のデータ変換からEnumeratorを作成するための\n        Enumerator.produceメソッドが追加されました。 14781\n      * lazy enumerator から lazy ではない enumerator を生成する\n        Enumerator::Lazy#eagerメソッドが追加されました。 15901\n      * Enumerator::Yielder#to_procメソッドが追加され、Yielder オブジェクトを\n        直接他のメソッドのブロック引数として渡せるようになりました。 15618\n      * Enumerator::Lazy#with_indexメソッドが追加され、\n        以前のlazyではないEnumerator#with_indexのデフォルト実装から\n\tlazyになりました。7877\n\n//emlist[Enumerator.produce][ruby]{\nrequire \"date\"\ndates = Enumerator.produce(Date.today, &:succ) #=> infinite sequence of dates\ndates.detect(&:tuesday?) #=> next Tuesday\n//}\n//emlist[Enumerator::Lazy#eager][ruby]{\na = %w(foo bar baz)\ne = a.lazy.map {|x| x.upcase }.map {|x| x + \"!\" }.eager\np e.class               #=> Enumerator\np e.map {|x| x + \"?\" }  #=> [\"FOO!?\", \"BAR!?\", \"BAZ!?\"]\n//}\n//emlist[Enumerator::Lazy#with_index][ruby]{\n(\"a\"..).lazy.with_index(1) { |it, index| puts \"#{index}:#{it}\" }.take(3).force\n# => 1:a\n#    2:b\n#    3:c\n//}\n\n  * Fiber\n    * 新規メソッド\n      * Fiber#raiseメソッドが追加され、Fiber#resumeのように\n        resumeして、さらに例外を発生させます。 10344\n\n  * File\n    * 新規メソッド\n      * パスが絶対パスかどうかをポータブルに判定するFile.absolute_path?メソッドが追加されました。 15868\n    * 変更されたメソッド\n      * Windows以外のプラットフォームでFile.extnameが「.」で終わる文字列に対して\n        「.」を返すようになりました。  15267\n\n//emlist[][ruby]{\nFile.extname(\"foo.\") #=> \".\"\n//}\n\n  * FrozenError\n    * 新規メソッド\n      * 変更しようとしたfreezeされたオブジェクトを返すFrozenError#receiverメソッドが\n        追加されました。FrozenErrorをRubyのコードで発生する時に設定できるように\n        FrozenError.newメソッドが :receiver オプションを受け付けるように\n        なりました。 15751\n\n  * GC\n    * 新規メソッド\n      * ヒープをコンパクションするGC.compactメソッドが追加されました。\n        このメソッドはヒープの生きているオブジェクトをコンパクションして、\n        ページ数を減らして、ヒープをCoW (copy-on-write)フレンドリーに\n        しようとします。 15626\n     *  アルゴリズムの詳細と注意点は\n        https://bugs.ruby-lang.org/issues/15626\n        を参照してください。\n\n  * IO\n    * 新規メソッド\n      * BOMをチェックして外部エンコーディングを設定する\n        IO#set_encoding_by_bomメソッドが追加されました。 15210\n\n  * Integer\n    * 変更されたメソッド\n      * Integer#[] がRangeを受け付けるようになりました。 8842\n\n//emlist[][ruby]{\n0b01001101[2, 4]  #=> 0b0011\n0b01001100[2..5]  #=> 0b0011\n0b01001100[2...6] #=> 0b0011\n#   ^^^^\n//}\n\n  * Method\n    * 変更されたメソッド\n      * Method#inspectで出てくる情報が増えました。 14145\n\n  * Module\n    * 新規メソッド\n      * 定数が定義された場所を取得するModule#const_source_location\n        メソッドが追加されました。 10771\n      * 通常の引数分解でキーワード引数を渡すようにメソッドに印をつける\n        Module#ruby2_keywordsを追加しました。\n        古いRubyと互換性のある方法で全ての引数を転送する時に使えます。 16154\n    * 変更されたメソッド\n      * Module#const_defined?のようにModule#autoload?が\n        inheritオプショナル引数を受け付けるようになりました。 15777\n      * Module#nameが常にfreezeされた文字列を返すようになりました。\n        同じModuleは常に同じStringを返します。\n        この変更は実験的です。 16150\n\n  * NilClass / TrueClass / FalseClass\n    * 変更されたメソッド\n      * NilClass#to_s, TrueClass#to_s, FalseClass#to_sが\n        常にfreezeされたStringを返すようになりました。\n        返り値のStringは常に同じインスタンスになります。\n        この変更は実験的です。 16150\n\n  * ObjectSpace::WeakMap\n    * 変更されたメソッド\n      * ObjectSpace::WeakMap#[]=がキーや値として特殊なオブジェクト(true,false,\n        nil,Symbolなど)を受け付けるようになりました。 16035\n\n  * Proc\n    * 新規メソッド\n      * 通常の引数分解でキーワード引数を渡すようにprocに印をつける\n        Proc#ruby2_keywordsを追加しました。\n        古いRubyと互換性のある方法で全ての引数を転送する時に使えます。 16404\n\n  * Range\n    * 新規メソッド\n      * Range#minmaxがEnumerable#minmaxより高速な実装として追加されました。\n        最大値にRange#maxと同じ値を返すようになりました。 15807\n\n    * 変更されたメソッド\n      * Range#===がString引数に対してもRange#cover?を使うようになりました。\n        (Ruby 2.6ではString以外の全ての型でRange#include?から変更されていました。)\n        15449\n\n  * RubyVM\n    * 削除されたメソッド\n      * RubyVM.resolve_feature_pathが$LOAD_PATH.resolve_feature_pathに移動しました。\n        15903 15230\n\n  * String\n    * Unicode\n      * Unicodeのバージョンと絵文字のバージョンが11.0.0から12.0.0に更新されました。 15321\n      * Unicodeのバージョンが12.1.0に更新されて\n        新元号「令和」を表す合字 U+32FF SQUARE ERA NAME REIWA\n        のサポートが追加されました。 15195\n      * Unicode絵文字のバージョンが12.1に更新されました。 16272\n\n  * Symbol\n    * 新規メソッド\n      * Symbol#start_with?とSymbol#end_with?が追加されました。 16348\n\n  * Time\n    * 新規メソッド\n      * Time#ceilが追加されました。 15772\n      * Time#floorが追加されました。 15653\n    * 変更されたメソッド\n      * Time#inspectがTime#to_sから分離されて、秒未満も\n        含まれるようになりました。 15958\n\n  * UnboundMethod\n    * 新規メソッド\n      * UnboundMethod#bind_callが追加されました。 15955\n      * 「umethod.bind_call(obj, ...)」は「umethod.bind(obj).call(...)」と\n        同じ意味です。\n        このイディオムはいくつかのライブラリでオーバーライドされたメソッドを\n        呼び出すのに使われています。\n        追加されたメソッドでは、中間のMethodオブジェクトを確保することなく\n        同じことができます。\n\n//emlist[][ruby]{\nclass Foo\n  def add_1(x)\n    x + 1\n  end\nend\nclass Bar < Foo\n  def add_1(x) # override\n    x + 2\n  end\nend\n\nobj = Bar.new\np obj.add_1(1) #=> 3\np Foo.instance_method(:add_1).bind(obj).call(1) #=> 2\np Foo.instance_method(:add_1).bind_call(obj, 1) #=> 2\n//}\n\n  * Warning\n    * 新規メソッド\n      * Warning.[] とWarning.[]=がいくつかのカテゴリ化された\n        警告を出すか止めるかを管理するために追加されました。 16345 16420\n\n  * $LOAD_PATH\n    * 新規メソッド\n      * $LOAD_PATH.resolve_feature_pathが追加されました。 15903 15230\n\n=== 標準添付ライブラリの更新 (注目すべきもののみ)\n\n  * Bundler\n    * Bundler 2.1.2 に更新されました。\n      https://github.com/bundler/bundler/releases/tag/v2.1.2\n\n  * CGI\n    * CGI.escapeHTMLが少なくとも1個のエスケープされた文字があるときに2~5倍速くなりました。\n      https://github.com/ruby/ruby/pull/2226\n\n  * CSV\n    * 3.1.2に更新されました。\n      https://github.com/ruby/csv/blob/master/NEWS.md\n\n  * Date\n    * Date.jisx0301, Date#jisx0301, Date.parseが新しい日本の年号を\n      サポートしました。 15742\n\n  * Delegator\n    * Object#DelegateClassがブロックを受け付けるようになり、\n      Class.newやStruct.newのように返り値のクラスのコンテキストで\n      module_evalするようになりました。\n\n  * ERB\n    * ERBのインスタンスをMarshalできないようになりました。\n\n  * IRB\n    * Pry gem に着想を得て、Binding#irbのソース表示、REPLの入力、\n      いくつかのコアクラスオブジェクトのinspect出力に\n      シンタックスハイライトが導入されました。\n    * Relineによって提供される複数行編集モードが導入されました。\n    * 補完の操作でドキュメントが表示されるようになりました。\n    * オートインデントと履歴の保存と読み込みがデフォルトで有効になりました。\n\n  * JSON\n    * 2.3.0に更新されました。\n\n  * Net::FTP\n    * 利用可能な拡張機能をチェックするためのNet::FTP#featuresと\n      有効/無効にするためのNet::FTP#optionが追加されました。 15964\n\n  * Net::HTTP\n    * Net::HTTP#startにTCP/IP接続のアドレスを置き換えるための\n      オプション引数ipaddrが追加されました。 5180\n\n  * Net::IMAP\n    * Server Name Indication (SNI) のサポートが追加されました。 15594\n\n  * open-uri\n    * Kernelモジュールでopen-uriのopenメソッドを使うと警告されるようになりました。\n      代わりにURI.openを使ってください。 15893\n    * メディアタイプ \"text/*\" のデフォルトの charset が ISO-8859-1 から UTF-8 に\n      なりました。 15933\n\n  * OptionParser\n    * 不明なオプションに対して \"Did you mean?\" が表示されるようになりました。 16256\n\n//emlist[test.rb][ruby]{\nrequire \"optparse\"\nOptionParser.new do |opts|\n  opts.on(\"-f\", \"--foo\", \"foo\") {|v| }\n  opts.on(\"-b\", \"--bar\", \"bar\") {|v| }\n  opts.on(\"-c\", \"--baz\", \"baz\") {|v| }\nend.parse!\n//}\n\n//emlist{\n$ ruby test.rb --baa\nTraceback (most recent call last):\ntest.rb:7:in `<main>': invalid option: --baa (OptionParser::InvalidOption)\nDid you mean?  baz\n               bar\n//}\n\n  * Pathname\n    * Pathname.globがbaseキーワード引数を受け付けるために\n      Dir.globに3引数を委譲するようになりました。 14405\n\n  * Racc\n    * 上流のレポジトリから1.4.15がマージされ、raccコマンドが追加されました。\n\n  * Reline\n    * readline標準ライブラリ互換でpure Ruby実装の新しい標準ライブラリです。\n      複数行編集機能も提供しています。\n\n  * REXML\n    * 3.2.3に更新されました。\n      https://github.com/ruby/rexml/blob/master/NEWS.md\n\n  * RSS\n    * RSS 0.2.8に更新されました。\n      https://github.com/ruby/rss/blob/master/NEWS.md\n\n  * RubyGems\n    * RubyGems 3.1.2に更新されました。\n      * https://github.com/rubygems/rubygems/releases/tag/v3.1.0\n      * https://github.com/rubygems/rubygems/releases/tag/v3.1.1\n      * https://github.com/rubygems/rubygems/releases/tag/v3.1.2\n\n  * StringScanner\n    * 1.0.3に更新されました。\n      https://github.com/ruby/strscan/blob/master/NEWS.md\n\n=== 互換性 (機能追加とバグ修正を除く)\n\n  * 以下のライブラリはもう bundled gem には含まれません。これらの機能を使う場合は対応する gem をインストールしてください。\n      * CMath (cmath gem)\n      * Scanf (scanf gem)\n      * Shell (shell gem)\n      * Synchronizer (sync gem)\n      * ThreadsWait (thwait gem)\n      * E2MM (e2mmap gem)\n\n  * Proc\n    * Proc#to_sの形式が変更されました。 16101\n\n  * Range\n    * Range#minmaxが最大値を決めるためにRangeをイテレートしていました。\n      今はRange#maxと同じアルゴリズムを使います。稀なケース(例えば\n      FloatやStringのRange)では違う結果になるかもしれません。 15807\n\n=== 標準添付ライブラリの互換性 (機能追加とバグ修正を除く)\n\n  * 以下のライブラリが新たにdefault gemsになりました。\n    * 以下のdefault gemがrubygems.orgで公開されました。\n      * benchmark\n      * cgi\n      * delegate\n      * getoptlong\n      * net-pop\n      * net-smtp\n      * open3\n      * pstore\n      * readline\n      * readline-ext\n      * singleton\n    * 以下のdefault gemはruby-coreでの変更のみで、まだrubygems.orgでは公開されていません。\n      * monitor\n      * observer\n      * timeout\n      * tracer\n      * uri\n      * yaml\n  * did_you_mean gemはbundled gemからdefault gemになりました。\n\n  * pathname\n    * Kernel#PathnameをPathnameを引数として呼んだとき、\n      新しいPathnameを生成するのではなく、引数をそのまま返すようになりました。\n      この変更で他のKernelのメソッドに近づきます。しかし返り値を変更して\n      引数を変更しないことを期待するコードが壊れるかもしれません。\n\n  * profile.rb, Profiler__\n    * 標準添付ライブラリから削除されました。\n      Ruby 2.0.0からメンテナンスされていませんでした。\n\n=== C API の更新\n\n  * 渡された最後の引数をキーワード引数として扱うかどうかを設定するための\n    多数の「*_kw」関数が追加されました。\n    キーワード引数分離の警告を避けて、Ruby 3での正しい振る舞いを確実にするため、\n    これらの関数に切り替える必要があるかもしれません。\n\n  * rb_scan_argsの書式文字列の「:」はキーワード引数として扱われるようになりました。\n    キーワード引数の代わりに位置引数のハッシュとして渡されるとdeprecated警告が\n    出ます。\n\n  * ANYARGSを使ったC API宣言はANYARGSを使わないように変更されました。\n    See https://github.com/ruby/ruby/pull/2404\n\n=== 実装の改善\n\n  * Fiber\n    * 以前のスタックキャッシュはファイバープールキャッシュに置き換えまれました。\n      ファイバープールは単一のメモリ領域に多数のスタックを確保します。\n      スタックアロケーションはO(log N)になり、ファイバー生成の償却計算量はO(1)です。\n      マイクロベンチマークでは約10倍のパフォーマンス改善が計測されました。\n      https://github.com/ruby/ruby/pull/2224\n    * 以下のように「--with-coroutine=」で別のコルーチン実装を選べるようになりました。\n\n//emlist{\n$ ./configure --with-coroutine=ucontext\n$ ./configure --with-coroutine=copy\n//}\n\n  * File\n    * File.realpathは多くのプラットフォームでrealpath(3)を使います。\n      これは大幅にパフォーマンスを改善します。 15797\n\n  * Hash\n    * 小さいHashオブジェクトのデータ構造が変わりました。 15602\n\n  * Monitor\n    * MonitorクラスがC拡張になりました。 16255\n\n  * Thread\n    * VMスタックのメモリ確保はネイティブスレッドのスタックと同時になり、\n      スレッドアロケーションのパフォーマンスが改善され、アロケーション関連の\n      失敗が減少します。\n      マイクロベンチマークでは約10倍のパフォーマンス改善が計測されました。\n\n  * JIT\n    * 最適化の仮定が無効になった時に、JITされたコードは最適化が少ないコードに\n      再コンパイルされます。\n    * メソッドをpureだとみなした時にメソッドのインライン化が実行されます。\n      この最適化はまだ実験的で、多くのメソッドはまだpureだとみなされていません。\n    * 「--jit-max-cache」のデフォルト値が1,000から100になりました。\n    * 「--jit-min-calls」のデフォルト値が5から10,000になりました。\n\n  * RubyVM\n    * 1.9から存在するコールサイトごとのメソッドキャッシュが改善されました。\n      キャッシュヒット率が89%から94%に上昇しました。\n      詳細はhttps://github.com/ruby/ruby/pull/2583を\n      参照してください。\n\n  * RubyVM::InstructionSequence\n    * RubyVM::InstructionSequence#to_binaryメソッドは\n      コンパイルされたバイナリを生成します。\n      そのバイナリサイズが削減されました。 16163\n\n=== その他の変更\n\n  * IA64アーキテクチャーサポートが削除されました。\n    テスト用のハードウェアを見つけることが難しく、ネイティブファイバーコードを\n    実装することが難しく、インタープリターに些細ではない複雑さをもたらして\n    いました。 15894\n\n  * コンパイラーにC99対応を要求するようになりました。 15347\n    * 使用している機能の詳細は\n      https://bugs.ruby-lang.org/projects/ruby-master/wiki/C99\n      を参照してください。\n\n  * Rubyの上流リポジトリはSubversionからGitに変わりました。\n    * https://git.ruby-lang.org/ruby.git\n    * RUBY_REVISIONのクラスはIntegerからStringに変わりました。\n    * RUBY_DESCRIPTIONはSubversionのリビジョンの代わりにGitのリビジョンが\n      入るようになりました。\n\n  * 「__builtin_」構文を使ったRubyによる組み込みメソッドを\n    サポートしました。 16254\n\n  * いくつかのメソッドは(trace_point.rbのように)「*.rb」で定義されています。\n    例えば、キーワード引数を受け取るメソッドの定義が簡単になります。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Array",
          "label": "Array",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Array/"
        },
        {
          "key": "Bundler",
          "label": "Bundler",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Bundler/"
        },
        {
          "key": "CGI",
          "label": "CGI",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:CGI/"
        },
        {
          "key": "CSV",
          "label": "CSV",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:CSV/"
        },
        {
          "key": "Comparable",
          "label": "Comparable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Comparable/"
        },
        {
          "key": "Comparable#clamp",
          "label": "Comparable#clamp",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Comparable%23clamp/"
        },
        {
          "key": "Complex",
          "label": "Complex",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Complex/"
        },
        {
          "key": "Date",
          "label": "Date",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Date/"
        },
        {
          "key": "Delegator",
          "label": "Delegator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Delegator/"
        },
        {
          "key": "Dir",
          "label": "Dir",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Dir/"
        },
        {
          "key": "ERB",
          "label": "ERB",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ERB/"
        },
        {
          "key": "Encoding",
          "label": "Encoding",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Encoding/"
        },
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerable/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        },
        {
          "key": "FalseClass",
          "label": "FalseClass",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:FalseClass/"
        },
        {
          "key": "Fiber",
          "label": "Fiber",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Fiber/"
        },
        {
          "key": "File",
          "label": "File",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:File/"
        },
        {
          "key": "FrozenError",
          "label": "FrozenError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:FrozenError/"
        },
        {
          "key": "GC",
          "label": "GC",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:GC/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Hash/"
        },
        {
          "key": "IO",
          "label": "IO",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IO/"
        },
        {
          "key": "IRB",
          "label": "IRB",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IRB/"
        },
        {
          "key": "Integer",
          "label": "Integer",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Integer/"
        },
        {
          "key": "JSON",
          "label": "JSON",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:JSON/"
        },
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Kernel/"
        },
        {
          "key": "Method",
          "label": "Method",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Method/"
        },
        {
          "key": "Module",
          "label": "Module",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Module/"
        },
        {
          "key": "Monitor",
          "label": "Monitor",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Monitor/"
        },
        {
          "key": "Net::FTP",
          "label": "Net::FTP",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Net%3A%3AFTP/"
        },
        {
          "key": "Net::HTTP",
          "label": "Net::HTTP",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Net%3A%3AHTTP/"
        },
        {
          "key": "Net::IMAP",
          "label": "Net::IMAP",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Net%3A%3AIMAP/"
        },
        {
          "key": "NilClass",
          "label": "NilClass",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:NilClass/"
        },
        {
          "key": "NoMethodError",
          "label": "NoMethodError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:NoMethodError/"
        },
        {
          "key": "ObjectSpace::WeakMap",
          "label": "ObjectSpace::WeakMap",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ObjectSpace%3A%3AWeakMap/"
        },
        {
          "key": "OptionParser",
          "label": "OptionParser",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:OptionParser/"
        },
        {
          "key": "Pathname",
          "label": "Pathname",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Pathname/"
        },
        {
          "key": "Proc",
          "label": "Proc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Proc/"
        },
        {
          "key": "REXML",
          "label": "REXML",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:REXML/"
        },
        {
          "key": "RSS",
          "label": "RSS",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RSS/"
        },
        {
          "key": "Racc",
          "label": "Racc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Racc/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Range/"
        },
        {
          "key": "Reline",
          "label": "Reline",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Reline/"
        },
        {
          "key": "RubyGems",
          "label": "RubyGems",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RubyGems/"
        },
        {
          "key": "RubyVM",
          "label": "RubyVM",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RubyVM/"
        },
        {
          "key": "RubyVM::InstructionSequence",
          "label": "RubyVM::InstructionSequence",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RubyVM%3A%3AInstructionSequence/"
        },
        {
          "key": "String",
          "label": "String",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:String/"
        },
        {
          "key": "StringScanner",
          "label": "StringScanner",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:StringScanner/"
        },
        {
          "key": "Symbol",
          "label": "Symbol",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Symbol/"
        },
        {
          "key": "Thread",
          "label": "Thread",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Thread/"
        },
        {
          "key": "Time",
          "label": "Time",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Time/"
        },
        {
          "key": "TrueClass",
          "label": "TrueClass",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:TrueClass/"
        },
        {
          "key": "UnboundMethod",
          "label": "UnboundMethod",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:UnboundMethod/"
        },
        {
          "key": "Warning",
          "label": "Warning",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Warning/"
        },
        {
          "key": "open-uri",
          "label": "open-uri",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:open-uri/"
        },
        {
          "key": "pathname",
          "label": "pathname",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:pathname/"
        }
      ]
    },
    {
      "signature": "Rubyで使われる記号の意味（正規表現の複雑な記号は除く）",
      "score": 109.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "Rubyで使われる記号の意味（正規表現の複雑な記号は除く） \nex　q　num　per　and　or　\nplus　minus　ast　slash　hat　sq　\nperiod　comma　langl　rangl　eq　tilde　\ndollar　at　under　lbrarbra　\nlbra2rbra2　lbra3rbra3　dq　colon　ac　\nbackslash　semicolon",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/symref.html",
          "description": "Rubyで使われる記号の意味（正規表現の複雑な記号は除く） \nex　q　num　per　and　or　\nplus　minus　ast　slash　hat　sq　\nperiod　comma　langl　rangl　eq　tilde　\ndollar　at　under　lbrarbra　\nlbra2rbra2　lbra3rbra3　dq　colon　ac　\nbackslash　semicolon\n\n===[a:ex] !\n\n:  !true\n\n not 演算子。d:spec/operator#notを参照。\n\n: 3 != 5\n\n 「等しくない」比較演算子。d:spec/operator#notを参照。\n\n: def xxx!\n\n 「!」はメソッド名の一部です。慣用的に、\n 同名の(! の無い)メソッドに比べてより破壊的な作用をもつメソッド(例: tr と tr!)で使われます。\n\n: /xxx/ !~ yyy\n\n 正規表現のメソッド =~ の否定。マッチが失敗したらtrueを返します。\n\n\n===[a:q] ?\n\n:  ?a\n\n d:spec/literal#string。長さ 1 の文字列。\n\n: def xx?\n\n この場合の「?」はメソッド名の一部分です。\n 慣用的に、真偽値を返すタイプのメソッドを示すために使われます。\n\n: xx ? yy : zz\n\n d:spec/operator#cond。三項演算子とも呼ばれます。if xx then yy else zz end と同じ意味です。\n\n: /xxx?/\n\n 正規表現の、量指定子(quantifiers)。直前の正規表現の 0 または 1 回の繰り返し。\n\n===[a:num] #\n\n: #コメント\n d:spec/lexical#comment。# から行末までがコメントになります。\n\n: xxx #=> 実行結果\n: xxx # => 実行結果\n\n 慣用的に実行結果を示すために使われるコメントの書き方。\n\n: #! ruby -Ks\n\n shebang。d:spec/rubycmd#shebangを参照。\n\n: # coding: utf-8\n\n マジックコメント。d:spec/m17n#magic_comment を参照。\n\n: \"a is #{a}\"\n\n d:spec/literal#exp\n//emlist{\n  a = 10\n  p \"a is #{a}\"  #=> \"a is 10\"\n//}\n\n: Range#each\n\n 説明文の中でのみ使われます。Ruby言語の要素ではありません。クラスのインスタンスメソッドであることを\n 簡単に表示するための表記法です。一方、クラスメソッドは「Range.new」のように「.」でつなぎます。\n\n===[a:per] %\n\n:  10 % 3\n\n 各クラスで定義された「%」演算子。整数クラスでは「剰余」を意味するメソッド。Numeric#%メソッドなどを参照。\n\n:  \"%04b\" % 10\n\n Stringクラスの「%」演算子。String#% メソッド。文字列中ではフォーマット指定子としても使われる。\n\n: %r{/etc/httpd/logs$} や %w[foo bar baz] ・・ %<文字><区切り文字><文字列><区切り文字>\n\n d:spec/literal#percent。<区切り文字>には任意の非英数字を用いることができ、\n <文字>によって式の意味が異なります。なお、最初の <区切り文字> が、左側の角括弧 [、丸括弧 (、\n ブレース {、小なり不等号 <、の場合は、対応する右側の括弧が終わりの <区切り文字> になります。\n//emlist{\n    p %r{/etc/httpd/logs$} #=> /\\/etc\\/httpd\\/logs$/\n    p %w[foo bar baz] #=> [\"foo\", \"bar\", \"baz\"]\n//}\n\n: %!STRING!\n\n % 記法の一種。d:spec/literal#percent。ダブルクォート文字列で %Q!STRING! と同じ。\n//emlist{\n    p %!nomad! #=> \"nomad\"\n//}\n\n: % ruby -e \"puts 'Hello'\"\n\n コマンドラインへの入力を示す。rubyスクリプト上で入力を行うには `command` や system(command) などと書く\n\n===[a:and] &\n\n: xxx & yyy\n\n 論理積演算子。または類似の演算を行うメソッド。\n//emlist{\n    p( 3 & 5 ) #=> 1 ・・ 二進数で 0011 & 0101 #=> 0001\n//}\n\n: a &= yyy\n\n 「&」メソッドの自己代入演算子。\n\n: xxx && yyy\n\n 「and」演算子。\n//emlist{\n    p( 3 && 5 ) #=> 5 ・・ 3 も 5 も真なので右の値を返す。\n//}\n\n: def xxx(&yyy) ・・ &がついた引数\n\n メソッド定義のブロック引数。d:spec/def#methodを参照。\n\n: xxx(&b)\n\n Proc オブジェクトをブロックとして使う。d:spec/call#block を参照。\n\n: xxx&.yyy\n\n safe navigation operator（通称「ぼっち演算子」）。xxx が nil でないときにメソッドyyyを呼び出す。spec/call を参照。\n\n===[a:or] |\n\n:  3 | 5\n\n 論理和演算子または類似のメソッド。二進数で 0011 | 0101 => 0111。\n\n:  3 || 5\n\n 「or」演算子。3 は真なので左の値を返す。\n\n: a ||= xxx\n\n 「||」演算子の自己代入演算子。a が 偽 か 未定義 なら a に xxx を代入する、という意味になります。\n//emlist{\n  a ||= :some\n  p a #=> some\n  a ||= :sec\n  p a #=> some\n//}\n\n: 5.times{|n| p n}\n\n ブロックパラメータであることを示す区切り文字。\n\n: /xx(xx|xx)/\n\n 正規表現の選択\n\n===[a:plus] +\n\n: 2 + 3\n\n たし算。または類似の演算を行うメソッド。\n\n: + 3\n\n 単項演算子+。\n\n: /xxx+/\n\n 正規表現の、量指定子(quantifiers)。直前の表現の 1 回以上の繰り返し\n\n===[a:minus] -\n\n: 3 - 2\n\n 引き算。または類似のメソッド\n\n\n: 3 * (-5)\n\n 単項 - (マイナス)。混乱を避けるため適宜()でくくるとよい。\n\n: % ruby -w など コマンドラインの入力 -AAA\n\n コマンドラインオプション\n\n===[a:ast] *\n\n: 2 * 3\n\n かけ算。または類似の演算を行うメソッド。\n\n: 2**3\n\n 累乗。または類似の演算を行うメソッド。\n\n: def xxx(*yy) ・・ *がついた引数\n\n メソッド呼出の引数展開。spec/call と d:spec/def#method を参照。\n\n: x, *y = foo()\n\n 多重代入。d:spec/operator#multiassign を参照。\n\n: /xx*/\n\n 正規表現の、直前の表現の 0 回以上の繰り返し。できるだけ長くマッチしようとする。\n spec/regexp を参照。\n\n===[a:slash] /\n\n: 10 / 3\n\n 割り算、または類似のメソッド。\n\n: /xxx/\n\n d:spec/literal#regexp。\n\n: '1二三四5'.split(//)\n\n  // は空の正規表現を意味する\n\n===[a:hat] ^\n\n:  true ^ true\n\n 「xor」演算子。排他的論理和。または類似のメソッド。\n\n: a ^= true\n\n 「^」演算子の自己代入演算子。aの論理値の反転。\n//emlist{\n    p(a=true);p(a^=true);p(a^=true) #=> true false true\n//}\n\n: /^xxx/\n\n 正規表現で、行頭。文字列の先頭や改行文字の直後の位置にマッチします。\n\n===[a:colon] :\n\n: :exit等の:のついた識別子\n\n シンボルリテラル。d:spec/literal#symbol を参照。\n\n: Net::HTTP\n\n 定数のスコープ演算子。d:spec/variables#const を参照。\n\n: ::DateTime\n\n 定数のスコープ演算子で、トップレベルの定数であることを示す。Object クラスで\n 定義されている定数(トップレベルの定数と言う)を確実に参照するためには\n d:spec/variables#const を参照。\n\n: xx ? yy : zz\n\n 条件演算子。三項演算子とも呼ばれます。if xx then yy else zz end と同じ意味です。\n d:spec/operator#cond を参照。\n\n\n: { a:\"aaa\", b:\"bbb\" }\n\n ハッシュの新しい記法。以下と同じです。\n//emlist{\n{ :a => \"aaa\", :b => \"bbb\" }\n//}\n\n===[a:period] .\n\n: xxx.yyy\n\n オブジェクトのメソッド\n\n: Range.new\n\n オブジェクトのメソッドだが、説明文の中では特にクラスのクラスメソッド／モジュールの\n モジュールメソッドを示すことに使われます。一方、インスタンスメソッドは「Range#each」のように\n 「#」でつなぎます。\n\n: 1 .. 20\n\n 最大値を含む Range オブジェクトを作る範囲演算子です。全体で範囲式といいます。d:spec/operator#range。\n\n: 1 ... 20\n\n 最大値を含まない Range オブジェクトを作る範囲演算子です。\n 全体で範囲式といいます。d:spec/operator#range。\n\n: if /^begin/ .. /^end/ など 条件式 式 .. 式\n\n 条件式中の範囲式は特別にフリップフロップのように働きます。\n\n//emlist{\n    '1234543212345'.each_char { |n| print( (n == ?2)..(n == ?4) ? n : '_' ) } #=> _234___21234_\n    #\"2\"が出るまではfalse、\"2\"が出てから\"4\"が出るまではtrue、\"4\"から\"2\"まではfalseを返す。\n//}\n\n: /xx.xx/\n\n 正規表現の任意の一文字。\n\n: def foo(...)\n\n 受け取った引数をそのまま別のメソッドに渡すための記法です。\n 受け取る側も渡す側もカッコでくくる必要があります。\n\n//emlist{\n    def foo(...)\n      bar(...)\n    end\n//}\n\n\n===[a:comma] ,\n\n: a,b, = [1,2,3] ・・ 代入の左辺の「,」\n\n 多重代入。d:spec/operator#multiassignを参照。\n\n: a = b, c\n\n 多重代入。d:spec/operator#multiassignを参照。\n\n: def foo(bar, baz)\n\n メソッド引数の区切り。\n\n: { :a => 1, :b => 2 }\n\n ハッシュの要素の区切り。\n\n: [:a, :b, :c]\n\n 配列の要素の区切り。\n\n: { :a => 1, :b => 2 }.each{|key, val|}\n\n ブロックパラメータの区切り。\n\n===[a:langl] <\n\n: 3 < 5\n\n 「より小さい」比較演算子\n\n: 3 <= 5\n\n 「より小さいか等しい」比較演算子\n\n: 3 <=> 5\n\n 基本的な比較演算子。ほかの比較演算子はこの演算子を元に Comparable モジュールで定義されています。\n 左が大きければ 1, 等しければ0, 右が大きければ -1 を返すように作ることが期待されています。\n\n: 3 << 1\n\n シフト演算を行うメソッド。または類似のメソッド。Array#<< など。\n\n: a <<= 1\n\n 「<<」演算子の自己代入演算子。\n//emlist{\n  a = 3\n  a <<= 1\n  p a #=> 6\n//}\n\n: <<EOS または <<-EOS 、<<\"EOS\" など。\n\n ヒアドキュメントです。d:spec/literal#here。ヒアドキュメントは `<<識別子' を含む行の次の行から\n `識別子' だけの行の直前までを文字列とする行指向のリテラルです。\n\n: class Foo < Super\n\n クラス定義でスーパークラスを指定しています。\n d:spec/def#class。\n\n: class << obj\n\n 特異クラス定義。d:spec/def#singleton_classを参照。\n\n===[a:rangl] >\n\n: 3 > 5\n\n 「より大きい」比較演算子\n\n: 3 >= 5\n\n 「より大きいか等しい」比較演算子\n\n: 3 <=> 3\n\n 基本的な比較演算子。ほかの比較演算子はこの演算子を元に Comparable\n モジュールで定義されています。左が大きければ1, 等しければ0, 右が大きければ -1\n を返すように作ることが期待されています。\n\n: 3 >> 1\n\n シフト演算子。または類似のメソッド。\n\n: a >>= 1\n\n 「>>」演算子の自己代入演算子。\n//emlist{\n  a = 3\n  a >>= 1\n  p a #=> 1\n//}\n\n: { 1 => \"11\" , 3 => \"333\" }\n\n ハッシュのリテラル\n\n: ->(a,b){ p [a,b] }\n\n Ruby1.9 で導入された lambda の新しい記法。以下と同じ。\n//emlist{\nlambda{|a, b| p [a, b] }\n//}\n\n\n===[a:eq] =\n\n: a = 12\n\n 代入演算子。\n\n: xxx.a = 12\n\n 代入メソッドの呼び出し。\n\n: a == 12\n\n 等号演算子。または類似のメソッド。\n\n: a === 12\n\n 特殊な等号演算子。Object#===での説明：「このメソッドは case 文での比較に用いられます。\n デフォルトは Object#== と同じ働きをしますが、 この挙動はサブクラスで所属性のチェックを実現するため\n 適宜再定義されます」。たとえば、Range#=== はother が範囲内に含まれている時に真を返します。\n\n: a += 12 , a *= 12 , a ||= 12 など・・a 二項演算子 = b\n\n 自己代入演算子。d:spec/operator#selfassignを参照。\n//emlist{\n  a = 7\n  a **= 2\n  p a #=> 49\n//}\n\n: def xx=\n\n この場合の「=」はメソッド名の一部分です。このタイプの名前のメソッドを定義すると、\n 同時に「=」演算子を定義することになります。\n\n: =begin ・・ =end\n\n 埋め込みドキュメントです。d:spec/lexical#embedを参照。\n\n: { 1 => \"11\" , 3 => \"333\" }\n\n ハッシュのリテラル\n\n: rescue => XXX\n\n 例外処理で例外結果を変数 XXX に代入します。\n\n: xxx #=> 実行結果\n\n 慣用的に実行結果を示すために使われるコメントの書き方。\n\n===[a:tilde] ~\n\n: '%04b %04b' % [3, ~ 3]\n\n ビット演算の否定。\n//emlist{\n '%04b %04b' % [3, ~ 3] #=> \"0011 ..100\"\n//}\n\n: /xxx/ =~ yyy\n\n 正規表現のメソッド =~ 。正規表現と文字列をマッチさせる。両辺を入れ替えても機能します。\n\n: /xxx/ !~ yyy\n\n 正規表現のメソッド =~ の否定。マッチが失敗したらtrueを返します。\n\n: ~ /xxx/\n\n /xxx/ =~ $_ の省略形。~の後ろは正規表現でなければいけません。\n\n===[a:dollar] $\n\n: $xxx\n\n グローバル変数。d:spec/variables#globalを参照。\n\n: $_ や $! など ・・$<1文字の数字、記号>\n\n 特殊変数(組み込み変数)。d:spec/variables#builtin を参照。\n\n: /xx$/\n\n 正規表現で行末。文字列の末尾や改行文字の直前の位置にマッチします。改行自身は含みません。\n spec/regexpを参照。\n\n===[a:at] @\n\n: @xxx\n\n インスタンス変数。d:spec/variables#instanceを参照。\n\n: @@xxx\n\n クラス変数。d:spec/variables#classを参照。\n\n: def +@ または def -@\n\n 単項演算子 +X や -X を定義するときの表記法。\n//emlist{\n  class Symbol\n    def +@\n      self.upcase\n    end\n  end\n\n  puts(+:joke) #=> JOKE\n//}\n\n===[a:under] _\n\n: xxx_yyy\n\n 識別子の中では小文字と同じ扱い\n\n: 123_456\n\n 文字コード以外の数値リテラルには、`_' を含めることができます。 ruby インタプリタは `_' を単に無視し、\n 特別な解釈は何もしません。 これは、大きな数値の桁数がひと目でわかるように記述するのに便利です。\n d:spec/literal#numを参照。\n\n: _1 ~ _9\n\n 番号指定パラメータ。ブロックの仮引数として参照できます。\n\n//emlist[][ruby]{\n# 同じ意味\n(1..10).map {|n| n * 2 }\n(1..10).map { _1 * 2 }\n\n[3, 1, 2].sort {|n, m| m <=> n }\n[3, 1, 2].sort { _2 <=> _1 }\n//}\n\n===[a:lbra] {\n===[a:rbra] }\n\n: { 1 => \"11\" , 3 => \"333\" }\n\n ハッシュのリテラル\n\n: 5.times{|n| p n}\n\n ブロック\n\n: /xx{2,3}/\n\n 正規表現の、範囲指定繰り返し制御(interval quantifier)。\n\n: \"a is #{a}\"\n\n 式展開。d:spec/literal#expを参照。\n//emlist{\n  a = 10\n  p \"a is #{a}\"  #=> \"a is 10\"\n//}\n\n===[a:lbra2] [\n===[a:rbra2] ]\n\n: [1,\"some\",:ok]\n\n 配列のリテラル\n\n: 'abcde'[1,2]\n\n []メソッドの実行\n//emlist{\n  class String\n    def [](*a)\n      '(^^;'\n    end\n  end\n  p( 'abcde'[1,2] )  #=> \"(^^;\"\n//}\n\n: /xx[abc]/\n\n 正規表現の文字クラス指定。\n\n===[a:lbra3] (\n===[a:rbra3] )\n\n: (true and false)\n: p({})\n\n 丸カッコ()は厳密には、複数の文、式をまとめてひとつの式にするグループ化の()（上の例のカッコ）とメソッドの引数を明示する()（下の例のカッコ）があります。下の例はカッコを省略した場合に引数として解釈されません。例のような特別な場合を除き、普段は使い分けを意識する必要はありません。()は意味が不明瞭にならない範囲で省略が可能です。\n\n===[a:dq] \"\n\n: \"abc\"\n\n 文字列リテラル。式展開などが可能なタイプの文字列リテラルです。\n d:spec/literal#stringを参照。\n\n===[a:sq] '\n\n: 'abc'\n\n 文字列リテラル。最低限のエスケープだけしかしません。式展開などをしたい場合はかわりに\"\"を用います。\n\n===[a:ac] `\n\n: `ls`\n\n コマンド出力。バッククォート(`)で囲まれた文字列は、コマンドとして実行され、\n その標準出力が文字列として与えられます。d:spec/literal#commandを参照。\n//emlist{\n    puts `ruby -h`\n    #=> Usage: ruby [switches] [--] [programfile] [arguments]\n    #=> ....\n//}\n\n===[a:backslash] \\\nバックスラッシュ。環境によって¥に見えたりします。\n\n: puts \"abc\\\"def\"\n\n 文字列や正規表現の中のエスケープ。\n//emlist{\n puts \"abc\\\"def\" #=> abc\"def\n//}\n\n: xxx \\\n\n 継続行。改行の直前に置かれる。パースの段階で直後の改行が存在しないものとして扱われます。\n//emlist{\n    puts(3 \\\n    + 4) #=> 7\n//}\n\n===[a:semicolon] ;\n\n: a = 3 ;\n\n 式の区切り。改行と同じ\n\n: [1,2,3].each{|v; z| z = v * 2 ... }\n\n  ブロックローカル変数を宣言するための区切り。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Comparable",
          "label": "Comparable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Comparable/"
        },
        {
          "key": "Proc",
          "label": "Proc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Proc/"
        },
        {
          "key": "spec/call",
          "label": "spec/call",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:spec%2Fcall/"
        },
        {
          "key": "spec/regexp",
          "label": "spec/regexp",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:spec%2Fregexp/"
        }
      ]
    },
    {
      "signature": "制御構造",
      "score": 109.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "制御構造 \n条件分岐:\n    * if\n    * unless\n    * case\n繰り返し:\n    * while\n    * until\n    * for\n    * break\n    * next\n    * redo\n    * retry\n例外処理:\n    * raise\n    * begin\nその他:\n    * return\n    * BEGIN\n    * END",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/spec=2fcontrol.html",
          "description": "制御構造 \n条件分岐:\n    * if\n    * unless\n    * case\n繰り返し:\n    * while\n    * until\n    * for\n    * break\n    * next\n    * redo\n    * retry\n例外処理:\n    * raise\n    * begin\nその他:\n    * return\n    * BEGIN\n    * END\n\nRubyでは(Cなどとは異なり)制御構造は式であって、何らかの値を返すものが\nあります(返さないものもあります。値を返さない式を代入式の右辺に置くと\nsyntax error になります)。\n\nRubyはC言語やPerlから引き継いだ制御構造を持ちますが、\nその他にd:spec/call#blockという\n制御構造の抽象化を援助する機能があります。ブロック付きメソッド呼び出しは\n繰り返しを始めとする制御構造をクラス設計者が定義する事が出来るものです.\n\n=== 条件分岐\n====[a:if] if\n\n//emlist[例][ruby]{\nif age >= 12 then\n  print \"adult fee\\n\"\nelse\n  print \"child fee\\n\"\nend\ngender = if foo.gender == \"male\" then \"male\" else \"female\" end\n//}\n\n文法:\n\n          if 式 [then]\n            式 ...\n          [elsif 式 [then]\n            式 ... ]\n          ...\n          [else\n            式 ... ]\n          end\n\n条件式を評価した結果が真である時、then 以下の式を評価します。\nif の条件式が偽であれば elsif の条件を評価します。\nelsif 節は複数指定でき、全ての if および elsif\nの条件式が偽であったとき else 節があればその式が評価されます。\n\nif 式は、条件が成立した節(あるいは else 節)の最後に評価し\nた式の結果を返します。else 節がなくいずれの条件も成り立たなけれ\nば nil を返します。\n\nRuby では false または nil だけが偽で、それ以外は 0 や空文\n字列も含め全て真です。\n\nRuby では if を繋げるのは elsif であり、else if\n(C のように)でも elif(sh のように)でもないことに注意してください。\n\nまた if の条件式が正規表現のリテラルである時には特別に\n\n//emlist[][ruby]{\n$_ =~ リテラル\n//}\n\nであるかのように評価されます。\n\n==== if 修飾子\n\n//emlist[例][ruby]{\nprint \"debug\\n\" if $DEBUG\n//}\n\n文法:\n\n          式 if 式\n\n右辺の条件が成立する時に、左辺の式を評価してその結果を返します。\n条件が成立しなければ nil を返します。\n\n====[a:unless] unless\n\n//emlist[例][ruby]{\nunless baby?\n  feed_meat\nelse\n  feed_milk\nend\n//}\n\n文法:\n\n          unless 式 [then]\n            式 ...\n          [else\n            式 ... ]\n          end\n\nunless は if と反対で、条件式が偽の時に then 以下の\n式を評価します。unless 式にelsif を指定することはできませ\nん。\n\n==== unless 修飾子\n\n//emlist[例][ruby]{\nprint \"stop\\n\" unless valid(passwd)\n//}\n\n文法:\n\n          式 unless 式\n\n右辺の条件が成立しない時に、左辺の式を評価してその結果を返します。\n条件が成立すれば nil を返します。\n\n====[a:case] case\n\n//emlist[例][ruby]{\ncase $age\nwhen 0 .. 2\n  \"baby\"\nwhen 3 .. 6\n  \"little child\"\nwhen 7 .. 12\n  \"child\"\nwhen 13 .. 18\n  \"youth\"\nelse\n  \"adult\"\nend\n//}\n\n文法:\n\n          case [式]\n          [when 式 [, 式] ...[, `*' 式] [then]\n            式..]..\n          [when `*' 式 [then]\n            式..]..\n          [else\n            式..]\n          end\n\ncase は一つの式に対する一致判定による分岐を行います。when\n節で指定された値と最初の式を評価した結果とを演算子 === を用いて\n比較して、一致する場合には when 節の本体を評価します。\n\nつまり、\n\n//emlist[][ruby]{\ncase 式0\nwhen 式1, 式2\n  stmt1\nwhen 式3, 式4\n  stmt2\nelse\n  stmt3\nend\n//}\n\nは以下の if 式とほぼ等価です。\n\n//emlist[][ruby]{\n_tmp = 式0\nif 式1 === _tmp or 式2 === _tmp\n  stmt1\nelsif 式3 === _tmp or 式4 === _tmp\n  stmt2\nelse\n  stmt3\nend\n//}\n\nwhen 節の評価順序はこの上記 if 文に書き直した場合と同じです。つまり上\nから順に(そして左から順に) === が評価されます。また「式0」は1回だけ評\n価されます。\n\nwhen 節の最後の式に `*' を前置すればその式は配列展開されます。\n\n//emlist[][ruby]{\nary = [1,2,3]\n\ncase v\nwhen *ary\n # ..\nend\n//}\n\nは、\n\n//emlist[][ruby]{\ncase v\nwhen 1, 2, 3\n # ..\nend\n//}\n\nと等価です。\n\nまた === がどのような条件で真になるかは、各クラスの === メソッ\nドの動作についてのドキュメントを参照して下さい。\n\ncase の「式」を省略した場合、when の条件式が偽でない最初の\n式を評価します。\n\n//emlist[][ruby]{\nfoo = false\nbar = true\nquu = false\n\ncase\nwhen foo then puts 'foo is true'\nwhen bar then puts 'bar is true'\nwhen quu then puts 'quu is true'\nend\n# \"bar is true\"と表示される\n//}\n\ncase は、条件が成立した when 節、(あるいは else 節)\nの最後に評価した式の結果を返します。いずれの条件も成り立たなければ\nnil を返します。\n\n=== 繰り返し\n\n====[a:while] while\n\n//emlist[例][ruby]{\nary = [0,2,4,8,16,32,64,128,256,512,1024]\ni = 0\nwhile i < ary.length\n  print ary[i]\n  i += 1\nend\n//}\n\n文法:\n\n          while 式 [do]\n             ...\n          end\n\n式を評価した値が真の間、本体を繰り返し実行します。\n\nwhile は nil を返します。また、引数を伴った break により\nwhile 式の戻り値をその値にすることもできます。\n\n==== while 修飾子\n\n//emlist[例][ruby]{\nsleep(60) while io_not_ready?\n//}\n\n文法:\n\n          式 while 式\n\n右辺の式を評価した値が真の間、左辺を繰り返し実行します。\n\n左辺の式が begin 節である場合にはそれを最初に一回評価してから繰り返します。\n\n//emlist[例][ruby]{\nsend_request(data)\nbegin\n  res = get_response()\nend while res == 'Continue'\n//}\n\nwhile 修飾した式は nil を返します。\nまた、引数を伴った break により while 修飾した式の戻り値を\nその値にすることもできます。\n\n====[a:until] until\n\n//emlist[例][ruby]{\nuntil f.eof?\n  print f.gets\nend\n//}\n\n文法:\n          until 式 [do]\n             ...\n          end\n\n式を評価した値が真になるまで、本体を繰り返して実行します。\n\nuntil は nil を返します。また、引数を伴った break により\nuntil 式の戻り値をその値にすることもできます。\n\n==== until修飾子\n\n//emlist[例][ruby]{\nprint(f.gets) until f.eof?\n//}\n\n文法:\n          式 until 式\n\n右辺の式を評価した値が真になるまで、左辺を繰り返して実行しま\nす。\n\n左辺の式が begin 節である場合にはそれを最初に一回評価してから繰り返します。\n\n//emlist[例][ruby]{\nsend_request(data)\nbegin\n  res = get_response()\nend until res == 'OK'\n//}\n\nuntil 修飾した式は nil を返します。\nまた、引数を伴った break により until 修飾した式の戻り値をその値にすることもできます。\n\n====[a:for] for\n\n//emlist[例][ruby]{\nfor i in [1, 2, 3]\n  print i*2, \"\\n\"\nend\n//}\n\n文法:\n\n          for lhs ...  in 式1 [do]\n            式2..\n          end\n\n式を評価した結果のオブジェクトの各要素に対して本体を繰り返し\nて実行します。これは以下の式とほぼ等価です。\n\n          (式1).each `{' `|' lhs..`|' 式2.. `}'\n\n「ほぼ」というのは、do  ...  endまたは{ }による\nブロックは新しいローカル変数の有効範囲を導入するのに対し、\nfor文はローカル変数のスコープに影響を及ぼさない点が\n異なるからです。\n\nfor は、in に指定したオブジェクトの each\nメソッドの戻り値を返します。\n\n複数のループ変数指定は以下のような場合に使用します。\n\n//emlist[例][ruby]{\nfor i,j in [[1,2], [3,4], [5,6]]\n  p [i,j]\nend\n# => [1, 2]\n#    [3, 4]\n#    [5, 6]\n//}\n\nfor や each で配列要素を複数個ずつ取得しながらループすることは\nできません。\n\n//emlist[][ruby]{\nfor i,j in [1, 2, 3]\n  p [i,j]\nend\n\n# => [1, nil]\n#    [2, nil]\n#    [3, nil]\n\n# [1,2] [3,nil] を期待するかもしれないがそうはならない\n//}\n\n代わりにそのようなメソッド(イテレータ)を定義する必要があります。\n\n//emlist[][ruby]{\nclass Array\n  def each2\n    i = 0\n    while i < self.size\n      yield self[i], self[i+1]\n      i += 2\n    end\n  end\nend\n//}\n\n====[a:break] break\n\n//emlist[例][ruby]{\ni = 0\nwhile i < 3\n  print i, \"\\n\"\n  break\nend\n//}\n\n文法:\n\n          break\n\n          break val\n\nbreak はもっとも内側のループを脱出します。ループとは\n\n    * while\n    * until\n    * for\n    * イテレータ\n\nのいずれかを指します。C 言語と異なり、break はループを脱出する作\n用だけを持ち、case を抜ける作用は持ちません。\n\nbreak によりループを抜けた for やイテレータは nil\nを返します。\nただし、引数を指定した場合はループの戻り値はその引数になります。\n\n\n====[a:next] next\n\n//emlist[例][ruby]{\n# 空行を捨てるcat\nARGF.each_line do |line|\n  next if line.strip.empty?\n  print line\nend\n//}\n\n文法:\n\n          next\n\n          next val\n\n\nnextはもっとも内側のループの次の繰り返しにジャンプします。\nイテレータでは、yield 呼び出しの脱出になります。\n\nnext により抜けた yield 式は nil を返します。\nただし、引数を指定した場合、yield 式の戻り値はその引数になります。\n\n====[a:redo] redo\n\n//emlist[例][ruby]{\nredo\n//}\n\n文法:\n\n          redo\n\nループ条件のチェックを行なわず、現在の繰り返しをやり直します。\n\nイテレータ呼び出しにおける break, next, redo\nをまとめると以下のようになります。\n\n//emlist[][ruby]{\ndef iter\n  # (a)\n  #  :\n  # (b)\n  yield\n  # (c)\n  #  :\n  # (d)\nend\niter { redo  }  # -> (b) へ飛ぶ\niter { next  }  # -> (c) へ飛ぶ\niter { break }  # -> (d) へ飛ぶ\n//}\n\n(a) は、厳密には引数評価から始まります。(b) はブロック実行の直前を指し\nています(yield の引数が再評価されるわけではない)。(d) は、メソッドの終\n了です。\n\n//emlist[][ruby]{\ndef iter(var = p(\"(a)\"))\n  yield\n  p \"(c)\"\nensure\n  p \"(d)\"\nend\niter { p \"(b)\"; redo  }     # -> (a) .. (b)(b)(b)(b) ...\niter { p \"(b)\"; next  }     # -> (a) .. (b)(c) .. (d)\niter { p \"(b)\"; break }     # -> (a)..(b)(d)\n//}\n\n====[a:retry] retry\n\n//emlist[例][ruby]{\nretry\n//}\n\n文法:\n\n          retry\n\nretry は、rescue 節で begin 式をはじめからもう一度実行するのに使用します。\n\nretry を使うことである処理が成功するまで処理を繰り返すようなループを作\nることができます。\n\n//emlist[][ruby]{\nbegin\n  do_something # exception raised\nrescue\n  # handles error\n  retry  # restart from beginning\nend\n//}\n\nrescue 節以外で retry が用いられた場合には例外 SyntaxError が発生\nします。\n\n=== 例外処理\n\n====[a:raise] raise\n\n//emlist[例][ruby]{\nraise \"you lose\"  # 例外 RuntimeError を発生させる\n# 以下の二つは SyntaxError を発生させる\nraise SyntaxError, \"invalid syntax\"\nraise SyntaxError.new(\"invalid syntax\")\nraise             # 最後の例外の再発生\n//}\n\n文法:\n\n          raise\n          raise messageまたはexception\n          raise error_type, message\n          raise error_type, message, traceback\n\n例外を発生させます。第一の形式では直前の例外を再発生させます。\n第二の形式では、引数が文字列であった場合、その文字列をメッセー\nジとする RuntimeError 例外を発生させます。引数が例外\nオブジェクトであった場合にはその例外を発生させます。第三の形式\nでは第一引数で指定された例外を、第二引数をメッセージとして発生さ\nせます。第四の形式の第三引数は\n$@または\nKernel.#callerで得られる\nスタック情報で、例外が発生した場所を示します。\n\n発生した例外は後述の begin 式の rescue 節で捕らえることができます。\nその場合 rescue error_type => var の形式を使えば\n例外オブジェクトを得られます。このオブジェクトは組み込み\n変数 $! でも得られます。また例外が\n発生したソースコード上の位置は変数 $@ に格納されます。\n\nKernel.#raise は Ruby の予約語ではなく、Kernel モジュールで\n定義されている関数的メソッドです。\n\n====[a:begin] begin\n\n//emlist[例][ruby]{\nbegin\n  do_something\nrescue\n  recover\nensure\n  must_to_do\nend\n//}\n\n文法:\n\n          begin\n            式..\n          [rescue [error_type,..] [=> evar] [then]\n            式..]..\n          [else\n            式..]\n          [ensure\n            式..]\n          end\n\n本体の実行中に例外が発生した場合、rescue 節(複数指定できます)が\n与えられていれば例外を捕捉できます。発生した例外と一致する\nrescue 節が存在する時には rescue 節の本体が実行されます。\n発生した例外は $! を使って参照することができます。また、\n指定されていれば変数 evar にも $! と同様に発生した例外が格\n納されます。\n\n//emlist[][ruby]{\nbegin\n  raise \"error message\"\nrescue => evar\n  p $!\n  p evar\nend\n# => #<RuntimeError: error message>\n#    #<RuntimeError: error message>\n\n//}\n例外の一致判定は，発生した例外が rescue 節で指定した\nクラスのインスタンスであるかどうかで行われます。\n\nerror_type が省略された時は StandardError のサブクラスであ\nる全ての例外を捕捉します。Rubyの組み込み例外は(SystemExit や\nInterrupt のような脱出を目的としたものを除いて)\nStandardError のサブクラスです。\n\n例外クラスのクラス階層については\n_builtin\nを参照してください。\n\nrescue では error_type は通常の引数と同じように評価され、\nそのいずれかが一致すれば本体が実行されます。error_type を評価し\nた値がクラスやモジュールでない場合には例外 TypeError が発生しま\nす。\n\n省略可能な else 節は、本体の実行によって例外が発生しなかった場合\nに評価されます。\n\nensure 節が存在する時は begin 式を終了する直前に必ず\nensure 節の本体を評価します。\n\nbegin式全体の評価値は、本体／rescue節／else節のうち\n最後に評価された文の値です。また各節において文が存在しなかったときの値\nはnilです。いずれにしてもensure節の値は無視されます。\n\nd:spec/def#class、d:spec/def#module、d:spec/def#method\nなどの定義文では、それぞれ\nbegin なしで rescue, ensure 節を定義でき、これにより例外を処理することが\nできます。\n\n==== rescue修飾子\n\n//emlist[例][ruby]{\nopen(\"nonexistent file\") rescue STDERR.puts \"Warning: #$!\"\n//}\n\n文法:\n\n          式1 rescue 式2\n\n式1で例外が発生したとき、式2を評価します。\n以下と同じ意味です。捕捉する例外クラスを指定することはできません。\n(つまり、StandardError 例外クラスのサブクラスだけしか捕捉できません)\n\n//emlist[][ruby]{\nbegin\n  式1\nrescue\n  式2\nend\n//}\n\nrescue修飾子を伴う式の値は例外が発生しなければ式1、例外が発生すれば式2\nです。\n\n//emlist[][ruby]{\nvar = open(\"nonexistent file\") rescue false\np var\n# => false\n//}\n\nただし、優先順位の都合により式全体を括弧で囲む必要がある場合があります。\nメソッドの引数にするには二重の括弧が必要です。\n\n          p(open(\"nonexistent file\") rescue false)\n          => parse error\n\n          p((open(\"nonexistent file\") rescue false))\n          => false\n\n=== その他\n\n====[a:return] return\n\n//emlist[例][ruby]{\nreturn\nreturn 12\nreturn 1,2,3\n//}\n\n文法:\n\n          return [式[`,' 式 ... ]]\n\n式の値を戻り値としてメソッドの実行を終了します。式が2つ以上\n与えられた時には、それらを要素とする配列をメソッドの戻り値と\nします。式が省略された場合には nil を戻り値とします。\n\nトップレベルで return した場合はプログラムが終了します。\nrequire, load されたファイル内のトップレベルで return した場合は呼び出し元に返ります。\n\n====[a:BEGIN] BEGIN\n\n//emlist[例][ruby]{\nBEGIN {\n  # ...\n}\n//}\n\n文法:\n\n          BEGIN '{' 文.. '}'\n\n初期化ルーチンを登録します。BEGINブロックで指定した文は当該ファ\nイルのどの文が実行されるより前に実行されます。複数のBEGINが指定\nされた場合には指定された順に実行されます。\n\nBEGINブロックはコンパイル時に登録されます。\n\nBEGIN ブロックは、独立したローカル変数のスコープを導入しません。つまり、\nBEGIN ブロック内で定義したローカル変数は BEGIN ブロックを抜けた後も使用\n可能です。\n\nBEGINはトップレベル以外では書けません。全て SyntaxErrorになります。\n\n        def foo\n          BEGIN { p \"begin\" }\n        end\n        # => -e:2: syntax error, unexpected keyword_BEGIN\n\n        class Foo\n          BEGIN { p \"begin\" }\n        end\n        # => -e:2: syntax error, unexpected keyword_BEGIN\n\n        loop do\n          BEGIN { p \"begin\" }\n        end\n        # => -e:2: syntax error, unexpected keyword_BEGIN\n\n====[a:END] END\n\n//emlist[例][ruby]{\nEND {\n  # ...\n}\n//}\n\n文法:\n\n          END '{' 文.. '}'\n\n「後始末」ルーチンを登録します。END ブロックで指定した文はインタ\nプリタが終了する時に実行されます。Ruby の終了時処理について詳しくは\nspec/terminateを参照してください。\n\n複数の END ブロックを登録した場合は、登録したときと逆の順序で実\n行されます。\n\n//emlist[][ruby]{\nEND { p 1 }\nEND { p 2 }\nEND { p 3 }\n\n# => 3\n#    2\n#    1\n//}\n\nEND ブロックは一つの記述につき最初の一回のみ有効です。たとえば以\n下のようにループの中で実行しても複数の END ブロックが登録される\nわけではありません。そのような目的には Kernel.#at_exit を使\nいます。\n\n//emlist[][ruby]{\n5.times do |i|\n  END { p i }\nend\n# => 0\n//}\n\nEND をメソッド定義式中に書くと警告が出ます。\n意図的にこのようなことを行いたい場合は Kernel.#at_exit を使\nいます。\n\n        def foo\n          END { p \"end\" }\n        end\n        p foo\n\n        # => -:2: warning: END in method; use at_exit\n             nil\n             \"end\"\n\nEND は、BEGIN とは異なり実行時に後処理を登録します。したがっ\nて、以下の例では END ブロックは実行されません。\n\n        if false\n          END { p \"end\" }\n        end\n\nEND や Kernel.#at_exit で登録した後処理を取り消すこと\nはできません。\n\nEND ブロックは周囲とスコープを共有します。すなわちイテレータと同様のス\nコープを持ちます。\n\nEND ブロックの中で発生した例外はその END ブロックを中断し\nますが、すべての後始末ルーチンが実行されるよう、インタプリタは終了せず\nにメッセージだけを出力します。\n\n//emlist[例][ruby]{\nEND { p \"FOO\" }\nEND { raise \"bar\"; p \"BAR\" }\nEND { raise \"baz\"; p \"BAZ\" }\n\n# => baz (RuntimeError)\n#    bar (RuntimeError)\n#    \"FOO\"\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Interrupt",
          "label": "Interrupt",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Interrupt/"
        },
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Kernel/"
        },
        {
          "key": "RuntimeError",
          "label": "RuntimeError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:RuntimeError/"
        },
        {
          "key": "StandardError",
          "label": "StandardError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:StandardError/"
        },
        {
          "key": "SyntaxError",
          "label": "SyntaxError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:SyntaxError/"
        },
        {
          "key": "SystemExit",
          "label": "SystemExit",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:SystemExit/"
        },
        {
          "key": "TypeError",
          "label": "TypeError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:TypeError/"
        },
        {
          "key": "_builtin",
          "label": "_builtin",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:_builtin/"
        },
        {
          "key": "spec/terminate",
          "label": "spec/terminate",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:spec%2Fterminate/"
        }
      ]
    },
    {
      "signature": "pack テンプレート文字列",
      "score": 91.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "pack テンプレート文字列",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/pack_template.html",
          "description": "pack テンプレート文字列 \n\n以下にあげるものは、Array#pack、String#unpack、String#unpack1\nのテンプレート文字の一覧です。テンプレート文字は後に「長さ」を表す数字\nを続けることができます。「長さ」の代わりに`*'とすることで「残り全て」\nを表すこともできます。\n\n長さの意味はテンプレート文字により異なりますが大抵、\n  \"iiii\"\nのように連続するテンプレート文字は\n  \"i4\"\nと書き換えることができます。\n\nテンプレート文字列中の空白類は無視されます。\nまた、`#' から改行あるいはテンプレート文字列の最後まではコメントとみな\nされ無視されます。\n\n=== 整数のテンプレート文字のシステム依存性\n\n各テンプレート文字の説明の中で、\nshort や long はシステムによらずそれぞれ 2, 4バイトサ\nイズの数値(32ビットマシンで一般的なshort, longのサイズ)を意味していま\nす。s, S, l, L に対しては直後に _ または ! を \"s_\" あるいは \"s!\" のように\n続けることでシステム依存の short, long のサイズにすることもできます。\n\ni, I (int)のサイズは常にシステム依存であり、n, N, v, V\nのサイズは常にシステム依存ではない(!をつけられない)ことに注意してください。\n\nつまり、IO#ioctl などで C の構造体を渡すときのように、\nシステム依存のサイズとエンディアンに合わせる必要があるときには\ns!, S!, i!, I!, l!, L!, q!, Q!, j!, J! を用います。\nまた、ネットワークプロトコルやファイルフォーマットのように、\nシステムに依存しないデータを扱うときには\nn, N, v, V を用います。\n\n強制的にエンディアンを指定したいときは、\nリトルエンディアンなら < を、\nビッグエンディアンなら >\nを後ろにつけます。! と組み合わせることも可能です。\n\nまとめると以下のようになります。\n\n: エンディアン非依存、整数サイズ非依存 (ネットワークプロトコルなどに適切)\n//emlist{\n  n: big endian unsigned 16bit\n  N: big endian unsigned 32bit\n  v: little endian unsigned 16bit\n  V: little endian unsigned 32bit\n//}\n\n: エンディアン依存、整数サイズ依存 (C の構造体などに適切)\n//emlist{\n  s!: signed short\n  S!: unsigned short\n  i,i!: signed int\n  I,I!: unsigned int\n  l!: signed long\n  L!: unsigned long\n  q!: signed long long\n  Q!: unsigned long long\n  j,j!: intptr_t\n  J,J!: uintptr_t\n//}\n\n: エンディアン依存、整数サイズ非依存 (C99 の stdint.h にある厳密な幅を持つ整数型に適切)\n//emlist{\n  s: int16_t\n  S: uint16_t\n  l: int32_t\n  L: uint32_t\n  q: int64_t\n  Q: uint64_t\n//}\n\n: エンディアンの強制指定(バイナリ解析などに適切)\n//emlist{\n  S>:  big endian unsigned 16bit(nと同じ)\n  s>:  big endian int16_t\n  s!>: big endian signed short\n  l<:  little endian int32_t\n  l!<: little endian signed long\n//}\n\n=== 各テンプレート文字の説明\n\n説明中、Array#pack と String#unpack で違いのあるものは `/' で区切って\n「Array#pack の説明 / String#unpack の説明」としています。\n\n: a\n\n  ASCII文字列(ヌル文字を詰める/後続するヌル文字やスペースを残す)\n//emlist[][ruby]{\n[\"abc\"].pack(\"a\")    # => \"a\"\n[\"abc\"].pack(\"a*\")   # => \"abc\"\n[\"abc\"].pack(\"a4\")   # => \"abc\\x00\"\n\n\"abc\\0\".unpack(\"a4\") # => [\"abc\\x00\"]\n\"abc \".unpack(\"a4\")  # => [\"abc \"]\n//}\n\n: A\n\n  ASCII文字列(スペースを詰める/後続するヌル文字やスペースを削除)\n//emlist[][ruby]{\n[\"abc\"].pack(\"A\")    # => \"a\"\n[\"abc\"].pack(\"A*\")   # => \"abc\"\n[\"abc\"].pack(\"A4\")   # => \"abc \"\n\n\"abc \".unpack(\"A4\")  # => [\"abc\"]\n\"abc\\0\".unpack(\"A4\") # => [\"abc\"]\n//}\n\n: Z\n\n  ヌル終端文字列(長さが`*'の場合も含め、ヌル文字を詰める/後続するヌル文字を削除)\n//emlist[][ruby]{\n[\"abc\"].pack(\"Z\")  # => \"a\"\n[\"abc\"].pack(\"Z*\") # => \"abc\\x00\"\n[\"abc\"].pack(\"Z5\") # => \"abc\\x00\\x00\"\n\n\"abc\\0\".unpack(\"Z4\") # => [\"abc\"]\n\"abc \".unpack(\"Z4\")  # => [\"abc \"]\n//}\n\n: b\n\n  ビットストリング(各バイトごとに下位ビットから上位ビット)\n//emlist[][ruby]{\n\"\\xFF\\x00\".unpack(\"b*\") # => [\"1111111100000000\"]\n\"\\x01\\x02\".unpack(\"b*\") # => [\"1000000001000000\"]\n\"\\x01\\x02\".unpack(\"b3\") # => [\"100\"]\n\n\n[\"1000000001000000\"].pack(\"b*\") # => \"\\x01\\x02\"\n//}\n\n: B\n\n  ビットストリング(各バイトごとに上位ビットから下位ビット)\n//emlist[][ruby]{\n\"\\xFF\\x00\".unpack(\"B*\")  # => [\"1111111100000000\"]\n\"\\x01\\x02\".unpack(\"B*\")  # => [\"0000000100000010\"]\n\"\\x01\\x02\".unpack(\"B9\")  # => [\"000000010\"]\n\"\\x01\\x02\".unpack(\"B15\") # => [\"000000010000001\"]\n\n[\"0000000100000010\"].pack(\"B*\")  # => \"\\x01\\x02\"\n[\"0000000100000010\"].pack(\"B0\")  # => \"\"\n[\"0000000100000010\"].pack(\"B1\")  # => \"\\x00\"\n[\"0000000100000010\"].pack(\"B7\")  # => \"\\x00\"\n[\"0000000100000010\"].pack(\"B8\")  # => \"\\x01\"\n[\"0000000100000010\"].pack(\"B9\")  # => \"\\x01\\x00\"\n[\"0000000100000010\"].pack(\"B14\") # => \"\\x01\\x00\"\n[\"0000000100000010\"].pack(\"B15\") # => \"\\x01\\x02\"\n[\"0000000100000010\"].pack(\"B16\") # => \"\\x01\\x02\"\n//}\n\n: h\n\n  16進文字列(下位ニブルが先)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"h*\") # => [\"10ef\"]\n\"\\x01\\xFE\".unpack(\"h3\") # => [\"10e\"]\n\n[\"10ef\"].pack(\"h*\") # => \"\\x01\\xFE\"\n//}\n\n: H\n\n  16進文字列(上位ニブルが先)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"H*\") # => [\"01fe\"]\n\"\\x01\\xFE\".unpack(\"H3\") # => [\"01f\"]\n\"~\".unpack(\"H2\")        # => [\"7e\"]\n\n[\"01fe\"].pack(\"H*\") # => \"\\x01\\xFE\"\n[\"7e\"].pack(\"H2\")   # => \"~\"\n//}\n\n: c\n\n  char (8bit 符号つき整数)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"c*\") # => [1, -2]\n\n[1, -2].pack(\"c*\")  # => \"\\x01\\xFE\"\n[1, 254].pack(\"c*\") # => \"\\x01\\xFE\"\n//}\n\n: C\n\n  unsigned char (8bit 符号なし整数)\n//emlist[][ruby]{\n\"\\x01\\xFE\".unpack(\"C*\") # => [1, 254]\n\n[1, -2].pack(\"C*\")  # => \"\\x01\\xFE\"\n[1, 254].pack(\"C*\") # => \"\\x01\\xFE\"\n//}\n\n: s\n\n  short (16bit 符号つき整数, エンディアンに依存)\n  (s! は 16bit でなく、short のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"s*\") # => [513, -514]\n\n[513, 65022].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[513, -514].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"s*\") # => [258, -259]\n\n[258, 65277].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[258, -259].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n: S\n\n  unsigned short (16bit 符号なし整数, エンディアンに依存)\n  (S! は 16bit でなく、short のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"S*\") # => [513, 65022]\n\n[513, 65022].pack(\"s*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[513, -514].pack(\"s*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n  ビッグエンディアン (SPARC64):\n\n//emlist[][ruby]{\n\"\\x01\\x02\\xFE\\xFD\".unpack(\"S*\") # => [258, 65277]\n\n[258, 65277].pack(\"S*\") # => \"\\x01\\x02\\xFE\\xFD\"\n[258, -259].pack(\"S*\")  # => \"\\x01\\x02\\xFE\\xFD\"\n//}\n\n: i\n\n  int (符号つき整数, エンディアンと int のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"i*\") # => [67305985, -50462977]\n\n[67305985, 4244504319].pack(\"i*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"i*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"i*\") # => [16909060, -66052]\n\n[16909060, 4294901244].pack(\"i*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"i*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n: I\n\n  unsigned int (符号なし整数, エンディアンと int のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"I*\") # => [67305985, 4244504319]\n\n[67305985, 4244504319].pack(\"I*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"I*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n  ビッグエンディアン (SPARC64), 32bit int:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"I*\") # => [16909060, 4294901244]\n\n[16909060, 4294901244].pack(\"I*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"I*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: l\n\n  long (32bit 符号つき整数, エンディアンに依存)\n  (l! は 32bit でなく、long のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"l*\") # => [67305985, -50462977]\n\n[67305985, 4244504319].pack(\"l*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"l*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"l*\") # => [16909060, -66052]\n\n[16909060, 4294901244].pack(\"l*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"l*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: L\n\n  unsigned long (32bit 符号なし整数, エンディアンに依存)\n  (L! は 32bit でなく、long のサイズに依存)\n\n  リトルエンディアン (x86_64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"L*\") # => [67305985, 4244504319]\n\n[67305985, 4244504319].pack(\"L*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[67305985, -50462977].pack(\"L*\")  # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n  ビッグエンディアン (SPARC64), 32bit long:\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\".unpack(\"L*\") # => [16909060, 4294901244]\n\n[16909060, 4294901244].pack(\"L*\") # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n[16909060, -66052].pack(\"L*\")     # => \"\\x01\\x02\\x03\\x04\\xFF\\xFE\\xFD\\xFC\"\n//}\n\n: q\n\n  64bit 符号付き整数 (エンディアンに依存)\n  (q! は 64bit でなく、long long のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"q*\")\n# => [578437695752307201, -506097522914230529]\n\n[578437695752307201, -506097522914230529].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[578437695752307201, 17940646550795321087].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"q*\")\n# => [72623859790382856, -283686952306184]\n\n[72623859790382856, -283686952306184].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[72623859790382856, 18446460386757245432].pack(\"q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n: Q\n\n  64bit 符号なし整数 (エンディアンに依存)\n  (Q! は 64bit でなく、long long のサイズに依存)\n\n  リトルエンディアン (x86_64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"Q*\")\n# => [578437695752307201, 17940646550795321087]\n\n[578437695752307201, 17940646550795321087].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[578437695752307201, -506097522914230529].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n\n  ビッグエンディアン (SPARC64):\n//emlist[][ruby]{\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\".unpack(\"Q*\")\n# => [72623859790382856, 18446460386757245432]\n\n[72623859790382856, 18446460386757245432].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n[72623859790382856, -283686952306184].pack(\"Q*\")\n# => \"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\xFF\\xFE\\xFD\\xFC\\xFB\\xFA\\xF9\\xF8\"\n//}\n: m\n\n  base64された文字列。60 オクテットごと(と最後)に改行コードが付加されます。\n\n  Base64は、3オクテット(8bits * 3 = 24bits)のバイナリコードをASCII文字の\n  うちの65文字 ([A-Za-z0-9+/]の64文字とpaddingのための'=')だけを使用して\n  4オクテット(6bits * 4 = 24bits)の印字可能文字列に変換するエンコーディ\n  ング法です。2045, 4648 で定義されています。\n//emlist[][ruby]{\n[\"\"].pack(\"m\")             # => \"\"\n[\"\\0\"].pack(\"m\")           # => \"AA==\\n\"\n[\"\\0\\0\"].pack(\"m\")         # => \"AAA=\\n\"\n[\"\\0\\0\\0\"].pack(\"m\")       # => \"AAAA\\n\"\n[\"\\xFF\"].pack(\"m\")         # => \"/w==\\n\"\n[\"\\xFF\\xFF\"].pack(\"m\")     # => \"//8=\\n\"\n[\"\\xFF\\xFF\\xFF\"].pack(\"m\") # => \"////\\n\"\n\n[\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"].pack(\"m\")\n# => \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJT\\nVFVWV1hZWg==\\n\"\n[\"abcdefghijklmnopqrstuvwxyz\"].pack(\"m3\")\n# => \"YWJj\\nZGVm\\nZ2hp\\namts\\nbW5v\\ncHFy\\nc3R1\\ndnd4\\neXo=\\n\"\n\n\"\".unpack(\"m\")       # => [\"\"]\n\"AA==\\n\".unpack(\"m\") # => [\"\\x00\"]\n\"AA==\".unpack(\"m\")   # => [\"\\x00\"]\n\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJT\\nVFVWV1hZWg==\\n\".unpack(\"m\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\\n\".unpack(\"m\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n//}\n  m0 は 4648 対応\n//emlist[][ruby]{\n[\"\"].pack(\"m0\")             # => \"\"\n[\"\\0\"].pack(\"m0\")           # => \"AA==\"\n[\"\\0\\0\"].pack(\"m0\")         # => \"AAA=\"\n[\"\\0\\0\\0\"].pack(\"m0\")       # => \"AAAA\"\n[\"\\xFF\"].pack(\"m0\")         # => \"/w==\"\n[\"\\xFF\\xFF\"].pack(\"m0\")     # => \"//8=\"\n[\"\\xFF\\xFF\\xFF\"].pack(\"m0\") # => \"////\"\n\n[\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"].pack(\"m0\")\n# => \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\"\n\n\"\".unpack(\"m0\")       # => [\"\"]\n\"AA==\\n\".unpack(\"m0\") # => ArgumentError (invalid base64)\n\"AA==\".unpack(\"m0\")   # => [\"\\x00\"]\n\n\"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\".unpack(\"m0\")\n# => [\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"]\n//}\n@see base64\n\n: M\n\n  quoted-printable encoding された文字列\n//emlist[][ruby]{\n[\"a b c\\td \\ne\"].pack(\"M\") # => \"a b c\\td =\\n\\ne=\\n\"\n\n\"a b c\\td =\\n\\ne=\\n\".unpack(\"M\") # => [\"a b c\\td \\ne\"]\n//}\n\n: n\n\n  ネットワークバイトオーダー(ビッグエンディアン)のunsigned short (16bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1,32767,-32768,65535].pack(\"n*\")\n# => \"\\x00\\x00\\x00\\x01\\xFF\\xFF\\x7F\\xFF\\x80\\x00\\xFF\\xFF\"\n\n\"\\x00\\x00\\x00\\x01\\xFF\\xFF\\x7F\\xFF\\x80\\x00\\xFF\\xFF\".unpack(\"n*\")\n# => [0, 1, 65535, 32767, 32768, 65535]\n//}\n\n: N\n\n  ネットワークバイトオーダー(ビッグエンディアン)のunsigned long (32bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1].pack(\"N*\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xFF\\xFF\\xFF\\xFF\"\n\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xFF\\xFF\\xFF\\xFF\".unpack(\"N*\") # => [0, 1, 4294967295]\n//}\n\n: v\n\n  \"VAX\"バイトオーダー(リトルエンディアン)のunsigned short (16bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1,32767,-32768,65535].pack(\"v*\")\n# => \"\\x00\\x00\\x01\\x00\\xFF\\xFF\\xFF\\x7F\\x00\\x80\\xFF\\xFF\"\n\n\"\\x00\\x00\\x01\\x00\\xFF\\xFF\\xFF\\x7F\\x00\\x80\\xFF\\xFF\".unpack(\"v*\")\n# => [0, 1, 65535, 32767, 32768, 65535]\n//}\n\n: V\n\n  \"VAX\"バイトオーダー(リトルエンディアン)のunsigned long (32bit 符号なし整数)\n//emlist[][ruby]{\n[0,1,-1].pack(\"V*\") # => \"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\"\n\n\n\"\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xFF\\xFF\\xFF\\xFF\".unpack(\"V*\") # => [0, 1, 4294967295]\n//}\n\n: f\n\n  単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754 単精度 リトルエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"f\")      # => \"\\x00\\x00\\x80?\"\n[0.0/0.0].pack(\"f\")  # => \"\\x00\\x00\\xC0\\x7F\"      # NaN\n[1.0/0.0].pack(\"f\")  # => \"\\x00\\x00\\x80\\x7F\"      # +Infinity\n[-1.0/0.0].pack(\"f\") # => \"\\x00\\x00\\x80\\xFF\"      # -Infinity\n//}\n\n  SPARC64 (IEEE754 単精度 ビッグエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"f\")      # => \"?\\x80\\x00\\x00\"\n[0.0/0.0].pack(\"f\")  # => \"\\x7F\\xC0\\x00\\x00\"      # NaN\n[1.0/0.0].pack(\"f\")  # => \"\\x7F\\x80\\x00\\x00\"      # +Infinity\n[-1.0/0.0].pack(\"f\") # => \"\\xFF\\x80\\x00\\x00\"      # -Infinity\n//}\n\n  VAX (NetBSD 3.0) (非IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"f\") # => \"\\x80@\\x00\\x00\"\n//}\n\n: d\n\n  倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754 倍精度 リトルエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"d\")      # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n[0.0/0.0].pack(\"d\")  # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF8\\x7F\"      # NaN\n[1.0/0.0].pack(\"d\")  # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\x7F\"      # +Infinity\n[-1.0/0.0].pack(\"d\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0\\xFF\"      # -Infinity\n//}\n\n  SPARC64 (IEEE754 倍精度 ビッグエンディアン):\n//emlist[][ruby]{\n[1.0].pack(\"d\")      # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n[0.0/0.0].pack(\"d\")  # => \"\\x7F\\xF8\\x00\\x00\\x00\\x00\\x00\\x00\"      # NaN\n[1.0/0.0].pack(\"d\")  # => \"\\x7F\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"      # +Infinity\n[-1.0/0.0].pack(\"d\") # => \"\\xFF\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"      # -Infinity\n//}\n\n  VAX (NetBSD 3.0) (非IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"d\") # => \"\\x80@\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n: e\n\n  リトルエンディアンの単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"e\") # => \"\\x00\\x00\\x80?\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"e\") # => \"\\x00\\x00\\x80?\"\n//}\n\n: E\n\n  リトルエンディアンの倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"E\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"E\") # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\xF0?\"\n//}\n\n: g\n\n  ビッグエンディアンの単精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"g\") # => \"?\\x80\\x00\\x00\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"g\") # => \"?\\x80\\x00\\x00\"\n//}\n\n  IEEE754準拠な環境の場合、以下のようにして符号、指数部、仮数部を取り出せます。\n//emlist[][ruby]{\ns = [v].pack(\"g\").unpack(\"B*\")[0][0,1]      # 符号\ne = [v].pack(\"g\").unpack(\"B*\")[0][1,8]      # 指数部\nf = [v].pack(\"g\").unpack(\"B*\")[0][9,23]     # 仮数部\n//}\n\n  そして、s, e, f の意味は以下の通りです。\n//emlist[][ruby]{\nsgn = s == \"0\" ? +1.0 : -1.0\nexp = Integer(\"0b\" + e)\nfra = Integer(\"0b\" + f)\nif exp == 0\n  if fra == 0\n    sgn * 0                     # ±0 (positive/negative zero)\n  else\n    sgn * fra * 2**(-126-23)    # 非正規化数 (denormalized number)\n  end\nelsif exp == 255\n  if fra == 0\n    sgn * Inf                   # ±∞ (positive/negative infinity)\n  else\n    NaN                         # 非数 (not a number)\n  end\nelse\n  fra += 1 << 23                # ゲタ\n  sgn * fra * 2**(exp-127-23)   # 正規化数 (normalized number)\nend\n//}\n\n: G\n\n  ビッグエンディアンの倍精度浮動小数点数(機種依存)\n\n  x86_64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"G\") # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  SPARC64 (IEEE754):\n//emlist[][ruby]{\n[1.0].pack(\"G\") # => \"?\\xF0\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  IEEE754準拠な環境の場合、以下のようにして符号、指数部、仮数部を取り出せます。\n//emlist[][ruby]{\ns = [v].pack(\"G\").unpack(\"B*\")[0][0,1]    # 符号\ne = [v].pack(\"G\").unpack(\"B*\")[0][1,11]   # 指数部\nf = [v].pack(\"G\").unpack(\"B*\")[0][12,52]  # 仮数部\n//}\n\n  そして、s, e, f の意味は以下の通りです。\n//emlist[][ruby]{\nsgn = s == \"0\" ? +1.0 : -1.0\nexp = Integer(\"0b\" + e)\nfra = Integer(\"0b\" + f)\nif exp == 0\n  if fra == 0\n    sgn * 0                     # ±0 (positive/negative zero)\n  else\n    sgn * fra * 2**(-1022-52)   # 非正規化数 (denormalized number)\n  end\nelsif exp == 2047\n  if fra == 0\n    sgn * Inf                   # ±∞ (positive/negative infinity)\n  else\n    NaN                         # 非数 (not a number)\n  end\nelse\n  fra += 1 << 52                # ゲタ\n  sgn * fra * 2**(exp-1023-52)  # 正規化数 (normalized number)\nend\n//}\n\n: p\n\n  ヌル終端の文字列へのポインタ\n//emlist[][ruby]{\n[\"\"].pack(\"p\")             # => \"\\x980\\xBEf\\x1CV\\x00\\x00\"\n[\"a\", \"b\", \"c\"].pack(\"p3\") # => \"\\x98\\xE5\\x9ER\\xD2U\\x00\\x00p\\xE5\\x9ER\\xD2U\\x00\\x00H\\xE5\\x9ER\\xD2U\\x00\\x00\"\n[nil].pack(\"p\")            # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n: P\n\n  構造体(固定長文字列)へのポインタ\n//emlist[][ruby]{\n[nil].pack(\"P\")    # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n[\"abc\"].pack(\"P3\") # => \"\\xA0\\xEE\\er\\x84U\\x00\\x00\"\n\n[\"abc\"].pack(\"P4\") # => ArgumentError: too short buffer for P(3 for 4)\n[\"\"].pack(\"P\")     # => ArgumentError: too short buffer for P(0 for 1)\n//}\n\n: u\n\n  uuencodeされた文字列\n//emlist[][ruby]{\n[\"\"].pack(\"u\")           # => \"\"\n[\"a\"].pack(\"u\")          # => \"!80``\\n\"\n[\"abc\"].pack(\"u\")        # => \"#86)C\\n\"\n[\"abcd\"].pack(\"u\")       # => \"$86)C9```\\n\"\n[\"a\"*45].pack(\"u\")       # => \"M86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A\\n\"\n[\"a\"*46].pack(\"u\")       # => \"M86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A86%A\\n!80``\\n\"\n[\"abcdefghi\"].pack(\"u6\") # => \"&86)C9&5F\\n#9VAI\\n\"\n//}\n\n: U\n\n  UTF-8\n//emlist[][ruby]{\n[0].pack(\"U\")                               # => \"\\u0000\"\n[1].pack(\"U\")                               # => \"\\u0001\"\n[0x7f].pack(\"U\")                            # => \"\\u007F\"\n[0x80].pack(\"U\")                            # => \"\\u0080\"\n[0x7fffffff].pack(\"U\")                      # => \"\\xFD\\xBF\\xBF\\xBF\\xBF\\xBF\"\n[0x80000000].pack(\"U\")                      # => RangeError: pack(U): value out of range\n[0,256,65536].pack(\"U3\").b                  # => \"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\"\n\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U3\") # => [0, 256, 65536]\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U\")  # => [0]\n\"\\x00\\xC4\\x80\\xF0\\x90\\x80\\x80\".unpack(\"U*\") # => [0, 256, 65536]\n//}\n\n: w\n\n  BER圧縮整数\n\n  1バイトあたり7ビットを使用して必要最小限のバイト数で任意サイズの\n  0以上の整数を表す数値表現。各バイトの最上位ビットはデータの最後\n  を除いて必ず1が立っている(つまり最上位ビットはどこまでデータがあ\n  るかを示している)。\n\n  ISO/IEC 8825-1:1995 : Information technology−ASN.1 encoding rules : Specification of Basic Encoding Rules(BER) に定められる整数の符号化方法。\n\n//emlist[][ruby]{\n[0].pack(\"w\")             # => \"\\x00\"\n[1].pack(\"w\")             # => \"\\x01\"\n[127].pack(\"w\")           # => \"\\x7F\"\n[128].pack(\"w\")           # => \"\\x81\\x00\"\n[0x3fff].pack(\"w\")        # => \"\\xFF\\x7F\"\n[0x4000].pack(\"w\")        # => \"\\x81\\x80\\x00\"\n[0x3fffffff].pack(\"w\")    # => \"\\x83\\xFF\\xFF\\xFF\\x7F\"\n[0x40000000].pack(\"w\")    # => \"\\x84\\x80\\x80\\x80\\x00\"\n[0xffffffff].pack(\"w\")    # => \"\\x8F\\xFF\\xFF\\xFF\\x7F\"\n[0x100000000].pack(\"w\")   # => \"\\x90\\x80\\x80\\x80\\x00\"\n\n\"\\x00\".unpack(\"w\")              # => [0]\n\"\\x00\\x81\\x00\\x01\".unpack(\"w*\") # => [0, 128, 1]\n//}\n\n  なお、BER圧縮整数でエンコードした結果は大小関係を保存しない。\n  たとえば、[0x3fff].pack(\"w\") > [0x4000].pack(\"w\") である。\n\n: x\n\n  ヌルバイト（pack）／1バイト読み飛ばし（unpack）\n//emlist[][ruby]{\n[97, 98].pack(\"CxC\")    # => \"a\\x00b\"\n[97, 98].pack(\"Cx3C\")   # => \"a\\x00\\x00\\x00b\"\n\n\"abc\".unpack(\"CxC\")  # => [97, 99]\n\"abc\".unpack(\"Cx3C\") # => ArgumentError: x outside of string\n//}\n\n: X\n\n  1バイト後退\n//emlist[][ruby]{\n[97, 98, 99].pack(\"CCXC\") # => \"ac\"\n\n\"abcdef\".unpack(\"x*XC\") # => [102]\n//}\n\n: @\n\n  絶対位置への移動\n//emlist[][ruby]{\n[97, 98].pack(\"C @3 C\") # => \"a\\x00\\x00b\"\n\n\"abcd\".unpack(\"C @3 C\") # => [97, 100]\n//}\n\n: j\n\nintptr_t (ポインタの幅の符号つき整数, エンディアンに依存)\n\n: J\n\nuintptr_t (ポインタの幅の符号なし整数, エンディアンに依存)\n\n=== 使用例\n\n以下、pack/unpack の使用例の一部です。\n\npack を使用しなくても同じことができる場合はその例も載せています。\npack は暗号になりやすい面があることを考慮し、pack を使いたくない人\nに別解を示すためです。\n\n: 数値(文字コード)の配列を文字列に変換する例\n//emlist[][ruby]{\n[82, 117, 98, 121].pack(\"cccc\")  # => \"Ruby\"\n[82, 117, 98, 121].pack(\"c4\")    # => \"Ruby\"\n[82, 117, 98, 121].pack(\"c*\")    # => \"Ruby\"\n\ns = \"\"\n[82, 117, 98, 121].each {|c| s << c}\ns    # => \"Ruby\"\n\n[82, 117, 98, 121].collect {|c| sprintf \"%c\", c}.join   # => \"Ruby\"\n\n[82, 117, 98, 121].inject(\"\") {|s, c| s << c}    # => \"Ruby\"\n//}\n\n: 文字列を数値(文字コード)の配列に変換する例\n//emlist[][ruby]{\n\"Ruby\".unpack('C*')    # => [82, 117, 98, 121]\n\na = []\n\"Ruby\".each_byte {|c| a << c}\na    # => [82, 117, 98, 121]\n//}\n\n: \"x\" でヌルバイトを埋めることができる\n//emlist[][ruby]{\n[82, 117, 98, 121].pack(\"ccxxcc\")    # => \"Ru\\x00\\x00by\"\n//}\n\n: \"x\" で文字を読み飛ばす事が出来る\n//emlist[][ruby]{\n\"Ru\\x00\\x00by\".unpack('ccxxcc')    # => [82, 117, 98, 121]\n//}\n\n: Hexダンプを数値の配列に変換する例\n//emlist[][ruby]{\n\"61 62 63 64 65 66\".delete(' ').lines.pack('H*').unpack('C*')\n# => [97, 98, 99, 100, 101, 102]\n\n\"61 62 63 64 65 66\".split.collect {|c| c.hex}\n# => [97, 98, 99, 100, 101, 102]\n//}\n\n: バイナリと16進数のpackでは長さ指定は生成されるバイト数ではなく、ビットやニブルの個数を表す\n//emlist[][ruby]{\n[0b01010010, 0b01110101, 0b01100010, 0b01111001].pack(\"C4\")\n# => \"Ruby\"\n[\"01010010011101010110001001111001\"].pack(\"B32\") # 8 bits * 4\n# => \"Ruby\"\n\n[0x52, 0x75, 0x62, 0x79].pack(\"C4\")\n# => \"Ruby\"\n[\"52756279\"].pack(\"H8\")  # 2 nybbles * 4\n# => \"Ruby\"\n//}\n\n: テンプレート文字'a'の長さ指定は1つの文字列だけに適用される\n//emlist[][ruby]{\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"a4\")\n# => \"RUBY\"\n\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"aaaa\")\n# => \"Ruby\"\n\n[\"RUBY\", \"u\", \"b\", \"y\"].pack(\"a*aaa\")\n# => \"RUBYuby\"\n//}\n\n: テンプレート文字\"a\"は、長さが足りない分をヌル文字で補う\n//emlist[][ruby]{\n[\"Ruby\"].pack(\"a8\")\n# => \"Ruby\\x00\\x00\\x00\\x00\"\n//}\n\n: リトルエンディアンとビッグエンディアン\n//emlist[][ruby]{\n[1,2].pack(\"s2\")\n# => \"\\x01\\x00\\002\\x00\" # リトルエンディアンのシステムでの出力\n# => \"\\x00\\x01\\x00\\002\" # ビッグエンディアンのシステムでの出力\n\n[1,2].pack(\"n2\")\n# => \"\\x00\\x01\\x00\\002\" # システムによらずビッグエンディアン\n\n[1,2].pack(\"v2\")\n# => \"\\x01\\x00\\002\\x00\" # システムによらずリトルエンディアン\n//}\n\n: ネットワークバイトオーダの signed long\n//emlist[][ruby]{\ns = \"\\xFF\\xFF\\xFF\\xFE\"\nn = s.unpack(\"N\")[0]\nif n[31] == 1\n  n = -((n ^ 0xffff_ffff) + 1)\nend\nn # => -2\n//}\n\n: ネットワークバイトオーダの signed long(その2)\n//emlist[][ruby]{\ns = \"\\xFF\\xFF\\xFF\\xFE\"\nn = s.unpack(\"N\").pack(\"l\").unpack(\"l\")[0]\nn # => -2\n//}\n\n: IPアドレス\n//emlist[][ruby]{\nrequire 'socket'\nofficial_hostname, alias_hostnames, address_family, *address_list = Socket.gethostbyname(\"localhost\")\naddress_list.find {|address| address.size == 4 }.unpack(\"C4\").join(\".\")\n# => \"127.0.0.1\"\n\n\"127.0.0.1\".split(\".\").collect {|c| c.to_i}.pack(\"C4\")\n# => \"\\x7F\\x00\\x00\\x01\"\n//}\n\n: sockaddr_in 構造体\n//emlist[][ruby]{\nrequire 'socket'\n[Socket::AF_INET,\n Socket.getservbyname('echo'),\n 127, 0, 0, 1].pack(\"s n C4 x8\")\n# => \"\\x02\\x00\\x00\\a\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n//}\n\n  pack/unpack を使う代わりに\n  Socket.pack_sockaddr_in,\n  Socket.unpack_sockaddr_in メソッドがあります。\n\n: '\\0'終端文字列のアドレス\n\n  テンプレート文字 \"p\" や \"P\" は、C 言語レベルのインタフェースのた\n  めにあります(例えば IO#ioctl)。\n//emlist[][ruby]{\n[\"foo\"].pack(\"p\")    # => \"xp\\xC2\\x85\\vV\\x00\\x00\"\n//}\n\n  結果の文字列はゴミに見えますが、実際は文字列\"foo\\0\"を指すアドレ\n  ス(のバイナリ表現)です。以下のようにすれば見慣れた表記で見ること\n  が出来ます\n//emlist[][ruby]{\nprintf \"%#014x\\n\", \"xp\\xC2\\x85\\vV\\x00\\x00\".unpack(\"J\")[0] # => 0x560b85c27078\n//}\n\n  アドレスが指す先のオブジェクト(この例で \"foo\\0\") は、pack の結\n  果が GC されるまではGCされないことが保証されています。\n\n  unpack(\"p\"), unpack(\"P\") は、pack の結果からしか unpack できません。\n//emlist[][ruby]{\n[\"foo\"].pack(\"p\").unpack(\"p\") # => [\"foo\"]\n\"xp\\xC2\\x85\\vV\\x00\\x00\".unpack(\"p\")\n# => ArgumentError: no associated pointer\n//}\n  \"p\" や \"P\" は、nil を特別に扱い NULL\n  ポインタとして解釈します。(以下は、64bitマシンで一般的な結果)\n//emlist[][ruby]{\n[nil].pack(\"p\")        # => \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\".unpack(\"p\") # => [nil]\n//}\n\n: 構造体のアドレス\n\n  例えば、\n//emlist{\n      struct {\n        int   a;\n        short b;\n        long  c;\n      } v = {1,2,3};\n//}\n  を表す文字列は\n//emlist[][ruby]{\nv = [1,2,3].pack(\"i!s!l!\")\n//}\n  です。(byte alignment の問題から実際は適当な padding が必要に\n  なるかもしれません)\n\n  この構造体を指すアドレスは\n//emlist[][ruby]{\n[v].pack(\"P\")  # => \"\\xC0\\xCC2L\\fV\\x00\\x00\"\n//}\n  で得られます。\n\n: UTF-8からUCS-2への変換 (サロゲートを処理していないので UTF-16 とはいえない)\n\n  リトルエンディアン:\n//emlist[][ruby]{\n(\"Comments\").unpack(\"U*\").pack(\"v*\") # => \"C\\x00o\\x00m\\x00m\\x00e\\x00n\\x00t\\x00s\\x00\"\n//}\n  ビッグエンディアン:\n//emlist[][ruby]{\n(\"Comments\").unpack(\"U*\").pack(\"n*\") # => \"\\x00C\\x00o\\x00m\\x00m\\x00e\\x00n\\x00t\\x00s\"\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "base64",
          "label": "base64",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:base64/"
        }
      ]
    },
    {
      "signature": "NEWS for Ruby 2.2.0",
      "score": 73.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "NEWS for Ruby 2.2.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f2_2_0.html",
          "description": "NEWS for Ruby 2.2.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストは ChangeLog ファイルか bugs.ruby-lang.org の issue を参照してください。\n\n== 2.1.0 以降の変更\n\n=== 言語仕様の変更\n\n  * nil/true/false\n    * nil/true/false はフリーズされました 8923\n\n  * Hash リテラル\n    * 後ろにコロンのあるシンボルをキーにしたときそれをクオートできるようになりました 4276\n\n  * デフォルト引数\n    * オプショナル引数にデフォルト値のセマンティクスでアクセスできないという長年のバグを修正しました。 9593\n\n=== 組み込みクラスの更新\n\n  * Binding\n    * 追加: Binding#local_variables\n    * 追加: Binding#receiver\n\n  * Dir\n    * 追加: Dir#fileno\n\n  * Enumerable\n    * 追加: Enumerable#slice_after\n    * 追加: Enumerable#slice_when\n    * 拡張: Enumerable#min, Enumerable#min_by, Enumerable#max, Enumerable#max_by\n      は複数の値を返すためのオプションをサポートしました\n\n\n  * Float\n    * 追加: Float#next_float\n    * 追加: Float#prev_float\n\n  * File\n    * 追加: File.birthtime\n    * 追加: File#birthtime\n\n  * File::Stat\n    * 追加: File::Stat#birthtime\n\n  * GC\n    * GC.latest_gc_info は現在のGCのステータスを再現するために :state を返すようになりました。\n    * 改善: メジャーGCにインクリメンタルマーキングを導入しました。 10137\n\n  * IO\n    * 改善: Windows上でパイプのための IO#read_nonblock, IO#write_nonblock をサポートしました。\n\n  * Kernel\n    * 追加: Kernel.#itself(Object#itself)\n    * 改善: Kernel.#throw は、対応する catch ブロックがないとき ArgumentError ではなく\n      ArgumentError のサブクラスである UncaughtThrowError を発生させるようになりました\n\n\n  * Process\n    * 拡張: Process.spawn のような外部プロセスを起動するメソッドは [:out, :err] からリダイレクト\n      されたファイルを書き込みモードで開くようになりました\n\n  * String\n    * 追加: String#unicode_normalize\n    * 追加: String#unicode_normalize!\n    * 追加: String#unicode_normalized?\n\n  * Symbol\n    * 改善: String#to_sym, String#intern によって返される多くのシンボルがGC可能になりました\n\n  * Method\n    * 追加: Method#curry([arity]) はカリー化された Proc オブジェクトを返します\n    * 追加: Method#super_method はスーパクラスの同名のメソッドの Method オブジェクトを返します。\n\n=== 組み込みクラスの互換性 (機能追加とバグ修正を除く)\n\n  * Enumerable\n    * Enumerable#slice_before の状態管理は非推奨になりました\n    * Enumerable#chunk の状態管理は非推奨になりました\n\n  * GC\n    * 非互換: GC.stat のエントリーの名前を変更しました 9924\n      https://docs.google.com/spreadsheets/d/11Ua4uBr6o0k-nORrZLEIIUkHJ9JRzRR0NyZfrhEEnc8/edit?usp=sharing\n\n  * Hash\n    * 非互換: 重複するキーの上書きに関するポリシーを変更しました 10315\n      { **hash1, **hash2 } は重複するキーについては hash2 の値を持ちます\n\n  * IO\n    * 非互換: IO#flush を使ったとき、ファイルのメタデータが即時更新されることを仮定できなくなりました。\n      いくつかのプラットフォーム(特にWindows)で、メタデータの更新はファイルシステムの負荷が下がるまで遅延されます。\n      メタデータが更新されることを保証したい場合は IO#fsync を使ってください。\n\n  * Math\n    * 非互換: Math.#log は 基底が 0 より小さいとき NaN を返すかわりに Math::DomainError を発生させます。\n      2つの引数に両方とも 0 が指定された場合、負の無限大ではなく NaN を返します。\n    * 非互換: Math.#atan2 は2の引数の両方に無限大が指定されたとき C99 で期待されるような値を返します。\n\n  * Proc\n    * 非互換: ArgumentError は発生しなくなりました。\n    * ArgumentError is no longer raised when lambda Proc is passed as a\n      block, and the number of yielded arguments does not match the formal\n      arguments of the lambda, if just an array is yielded and its length\n      matches.\n\n  * Process\n    * Process.spawn のようなプロセスを起動するようなメソッドは [:out, :err]\n      からリダイレクトされるファイルを書き込みモードで開きます。Ruby 2.2以前は読み込みモードで開いていました。\n\n=== 標準添付ライブラリの更新 (優れたもののみ)\n\n  * continuation\n    * callcc は廃止されました。Fiberを使ってください。\n\n  * digest\n    * Kernel.#Digest はスレッドセーフになりました。\n      マルチスレッド環境でオンデマンドローディングに関して問題がある場合は、\n      \"digest/*\" を事前にロードしておくか、Digest::* なクラスを参照するかわりにこのメソッドを呼び出します。\n    * 以前通知した通り Digest::HMAC を削除しました。\n\n  * DL\n    * DL は標準添付ライブラリから削除されました。fiddle を使ってください。\n\n  * etc\n    * 追加: Etc.#uname\n    * 追加: Etc.#sysconf\n    * 追加: Etc.#confstr\n    * 追加: IO#pathconf\n    * 追加: Etc.#nprocessors\n\n  * find, pathname\n    * 拡張: Find.#find は \"ignore_error\" というキーワード引数を受け付けるようになりました\n\n  * Matrix\n    * 追加: Matrix#first_minor\n    * 追加: Matrix#cofactor\n    * 追加: Matrix#adjugate\n    * 追加: Matrix#hstack, Matrix#vstack\n    * 追加: Matrix#laplace_expansion\n    * 追加: Vector.basis\n    * 追加: Vector#-@, Vector#+@, Matrix#-@, Matrix#+@\n    * 追加: Vector#cross_product\n    * 追加: Vector#dot\n    * 追加: Vector#angle_with\n    * 追加: Vector.independent?, Vector#independent?\n\n  * pathname\n    * Pathname#/ は Pathname#+ のエイリアスです\n    * 追加: Pathname#birthtime\n\n  * rake\n    * Rake 10.4.0 になりました。\n      http://docs.seattlerb.org/rake/History_rdoc.html#label-10.4.0\n\n  * rubygems\n    * RubyGems 2.4.2 になりました。リリースノートの全てはリンク先を参照してください。\n      http://docs.seattlerb.org/rubygems/History_txt.html#label-2.4.2+%2F+2014-10-01\n\n  * tsort\n    * TSort.tsort_each, TSort.each_strongly_connected_component,\n      TSort.each_strongly_connected_component_from はブロックを省略すると Enumerator を返すようになりました。\n\n  * xmlrpc\n    * LibXMLStreamParser という新しいパーサーを追加しました\n\n=== 標準添付ライブラリの互換性 (機能追加とバグ修正を除く)\n\n  * mathn\n    * 非推奨の警告を表示するようになりました 10169\n\n  * ext/date/lib/date/format.rb\n    * 空だったので削除されました\n\n  * digest\n    * Digest::HMAC は削除されました。OpenSSL::HMAC や外部のgemを使ってください。\n\n  * time\n    * Time.parse, Time.strptime, Time.rfc2822, Time.xmlschema may produce\n      fixed-offset Time objects.\n      It is happen when usual localtime doesn't preserve the offset from UTC.\n    * Time.httpdate は常にUTCのTimeオブジェクトを生成します。\n    * Time.strptime は引数が日付や時刻の情報を含まない場合、ArgumentErrorを発生させます。\n\n  * lib/rational.rb\n    * 2009年から非推奨だったので削除しました。\n\n  * lib/complex.rb\n    * 2009年から非推奨だったので削除しました。\n\n  * prettyprint\n    * PrettyPrint#first? は削除しました。\n\n  * lib/minitest/*.rb\n    * mintest 5 と衝突するので削除しました。9711\n\n  * lib/test/**/*.rb\n    * minitest 5 と衝突するので削除しました。minitest 4 の単なるラッパーだった。9711\n\n  * uri\n    * 3986 をサポートしました。 2542\n\n  * GServer\n    * gserver という gem に切り出しました。メンテナンスしていないコードでした。\n\n  * Logger\n    * Logger::Application は logger-application という gem に切り出しました。メンテナンスしていないコードでした。\n\n  * ObjectSpace (after requiring \"objspace\")\n    * ObjectSpace.#memsize_of(obj) は sizeof(RVALUE) を含むようになりました。\n      8984\n\n  * prime\n    * 非互換:\n      * Prime.prime? は負の数に対して false を返します。\n        このメソッドは数が合成数かどうか知るために使うべきではありません。 7395\n\n  * psych\n    * Psych::EngineManager を削除しました 8344\n\n=== 組込みのグローバル変数の互換性に影響のある変更\n\nなし\n\n=== C API の更新\n\n  * 非推奨のAPIを削除しました  9502\n    * Check_SafeStr -> SafeStringValue\n    * rb_check_safe_str -> SafeStringValue\n    * rb_quad_pack -> rb_integer_pack\n    * rb_quad_unpack -> rb_integer_unpack\n    * rb_read_check : access struct FILE internal. no replacement.\n    * rb_struct_iv_get : internal function. no replacement.\n    * struct rb_blocking_region_buffer : internal type. no replacement.\n    * rb_thread_blocking_region_begin -> rb_thread_call_without_gvl family\n    * rb_thread_blocking_region_end -> rb_thread_call_without_gvl family\n    * TRAP_BEG -> rb_thread_call_without_gvl family\n    * TRAP_END -> rb_thread_call_without_gvl family\n    * rb_thread_select -> rb_thread_fd_select\n    * struct rb_exec_arg : internal type. no replacement.\n    * rb_exec : internal function. no replacement.\n    * rb_exec_arg_addopt : internal function. no replacement.\n    * rb_exec_arg_fixup : internal function. no replacement.\n    * rb_exec_arg_init : internal function. no replacement.\n    * rb_exec_err : internal function. no replacement.\n    * rb_fork : internal function. no replacement.\n    * rb_fork_err : internal function. no replacement.\n    * rb_proc_exec_n : internal function. no replacement.\n    * rb_run_exec_options : internal function. no replacement.\n    * rb_run_exec_options_err : internal function. no replacement.\n    * rb_thread_blocking_region -> rb_thread_call_without_gvl family\n    * rb_thread_polling -> rb_thread_wait_for\n    * rb_big2str0 : internal function. no replacement.\n    * rb_big2ulong_pack -> rb_integer_pack\n    * rb_gc_set_params : internal function. no replacement.\n    * rb_io_mode_flags -> rb_io_modestr_fmode\n    * rb_io_modenum_flags -> rb_io_oflags_fmode\n\n  * struct RBignum は隠されました 6083\n    かわりに rb_integer_pack と rb_integer_unpack を使います\n\n  * struct RRational は隠されました  9513\n    かわりに rb_rational_num と rb_rational_den を使います\n\n  * rb_big_new と rb_big_resize は long のかわりに size_t を受け取ります\n\n  * rb_num2long は SIGNED_VALUE のかわりに long を返します\n\n  * rb_num2ulong は VALUE のかわりに unsigned long を返します\n\n  * st hash table は速度のために2のべき乗のサイズを使います。9425.\n    適切はハッシュ関数を使うと探索は10-25%速くなります。\n    しかしながら、ハッシュ分散の弱点はもはや素数サイズのテーブルにマスクされていない可能性があります。\n    なので、拡張ライブラリは良い分散を確保するためにハッシュ関数を微調整する必要があるかもしれません。\n\n  * rb_sym2str() を追加しました。`rb_id2str(SYM2ID(sym))` と大体同じですが、動的なシンボルを作成しません。\n\n  * rb_str_cat_cstr() を追加しました。`rb_str_cat2()` と同じです。\n\n  * 将来的に `rb_str_substr()` と `rb_str_subseq()` は文字列の真ん中を共有しますが、\n    文字列の末尾だけは共有しません。結局、処理された文字列はNULL終端されない可能性があるので、\n    NULL終端されたCの文字列を入手したいときは`StringValueCStr()`を呼ぶ必要があります。\n\n  * rb_tracepoint_new() はCからアクセス可能な新しい内部的なイベントをサポートしました。r47528\n    * RUBY_INTERNAL_EVENT_GC_ENTER\n    * RUBY_INTERNAL_EVENT_GC_EXIT\n\n  * rb_hash_delete() は与えられたブロックを評価しなくなりました。\n\n  * rb_extract_keywords() と rb_get_kwargs() はエクスポートされました。詳細は README.EXT を参照してください。\n\n=== ビルドシステムの更新\n\n  * ./configure のオプション --with-jemalloc を追加しました。\n    jemalloc はシステムの malloc が遅かったり、フラグメンテーションする傾向にある場合に適切かもしれません。9113\n\n=== 実装の変更\n\n  * GC\n    * String#to_sym や String#intern によって返されるほとんどのシンボルはGC可能になりました。9634\n    * メジャーGCにインクリメンタルマーキングを導入しました。10137\n    * malloc によって起きた GC で lazy sweep を有効にしました。\n\n  * VM\n      * Hash#[]  と Hash#[]= で変更不可能な文字列リテラルを使用するようにしました。\n      * キーワード引数が速くなりました 10440\n      * 巨大なスプラットされた配列を rest 引数として受け取れるようになりました10440\n\n  * Process\n      * spawn() のようなプロセスを生成するメソッドは vfork(2) システムコールを使うようになりました。\n        親プロセスがメモリを多く使用しているとき vfork(2) は fork(2) より速い。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "ArgumentError",
          "label": "ArgumentError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:ArgumentError/"
        },
        {
          "key": "Binding",
          "label": "Binding",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Binding/"
        },
        {
          "key": "Dir",
          "label": "Dir",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Dir/"
        },
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerable/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        },
        {
          "key": "Fiber",
          "label": "Fiber",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Fiber/"
        },
        {
          "key": "File",
          "label": "File",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:File/"
        },
        {
          "key": "File::Stat",
          "label": "File::Stat",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:File%3A%3AStat/"
        },
        {
          "key": "Float",
          "label": "Float",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Float/"
        },
        {
          "key": "GC",
          "label": "GC",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:GC/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Hash/"
        },
        {
          "key": "IO",
          "label": "IO",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:IO/"
        },
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Kernel/"
        },
        {
          "key": "Math",
          "label": "Math",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Math/"
        },
        {
          "key": "Math::DomainError",
          "label": "Math::DomainError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Math%3A%3ADomainError/"
        },
        {
          "key": "Method",
          "label": "Method",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Method/"
        },
        {
          "key": "OpenSSL::HMAC",
          "label": "OpenSSL::HMAC",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:OpenSSL%3A%3AHMAC/"
        },
        {
          "key": "Proc",
          "label": "Proc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Proc/"
        },
        {
          "key": "Process",
          "label": "Process",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Process/"
        },
        {
          "key": "String",
          "label": "String",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:String/"
        },
        {
          "key": "Symbol",
          "label": "Symbol",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Symbol/"
        },
        {
          "key": "UncaughtThrowError",
          "label": "UncaughtThrowError",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:UncaughtThrowError/"
        },
        {
          "key": "continuation",
          "label": "continuation",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:continuation/"
        },
        {
          "key": "digest",
          "label": "digest",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:digest/"
        },
        {
          "key": "etc",
          "label": "etc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:etc/"
        },
        {
          "key": "fiddle",
          "label": "fiddle",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:fiddle/"
        },
        {
          "key": "find",
          "label": "find",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:find/"
        },
        {
          "key": "pathname",
          "label": "pathname",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:pathname/"
        },
        {
          "key": "prettyprint",
          "label": "prettyprint",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:prettyprint/"
        },
        {
          "key": "prime",
          "label": "prime",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:prime/"
        },
        {
          "key": "psych",
          "label": "psych",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:psych/"
        },
        {
          "key": "rake",
          "label": "rake",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rake/"
        },
        {
          "key": "rubygems",
          "label": "rubygems",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:rubygems/"
        },
        {
          "key": "time",
          "label": "time",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:time/"
        },
        {
          "key": "tsort",
          "label": "tsort",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:tsort/"
        },
        {
          "key": "uri",
          "label": "uri",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:uri/"
        },
        {
          "key": "xmlrpc",
          "label": "xmlrpc",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:xmlrpc/"
        }
      ]
    },
    {
      "signature": "Set#&(enum) -> Set",
      "score": 73.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "共通部分、すなわち、2つの集合のいずれにも属するすべての要素からなる\n新しい集合を作ります。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Set/i/=26.html",
          "description": "共通部分、すなわち、2つの集合のいずれにも属するすべての要素からなる\n新しい集合を作ります。\n\n@param enum each メソッドが定義されたオブジェクトを指定します。\n@raise ArgumentError 引数 enum に each メソッドが定義されていない場合に\n       発生します。\n\n//emlist[][ruby]{\nrequire 'set'\ns1 = Set[10, 20, 30]\ns2 = Set[10, 30, 50]\np s1 & s2 #=> #<Set: {10, 30}>\n//}\n\n@see Array#&, Array#intersection",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Set",
          "label": "Set",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Set/"
        }
      ]
    },
    {
      "signature": "Set#intersection(enum) -> Set",
      "score": 73.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "共通部分、すなわち、2つの集合のいずれにも属するすべての要素からなる\n新しい集合を作ります。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Set/i/=26.html",
          "description": "共通部分、すなわち、2つの集合のいずれにも属するすべての要素からなる\n新しい集合を作ります。\n\n@param enum each メソッドが定義されたオブジェクトを指定します。\n@raise ArgumentError 引数 enum に each メソッドが定義されていない場合に\n       発生します。\n\n//emlist[][ruby]{\nrequire 'set'\ns1 = Set[10, 20, 30]\ns2 = Set[10, 30, 50]\np s1 & s2 #=> #<Set: {10, 30}>\n//}\n\n@see Array#&, Array#intersection",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Set",
          "label": "Set",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:Set/"
        }
      ]
    },
    {
      "signature": "ruby 1.8.2 feature",
      "score": 73.0,
      "metadata": { "type": "document", "versions": ["3.2.0"] },
      "summary": "ruby 1.8.2 feature \nruby 1.8.2 での ruby 1.8.1 からの変更点です。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/doc/news=2f1=2e8=2e2.html",
          "description": "ruby 1.8.2 feature \nruby 1.8.2 での ruby 1.8.1 からの変更点です。\n\n掲載方針\n\n*バグ修正の影響も含めて動作が変わるものを収録する。\n*単にバグを直しただけのものは収録しない。\n*ライブラリへの単なる定数の追加は収録しない。\n\n以下は各変更点に付けるべきタグです。\n\n*カテゴリ\n  * [ruby]: ruby インタプリタの変更\n  * [api]: 拡張ライブラリ API\n  * [lib]: ライブラリ\n*レベル\n  * [bug]: バグ修正\n  * [new]: 追加されたクラス／メソッドなど\n  * [compat]: 変更されたクラス／メソッドなど\n    * 互換性のある変更\n    * only backward-compatibility\n    * 影響の範囲が小さいと思われる変更\n  * [change]: 変更されたクラス／メソッドなど(互換性のない変更)\n  * [experimental]: 変更の中でも特に実験的なもの(将来再考して欲しいもの？)\n  * [obsolete]: 廃止された(される予定の)機能\n  * [platform]: 対応プラットフォームの追加\n\n== 1.8.1 (2003-12-25) -> 1.8.2 (2004-12-25) \n\n* cgi/session においてクライアントからセッション ID を指定できてしまうバグが\n  修正されました。\n* cgi/session においてセッション情報を保存するファイル名にセッション ID が\n  使われるバグが修正されました。\n* cgi の無限ループに陥る可能性のあるバグが修正されました。\n  ((<URL:http://www.debian.org/security/2004/dsa-586>))\n* 一連の core dumps バグが修正されました。\n  ((<URL:https://magazine.rubyist.net/articles/0002/0002-RubyCore.html>))\n* tk の変更点は \n  ((<URL:https://magazine.rubyist.net/articles/0003/0003-RubyTkMovement.html>))\n  を参照して下さい。\n* soap, wsdl の変更点は\n  ((<URL:http://rrr.jin.gr.jp/projects/soap4r/wiki/Changes-ruby181_ruby182>))\n  を参照して下さい。\n* rss, rdoc, yaml の変更点は収録していません。\n\n\n=== 日時未詳\n: CGI#server_port [lib] [bug]\n  常に 0 を返すバグが修正されました。\n\n=== 2004-12-19\n\n: OpenSSL::X509::Store#time=           [lib] [new]\n: OpenSSL::X509::StoreContext#time=    [lib] [new]\n  追加。\n\n: OpenSSL::X509::Name::RFC2253DN       [lib] [new]\n  module for RFC2253 DN format.\n\n: OpenSSL::X509::Name.parse_rfc2253    [lib] [new]\n  new method to parse RFC2253 DN format.\n\n=== 2004-12-18\n\n: Object#id [ruby] [obsolete]\n  常に警告がでるようになりました。Object#object_id を使って下さい。\n\n=== 2004-12-17\n: CGI::Session#initialize [lib] [compat]\n  'no_hidden' オプションを指定できるようになりました。((<ruby-talk:123850>))\n\n=== 2004-12-16\n\n: Hash#eql? [ruby] [obsolete]\n: Hash#hash [ruby] [obsolete]\n\n  削除\n  ((<ruby-dev:25206>))?\n\n=== 2004-12-14\n: CGI::Session.initialize [lib] [change]\n  存在しないセッション ID がクライアントから送られてきた場合\n  例外を投げずに新しいセッションを作成するようになりました。\n  ((<ruby-list:40368>))\n\n=== 2004-12-09\n: eval('Foo #@ bar'.inspect) [ruby] [bug]\n  シンタックスエラーにならないように修正しました。\n  ((<ruby-core:03922>))\n\n: String#inspect [ruby] [bug]\n  式展開になる '#'がエスケープされるようになりました。 \n  ((<ruby-core:03922>))\n    $ ruby1.8.1 -e \"puts '# #{}'.inspect\"\n    \"# #{}\"\n\n    $ ruby1.8.2 -e \"puts '# #{}'.inspect\"\n    \"# \\#{}\"\n\n: String#dump [ruby] [bug]\n  式展開にならない '#'がエスケープされないようになりました。 \n  ((<ruby-core:03922>))\n    $ ruby1.8.1 -e \"puts '# #{}'.dump\"\n    \"\\# \\#{}\"\n\n    $ ruby1.8.2 -e \"puts '# #{}'.dump\"\n    \"# \\#{}\"\n\n=== 2004-12-08\n: rss/rss [lib] [obsolete]\n  #item=/#set_item and so on are obsolete.\n\n=== 2004-12-06 \n: Hash#hash [ruby] [new]\n\n  追加\n\n  ((<ruby-talk:122482>))\n\n  Hash#hash は 2004-12-16 に削除されました。\n  ((<ruby-dev:25206>))?\n\n: OpenSSL::PKey::RSA.public_encrypt   [lib] [compat]\n: OpenSSL::PKey::RSA.public_decrypt   [lib] [compat]\n: OpenSSL::PKey::RSA.private_encrypt  [lib] [compat]\n: OpenSSL::PKey::RSA.private_decrypt  [lib] [compat]\n\n  パディングを指定出来るようになりました。((<ruby-talk:122539>))。PKCS1_PADDING, SSLV23_PADDING, NO_PADDING and PKCS1_OAEP_PADDING under OpenSSL::PKey::RSA.\n\n=== 2004-12-05\n: OptionParser::Completion#complete [lib] [compat]\n  new parameter to direct case insensitiveness.\n\n: OptionParser#order!               [lib] [change]\n  ((<ruby-dev:25048>))\n\n=== 2004-12-04\n: NKF.guess [lib] [compat]\n  NKF.guess は NKF.guess2 の alias になりました。 従来のものを使いたい場合は\n  NKF.guess1 を使って下さい。\n\n=== 2004-11-20\n: ext/nkf/nkf-utf8/  [lib] [new]\n  utf8 対応 nkf (nkf 2.x) の追加。\n\n: kconv [lib] [new]\n: Kconv.guess_old(str)\n: Kconv.toutf8(str)\n: Kconv.toutf16(str)\n: String#toutf8,\n: String#toutf16\n: String#iseuc\n: String#issjis\n: String#isutf8\n\n=== 2004-11-18\n: StringIO.new   [lib] [compat]\n  StringIO.newの第二引数にIO.newと同様、Fixnum も指定できるようになりました。\n  ((<ruby-dev:24896>))\n\n=== 2004-11-16\n: Test::Unit::AutoRunner.options [lib] [compat]\n  add new option --exclude (-x). ((<ruby-dev:24865>))\n\n: CGI::Session.initialize [lib] [compat]\n  'sufix' オプションを設定できるようになりました。\n\n=== 2004-11-10\n: Array#pack [ruby] [change]\n  P 指定子以外では nil を 0 に変換しなくなりました。\n\n    $ ruby-1.8.1 -e 'p [nil].pack(\"L\")'\n    \"\\000\\000\\000\\000\"\n    \n    $ ruby-1.8.2 -e 'p [nil].pack(\"L\")'\n    -e:1:in `pack': cannot convert nil into Integer (TypeError)\n        from -e:1\n    \n    $ ruby-1.8.2 -e 'p [nil].pack(\"P\")'\n    \"\\000\\000\\000\\000\"\n\n=== 2004-10-27\n: CGI [lib] [bug]\n  無限ループに陥る可能性のあるバグを修正しました。\n  ((<URL:http://www.debian.org/security/2004/dsa-586>))\n\n=== 2004-10-21\n: PStore#transaction  [lib] [compat]\n  PStore.new に指定したファイルがまだ存在しない場合に、PStore#transaction(true) を呼\n  び出しても例外 Errno::ENOENT が発生しなくなりました。((<ruby-dev:24561>))\n\n=== 2004-10-20\n\n: Proc#dup [new]\n\n  追加 ((<ruby-talk:116915>))\n\n=== 2004-10-19\n\n: ARGF [change]\n\n  コマンドライン引数に与えたファイルを読んだ後には標準入力を読まなくなりました。\n  ((<ruby-dev:24452>))\n\n: IO#gets [ruby] [bug]\n  \"\\377\" を引数に受け取っても適切に振舞うようになりました。((<ruby-dev:24460>))\n\n: Dir.glob [change]\n  ブロックを渡したとき、false ではなく nil を返すようになりました。また、readdir しながらブロックを呼ぶのではなく、全部を配列に貯めてから each するようになりました。((<ruby-dev:24528>))\n\n=== 2004-10-18\n\n: WEBrick::HTTPRequest [lib] [new]\n  new methods. accept, accept_charset, accept_encoding, accept_language, \n  content_length and content_type.\n\n: WEBrick::HTTPResponse#content_length= [lib] [new]\n: WEBrick::HTTPResponse#content_type= [lib] [new]\n: WEBrick::HTTPUtils.parse_qvalues [lib] [new]\n: WEBrick::HTTPServer#virtual_host [lib] [new]\n: WEBrick::HTTPServer#lookup_server [lib] [new]\n: WEBrick::HTTPServlet::FileHandler#get_servlet [lib] [new]\n\n=== 2004-09-03\n: Struct.new  [ruby] [bug]\n  同じ名前で二度定義したときのバグを修正しました。((<ruby-dev:24210>))\n\n=== 2004-08-24\n: CGI::Session::FileStore#initialize [lib] [bug]\n  セッションを保存するファイル名にセッション ID が使われるバグを修正しました。\n\n=== 2004-08-23\n: OpenSSL::SSL#pending [lib] [new]\n\n=== 2004-08-14\n: FileUtils.copy_entry [lib] [new]\n: FileUtils::DryRun [lib] [new]\n  追加。\n: FileUtils.mv [lib] [compat]\n  mv が :force オプションを受け付けるようになりました。\n\n=== 2004-08-07\n: Zlib::GzipReader#read(0) [lib] [compat]\n  Zlib::GzipReader#read(0) が nil ではなく \"\" を返すようになりました。\n\n=== 2004-07-28\n: CGI::CGI_PARAMS [lib] [obsolete]\n: CGI::CGI_COOKIES [lib] [obsolete]\n  常に警告がでるようになりました。\n\n=== 2004-07-23\n: Net::IMAP#disconnected? [lib] [new]\n\n: CGI::Session::FileStore#update [lib] [compat]\n  セッションを保存するファイルの mode をデフォルトで 0600 に\n  セットするようになりました。\n\n=== 2004-07-16\n\n: ((<SystemExit#success?|SystemExit/success?>)) [ruby] [new]\n\n  追加。((<ruby-dev:23912>))\n\n: File::Stat#dev_major [ruby] [new]\n: File::Stat#dev_minor [ruby] [new]\n  ((<ruby-core:03195>))\n\n=== 2004-07-05\n\n: Kernel#URI    [lib] [new]\n\n  uri で追加。((<ruby-dev:23784>))\n\n=== 2004-07-01\n: OpenSSL::Cipher::Cipher#pkcs5_keyivgen  [lib] [new]\n: OpenSSL::Cipher::Cipher#key_len=        [lib] [new]\n  new methods.\n\n: OpenSSL::PKey::DH                       [lib] [new]\n: OpenSSL::PKey::DSA                      [lib] [new]\n  many new methods. p, p=, g, g=, pub_key, pub_key=, priv_key, priv_key=.\n\n=== 2004-07-01\n: PStore [lib] [change]\n  データベースの更新が成功したらバックアップファイルを残さず削除するようになりました。\n  ファイル名に \"~\" が付いたバックアップファイルは残されません。((<ruby-list:39102>))\n\n=== 2004-06-29\n\n: misc\n  $SAFEが保存されない問題を修正しました。((<ruby-dev:23829>))\n\n=== 2004-06-23\n: net/imap [lib] [new]\n  added new option --ssl\n\n=== 2004-06-16\n\n: object.c     [ruby] [bug]\n  特異クラスが特異オブジェクトのクラスを継承していると見なされて\n  いるバグを修正しました。((<ruby-dev:23690>))\n\n    $ ruby1.8.1 -e 'class X;end; x=X.new; class << x;p self < X; end' \n    true\n\n    $ ruby1.8.2 -e 'class X;end; x=X.new; class << x;p self < X; end' \n    nil\n\n=== 2004-06-04\n\n: IO#gets, $_ [ruby] [change]\n  gets の返り値が nil でも、$_ に nil がセットされるようになりました。\n  ((<ruby-dev:23663>))\n\n=== 2004-05-27\n\n: CSV.parse  [lib] [change]\n  引数としてファイル名を受け付けなくなりました。\n  文字列が渡されると、それをパースすべき文字列だと解釈します。\n\n    CSV.parse(\"1,2\\n3,r\") #=> [['1', '2'], ['3', 'r']]\n  \n: CSV::Row   [lib] [obsolete]\n: CSV::Cell  [lib] [obsolete]\n  CSV::Row と CSV::Cell が deprecated になりました。\n\n: CSV.open, CSV.parse, and CSV,generate \n  必要ならばユーザが binmode をセットしなければならなくなりました。\n\n: CSV.read      [lib] [new]\n: CSV.readlines [lib] [new]\n  追加。\n\n: Marshal.dump [ruby] [bug]\n  特異メソッドを定義されていないオブジェクトを dump できない場合があったのを\n  修正しました。 ((<ruby-dev:22631>))\n\n: Marshal.dump [ruby] [bug]\n  特異クラス内のクラスを dump するとエラーになるようになりました。\n  ((<ruby-dev:22588>))\n\n=== 2004-05-16\n\n: DBM.open              [lib] [compat]\n: DBM::READER           [lib] [new]\n: DBM::WRITER           [lib] [new]\n: DBM::WRCREAT          [lib] [new]\n: DBM::NEWDB            [lib] [new]\n\n  DBM.open に第3引数を追加し、DBM::READER,\n  DBM::WRITER, DBM::WRCREAT, DBM::NEWDB を指定できるようになりました。  \n  ((<ruby-dev:23520>))\n\n=== 2004-05-13\n\n: Net::Telnet#login    [lib] [compat]\n  \"options\" でログインプロンプトとパスワードプロンプトのための正規表現を\n  指定できるようになりました。\n\n: String#unpack [ruby] [change]\n  Z* が最初の null までしかマッチしないようになりました。((<ruby-talk:98281>))\n\n    $ ruby1.8.1 -e 'p \"abc\\000def\\000\".unpack(\"Z*Z*\")' \n    [\"abc\\000def\", \"\"]\n\n    $ ruby1.8.2 -e 'p \"abc\\000def\\000\".unpack(\"Z*Z*\")' \n    [\"abc\", \"def\"]\n\n=== 2004-05-10\n: superclass mismatch [ruby] [change]\n  親クラスの違う同じ名前のクラスを再定義した時  TypeError を投げるようになりました。\n  ((<ruby-list:39567>))\n\n    $ ruby-1.8.2 -e '\n    class Foo\n      Bar = 1\n    end\n    \n    class Foo < String\n      Baz = 2\n    end\n    '\n    -e:6: superclass mismatch for class Foo (TypeError)\n\n=== 2004-04-19\n\n: Hash#==   [change]\n: Hash#eql? [new]\n\n  Hash#== は内容が一致していれば真に、Hash#eql? は、さらに \n  ハッシュのデフォルト値が同じ(==)なら真になるよう定義されました。\n\n        h1 = Hash.new(\"a\")\n        h2 = Hash.new(\"a\")\n        h3 = Hash.new(\"b\")\n\n        p h1 == h2\n        p h1.eql?(h2)\n\n        p h1 == h3\n        p h1.eql?(h3)\n\n        # => ruby 1.8.1 (2003-12-25) [i586-linux]\n             true\n             false\n             false\n             false\n        # => ruby 1.8.2 (2004-07-17) [i586-linux]\n             true\n             true\n             true\n             false\n        # => ruby 1.9.0 (2004-07-17) [i586-linux]\n             true\n             true\n             true\n             false\n\n  ((<ruby-talk:97559>))\n\n  Hash#eql? は 2004-12-16 に削除されました。\n  ((<ruby-dev:25206>))?\n\n=== 2004-04-16\n: String#== [lib] [change]\n  nil を返さず、常に false か true を返すようになりました。((<ruby-dev:23404>))\n\n    $ ruby1.8.1 -e 'p \"a\" == :a'\n    nil\n\n    $ ruby1.8.2 -e 'p \"a\" == :a'\n    false\n\n=== 2004-04-15\n\n: GDBM::READER          [lib] [new]\n: GDBM::WRITER          [lib] [new]\n: GDBM::WRCREAT         [lib] [new]\n: GDBM::NEWDB           [lib] [new]\n\n  GDBM に read only などで access できるようになりました。((<ruby-dev:23381>))\n\n: Process::Status#success? [ruby][new]\n  ((<ruby-dev:23385>))\n\n=== 2004-04-11\n\n: ruby.c    [ruby] [bug]\n\n  オプション --with-static-linked-ext 付きでコンパイルした時の、\n  -r オプションのエラーメッセージを修正。((<ruby-dev:23357>))\n\n=== 2004-03-8\n: WEBrick::Config::HTTP [lib] [change]\n  オプション :RequestHander は :RequestCallback に名前が変わりました。\n  オプション :ServerAlias が追加されました。\n\n=== 2004-02-24\n: OpenSSL::Config#each [lib] [new]\n\n: Dir.glob [ruby] [change]\n  File::FNM_DOTMATCH がセットされない限り Dir.glob('test/**/') は 'test/.test/' などに\n  マッチしなくなりました。((<ruby-dev:23014>))\n\n=== 2004-02-20\n: irb [lib] [new]\n  -I オプションが使えるようになりました。((<ruby-list:39243>))\n\n=== 2004-02-18\n: StringScanner#peep [lib] [obsolete]\n  $VERVOSE が設定されている時に警告がでるようになりました。use #peek.\n: StringScanner#empty? [lib] [obsolete]\n  $VERVOSE が設定されている時に警告がでるようになりました。use #eos?.\n: StringScanner#clear [lib] [obsolete] \n  $VERVOSE が設定されている時に警告がでるようになりました。use #terminate.\n: StringScanner#getbyte [lib] [obsolete] \n  $VERVOSE が設定されている時に警告がでるようになりました。use #get_byte.\n: StringScanner#restsize [lib] [obsolete]\n  $VERVOSE が設定されている時に警告がでるようになりました。use #rest_size.\n: StringScanner#matchedsize [lib] [obsolete]\n  $VERVOSE が設定されている時に警告がでるようになりました。use #matched_size.\n: ScanError  [lib] [obsolete]\n  use StringScanner::Error.\n\n=== 2004-02-10\n\n: ((<String#~|String/~>))  [obsolete]\n: ((<String#=~|String/=~>)) [obsolete]\n\n  String#~ は削除されました。また、str =~ str を実行すると例外\n  が発生するようになりました。\n  ((<ruby 1.8 feature/2003-07-19>)), ((<ruby 1.8 feature/2003-05-26>))、\n  ((<ruby-dev:22851>))\n\n=== 2004-02-09\n: File.fnmatch  [ruby] [bug]\n  適切にマッチしないバグを修正しました。\n  ((<ruby-dev:22815>)) ((<ruby-dev:22819>))\n\n=== 2004-02-06\n: PrettyPrint#first? [lib] [obsolete]\n\n=== 2004-02-05\n: PrettyPrint#seplist [lib] [new]\n\n=== 2004-01-29\n: OpenSSL::X509::Name#add_entry [lib] [new]\n\n=== 2004-01-26\n: Regexp.new [ruby] [obsolete]\n\n  「{,m}」表記の場合と「{n,m}」の n,m が数字でない場合に警告を出力するようになりました。((<ruby-dev:22626>))\n\n  文字「}」がエスケープされていない場合に警告を出力するようになりました。 ((<ruby-dev:22627>))\n\n=== 2004-01-08\n: OpenSSL::PKey::DH#to_der [lib] [new]\n: OpenSSL::PKey::DSA#to_der [lib] [new]\n: OpenSSL::PKey::RSA#to_der [lib] [new]\n\n\n=== 2003-12-31\n: ARGF.each_byte [ruby] [compat]\n  nil ではなく ARGF を返すようになりました。((<ruby-dev:22465>))\n\n=== 2003-12-27\n: ruby -i.bak [ruby] [compat]\n  inplace edit mode で標準入力から読み込んだ時常に警告を\n  出力するようになりました。\n\n=== 2003-12-26\n: ARGF.read(nil)\n  引数に nil を許すようになりました。((<ruby-dev:22433>))",
          "snippets": []
        }
      ],
      "related_entries": []
    },
    {
      "signature": "Enumerable#first -> object | nil",
      "score": 40.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "Enumerable オブジェクトの最初の要素、もしくは最初の n 要素を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerable/i/first.html",
          "description": "Enumerable オブジェクトの最初の要素、もしくは最初の n 要素を返します。\n\nEnumerable オブジェクトが空の場合、引数を指定しない形式では nil を返します。\n引数を指定する形式では、空の配列を返します。\n\n@param n 取得する要素数。\n\n//emlist[例][ruby]{\ne = \"abcd\".each_byte\ne.first #=> 97\ne.first(2) #=> [97,98]\ne = \"\".each_byte\ne.first #=> nil\ne.first(2) #=> []\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:Enumerable/"
        }
      ]
    },
    {
      "signature": "Enumerable#take_while -> Enumerator",
      "score": 40.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "Enumerable オブジェクトの要素を順に偽になるまでブロックで評価します。\n最初に偽になった要素の手前の要素までを配列として返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerable/i/take_while.html",
          "description": "Enumerable オブジェクトの要素を順に偽になるまでブロックで評価します。\n最初に偽になった要素の手前の要素までを配列として返します。\n\n//emlist[例][ruby]{\ne = [1, 2, 3, 4, 5, 0].each\ne.take_while {|i| i < 3 }   # => [1, 2]\n//}\n\nブロックを省略した場合は Enumerator を返します。\n\n@see Array#take_while",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:Enumerable/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://rurema.clear-code.com/api:v1/query:Enumerator/"
        }
      ]
    },
    {
      "signature": "Enumerable#count -> Integer",
      "score": 37.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "レシーバの要素数を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerable/i/count.html",
          "description": "レシーバの要素数を返します。\n\n引数を指定しない場合は、レシーバの要素数を返します。\nこのとき、要素数を一つずつカウントします。\n\n引数を一つ指定した場合は、レシーバの要素のうち引数に一致するものの\n個数をカウントして返します(一致は == で判定します)。\n\nブロックを指定した場合は、ブロックを評価して真になった要素の個数を\nカウントして返します。\n\n@param item カウント対象となる値。\n\n//emlist[例][ruby]{\nenum = [1, 2, 4, 2].each\nenum.count                  # => 4\nenum.count(2)               # => 2\nenum.count{|x|x%2==0}       # => 3\n//}\n\n@see Array#count",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:Enumerable/"
        }
      ]
    },
    {
      "signature": "Enumerable#count {|obj| ... } -> Integer",
      "score": 37.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "レシーバの要素数を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerable/i/count.html",
          "description": "レシーバの要素数を返します。\n\n引数を指定しない場合は、レシーバの要素数を返します。\nこのとき、要素数を一つずつカウントします。\n\n引数を一つ指定した場合は、レシーバの要素のうち引数に一致するものの\n個数をカウントして返します(一致は == で判定します)。\n\nブロックを指定した場合は、ブロックを評価して真になった要素の個数を\nカウントして返します。\n\n@param item カウント対象となる値。\n\n//emlist[例][ruby]{\nenum = [1, 2, 4, 2].each\nenum.count                  # => 4\nenum.count(2)               # => 2\nenum.count{|x|x%2==0}       # => 3\n//}\n\n@see Array#count",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:Enumerable/"
        }
      ]
    },
    {
      "signature": "Enumerable#count(item) -> Integer",
      "score": 37.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "レシーバの要素数を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerable/i/count.html",
          "description": "レシーバの要素数を返します。\n\n引数を指定しない場合は、レシーバの要素数を返します。\nこのとき、要素数を一つずつカウントします。\n\n引数を一つ指定した場合は、レシーバの要素のうち引数に一致するものの\n個数をカウントして返します(一致は == で判定します)。\n\nブロックを指定した場合は、ブロックを評価して真になった要素の個数を\nカウントして返します。\n\n@param item カウント対象となる値。\n\n//emlist[例][ruby]{\nenum = [1, 2, 4, 2].each\nenum.count                  # => 4\nenum.count(2)               # => 2\nenum.count{|x|x%2==0}       # => 3\n//}\n\n@see Array#count",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:Enumerable/"
        }
      ]
    },
    {
      "signature": "Enumerable#sum(init=0) -> object",
      "score": 37.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "要素の合計を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerable/i/sum.html",
          "description": "要素の合計を返します。\n\nブロックが与えられた場合、加算する前に各要素にブロックが適用されます。\n\nselfが空の場合、initを返します。\n\n//emlist[例][ruby]{\n{ 1 => 10, 2 => 20 }.sum {|k, v| k * v }  # => 50\n(1..10).sum                               # => 55\n(1..10).sum {|v| v * 2 }                  # => 110\n('a'..'z').sum                            # => TypeError\n//}\n\ninit 引数を明示的に指名すると数値以外のオブジェクトにも使えます。\n\n//emlist[例][ruby]{\n{ 1 => 10, 2 => 20 }.sum([])                   #=> [1, 10, 2, 20]\n\"a\\nb\\nc\".each_line.lazy.map(&:chomp).sum(\"\")  #=> \"abc\"\n[[1], [[2]], [3]].sum([])          #=> [1, [2], 3]\n//}\n\n\"+\" メソッドが再定義されている場合、Enumerable#sum は再定義を無視することがあります(例えばInteger#+)。\n\n@see Array#sum",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:Enumerable/"
        }
      ]
    },
    {
      "signature": "Enumerable#sum(init=0) {|e| expr } -> object",
      "score": 37.0,
      "metadata": { "type": "instance-method", "versions": ["3.2.0"] },
      "summary": "要素の合計を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/Enumerable/i/sum.html",
          "description": "要素の合計を返します。\n\nブロックが与えられた場合、加算する前に各要素にブロックが適用されます。\n\nselfが空の場合、initを返します。\n\n//emlist[例][ruby]{\n{ 1 => 10, 2 => 20 }.sum {|k, v| k * v }  # => 50\n(1..10).sum                               # => 55\n(1..10).sum {|v| v * 2 }                  # => 110\n('a'..'z').sum                            # => TypeError\n//}\n\ninit 引数を明示的に指名すると数値以外のオブジェクトにも使えます。\n\n//emlist[例][ruby]{\n{ 1 => 10, 2 => 20 }.sum([])                   #=> [1, 10, 2, 20]\n\"a\\nb\\nc\".each_line.lazy.map(&:chomp).sum(\"\")  #=> \"abc\"\n[[1], [[2]], [3]].sum([])          #=> [1, [2], 3]\n//}\n\n\"+\" メソッドが再定義されている場合、Enumerable#sum は再定義を無視することがあります(例えばInteger#+)。\n\n@see Array#sum",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "module",
          "url": "https://rurema.clear-code.com/api:v1/module:Enumerable/"
        }
      ]
    },
    {
      "signature": "CSV.parse(str, options = Hash.new) {|row| ... } -> nil",
      "score": 22.0,
      "metadata": { "type": "singleton-method", "versions": ["3.2.0"] },
      "summary": "このメソッドは文字列を簡単にパースすることができます。\nブロックを与えた場合は、ブロックにそれぞれの行を渡します。\nブロックを省略した場合は、配列の配列を返します。",
      "documents": [
        {
          "version": "3.2.0",
          "url": "https://rurema.clear-code.com/3.2.0/method/CSV/s/parse.html",
          "description": "このメソッドは文字列を簡単にパースすることができます。\nブロックを与えた場合は、ブロックにそれぞれの行を渡します。\nブロックを省略した場合は、配列の配列を返します。\n\n@param str 文字列を指定します。\n\n@param options CSV.new のオプションと同じオプションを指定できます。\n\n//emlist[例][ruby]{\nrequire 'csv'\nrequire 'pp'\n\ns = <<EOS\nid,first name,last name,age\n1,taro,tanaka,20\n2,jiro,suzuki,18\nEOS\n\npp CSV.parse(s)\n# => [[\"id\", \"first name\", \"last name\", \"age\"],\n#     [\"1\", \"taro\", \"tanaka\", \"20\"],\n#     [\"2\", \"jiro\", \"suzuki\", \"18\"]]\n\nCSV.parse(s, headers: true).each do |row|\n  p [row['first name'], row['age']]\nend\n# => [\"taro\", \"20\"]\n#    [\"jiro\", \"18\"]\n//}\n\n//emlist[例][ruby]{\nrequire \"csv\"\n\ncsv = \"id|first name|last name|age\\n1|taro|tanaka|20\\n2|jiro|suzuki|18\"\nCSV.parse(csv, col_sep: '|') do |row|\n  p [row[1], row[2]]\nend\n# => [\"first name\", \"last name\"]\n# => [\"taro\", \"tanaka\"]\n# => [\"jiro\", \"suzuki\"]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "CSV",
          "label": "CSV",
          "type": "class",
          "url": "https://rurema.clear-code.com/api:v1/class:CSV/"
        }
      ]
    }
  ]
}
