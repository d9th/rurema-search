{
  "versions": [
    {
      "name": "all",
      "selected": false
    },
    {
      "name": "2.4.0",
      "selected": false
    },
    {
      "name": "2.5.0",
      "selected": false
    },
    {
      "name": "2.6.0",
      "selected": false
    },
    {
      "name": "2.7.0",
      "selected": false
    },
    {
      "name": "3.0.0",
      "selected": true
    },
    {
      "name": "3.1.0",
      "selected": false
    }
  ],
  "statistics": {
    "total": 64,
    "start_offset": 1,
    "end_offset": 64,
    "elapsed_time": 0.034317970275878906
  },
  "conditions": [
    {
      "name": "version",
      "value": "3.0.0",
      "icon_url": "https://docs.ruby-lang.org/ja/search/images/version-icon.png"
    },
    {
      "name": "query",
      "value": "string",
      "icon_url": "https://docs.ruby-lang.org/ja/search/images/query-icon.png"
    },
    {
      "name": "query",
      "value": "length",
      "icon_url": "https://docs.ruby-lang.org/ja/search/images/query-icon.png"
    }
  ],
  "corrections": [
    {
      "value": "string []=",
      "score": 8193
    },
    {
      "value": "string slice!",
      "score": 7022
    },
    {
      "value": "string slice",
      "score": 7022
    },
    {
      "value": "string []",
      "score": 7022
    },
    {
      "value": "string gsub!",
      "score": 4680
    }
  ],
  "suggestions": [],
  "entries": [
    {
      "signature": "String#length -> Integer",
      "score": 81376,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "文字列の文字数を返します。バイト数を知りたいときは bytesize メソッドを使ってください。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/String/i/length.html",
          "description": "文字列の文字数を返します。バイト数を知りたいときは bytesize メソッドを使ってください。\n\n//emlist[例][ruby]{\n\"test\".length          # => 4\n\"test\".size            # => 4\n\"テスト\".length         # => 3\n\"テスト\".size           # => 3\n\"\\x80\\u3042\".length    # => 2\n\"\\x80\\u3042\".size      # => 2\n//}\n\n@see String#bytesize",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "String",
          "label": "String",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:String/"
        }
      ]
    },
    {
      "signature": "StringIO#length -> Integer",
      "score": 63304,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "文字列の長さを返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/StringIO/i/length.html",
          "description": "文字列の長さを返します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:StringIO/"
        }
      ]
    },
    {
      "signature": "Symbol#length -> Integer",
      "score": 54394,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "シンボルに対応する文字列の長さを返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Symbol/i/length.html",
          "description": "シンボルに対応する文字列の長さを返します。\n\n(self.to_s.length と同じです。)\n\n  :foo.length #=> 3\n\n@see String#length, String#size",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Symbol",
          "label": "Symbol",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:Symbol/"
        }
      ]
    },
    {
      "signature": "String#size -> Integer",
      "score": 36076,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "文字列の文字数を返します。バイト数を知りたいときは bytesize メソッドを使ってください。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/String/i/length.html",
          "description": "文字列の文字数を返します。バイト数を知りたいときは bytesize メソッドを使ってください。\n\n//emlist[例][ruby]{\n\"test\".length          # => 4\n\"test\".size            # => 4\n\"テスト\".length         # => 3\n\"テスト\".size           # => 3\n\"\\x80\\u3042\".length    # => 2\n\"\\x80\\u3042\".size      # => 2\n//}\n\n@see String#bytesize",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "String",
          "label": "String",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:String/"
        }
      ]
    },
    {
      "signature": "WEBrick::HTTPResponse#content_length -> Integer | nil",
      "score": 18553,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "Content-Length ヘッダの値を整数で表すアクセサです。デフォルトは nil です。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/WEBrick=3a=3aHTTPResponse/i/content_length.html",
          "description": "Content-Length ヘッダの値を整数で表すアクセサです。デフォルトは nil です。\n\n: body が String オブジェクトである場合\n  content_length の値が nil のとき Content-Length ヘッダには\n  body のサイズが使われます。nil でないとき body の実際のサイズとこの値が同じかどうかの検証は行われません。\n: body が IO オブジェクトである場合\n  content_length の値が nil のとき Content-Length ヘッダはレスポンスに含まれず、IO から全てを読み込ん\n  でそれをエンティティボディとします。nil でないとき IO から content_length バイトだけ読み込みそれを\n  エンティティボディとします。\n\nまた 2616 4.4 で定められた Content-Length ヘッダを送ってはいけない場合に当てはまる時には\ncontent_length の値は無視され Content-Length ヘッダはレスポンスに含まれません。\n\n@param len ヘッダの値を整数で指定します。nil を指定することは出来ません。\n\n  require 'webrick'\n  include WEBrick\n  res = HTTPResponse.new( { :HTTPVersion => \"1.1\" } )\n  f = File.new('testfile')\n  res.body = f\n  res.content_length = 2\n  print res.to_s\n  \n  #=> 出力結果\n  HTTP/1.1 200 OK\n  Connection: Keep-Alive\n  Date: Sat, 27 Oct 2007 12:04:32 GMT\n  Server:\n  Content-Length: 2\n  \n  ho",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "WEBrick::HTTPResponse",
          "label": "WEBrick::HTTPResponse",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:WEBrick%3A%3AHTTPResponse/"
        }
      ]
    },
    {
      "signature": "WEBrick::HTTPResponse#content_length=(len)",
      "score": 18553,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "Content-Length ヘッダの値を整数で表すアクセサです。デフォルトは nil です。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/WEBrick=3a=3aHTTPResponse/i/content_length.html",
          "description": "Content-Length ヘッダの値を整数で表すアクセサです。デフォルトは nil です。\n\n: body が String オブジェクトである場合\n  content_length の値が nil のとき Content-Length ヘッダには\n  body のサイズが使われます。nil でないとき body の実際のサイズとこの値が同じかどうかの検証は行われません。\n: body が IO オブジェクトである場合\n  content_length の値が nil のとき Content-Length ヘッダはレスポンスに含まれず、IO から全てを読み込ん\n  でそれをエンティティボディとします。nil でないとき IO から content_length バイトだけ読み込みそれを\n  エンティティボディとします。\n\nまた 2616 4.4 で定められた Content-Length ヘッダを送ってはいけない場合に当てはまる時には\ncontent_length の値は無視され Content-Length ヘッダはレスポンスに含まれません。\n\n@param len ヘッダの値を整数で指定します。nil を指定することは出来ません。\n\n  require 'webrick'\n  include WEBrick\n  res = HTTPResponse.new( { :HTTPVersion => \"1.1\" } )\n  f = File.new('testfile')\n  res.body = f\n  res.content_length = 2\n  print res.to_s\n  \n  #=> 出力結果\n  HTTP/1.1 200 OK\n  Connection: Keep-Alive\n  Date: Sat, 27 Oct 2007 12:04:32 GMT\n  Server:\n  Content-Length: 2\n  \n  ho",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "WEBrick::HTTPResponse",
          "label": "WEBrick::HTTPResponse",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:WEBrick%3A%3AHTTPResponse/"
        }
      ]
    },
    {
      "signature": "StringIO#size -> Integer",
      "score": 18004,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "文字列の長さを返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/StringIO/i/length.html",
          "description": "文字列の長さを返します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:StringIO/"
        }
      ]
    },
    {
      "signature": "StringIO#readpartial -> String",
      "score": 9373,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "自身から len バイト読み込んで返します。\nStringIO#read と同じです。ただし、文字列の終端に達した場合、EOFError を投げます。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/StringIO/i/readpartial.html",
          "description": "自身から len バイト読み込んで返します。\nStringIO#read と同じです。ただし、文字列の終端に達した場合、EOFError を投げます。\n\n@param len 読み込みたい長さを整数で指定します。StringIO#read と同じです。\n\n@param outbuf 読み込んだ文字列を出力するバッファを文字列で指定します。指定した文字列オブジェクトが\n              あらかじめ length 長の領域であれば、余計なメモリの割当てが行われません。指定した文字列の\n              長さが length と異なる場合、その文字列は一旦 length 長に拡張(あるいは縮小)されたあと、\n              実際に読み込んだデータのサイズになります。IO#read と同じです。\n\n@raise EOFError 文字列の終端に達した場合に発生します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:StringIO/"
        }
      ]
    },
    {
      "signature": "StringIO#readpartial(len) -> String",
      "score": 9373,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "自身から len バイト読み込んで返します。\nStringIO#read と同じです。ただし、文字列の終端に達した場合、EOFError を投げます。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/StringIO/i/readpartial.html",
          "description": "自身から len バイト読み込んで返します。\nStringIO#read と同じです。ただし、文字列の終端に達した場合、EOFError を投げます。\n\n@param len 読み込みたい長さを整数で指定します。StringIO#read と同じです。\n\n@param outbuf 読み込んだ文字列を出力するバッファを文字列で指定します。指定した文字列オブジェクトが\n              あらかじめ length 長の領域であれば、余計なメモリの割当てが行われません。指定した文字列の\n              長さが length と異なる場合、その文字列は一旦 length 長に拡張(あるいは縮小)されたあと、\n              実際に読み込んだデータのサイズになります。IO#read と同じです。\n\n@raise EOFError 文字列の終端に達した場合に発生します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:StringIO/"
        }
      ]
    },
    {
      "signature": "StringIO#readpartial(len, outbuf) -> String",
      "score": 9373,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "自身から len バイト読み込んで返します。\nStringIO#read と同じです。ただし、文字列の終端に達した場合、EOFError を投げます。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/StringIO/i/readpartial.html",
          "description": "自身から len バイト読み込んで返します。\nStringIO#read と同じです。ただし、文字列の終端に達した場合、EOFError を投げます。\n\n@param len 読み込みたい長さを整数で指定します。StringIO#read と同じです。\n\n@param outbuf 読み込んだ文字列を出力するバッファを文字列で指定します。指定した文字列オブジェクトが\n              あらかじめ length 長の領域であれば、余計なメモリの割当てが行われません。指定した文字列の\n              長さが length と異なる場合、その文字列は一旦 length 長に拡張(あるいは縮小)されたあと、\n              実際に読み込んだデータのサイズになります。IO#read と同じです。\n\n@raise EOFError 文字列の終端に達した場合に発生します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:StringIO/"
        }
      ]
    },
    {
      "signature": "StringIO#sysread -> String",
      "score": 9373,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "自身から len バイト読み込んで返します。\nStringIO#read と同じです。ただし、文字列の終端に達した場合、EOFError を投げます。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/StringIO/i/readpartial.html",
          "description": "自身から len バイト読み込んで返します。\nStringIO#read と同じです。ただし、文字列の終端に達した場合、EOFError を投げます。\n\n@param len 読み込みたい長さを整数で指定します。StringIO#read と同じです。\n\n@param outbuf 読み込んだ文字列を出力するバッファを文字列で指定します。指定した文字列オブジェクトが\n              あらかじめ length 長の領域であれば、余計なメモリの割当てが行われません。指定した文字列の\n              長さが length と異なる場合、その文字列は一旦 length 長に拡張(あるいは縮小)されたあと、\n              実際に読み込んだデータのサイズになります。IO#read と同じです。\n\n@raise EOFError 文字列の終端に達した場合に発生します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:StringIO/"
        }
      ]
    },
    {
      "signature": "StringIO#sysread(len) -> String",
      "score": 9373,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "自身から len バイト読み込んで返します。\nStringIO#read と同じです。ただし、文字列の終端に達した場合、EOFError を投げます。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/StringIO/i/readpartial.html",
          "description": "自身から len バイト読み込んで返します。\nStringIO#read と同じです。ただし、文字列の終端に達した場合、EOFError を投げます。\n\n@param len 読み込みたい長さを整数で指定します。StringIO#read と同じです。\n\n@param outbuf 読み込んだ文字列を出力するバッファを文字列で指定します。指定した文字列オブジェクトが\n              あらかじめ length 長の領域であれば、余計なメモリの割当てが行われません。指定した文字列の\n              長さが length と異なる場合、その文字列は一旦 length 長に拡張(あるいは縮小)されたあと、\n              実際に読み込んだデータのサイズになります。IO#read と同じです。\n\n@raise EOFError 文字列の終端に達した場合に発生します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:StringIO/"
        }
      ]
    },
    {
      "signature": "StringIO#sysread(len, outbuf) -> String",
      "score": 9373,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "自身から len バイト読み込んで返します。\nStringIO#read と同じです。ただし、文字列の終端に達した場合、EOFError を投げます。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/StringIO/i/readpartial.html",
          "description": "自身から len バイト読み込んで返します。\nStringIO#read と同じです。ただし、文字列の終端に達した場合、EOFError を投げます。\n\n@param len 読み込みたい長さを整数で指定します。StringIO#read と同じです。\n\n@param outbuf 読み込んだ文字列を出力するバッファを文字列で指定します。指定した文字列オブジェクトが\n              あらかじめ length 長の領域であれば、余計なメモリの割当てが行われません。指定した文字列の\n              長さが length と異なる場合、その文字列は一旦 length 長に拡張(あるいは縮小)されたあと、\n              実際に読み込んだデータのサイズになります。IO#read と同じです。\n\n@raise EOFError 文字列の終端に達した場合に発生します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:StringIO/"
        }
      ]
    },
    {
      "signature": "StringIO#read -> String",
      "score": 9364,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "自身から len バイト読み込んで返します。len が省略された場合は、最後まで読み込んで返します。\n詳しい仕様は IO#read を参照して下さい。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/StringIO/i/read.html",
          "description": "自身から len バイト読み込んで返します。len が省略された場合は、最後まで読み込んで返します。\n詳しい仕様は IO#read を参照して下さい。\n\n@param len 読み込みたい長さを整数で指定します。詳しい仕様は IO#read を参照して下さい。\n\n@param outbuf 読み込んだ文字列を出力するバッファを文字列で指定します。指定した文字列オブジェクトが\n              あらかじめ length 長の領域であれば、余計なメモリの割当てが行われません。指定した文字列の\n              長さが length と異なる場合、その文字列は一旦 length 長に拡張(あるいは縮小)されたあと、\n              実際に読み込んだデータのサイズになります。IO#read と同じです。\n\n@raise IOError 自身が読み込み用にオープンされていなければ発生します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:StringIO/"
        }
      ]
    },
    {
      "signature": "StringIO#read(len) -> String | nil",
      "score": 9364,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "自身から len バイト読み込んで返します。len が省略された場合は、最後まで読み込んで返します。\n詳しい仕様は IO#read を参照して下さい。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/StringIO/i/read.html",
          "description": "自身から len バイト読み込んで返します。len が省略された場合は、最後まで読み込んで返します。\n詳しい仕様は IO#read を参照して下さい。\n\n@param len 読み込みたい長さを整数で指定します。詳しい仕様は IO#read を参照して下さい。\n\n@param outbuf 読み込んだ文字列を出力するバッファを文字列で指定します。指定した文字列オブジェクトが\n              あらかじめ length 長の領域であれば、余計なメモリの割当てが行われません。指定した文字列の\n              長さが length と異なる場合、その文字列は一旦 length 長に拡張(あるいは縮小)されたあと、\n              実際に読み込んだデータのサイズになります。IO#read と同じです。\n\n@raise IOError 自身が読み込み用にオープンされていなければ発生します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:StringIO/"
        }
      ]
    },
    {
      "signature": "StringIO#read(len, outbuf) -> String",
      "score": 9364,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "自身から len バイト読み込んで返します。len が省略された場合は、最後まで読み込んで返します。\n詳しい仕様は IO#read を参照して下さい。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/StringIO/i/read.html",
          "description": "自身から len バイト読み込んで返します。len が省略された場合は、最後まで読み込んで返します。\n詳しい仕様は IO#read を参照して下さい。\n\n@param len 読み込みたい長さを整数で指定します。詳しい仕様は IO#read を参照して下さい。\n\n@param outbuf 読み込んだ文字列を出力するバッファを文字列で指定します。指定した文字列オブジェクトが\n              あらかじめ length 長の領域であれば、余計なメモリの割当てが行われません。指定した文字列の\n              長さが length と異なる場合、その文字列は一旦 length 長に拡張(あるいは縮小)されたあと、\n              実際に読み込んだデータのサイズになります。IO#read と同じです。\n\n@raise IOError 自身が読み込み用にオープンされていなければ発生します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:StringIO/"
        }
      ]
    },
    {
      "signature": "StringIO#read_nonblock(maxlen, outbuf = nil, exception: true) -> String | nil",
      "score": 9358,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "StringIO#readに似ていますが、 exception オプションに false を指定すると EOFError を発生させず nil を返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/StringIO/i/read_nonblock.html",
          "description": "StringIO#readに似ていますが、 exception オプションに false を指定すると EOFError を発生させず nil を返します。\n\n@param len 読み込みたい長さを整数で指定します。StringIO#read と同じです。\n\n@param outbuf 読み込んだ文字列を出力するバッファを文字列で指定します。指定した文字列オブジェクトが\n              あらかじめ length 長の領域であれば、余計なメモリの割当てが行われません。指定した文字列の\n              長さが length と異なる場合、その文字列は一旦 length 長に拡張(あるいは縮小)されたあと、\n              実際に読み込んだデータのサイズになります。IO#read と同じです。\n\n@param exception false を指定した場合、既に EOF に達していれば\n                 EOFError の代わりに nil を返します。\n\n@raise EOFError 文字列の終端に達した場合に発生します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:StringIO/"
        }
      ]
    },
    {
      "signature": "Symbol#size -> Integer",
      "score": 9094,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "シンボルに対応する文字列の長さを返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Symbol/i/length.html",
          "description": "シンボルに対応する文字列の長さを返します。\n\n(self.to_s.length と同じです。)\n\n  :foo.length #=> 3\n\n@see String#length, String#size",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Symbol",
          "label": "Symbol",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:Symbol/"
        }
      ]
    },
    {
      "signature": "1.6.8から1.8.0への変更点(まとめ)",
      "score": 2017,
      "metadata": {
        "type": "document",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "1.6.8から1.8.0への変更点(まとめ) \n* ((<1.6.8から1.8.0への変更点(まとめ)/インタプリタの変更>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/追加されたクラス／モジュール>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/追加されたメソッド>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/追加された定数>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/拡張されたクラス／メソッド(互換性のある変更)>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/変更されたクラス／メソッド(互換性のない変更)>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/文法の変更>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/正規表現>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/Marshal>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/Windows 対応>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/廃止された(される予定の)機能>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/ライブラリ>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/拡張ライブラリAPI>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/バグ修正>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/サポートプラットフォームの追加>))",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/doc/news=2f1=2e8=2e0.html",
          "description": "1.6.8から1.8.0への変更点(まとめ) \n* ((<1.6.8から1.8.0への変更点(まとめ)/インタプリタの変更>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/追加されたクラス／モジュール>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/追加されたメソッド>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/追加された定数>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/拡張されたクラス／メソッド(互換性のある変更)>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/変更されたクラス／メソッド(互換性のない変更)>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/文法の変更>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/正規表現>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/Marshal>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/Windows 対応>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/廃止された(される予定の)機能>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/ライブラリ>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/拡張ライブラリAPI>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/バグ修正>))\n* ((<1.6.8から1.8.0への変更点(まとめ)/サポートプラットフォームの追加>))\n\n== インタプリタの変更\n\n: ((<組み込み変数/$defout>)) [obsolete]\n: ((<組み込み変数/$deferr>)) [obsolete]\n: ((<組み込み変数/$stdout>)) [change]\n: ((<組み込み変数/$stderr>)) [change]\n: ((<組み込み変数/$stdin>))  [change]\n\n  $stdout, $stderr は、$defout, $deferr の別名になり\n  $defout, $deferr は ((<obsolete>)) になりました\n\n  $stdin は、普通のグローバル変数となりました(STDINをリダイレクトする\n  動作はなくなりました)\n\n  $defout や $deferr に代入を行うと警告がでます。\n  (注：1.6 に $deferr はありません)\n  ((<ruby-dev:20961>))\n\n  $stdin にオブジェクトを代入すると標準入力からの入力メソッド(gets 等)\n  はそのオブジェクトにメソッドを投げます。\n  (リダイレクトしなくなった点を除けば、1.6 とそれほど違いはないようです)\n\n: ((<組み込み変数/$VERBOSE>))\n\n  三段階のレベルを持つようになりました。\n  * nil: 警告を出力しない   (-W0 新しい警告レベル)\n  * false: 重要な警告のみ出力  (-W1 デフォルト)\n  * true: すべての警告を出力する (-W2 or -W or -v or -w or --verbose)\n\n  追加された -W オプションは $VERBOSE = nil の指定(-W0)を可能にします。\n\n: ruby interpreter [ruby] [change]\n\n  クラスの特異クラスの特異クラスは特異クラス自身であると定義されました\n  ((<ruby-bugs-ja:313>))。なんだかよくわかりません(^^;\n\n        class << Object\n          p [self.id, self]\n          class << self\n            p [self.id, self]\n          end\n        end\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           [537771634, Class]\n           [537742484, Class]\n        => ruby 1.7.3 (2002-09-05) [i586-linux]\n           [537771634, #<Class:Object>]\n           [537771634, #<Class:Object>]\n\n  さらに、オブジェクトの特異クラスのスーパークラスの特異クラスと\n  オブジェクトの特異クラスの特異クラスのスーパークラスは同じなのだそうです\n  ((<ruby-bugs-ja:324>))。さあっぱりわかりません(^^;;\n\n        class << Object.new\n          class << self.superclass\n            p [self.id, self]\n          end\n          class << self\n            p [self.superclass.id, self.superclass]\n          end\n        end\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           [537771634, Class]\n           [537771644, Class]\n        => ruby 1.7.3 (2002-09-05) [i586-linux]\n           [537771634, #<Class:Object>]\n           [537771634, #<Class:Object>]\n\n  ((<ruby-bugs-ja:336>)) のあたりでまた少し変わったかもしれません\n  (2002-09-21 の ChangeLog 参照。まじめにおっかけるのに疲れたらしい\n  ^^;;)\n\n: ((<Proc/Proc.new>)) [change]\n: ((<組み込み関数/lambda>))   [change]\n: ((<組み込み関数/proc>))     [change]\n\n  以下のように変更されました。((<ruby-dev:20358>))\n\n      * Proc.new およびブロック引数で与えられる Proc は\n        引数チェックがゆるい。break が例外になる。\n\n            Proc.new {|a,b,c| p [a,b,c]}.call(1,2)\n                => -:1: wrong # of arguments (2 for 3) (ArgumentError)\n                        from -:1:in `call'\n                        from -:1\n                   ruby 1.6.8 (2002-12-24) [i586-linux]\n                => ruby 1.8.0 (2003-06-21) [i586-linux]\n                   [1, 2, nil]\n\n            Proc.new { break }.call\n\n                => ruby 1.6.8 (2002-12-24) [i586-linux]\n\n                => -:1:in `call': break from proc-closure (LocalJumpError)\n                        from -:1\n                   ruby 1.8.0 (2003-06-21) [i586-linux]\n\n      * lambda および proc が返す Proc は引数チェックが厳しい。\n        break は実行を中断する。\n\n            lambda {|a,b,c| p [a,b,c]}.call(1,2)\n                => -:1: wrong # of arguments (2 for 3) (ArgumentError)\n                        from -:1:in `call'\n                        from -:1\n                   ruby 1.6.8 (2002-12-24) [i586-linux]\n                => -:1: wrong number of arguments (2 for 3) (ArgumentError)\n                        from -:1:in `call'\n                        from -:1\n                   ruby 1.8.0 (2003-06-21) [i586-linux]\n\n            lambda { break }.call\n                => ruby 1.6.8 (2002-12-24) [i586-linux]\n                => ruby 1.8.0 (2003-06-21) [i586-linux]\n\n\n  以下のようにイテレータブロックと、Procをブロックとして引数で渡したと\n  きの挙動が同じになっています。\n\n        def foo\n          yield 1,2,3,4\n        end\n\n        foo {|a,b,c| p [a,b,c]; break }\n\n        foo( &proc {|a,b,c| p [a,b,c]; break } )\n\n        foo( &Proc.new {|a,b,c| p [a,b,c]; break } )\n\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           [1, 2, 3]\n           [1, 2, 3]\n           -:2: break from proc-closure (LocalJumpError)\n        => ruby 1.8.0 (2003-06-21) [i586-linux]\n           [1, 2, 3]\n           [1, 2, 3]\n           [1, 2, 3]\n\n: ((<yield|メソッド呼び出し/yield>))\n\n  ブロックパラメータの数が一つの場合、ブロックに複数の値を渡すと警告が\n  出るようになりました。\n\n  以前は |var| は一つの引数を受けるときと、複数の引数を受けるときの両\n  方で利用されていましたが、将来は「一つの引数を受ける」ことを意味する\n  ようになります。((<ruby-dev:20358>))\n\n: defined? [compat]\n\n  属性代入、配列要素への代入に対して \"method\" でなく \"assignment\" を返\n  すようになりました。\n\n: ((<リテラル/数値リテラル>)) [compat]\n\n  10進((*整数*))リテラルの prefix として 0d が追加されました。\n  8進リテラルの prefix として 0 以外に 0o が追加されました。\n\n  Integer(), String#to_i、String#oct もこの prefix を認識します。\n\n: ((<メソッド引数の & 修飾|メソッド呼び出し/イテレータ>)) [compat]\n: ((<Proc#to_proc|Proc/to_proc>)) [new]\n\n  メソッドに渡す引数に & を修飾した場合、渡すオブジェクトが to_proc を\n  持っていればそれを実行し、その結果をブロックとして渡すようになりまし\n  た。以前は、& 修飾できるのは Proc, Method オブジェクト限定でした。\n  これに伴い Proc#to_proc が追加されました。\n\n: 終了ステータス [compat]\n\n  raise SystemExit したときに終了ステータス 1 で終了するようになりました。\n  ((<ruby-dev:16776>))\n\n: ((<\"rescue/ensure on begin .. end while\"|制御構造/while 修飾子>)) [compat]\n\n  rescue/ensure を持つ begin 式も while/until 修飾できるようになりまし\n  た。\n\n  以前は、rescue/ensure を持つ while/until 修飾式は、通常の begin 式に\n  while/until 修飾していると見なされ本体が必ず最初に実行されるという振\n  るまい(C の do ... while 構文と同じ)をしていませんでした。\n  ((<ruby-list:34618>))\n\n: ((<\"rescue/ensure on class/module\"|クラス／メソッドの定義/クラス定義>)) [compat]\n\n  メソッド定義のほかにもクラス定義やモジュール定義にもrescue/ensureを\n  つけられるようになりました。\n\n: [ruby] [compat]\n\n  内部のハッシュテーブルを使用することにより定数参照の速度を改善したそうです。\n  (ChangeLogの\n        Tue Jun  5 16:15:58 2001  Yukihiro Matsumoto  <matz@ruby-lang.org>\n  に該当するようです)\n\n: break and next        [compat]\n\n  break, next は、引数を指定することでイテレータや yield の値を返す\n  ことができるようになりました。(この機能はまだ実験です)\n\n  break [n] はイテレータを終了させ、n がそのイテレータの戻り値になります。\n  next [n] はブロックを抜け、n が yield の戻り値になります。\n\n: to_str        [compat]\n\n  to_str を定義したオブジェクトはより広範囲にStringとして振舞うように\n  なりました。\n\n  文字列を引数に取るほとんどの組み込みメソッドは、to_str による暗黙の\n  型変換を試みます。\n\n: 範囲演算子式中のリテラル [ruby] [change]\n  範囲演算子式中の単独の数値リテラルが (({$.})) と比較されるのは\n  -e オプションによる1行スクリプトの中だけになりました。\n\n: rescue 節の例外クラスと発生した例外オブジェクトの比較 [ruby] [change]\n\n  発生した例外 $! と rescue 節の例外クラスとは ((<Module#===|Module/===>))\n  を使って比較するようになりました。\n\n  以前は kind_of? による比較なので基本的な動作に変わりはありませんが、\n  SystemCallError.=== は特別に errno が一致する例外を同じと見なすよう\n  に再定義されました。これにより、例えば Errno::EWOULDBLOCK と \n  Errno::EAGAIN が同じ意味(同じerrno)の場合にどちらを指定しても rescue \n  できるようになりました。\n\n  その後、errno が一致する Errno::XXX オブジェクトは同一のオブジェクト\n  になったのでこの変更の効果はなくなってますが、変更自体は残ってます。\n  (ユーザで例外クラスを定義するのに使えるかもしれません)\n  ((<ruby-dev:19589>))\n\n: while, until, class, module, def の値         [ruby] [change]\n\n  while, until, class, module, def が式として値を返すようになりました。\n\n  class/module は最後に評価した式の結果を返します。def は nil を返し\n  ます。while/until は、通常 nil を返しますが、break の引数により任意\n  の値を返すことができます。\n\n: 多重代入 [change]\n\n  多重代入の規則を見直しました。\n\n# # derived from sample/test.rb\n# a = *[]; p a                            # special case\n# def f;  yield; end; f {|a| p a}         # add   (warning)\n# def r; return; end; a = r(); p a\n#           a = nil; p a\n# def f;  yield nil; end; f {|a| p a}\n# def r; return nil; end; a = r(); p a\n#           a = 1; p a\n# def f;  yield 1; end; f {|a| p a}\n# def r; return 1; end; a = r(); p a\n#           a = []; p a\n# def f;  yield []; end; f {|a| p a}\n# def r; return []; end; a = r(); p a\n#           a = [1]; p a\n# def f;  yield [1]; end; f {|a| p a}\n# def r; return [1]; end; a = r(); p a\n#           a = [nil]; p a\n# def f;  yield [nil]; end; f {|a| p a}\n# def r; return [nil]; end; a = r(); p a\n#           a = [[]]; p a\n# def f;  yield [[]]; end; f {|a| p a}\n# def r; return [[]]; end; a = r(); p a\n#           a = [1,2]; p a\n#           a = [*[]]; p a\n# def f;  yield [*[]]; end; f {|a| p a}\n# def r; return [*[]]; end; a = r(); p a\n#           a = [*[1]]; p a\n# def f;  yield [*[1]]; end; f {|a| p a}\n# def r; return [*[1]]; end; a = r(); p a\n#           a = [*[1,2]]; p a\n# def f;  yield [*[1,2]]; end; f {|a| p a}\n# def r; return [*[1,2]]; end; a = r(); p a\n# \n#           a = *nil; p a\n# def f;  yield *nil; end; f {|a| p a}\n# def r; return *nil; end; a = r(); p a\n#           a = *1; p a\n# def f;  yield *1; end; f {|a| p a}\n# def r; return *1; end; a = r(); p a\n#           a = *[]; p a\n# def f;  yield *[]; end; f {|a| p a}                 # add (warning)\n# def r; return *[]; end; a = r(); p a\n#           a = *[1]; p a\n# def f;  yield *[1]; end; f {|a| p a}\n# def r; return *[1]; end; a = r(); p a\n#           a = *[nil]; p a\n# def f;  yield *[nil]; end; f {|a| p a}\n# def r; return *[nil]; end; a = r(); p a\n#           a = *[[]]; p a\n# def f;  yield *[[]]; end; f {|a| p a}\n# def r; return *[[]]; end; a = r(); p a\n#           a = *[1,2]; p a\n# def f;  yield *[1,2]; end; f {|a| p a}            # add\n# def r; return *[1,2]; end; a = r(); p a         # add\n#           a = *[*[]]; p a\n# def f;  yield *[*[]]; end; f {|a| p a}            # add(warning)\n# def r; return *[*[]]; end; a = r(); p a\n#           a = *[*[1]]; p a\n# def f;  yield *[*[1]]; end; f {|a| p a}\n# def r; return *[*[1]]; end; a = r(); p a\n#           a = *[*[1,2]]; p a\n# def r; return *[*[1,2]]; end; a = r(); p a\n# \n# *a = *[]; p a                          # special case\n# def f;  yield; end; f {|*a| p a}\n# def r; return; end; *a = r(); p a\n#          *a = nil; p a\n# def f;  yield nil; end; f {|*a| p a}\n# def r; return nil; end; *a = r(); p a\n#          *a = 1; p a\n# def f;  yield 1; end; f {|*a| p a}\n# def r; return 1; end; *a = r(); p a\n#          *a = []; p a\n# def f;  yield []; end; f {|*a| p a}\n# def r; return []; end; *a = r(); p a\n#          *a = [1]; p a\n# def f;  yield [1]; end; f {|*a| p a}\n# def r; return [1]; end; *a = r(); p a\n#          *a = [nil]; p a\n# def f;  yield [nil]; end; f {|*a| p a}\n# def r; return [nil]; end; *a = r(); p a\n#          *a = [[]]; p a\n# def f;  yield [[]]; end; f {|*a| p a}\n# def r; return [[]]; end; *a = r(); p a\n#          *a = [1,2]; p a\n# def f;  yield [1,2]; end; f {|*a| p a}\n# def r; return [1,2]; end; *a = r(); p a\n#          *a = [*[]]; p a\n# def f;  yield [*[]]; end; f {|*a| p a}\n# def r; return [*[]]; end; *a = r(); p a\n#          *a = [*[1]]; p a\n# def f;  yield [*[1]]; end; f {|*a| p a}\n# def r; return [*[1]]; end; *a = r(); p a\n#          *a = [*[1,2]]; p a\n# def f;  yield [*[1,2]]; end; f {|*a| p a}\n# def r; return [*[1,2]]; end; *a = r(); p a\n# \n#          *a = *nil; p a\n# def f;  yield *nil; end; f {|*a| p a}\n# def r; return *nil; end; *a = r(); p a\n#          *a = *1; p a\n# def f;  yield *1; end; f {|*a| p a}\n# def r; return *1; end; *a = r(); p a\n#          *a = *[]; p a\n# def f;  yield *[]; end; f {|*a| p a}\n# def r; return *[]; end; *a = r(); p a\n#          *a = *[1]; p a\n# def f;  yield *[1]; end; f {|*a| p a}\n# def r; return *[1]; end; *a = r(); p a\n#          *a = *[nil]; p a\n# def f;  yield *[nil]; end; f {|*a| p a}\n# def r; return *[nil]; end; *a = r(); p a\n#          *a = *[[]]; p a\n# def f;  yield *[[]]; end; f {|*a| p a}\n# def r; return *[[]]; end; *a = r(); p a\n#          *a = *[1,2]; p a\n# def f;  yield *[1,2]; end; f {|*a| p a}         # add\n# def r; return *[1,2]; end; *a = r(); p a\n#          *a = *[*[]]; p a\n# def f;  yield *[*[]]; end; f {|*a| p a}\n# def r; return *[*[]]; end; *a = r(); p a\n#          *a = *[*[1]]; p a\n# def f;  yield *[*[1]]; end; f {|*a| p a}\n# def r; return *[*[1]]; end; *a = r(); p a\n#          *a = *[*[1,2]]; p a\n# def f;  yield *[*[1,2]]; end; f {|*a| p a}\n# def r; return *[*[1,2]]; end; *a = r(); p a\n# \n# a,b,*c = *[]; p [a,b,c]                          # special case\n# def f;  yield; end; f {|a,b,*c| p [a,b,c]}\n# def r; return; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = nil; p [a,b,c]\n# def f;  yield nil; end; f {|a,b,*c| p [a,b,c]}\n# def r; return nil; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = 1; p [a,b,c]\n# def f;  yield 1; end; f {|a,b,*c| p [a,b,c]}\n# def r; return 1; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = []; p [a,b,c]\n# def f;  yield []; end; f {|a,b,*c| p [a,b,c]}\n# def r; return []; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [1]; p [a,b,c]\n# def f;  yield [1]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return [1]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [nil]; p [a,b,c]\n# def f;  yield [nil]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return [nil]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [[]]; p [a,b,c]\n# def f;  yield [[]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return [[]]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [1,2]; p [a,b,c]\n# def f;  yield [1,2]; end; f {|a,b,*c| p [a,b,c]}        # add\n# def r; return [1,2]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [*[]]; p [a,b,c]\n# def f;  yield [*[]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return [*[]]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [*[1]]; p [a,b,c]\n# def f;  yield [*[1]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return [*[1]]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = [*[1,2]]; p [a,b,c]\n# def f;  yield [*[1,2]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return [*[1,2]]; end; a,b,*c = r(); p [a,b,c]\n# \n#      a,b,*c = *nil; p [a,b,c]\n# def f;  yield *nil; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *nil; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *1; p [a,b,c]\n# def f;  yield *1; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *1; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[]; p [a,b,c]\n# def f;  yield *[]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[1]; p [a,b,c]\n# def f;  yield *[1]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[1]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[nil]; p [a,b,c]\n# def f;  yield *[nil]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[nil]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[[]]; p [a,b,c]\n# def f;  yield *[[]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[[]]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[1,2]; p [a,b,c]\n# def f;  yield *[1,2]; end; f {|a,b,*c| p [a,b,c]}       # add\n# def r; return *[1,2]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[*[]]; p [a,b,c]\n# def f;  yield *[*[]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[*[]]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[*[1]]; p [a,b,c]\n# def f;  yield *[*[1]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[*[1]]; end; a,b,*c = r(); p [a,b,c]\n#      a,b,*c = *[*[1,2]]; p [a,b,c]\n# def f;  yield *[*[1,2]]; end; f {|a,b,*c| p [a,b,c]}\n# def r; return *[*[1,2]]; end; a,b,*c = r(); p [a,b,c]\n\n: 配列展開 [change]\n\n  以下の挙動を修正しました。\n  現在は、1要素の配列も正常に展開されます。\n\n    a = *[1]\n    p a #=> [1]\n\n    => ruby 1.6.8 (2002-12-24) [i586-linux]\n       [1]\n    => ruby 1.7.1 (2001-06-05) [i586-linux]\n       1\n\n== 追加されたクラス／モジュール\n: ((<Process::UID>))  [new]\n: ((<Process::GID>))  [new]\n: ((<Process::Sys>))  [new]\n: ((<Signal>)) モジュール       [new]\n: ((<Process::Status>))         [new]\n: ((<NoMethodError>))   [new]\n\n  ((<Process::Status>)) の追加により、(({$?})) の値も整数からこのクラ\n  スのインスタンスになりました。\n\n=== クラス階層\n\n: ((<File::Constants>))\n\n  File::Constants は、File クラスでなく IO クラスが include するように\n  なりました。((<ruby-dev:20964>))\n\n: ((<UnboundMethod>)) [compat]\n\n  UnboundMethod クラスは Method クラスのサブクラスではなくなりました。\n  UnboundMethod#call, UnboundMethod#unbind はなくなりました。\n  ((<ruby-core:00927>))\n\n\n: ((<NameError>)) & ((<NoMethodError>)) [change]\n\n  NameError を StandardError のサブクラスに戻しました。\n  クラス階層は以下のようになりました。\n\n    NoMethodError < NameError < StandardError.\n\n: ((<Interrupt>))                       [change]\n  Interrupt は、((<SignalException>))のサブクラスになりました。\n  (1.6以前はExceptionのサブクラス)\n\n== 追加されたメソッド\n=== 組み込み関数\n\n: ((<組み込み関数/warn>))  [new]\n: ((<組み込み変数/$deferr>)) [new]\n\n  追加\n\n  以前は、ruby インタプリタが出力する error/warning メッセージは STDERR\n  固定でしたが、$stderr に変更されました。($deferr はすぐに obsolete に\n  なりました。$stderr を使ってください)\n\n=== ARGF\n\n: ((<ARGF/ARGF.path>)) [new]\n\n  追加 (ARGF.filename の別名) ((<ruby-dev:20197>))\n\n=== Array\n\n: ((<Array#transpose|Array/transpose>)) [new]\n\n  追加\n\n: ((<Array#zip|Enumerable/zip>)) [new]\n: ((<Enumerable#zip|Enumerable/zip>)) [new]\n\n  追加\n\n: ((<Array#fetch|Array/fetch>))     [new]\n\n  追加\n\n: ((<Array#insert|Array/insert>))     [new]\n\n  追加 ((<ruby-talk:14289>))\n\n  (({ary[n,0] = [other,...]})) と同じ(ただし self を返す)\n\n=== Class\n\n: ((<Class#allocate|Class/allocate>))    [new]\n\n    allocate と initialize の二つのメソッドでオブジェクトを\n    生成するようになりました。((<ruby-dev:14847>))\n    rb_define_alloc_func() も参照。\n\n=== Dir\n\n: ((<Dir#path|Dir/path>))       [new]\n\n  追加\n\n=== ENV\n\n: ((<ENV/ENV.clear>)) [new]\n: ((<ENV/ENV.shift>)) [new]\n: ((<ENV/ENV.invert>)) [new]\n: ((<ENV/ENV.replace>)) [new]\n: ((<ENV/ENV.update>)) [new]\n\n  ((<Hash>)) との互換性のために定義されました。\n\n=== Enumerable\n\n: ((<Enumerable#partition|Enumerable/partition>)) [new]\n\n  追加\n\n: ((<Enumerable#sort_by|Enumerable/sort_by>))      [new]\n\n  追加。((<ruby-dev:8986>))以降で提案された Schwartzian transform\n  を行うための sort です。\n\n: ((<Enumerable#all?|Enumerable/all?>))         [new]\n: ((<Enumerable#any?|Enumerable/any?>))         [new]\n: ((<Enumerable#inject|Enumerable/inject>))       [new]\n  追加\n\n=== File\n\n: ((<File/File.extname>)) [new]\n\n  追加。ファイル名の拡張子を返します。((<ruby-talk:37617>))\n\n: ((<File/File.fnmatch>))     [new]\n: ((<File/File.fnmatch?>))    [new]\n  追加\n\n  このメソッドで使用するフラグ FNM_NOESCAPE, FNM_PATHNAME, FNM_PERIOD,\n  FNM_CASEFOLD も((<File::Constants>)) モジュールに定義されました。\n\n: ((<File/File.lchmod>))     [new]\n: ((<File/File.lchown>))     [new]\n  追加\n\n=== File::Stat\n\n: ((<File::Stat#rdev_major|File::Stat/rdev_major>)) [new]\n: ((<File::Stat#rdev_minor|File::Stat/rdev_minor>)) [new]\n\n  追加\n\n=== Float\n\n: ((<Numeric#to_int|Numeric/to_int>)) [new]\n: ((<Float#to_int|Numeric/to_int>)) [new]\n\n  追加。\n\n=== Hash\n\n: ((<Hash#merge|Hash/merge>)) [new]\n: ((<Hash#merge!|Hash/merge!>)) [new]\n\n  追加。Hash#merge は、hash.dup.update と同じ。\n  Hash#merge! は、Hash#update の別名 ((<ruby-talk:59777>)), ((<ruby-dev:19463>))\n\n: ((<Hash#default_proc|Hash/default_proc>)) [new]\n\n  追加 ((<ruby-dev:17966>))\n\n=== IO\n\n: ((<IO/IO.sysopen>)) [new]\n: ((<Socket#sysaccept|Socket/sysaccept>)) [new]\n: ((<TCPServer#sysaccept|TCPServer/sysaccept>)) [new]\n: ((<UNIXServer#sysaccept|UNIXServer/sysaccept>)) [new]\n\n  追加\n\n: ((<IO#sysseek|IO/sysseek>))  [new]\n\n  追加 ((<ruby-talk:21612>)), ((<ruby-talk:36703>))\n\n: ((<IO#fsync|IO/fsync>))     [new]\n\n  追加\n\n: ((<IO/IO.open>))  [new]\n\n  追加\n\n: ((<IO/IO.for_fd>))       [new]\n  追加\n\n: ((<IO/IO.read>))         [new]\n\n  追加。((<ruby-talk:9460>))が実装に至った経緯だと思う\n\n=== LocalJumpError\n\n: ((<LocalJumpError#exit_value|LocalJumpError/exit_value>)) [new]\n: ((<LocalJumpError#reason|LocalJumpError/reason>)) [new]\n\n  追加\n\n=== Marshal\n\n: ((<Marshal/Object#marshal_load>))  [new]\n: ((<Marshal/Object#marshal_dump>))  [new]\n\n  追加 ((<ruby-dev:21016>))\n\n=== MatchData\n\n: ((<MatchData#captures|MatchData/captures>)) [new]\n\n  追加。((<RCR#139>))\n\n: ((<MatchData#select|MatchData/select>)) [new]\n\n  ((<MatchData>)) は、Enumerable ではありませんが、Enumerable#select\n  と同じメソッドが定義されました。\n\n=== Math\n\n: ((<Math/Math.erf>)) [new]\n: ((<Math/Math.erfc>)) [new]\n\n  追加 ((<ruby-list:37753>))\n\n: ((<Math/Math.acos>))          [new]\n: ((<Math/Math.asin>))          [new]\n: ((<Math/Math.atan>))          [new]\n: ((<Math/Math.cosh>))          [new]\n: ((<Math/Math.sinh>))          [new]\n: ((<Math/Math.tanh>))          [new]\n: ((<Math/Math.hypot>))         [new]\n    追加\n\n=== Method\n\n: ((<Method#==|Method/==>)) [new]\n\n  追加\n\n=== Module\n\n: ((<組み込み関数/autoload>))  [change]\n: ((<組み込み関数/autoload?>))  [new]\n: ((<Module#autoload|Module/autoload>))  [new]\n: ((<Module#autoload?|Module/autoload>))  [new]\n\n  ネストしたクラス/モジュールに対する autoload 指定が可能になりました。\n  ((<ruby-dev:16159>)), ((<ruby-dev:16165>)) ((<ruby-dev:18103>)),\n  ((<ruby-dev:19686>))\n\n: ((<Module#const_missing|Module/const_missing>))  [new]\n\n   定義されていない定数を使用したときに const_missing という名のメソッドを\n   呼ぶようになりました。デフォルトでは NameError 例外を発生させます。\n   ((<ruby-core:00441>))\n\n: ((<Module#private_method_defined?|Module/private_method_defined?>)) [new]\n: ((<Module#protected_method_defined?|Module/protected_method_defined?>)) [new]\n\n: ((<Module#public_method_defined?|Module/public_method_defined?>)) [new]\n: ((<Object#methods|Object/methods>)) [change]\n: ((<Module#instance_methods|Module/instance_methods>)) [change]\n\n  追加。変更(仕様の統一)\n\n: ((<Module#include?|Module/include?>)) [new]\n\n  Added. ((<ruby-dev:13941>))\n\n: ((<Module#included|Module/included>))         [new]\n\n  追加。Module#append_feature の後に呼ばれるhook\n\n: ((<Module#method_removed|Module/method_removed>))   [new]\n: ((<Module#method_undefined|Module/method_undefined>)) [new]\n\n  追加\n\n=== NameError\n\n: ((<NameError#name|NameError/name>))                [new]\n\n  追加\n\n=== NilClass\n\n: ((<NilClass#to_f|NilClass/to_f>)) [new]\n\n  追加\n\n=== Numeric\n\n: ((<Numeric#div|Numeric/div>)) [new]\n: ((<Numeric#quo|Numeric/quo>)) [new]\n\n  追加  ((<ruby-dev:19423>))\n\n  ((<ruby-dev:20962>))\n\n      * div    - 整除(divmodの第一要素)\n      * /      - その数型でもっとも自然な商(異論はあるだろうけど)\n      * quo    - もっとも正確に近い商\n      * divmod - 整除と剰余\n\n=== NoMethodError\n\n: ((<NoMethodError#args|NoMethodError/args>))        [new]\n\n  追加\n\n=== Object\n\n: ((<Object#initialize_copy|Object/initialize_copy>)) [change]\n\n  追加\n\n  このメソッドは initialize と同様、自動的に private method になります。\n\n: ((<Object#instance_variable_get|Object/instance_variable_get>)) [new]\n: ((<Object#instance_variable_set|Object/instance_variable_set>)) [new]\n\n  追加\n\n: ((<Object#object_id|Object/object_id>)) [new]\n\n  追加 (Object#id は、obsolete)\n\n: ((<Object#singleton_method_removed|Object/singleton_method_removed>)) [new]\n: ((<Object#singleton_method_undefined|Object/singleton_method_undefined>)) [new]\n\n  追加\n\n=== Proc\n\n: ((<Proc#binding|Proc/binding>)) [new]\n\n  追加\n\n: ((<Proc#to_proc|Proc/to_proc>)) [new]\n\n  追加\n\n# : ((<Precision>)).included      [new]\n# \n#   追加(((<Module#included|Module>)) の再定義)\n\n=== Process\n\n: ((<Process/Process.initgroups>))  [new]\n  追加\n\n: ((<Process/Process.groups>)) [new]\n: ((<Process/Process.groups=>)) [new]\n: ((<Process/Process.maxgroups>)) [new]\n: ((<Process/Process.maxgroups=>)) [new]\n\n  追加\n: ((<Process/Process.detach>)) [new]\n\n  追加\n\n: ((<Process/Process.abort>)) [new]\n: ((<Process/Process.exit>)) [new]\n\n  追加。関数 abort, exit と同じ。\n\n: ((<Process/Process.waitall>))         [new]\n  追加\n\n: ((<Process::Status#pid|Process::Status/pid>)) [new]\n\n  追加\n\n=== Range\n\n: ((<Range#step|Range/step>))     [new]\n\n  追加。step ごとの要素で繰り返します。\n\n: ((<Range#include?|Range/include?>))          [new]\n: ((<Range#member?|Range/member?>))           [new]\n  追加\n\n=== Regexp\n\n: ((<Regexp#to_s|Regexp/to_s>)) [new]\n\n  追加。((<ruby-dev:16909>))\n\n  これにより、\n      re1 = /hogehoge/i\n      re2 = /fugafuga/\n      re3 = / #{re1} | #{re2} /x\n  などと正規表現オブジェクトを正規表現に埋め込めるようになりました。\n\n: ((<Regexp#options|Regexp/options>))          [new]\n  追加\n\n=== Socket\n\n: ((<Socket/Socket.pack_sockaddr_in>))          [new]\n: ((<Socket/Socket.unpack_sockaddr_in>))        [new]\n\n  追加。ソケットアドレス構造体(INET domain)のpack/unpack。\n\n: ((<Socket/Socket.pack_sockaddr_un>))      [new]\n: ((<Socket/Socket.unpack_sockaddr_un>))    [new]\n\n  追加。ソケットアドレス構造体(UNIX domain)のpack/unpack。\n\n: ((<UNIXSocket/UNIXSocket.pair>))              [new]\n: ((<UNIXSocket/UNIXSocket.socketpair>))        [new]\n: ((<UNIXSocket#recv_io|UNIXSocket/recv_io>))   [new]\n: ((<UNIXSocket#send_io|UNIXSocket/send_io>))   [new]\n\n  追加\n\n: ((<UNIXServer#listen|UNIXServer/listen>))     [new]\n: ((<TCPServer#listen|TCPServer/listen>))       [new]\n\n  追加。Socket#((<Socket/listen>))と同じ。\n\n=== String\n\n: ((<String#match|String/match>))      [new]\n\n  追加 re.match(str) と同じ。\n\n: ((<String#lstrip|String/lstrip>))     [new]\n: ((<String#rstrip|String/rstrip>))     [new]\n: ((<String#lstrip!|String/lstrip!>))     [new]\n: ((<String#rstrip!|String/rstrip!>))     [new]\n\n  追加。左端あるいは右端の空白類を取り除きます。\n  rstrip は、右側の \"\\0\" も取り除きます。\n\n: ((<String#casecmp|String/casecmp>))   [new]\n: ((<String#eql?|String/eql?>))         [change]\n\n  casecmp 追加。アルファベットの大小を無視した文字列比較。\n\n  eql? は、((<$=|組み込み変数>)) の値に関らず常にアルファベットの大小\n  を区別するようになりました。\n\n: ((<String#insert|String/insert>)) [new]\n\n  追加\n\n  (({str[n, 0] = other})) と同じ(ただし self を返す)\n\n=== Struct\n\n: ((<Struct/each_pair>)) [new]\n\n  追加。\n\n=== Symbol\n\n: ((<Symbol/Symbol.all_symbols>))      [new]\n  追加 ((<ruby-dev:12921>))\n\n=== SystemCallError\n\n: ((<SystemCallError/SystemCallError.===>))     [new]\n\n  追加 (上記 「rescue 節の...」 を参照のこと)\n  ((<ruby-dev:12670>))\n\n: ((<SystemExit#status|SystemExit/status>))       [new]\n  追加\n\n=== Thread\n\n: ((<Thread#keys|Thread/keys>))     [new]\n  追加。Thread固有データのキーの配列を返します。\n\n\n: ((<Thread#terminate|Thread/terminate>)) [new]\n\n  追加。Thread#kill と同じ。\n\n: ((<Thread#group|Thread/group>)) [new]\n  追加\n\n=== ThreadGroup\n\n: ((<ThreadGroup#enclose|ThreadGroup/enclose>)) [new]\n: ((<ThreadGroup#enclosed?|ThreadGroup/enclosed?>)) [new]\n\n  追加 ((<ruby-dev:20655>))\n\n  ThreadGroup への Thread 追加/削除を(freeze せずに)禁止します。\n\n=== Time\n\n: ((<Time#getgm|Time/getgm>))           [new]\n: ((<Time#getlocal|Time/getlocal>))     [new]\n: ((<Time#getutc|Time/getutc>))         [new]\n: ((<Time#gmt_offset|Time/gmt_offset>)) [new]\n: ((<Time#gmtoff|Time/gmtoff>))         [new]\n: ((<Time#utc_offset|Time/utc_offset>)) [new]\n\n  追加\n\n=== その他\n\n: ((<Array#values_at|Array/values_at>)) [new]\n: ((<Hash#values_at|Hash/values_at>)) [new]\n: ((<ENV/ENV.values_at>)) [new]\n: ((<MatchData#values_at|MatchData/values_at>)) [new]\n: ((<aStruct#values_at|Struct/values_at>)) [new]\n\n  ruby 1.6 の ((<indexes|Array/indexes>)) は、values_at というメソッド\n  名になりました(ruby 1.7 では block なし ((<select|Array/select>)) が\n  indexes の代わりでしたが、こちらも使用すると警告が出ます)。\n\n: ((<Fixnum#to_sym|Fixnum/to_sym>)) [new]\n: ((<String#to_sym|String/to_sym>)) [new]\n\n  追加(Symbol#intern はなくなった)\n\n== 追加された定数\n\n: ((<Float::DIG|Float/DIG>)) [new]\n: ((<Float::EPSILON|Float/EPSILON>)) [new]\n: ((<Float::MANT_DIG|Float/MANT_DIG>)) [new]\n: ((<Float::MAX|Float/MAX>)) [new]\n: ((<Float::MAX_10_EXP|Float/MAX_10_EXP>)) [new]\n: ((<Float::MAX_EXP|Float/MAX_EXP>)) [new]\n: ((<Float::MIN|Float/MIN>)) [new]\n: ((<Float::MIN_10_EXP|Float/MIN_10_EXP>)) [new]\n: ((<Float::MIN_EXP|Float/MIN_EXP>)) [new]\n: ((<Float::RADIX|Float/RADIX>)) [new]\n: ((<Float::ROUNDS|Float/ROUNDS>)) [new]\n\n  追加 ((<ruby-math:0773>))\n\n: ((<Marshal::MAJOR_VERSION|Marshal/MAJOR_VERSION>))          [new]\n: ((<Marshal::MINOR_VERSION|Marshal/MINOR_VERSION>))          [new]\n  追加。Marshal が出力するダンプフォーマットのバージョン番号です。\n  ((<ruby-dev:14172>))\n\n== 拡張されたクラス／メソッド(互換性のある変更)\n\n=== 組み込み関数\n\n: ((<組み込み関数/sprintf>)) [new]\n\n  \"%p\" が追加されました。inspect の結果が利用されます。((<RCR#69>))\n\n: ((<組み込み関数/trap>)) [compat]\n\n  あるシグナルに対して、SIG_DFL や SIG_IGN が割り当てられていた場合、\n  文字列 \"DEFAULT\" や \"IGNORE\" を返すようになりました(以前は、nil を返\n  していました) ((<ruby-talk:67860>))\n\n: ((<組み込み関数/system>)) [compat]\n: ((<組み込み関数/exec>)) [compat]\n\n  第一引数が配列の場合、その一つ目の要素のファイルを環境変数PATHから\n  検索するようになりました。\n\n  また、msdosdjgpp・mswin32・mingw32・bccwin32でも、他のプラットフォームと\n  同様に、引数として配列が与えられた場合はシェルを経由しないようになりました。\n  以前は常にシェルを経由していました(win32系portは2003-01-04に変更)。\n  ((<ruby-dev:19107>))\n\n: ((<組み込み関数/rand>)) [compat]\n\n  乱数生成のアルゴリズムに\n  ((<Mersenne Twister|URL:http://www.math.keio.ac.jp/~matumoto/mt.html>))\n  を使用するようになりました。\n\n: ((<組み込み関数/sprintf>))('%u') [compat]\n\n  sprintf の '%u' で、最上位ビットの繰り返しをあらわす \"..\"  は、付加\n  されないようになりました。((<ruby-dev:16522>))\n\n: ((<組み込み関数/abort>)) [compat]\n\n  終了メッセージを指定できるようになりました。\n\n=== Array\n\n: ((<Array#first|Array/first>)) [compat]\n: ((<Array#last|Array/last>)) [compat]\n\n  省略可能な引数を追加\n\n: ((<Array#push|Array/push>)) [compat]\n: ((<Array#unshift|Array/unshift>)) [compat]\n: ((<Array#insert|Array/insert>)) [compat]\n\n  引数が指定されない場合に、ArgumentError 例外が発生しなくなりました。\n  (何もせずに self を返すだけです)\n\n: ((<Array#[]|Array/[]>)) [compat]\n: ((<Array#[]=|Array/[]=>)) [compat]\n\n  配列のインデックスとして Symbol を指定した場合、Symbol#to_int を呼ば\n  す、例外 ((<TypeError>)) が発生するようになりました。\n  ((<ruby-list:37217>))\n\n: ((<Array/Array.new>))         [compat]\n: ((<Array#fill|Array/fill>))   [compat]\n\n  ブロックの評価結果を fill する値として指定できるようになりました。ブ\n  ロックは要素毎に評価されるので、下のような例では \"val\" が毎回生成さ\n  れます。\n\n: ((<Array/Array.new>))       [compat]\n\n  Array.new の引数に配列を渡すとそのコピーを生成するようになりました。\n\n: ((<Array#pack|Array/pack>))         [compat]\n: ((<String#unpack|String/unpack>))   [compat]\n\n  pack/unpack のテンプレートにコメントを記述できるようになりました。\n\n: ((<Array#pack|Array/pack>))         [new]\n: ((<String#unpack|String/unpack>))   [new]\n\n  64 bit 整数のテンプレート文字 Q/q が追加されました(Quad の意)。\n  Q は unsigned、q は、signed です。\n\n: ((<Array#pack|Array/pack>))      [change]\n: ((<String#unpack|String/unpack>))   [change]\n\n    Array#pack, String#unpack のテンプレート文字 \"p\", \"P\" は、nil と\n    NULLポインタの相互変換を行うようになりました((<ruby-dev:13017>))。\n\n=== Class\n\n: ((<Class#inherited|Class/inherited>)) [change]\n\n  inherited メソッドはクラス定義式の終りに呼び出されるようになりました。\n  ((<ruby-bugs-ja:342>))\n\n=== Dir\n\n: ((<Dir/Dir.glob>)) [compat]\n\n  Dir.glob に第2引数(マッチの挙動を変更するフラグ)を指定できるようにな\n  りました。Dir[] にはこのフラグは指定できません。\n\n  関連して定数 File::FNM_DOTMATCH (FNM_PERIOD の逆の意味)が追加されて\n  います。\n\n: ((<Dir/Dir.chdir>))       [compat]\n  ブロックを指定できるようになりました。\n\n=== ENV\n\n: ((<ENV>)) [change]\n\n  ENV が生成する文字列はすべて ((<Object/freeze>)) されるようになりました。\n  ((<ruby-talk:72732>))\n\n        ENV['environ'] = 'value'\n        ENV['environ'].sub!(/value/, 'VALUE')\n        p ENV['environ']\n\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           \"value\"\n\n  この例のように sub! のような破壊的メソッドの効果がないため混乱すると\n  いうのが理由です(ENVが返す文字列を変更しても環境変数自体に影響がない)。\n\n        => -:2:in `sub!': can't modify frozen string (TypeError)\n                from -:2\n           ruby 1.8.0 (2003-06-09) [i586-linux]\n\n=== Hash\n\n: ((<Hash#update|Hash/update>)) [compat]\n\n  ブロックを指定できるようになりました。重複したキーに対する振舞いを制\n  御できます。\n\n: ((<Hash/Hash.new>))   [compat]\n\n  ハッシュのデフォルト値としてブロックを指定できるようになり\n  ました。ブロックを指定すると空のハッシュ要素の参照に対して\n  その都度ブロックを実行し、その結果を返します。\n  ブロックにはハッシュ自身と、ハッシュを参照したときのキーが渡されます\n\n=== IO\n\n: ((<IO/IO.new>)) [compat]\n\n  ((<File/File.open>)) と同様に mode を数値(つまり、\n  ((<File::Constants>)) の定数) で指定できるようになりました。\n\n: ((<IO#reopen|IO/reopen>)) [compat]\n\n  第二引数を省略したときレシーバのモードをそのまま引き継ぐようになりま\n  した。以前は、第二引数のデフォルト値は \"r\" 固定でした。\n\n: ((<IO#read|IO/read>)) [compat]\n: ((<IO#sysread|IO/sysread>)) [compat]\n\n  IO#read, IO#sysread に第二引数追加(あらかじめ割り当てた読み込み用バッ\n  ファの指定)\n\n=== Method\n\n: ((<Method#inspect|Method/inspect>))   [compat]\n\n  特異メソッドに対する出力形式がより意味のあるものになりました。\n  ((<ruby-bugs-ja:PR#193>))\n\n=== Module\n\n: ((<Module#undef_method|Module/undef_method>)) [compat]\n: ((<Module#remove_method|Module/remove_method>)) [compat]\n\n  一度に複数のメソッドを指定できるようになりました。((<RCR#146>))\n\n: ((<Module#method_added|Module/method_added>)) [compat]\n: ((<Module#singleton_method_added|Module/singleton_method_added>)) [compat]\n\n  拡張ライブラリからメソッドが定義されたときも呼ばれるようになりました。\n  ((<ruby-talk:70471>))\n\n: ((<Module/Module.new>))       [compat]\n: ((<Class/Class.new>))         [compat]\n\n    Module.new, Class.new でブロックが与えられた場合、生成した\n    モジュール/クラスのコンテキストでブロックを実行するように\n    なりました。\n\n=== Numeric\n\n: ((<Numeric#step|Numeric/step>)) [compat]\n\n  ((<Fixnum>)), ((<Integer>)) から移動しました。\n\n=== Object\n\n: ((<Object#singleton_methods|Object/singleton_methods>))         [compat]\n  省略可能な引数 all が追加されました。\n\n: ((<Object#methods|Object/methods>)) [compat]\n: ((<Object#public_methods|Object/public_methods>)) [compat]\n: ((<Object#private_methods|Object/private_methods>)) [compat]\n: ((<Object#protected_methods|Object/protected_methods>)) [compat]\n\n  スーパークラスのメソッドも探索するかどうかを引数で指定できるようにな\n  りました。((<Module#instance_methods|Module/instance_methods>)) など\n  と同じですが、過去との互換性のため引数のデフォルト値が Module のもの\n  とは逆です。(Module#instance_methods などのデフォルト値は将来(1.8.1)\n  変更される予定のようです)\n\n  ((<Object#methods|Object/methods>)) は引数が false の場合にそのオブ\n  ジェクトの特異メソッドのリストを返します。つまり、\n  ((<Object#singleton_methods(false)|Object/singleton_methods>)) と同\n  じです。\n\n  1.7 の変更点も含めて仕様をまとめると\n\n        Object#methods,           Module#instance_methods,\n        Object#public_methods,    Module#public_instance_methods,\n        Object#private_methods,   Module#private_instance_methods,\n        Object#protected_methods, Module#protected_instance_methods\n        Object#singleton_methods\n\n  * 引数が true の場合は、モジュールやスーパークラスを探索する。\n\n  * public_xxx, private_xxx, protected_xxx はそれぞれpublic, private,\n    protected メソッドのみを返す。public_, private_, protected_ がつか\n    ない、methods, instance_methods は、public メソッドと protected\n    メソッドを返す。\n\n  * Object#methods(false) は Object#singleton_methods(false) と同じ。\n\n  * 将来これらのメソッドの引数のデフォルト値は true になる予定だが、\n    Module#xxx_instance_methods と Object#singleton_methods は現状デフォ\n    ルト値が false(過去との互換のため。なお、省略したままだと警告が出る)。\n    デフォルトに頼らないようにするべき、1.6 で使用していたスクリプトを\n    書き換える場合は、false を明示的に指定する。\n\n=== Proc\n\n: ((<Proc#to_s|Proc/to_s>)) [compat]\n\n  Proc#to_s の結果にスクリプトのソースファイル名と行番号が付加されまし\n  た。((<ruby-dev:17968>))\n\n=== Regexp\n\n: ((<Regexp#===|Regexp/===>)) [compat]\n\n  真偽値を返すようになりました。\n\n: ((<Regexp/Regexp.last_match>))    [compat]\n  optional な引数が追加されました。\n\n=== String\n\n: ((<String/String.new>))      [compat]\n\n  String.new の引数を省略できるようになりました。\n\n: ((<String/strip>))     [compat]\n: ((<String/strip!>))    [compat]\n: ((<String/rstrip>))    [compat]\n: ((<String/rstrip!>))   [compat]\n\n  空白類だけでなく \"\\0\" も strip するようになりました。((<ruby-talk:76659>))\n\n: ((<String#scan|String/scan>)) [change]\n: ((<String#split|String/split>)) [change]\n: ((<String#sub|String/sub>)), ((<String#sub!|String/sub!>)) [change]\n: ((<String#gsub|String/gsub>)), ((<String#gsub!|String/gsub!>)) [change]\n: ((<String#~|String/~>)) [obsolete]\n: ((<String#=~|String/=~>)) [obsolete]\n: ((<組み込み変数/$;>))   [compat]\n: ((<組み込み変数/$-F>))  [compat]\n: ((<Rubyの起動/-F((*regexp*))>))    [compat]\n\n  pattern として正規表現でなく文字列を指定したとき、それを正規表現にコ\n  ンパイルせず文字列そのものをパターンとして扱うようになりました。(よ\n  り正確には、Regexp.compile(arg) でなく\n  Regexp.compile(Regexp.quote(arg)) するようになりました)\n\n  ((<String#~|String/~>)), ((<String#=~|String/=~>)) は、obsolete にな\n  りました。(String#~ はここにあげた変更が反映された上で obsolete)\n\n#   str =~ arg だけは、arg が文字列のとき、\n#   Regexp.compile(Regexp.quote(arg)) =~ str と等価な str.index(arg) が\n#   実行されます(したがって、$~ は設定されません)。\n\n  $; の指定に正規表現が許されるようになりました。これに伴い、文字列以\n  外を設定しても例外 ((<TypeError>)) は発生しないようになりました。\n  ((<ruby-talk:77381>))\n\n: ((<String#center|String/center>)) [compat]\n: ((<String#ljust|String/ljust>)) [compat]\n: ((<String#rjust|String/rjust>)) [compat]\n\n  空白の代わりに詰め込む文字列を第二引数で指定できるようになりました。\n\n: ((<String#[]|String/[]>))     [change]\n: ((<String#[]=|String/[]=>))   [change]\n\n  第一引数が正規表現を渡す形式で、オプションの第二引数 idx が追加されました。\n  str[/re/, 0] は、str[/re/] と同じです。\n\n=== Struct\n\n: ((<Struct>)) [compat]\n\n   Struct が適切なハッシュ値を持つよう Struct#hash, Struct#eql? が定義\n   されました。((<ruby-bugs:PR#758>))\n\n: ((<aStruct#inspect|Struct>)) [compat]\n\n  出力形式が少しだけ変わりました。\n\n=== Socket\n\n: ((<TCPSocket/TCPSocket.new>))   [compat]\n: ((<TCPSocket/TCPSocket.open>))  [compat]\n  ローカル側アドレスを省略可能な第3,4引数で指定できるようになりました。\n\n=== Thread\n\n: ((<Thread#join|Thread/join>))  [compat]\n\n  スレッドを待ち合わせる時間を limit で指定できるようになりました。\n\n: ((<Thread/Thread.list>)) [compat]\n: ((<ThreadGroup#list|ThreadGroup/list>)) [compat]\n  終了中(aborting)のスレッドもリストに含まれるようになりました。\n  ((<rubyist:1282>))\n\n=== Time\n\n: ((<Time>))            [compat]\n  負の time_t を扱えるようになりました(OSがサポートしている場合に限る)\n    p Time.at(-1)\n    => Thu Jan 01 08:59:59 JST 1970\n\n=== UnboundMethod\n\n: ((<UnboundMethod#bind|UnboundMethod/bind>)) [compat]\n\n  UnboundMethod オブジェクトをそれが定義されたクラスのサブクラスへ\n  bind しても良いことになりました。\n\n=== その他\n\n: ((<NameError/NameError.new>))(msg[, name])            [compat]\n: ((<NoMethodError/NoMethodError.new>))(msg, name, args)    [compat]\n: ((<SystemCallError/SystemCallError.new>))(msg, err)         [compat]\n: ((<Errno::EXXX>)).new(msg)                   [compat]\n\n  内部の実装でインスタンス変数を初期化していなかったために warning が\n  出ていたのを修正しました。そして、new のパラメータでその値を指定でき\n  るように変更されました。\n\n: ((<SystemExit#initialize|SystemExit/SystemExit.new>)) [compat]\n\n  引数が追加されました。\n\n: ((<String#to_i|String/to_i>)) [compat]\n: ((<Integer#to_s|Integer/to_s>)) [compat]\n\n  引数に基数(2,8,10,16)を指定できるようになりました。\n  (2002-01-26: 引数が 0 のときは prefix で基数を判定する)\n\n  基数変換で、2, 8, 10, 16 進だけでなく、2 .. 36進数までの任意の基数へ\n  の変換をサポートしました。((<ruby-dev:20021>))\n\n# 別に影響ない変更なのでコメント\n# : ((<Class/Class.inherited>)) [compat]\n# \n#   (注: Class#inherited ではありません)\n# \n#   以前は、クラスのサブクラスの定義を禁止するために定義されていましたが、\n#   (((<TypeError>))例外を発生させるメソッドとして定義されていました) こ\n#   の役割は Class.new が担保するようになりました。そのため、\n#   Class.inherited メソッドの定義はなくなりました。\n# \n#     class SubClass < Class\n#     end\n# \n#     #=> -:1:in `inherited': can't make subclass of Class (TypeError)\n#                 from -:1\n#         ruby 1.7.1 (2001-06-12) [i586-linux]\n# \n#     #=> -:1: can't make subclass of Class (TypeError)\n#         ruby 1.7.1 (2001-07-31) [i586-linux]\n\n== 変更されたクラス／メソッド(互換性のない変更)\n\n=== 組み込み関数\n\n: ((<組み込み関数/Integer>))() [change]\n\n  数値や文字列以外のオブジェクトを整数に変換するときに to_i ではなく \n  to_int を使用するようになりました。\n\n: ((<組み込み関数/Float>))() [change]\n\n  Float() は、引数に nil を受け付けなくなりました。\n\n        p Float(nil)\n\n        => ruby 1.6.7 (2002-03-01) [i586-linux]\n           0.0\n        => -:1:in `Float': cannot convert nil into Float (TypeError)\n                from -:1\n           ruby 1.7.3 (2002-09-02) [i586-linux]\n\n=== ARGF\n\n: ((<ARGF#to_s|ARGF/to_s>)) [change]\n\n  結果は \"ARGF\" 固定になりました。ファイル名は ARGF.path で取得します。\n\n=== ARGV\n\n: ((<組み込み定数/ARGV>)) [change]\n\n  ARGV の各要素は freeze されるようになりました。\n\n        ruby -v -e 'p ARGV.collect {|v| v.frozen?}' a b c\n\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           [false, false, false]\n        => ruby 1.8.0 (2003-08-11) [i586-linux]\n           [true, true, true]\n\n=== Array\n\n: ((<Array#sort!|Array/sort!>))     [change]\n\n  常にself返すようになりました。\n\n  将来にわたってこのことが保証されるわけではないそうです ((<ruby-dev:12506>))。\n\n: ((<Array#reverse!|Array/reverse!>)) [change]\n\n  サイズが 1 以下の配列に対して以前は nil を返していましたが、self を\n  返すようになりました。((<String#reverse!|String/reverse!>)) の挙動と\n  同じです。((<ruby-dev:20135>))\n\n: ((<Array#-|Array/->)) [change]\n\n  差を求めるときに重複した値は取り除かなくなりました。\n\n=== Comparable\n\n: ((<Comparable>)) [change]\n\n  obj#<=> が nil を返すような引数に対して、>, >=, <, <= が例外\n  ((<ArgumentError>)) を起こすようになりました。また、== は、nil を返\n  すようになりました。\n\n: ((<Module/Module#>>)) [change]\n: ((<Module/Module#<>)) [change]\n: ((<Module/Module#<=>)) [change]\n\n  継承関係にないクラス同士の比較で nil を返すようになりました。\n  ((<ruby-dev:20190>))\n\n#   ((<Module/Module#<=>)) は、1.7 で nil を返すように変更されていました\n#   が、その後、-1 に、その後再度 nil におさまりました。\n\n: ((<String#<=>|String/<=>>)) [change]\n: ((<Comparable>)) [change]\n\n  string <=> other は、((|other|)) が文字列でない場合、\n  ((|other|)).to_str と ((|other|)).<=> が定義されていれば (({0 -\n  (other <=> string)})) の結果を返します。そうでなければ nil を返します。\n  ((<ruby-dev:19625>))\n\n        class Foo\n          def to_str\n            \"foo\"\n          end\n          def <=>(o)\n            p \"<=> called\"\n            self.to_str <=> o\n          end\n        end\n\n        p \"foo\" <=> Foo.new\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           0\n        => ruby 1.8.0 (2003-05-02) [i586-linux]\n           \"<=> called\"\n           0\n\n: ((<String#==|String/==>))    [change]\n: ((<Numeric#==|Numeric/==>))  [change]\n\n  Comparable の変更と合わせて <=> が nil を返すとき == が nil を返すよ\n  うになりました。((<ruby-dev:20759>))\n\n=== Dir\n\n: ((<Dir/Dir.open>))        [change]\n  ブロックを伴う場合((<File>)).openと同様に、ブロックの結果がメソッドの\n  戻り値になりました。(1.6以前は (({nil})) 固定)\n\n: ((<Dir/Dir.glob>))        [change]\n  先行するバックスラッシュにより、ワイルドカードをエスケープ\n  できるようになりました。\n  また、空白類に特殊な意味はなくなりました('\\0'の効果は残っています)。\n\n=== Enumerable\n\n: ((<Enumerable#find|Enumerable/find>)) [change]\n\n  引数に文字列を指定できなくなりました。\n\n  また、要素が見つからなかった場合は、ifnone の結果を返すようになりました。\n\n=== File\n\n: ((<File/File.basename>)) [CHANGE]\n: ((<File/File.dirname>)) [CHANGE]\n\n  File.dirname と File.basename の動作が ((<SUSv3|URL:http://www.unix-systems.org/version3/online.html>)) に従うようになりました。\n\n  ((<ruby-dev:19548>)) [PATCH] file.c for ((<ruby-bugs-ja:PR#389>))\n  and ((<ruby-bugs-ja:PR#390>))\n\n        p File.dirname(\"foo/bar/\")\n        p File.dirname(\"foo//bar\")\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           \"foo/bar\"\n           \"foo/\"\n        => ruby 1.8.0 (2003-05-02) [i586-linux]\n           \"foo\"\n           \"foo\"\n\n        p File.basename(\"foo/bar/\")\n        p File.basename(\"foo//bar\")\n        ruby 1.6.7 (2002-03-19) [i386-linux]\n        \"\"\n        \"bar\"\n        ruby 1.8.1 (2003-12-27) [i686-linux]\n        \"bar\"\n        \"bar\"\n\n=== Float\n\n: ((<Float#to_s|Float/to_s>)) [change]\n\n  最大の精度を示すためのフォーマットが \"%.10g\" から \"%.16g\" に変わりま\n  した。(2003-03-20: その後、\"%.15g\" になりました ((<ruby-bugs-ja:PR#406>)))\n\n=== Module\n\n: ((<Module#include|Module/include>)) [change]\n\n  トップレベルの include は、第二引数に true を指定した load でロード\n  されるスクリプトのもとではモジュールの機能を self に \n  ((<Object/extend>)) するように変更されました。\n\n: ((<Module#include|Module/include>)) [change], [experimental]\n\n  wrapper モジュールで評価される file (load(file, true)) 中で、トップ\n  レベルの include を行ったとき、Module を include する対象が Object で\n  なく、wrapper モジュールになりました。\n  つまり、load(file, true) で、file をロードしたときに file 中で\n  include を実行していても呼び出し元に影響しなくなりました。\n\n  ((*これは実験的な変更です*))\n\n: ((<Module#include|Module/include>)) [change]\n: ((<Object#extend|Object/extend>))  [change]\n\n  複数のモジュールを渡したときにインクルードされる順序が変更されました。\n  ((<ruby-dev:16035>))\n  extend も同様だそうです。((<ruby-dev:16183>))\n\n  一つ一つ include した場合とは逆順になります。\n\n=== Object\n\n: ((<Object#clone|Object/clone>)) [change]\n\n  Numeric など immutable なオブジェクトは clone できなくなりました。\n  ((<ruby-bugs-ja:PR#94>)), ((<rubyist:0831>))\n\n=== Range\n\n: ((<Range#max|Range/max>)) [change]\n: ((<Range#min|Range/min>)) [change]\n: ((<Range#include?|Range/include?>)) [change]\n: ((<Range#member?|Range/member?>)) [change]\n\n  Range#max, Range#min, Range#include? が <=> メソッドによる範囲演算で\n  求められるようになりました。((<ruby-list:35253>)), ((<ruby-dev:17228>))\n  (2003-03-18: min, max は元に戻りました。((<ruby-dev:19837>)))\n\n  Range#member? は each を利用して全要素を参照し、実際にメンバが存在するか\n  確認します。(Enumerable#member? と同じ)\n\n  1.6 までは、max, min, member? include? は、Enumerable のメソッドで、\n  === は、Range のメソッドです。1.7 では、max, min, member?, include?,\n  === はすべて Range のメソッドで、include? は === の別名になっていま\n  す。(1.8 では、max, min は、Enumerable のメソッドに戻っています)\n\n: ((<Range#each|Range/each>)) [change]\n\n  Range#each は各要素の succ メソッドを使用してイテレーションするよう\n  になりました。\n\n=== Regexp\n\n: ((<Regexp/Regexp.new>)) [change]\n\n  第一引数に正規表現を与えた時に引数のオプションを無視し、元のオプショ\n  ンを保持した複製を返すようになりました。\n\n        p Regexp.new(//is, Regexp::EXTENDED, \"e\")\n\n        => ruby 1.6.8 (2003-08-03) [i586-linux]\n           //xe\n        => -:1: warning: flags and encoding ignored\n           ruby 1.8.0 (2003-02-16) [i586-linux]\n           //is\n\n=== String\n\n: ((<String#chomp|String/chomp>))       [change]\n: ((<String#chomp!|String/chomp!>))     [change]\n: ((<組み込み関数/chomp>))              [change]\n: ((<組み込み関数/chomp!>))             [change]\n\n  $/ が \"\\n\" (デフォルト)のとき、どの行末形式(\"\\r\\n\", \"\\r\",\n  \"\\n\" のいずれでも)でもそれらを取り除くようになりました。\n\n=== ThreadGroup\n\n: ((<ThreadGroup#freeze|ThreadGroup/freeze>)) [change]\n\n  freeze された ThreadGroup に Thread を追加/削除できなくなりました。\n\n=== Time\n\n: ((<Process/Process.times>))           [change]\n  ((<Time/Time.times>)) から移動しました。\n  (Time.times も残っていますが、warningが出ます)\n\n: ((<Time#to_a|Time/to_a>))       [change]\n: ((<Time#zone|Time/zone>))       [change]\n  gmtime なタイムゾーンに対して\"UTC\"を返すようになりました\n  (以前は環境依存。大抵の場合\"GMT\")\n\n== 文法の変更\n\n: parser [compat]\n\n  数字で始まるグローバル変数は特殊変数 $1, $2, ... 以外に許されなくな\n  りました。\n\n: [parser], [change]\n\n  `*' による配列展開が、多重代入の右辺で行われた場合、to_ary だけでな\n  く、to_a も配列展開のための配列化に利用されるようになりました(ただし、\n  Object#to_a は対象外。Object#to_a は将来削除される予定です)。\n\n: [parser]\n\n  スコープ演算子 `::' を伴う定数代入を許すようになりました。\n        p Object::Foo = 1\n  また、\"class Foo::Bar; end\" という定義も可能になりました。\n\n: [parser]\n\n  (({.<digit>}))はFloatのリテラルではなくなりました。\n\n: [parser] [experimental]\n\n  実験的な修正のようです。\n\n      a = 1\n      p a / 5\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           0\n        => ruby 1.8.0 (2003-03-12) [i586-linux]\n           0\n\n      a = 1\n      p a /5\n        => -:2: warning: ambiguous first argument; make sure\n           -:2: unterminated regexp meets end of file\n           ruby 1.6.8 (2002-12-24) [i586-linux]\n        => ruby 1.8.0 (2003-03-12) [i586-linux]\n           0\n\n: [parser] [new]\n\n  シンボルの拡張表記法が採用されました。((<ruby-dev:18537>))\n\n        p :\"foo#{\"bar\"}\"\n        p :'foo#{\"bar\"}'\n        p %s{foo#{\"bar\"}}\n\n        => ruby 1.7.3 (2002-11-14) [i586-linux]\n           :foobar\n           :\"foo\\#{\\\"bar\\\"}\"\n           :\"foo\\#{\\\"bar\\\"}\"\n\n: rescue修飾式 [parser] [change]\n\n  rescue 修飾式の優先度が変わりました。これは、実験的なもののようです。\n  (1.8 リリースで残っているので正式採用のようです)\n\n        a = b rescue c\n\n  は、\n\n        (a = b) rescue c\n\n  でなく\n\n        a = (b rescue c)\n\n  と評価されます。\n\n: [parser] [compat]\n\n  メソッド定義の外での return の呼び出しはコンパイル時でなく実行時に\n  エラーになるようになりました。\n\n        p :doing\n        return\n        => -:2: return appeared outside of method\n           ruby 1.6.7 (2002-03-01) [i586-linux]\n        => ruby 1.7.3 (2002-10-04) [i586-linux]\n           :doing\n           -:2: unexpected return\n\n: [parser] [compat]\n\n  ネストしたメソッド定義が許されるようになりました。\n\n  メソッド定義中での alias, undef も許可されました。\n\n  メソッド定義の外での super の呼び出しはコンパイル時でなく実行時に\n  エラーになるようになりました。\n\n  おそらく、((<ruby-dev:16969>)) あたりが変更の理由なのではないかと思\n  います。((<ruby-dev:17882>))\n\n: ((<%W()|リテラル/%記法>)) [parser]\n\n  %W(...) 配列リテラルが追加されました。%w() と異なりバックスラッシュ\n  記法や式展開が有効です。((<ruby-dev:15988>))\n\n: ((<リテラル/式展開>)) [parser]\n\n  #{ ... } の式展開中に文字列のデリミタを含めて任意の ruby プログラム\n  をそのまま書けるようになりました。以前も同じでしたが、よりルールが明\n  確になっているようです。つまり、式展開の中も外も同じ規則で、ruby プ\n  ログラムはパースされます。((<ruby-dev:17422>))\n\n: [parser] [compat]\n\n  文字列リテラル中の行頭の __END__ は、スクリプトの終りとみなさなくな\n  りました。((<ruby-dev:17513>))\n\n        # p \"\n        #__END__\n        #\"\n        p eval(%Q(p \"\\n__END__\\n\"))\n\n: ((<?<whitespace>|リテラル/数値リテラル>)) [parser] [change]\n\n  ?スペース、?改行、?TAB 等はリテラルとして無効になりました。必要なら \n  ?\\s, ?\\n, ?\\t 等を使用してください。(以下の例は前者がダブルクォート\n  を使用していることに注意) ((<ruby-bugs-ja:PR#261>)), ((<ruby-dev:17446>))\n\n: [parser] [change]\n: ((<String#to_f|String/to_f>)) [change]\n: ((<組み込み関数/Float>))() [change]\n\n  文字列を浮動小数点数に変換する内部処理で、ライブラリ関数 strtod(3) \n  に依存しなくなりました。ロケールやライブラリの独自拡張により動作が変\n  わることはなくなりました。\n\n: メソッド呼び出し      [parser] [change]\n\n  メソッド名と括弧の間に空白があるとその括弧は引数を括る括弧ではなく\n  式の括弧と解釈するようになりました。\n  (ただし、p (1, 2) とすると空白があっても引数を括る括弧になる。\n  つまり、(おそらく)意図通りに動作する)\n\n    p (1+2)*3\n\n: 条件式中の正規表現リテラル    [parser] [change]\n\n  条件式中の正規表現リテラルは警告が出るようになりました。\n\n  $_ との正規表現マッチは、明示的に ~/re/ (単項の ((<Regexp/~>)) メソッ\n  ド)などとすることが推奨されます。\n\n== 正規表現\n\n: ((<正規表現>)) [regexp]\n\n  正規表現 $ が改行の前だけでなく、常に文字列の末尾にもマッチするよう\n  になりました。これは、perl や python と同じ挙動です。((<ruby-dev:20104>))\n\n: ((<正規表現>)) [regexp]\n\n  ((<ruby 1.8 feature/2003-05-01>)) の $ の変更と同様に、正規表現 \\Z\n  が改行の前だけでなく、常に文字列の末尾にもマッチするようになりました。\n  これは、perl や python と同じ挙動です。((<ruby-dev:20187>))\n\n: ((<正規表現>)) [regexp]\n\n  文字クラス [] 内の [, ], - をエスケープなしで使用すると warning が出\n  るようになりました。((<ruby-dev:19868>))\n\n== Marshal\n\n: ((<Marshal/Marshal.dump>)) [marshal] [change]\n\n4.7->4.8\n: ((<Marshal>))         [marshal] [change]\n  無名モジュールを include したオブジェクトがダンプできなくなりました。\n  ((<ruby-dev:18186>))\n\n  名前付きモジュールを include したオブジェクトはダンプでき、include \n  したモジュールの情報をダンプフォーマットに保持するようになりました。\n\n  名前付きモジュールを include したオブジェクトはダンプでき、include\n  したモジュールの情報をダンプフォーマットに保持するようになりました。\n\n4.6->4.7\n: ((<Marshal>))         [marshal] [change]\n\n  Float のダンプが、sprintf(3) に依存しなくなりました。フォーマッ\n  トバージョンが 4.6 から 4.7 に上がっています。\n  (この後、strtod(3) の組み込みにより、読み込み時もシステムの strtod(3)\n  に依存しなくなっています)\n\n: ((<Marshal>))       [bug]\n\n  構造体クラスのサブクラスをダンプしたものがロードできませんでした。\n  ((<ruby-bugs-ja:PR#104>))\n\n        S = Struct.new(\"S\", :a)\n        class C < S\n        end\n        p Marshal.load(Marshal.dump(C.new))\n\n        => -:4: warning: instance variable __member__ not initialized\n           -:4:in `dump': uninitialized struct (TypeError)\n                from -:4\n           ruby 1.6.5 (2001-09-19) [i586-linux]\n\n        => ruby 1.7.1 (2001-10-19) [i586-linux]\n           #<C a=nil>\n\n== Windows 対応\n\n: ((<File/File.link>)) [new]\n\n  Win32(Win2k以降のみ)でNTFS上でのハードリンクの作成(CreateHardLink)に\n  対応しました。\n\n: ((<File/File.utime>)) [new]\n\n  Win32(NT系のみ)でディレクトリに対するutimeが出来るようになりました。\n\n* DOSISHなプラットフォームでのドライブレター対応が強化されました。\n* ((<Process/Process.pid>)) (win)\n\n  ((<mswin32>))版 ruby と ((<MinGW>))版 ruby で拡張ライブラリのバイナ\n  リ互換を保つようになりました。Config::CONFIG['RUBY_SO_NAME'] が\n  msvcrt-ruby((|XX|)) に(DLL 名になります)、Config::CONFIG['sitearch'] (拡張\n  ライブラリの置き場所のパス要素)が \"i386-msvcrt\" に変更されました。\n  ((<ruby-dev:17144>)), ((<ruby-dev:18047>))\n\n  Win32用の双方向パイプサポートのパッチが取り込まれたのだそうです\n  ((<ruby-win32:185>))\n\n: ((<Process/Process.kill>)) [compat]\n\n  ChangeLog によると win32 でも、シグナル 0 がサポートされたそうです。\n  多くの Unix で、シグナル 0 の送信は、プロセスの存在チェックに使用で\n  きますので、それと同じ動作をするのだと思います。\n\n: ruby interpreter (win32, MinGW) [ruby] [change]\n\n  ((<mswin32>))版 ruby と ((<MinGW>))版 ruby で拡張ライブラリのバイナ\n  リ互換を保つようになりました。Config::CONFIG['RUBY_SO_NAME'] が \n  msvcrt-ruby((|XX|)) に(DLL 名になります)、Config::CONFIG['sitearch'] (拡張\n  ライブラリの置き場所のパス要素)が \"i386-msvcrt\" に変更されました。\n  ((<ruby-dev:17144>)), ((<ruby-dev:18047>))\n\n  sitearch は、今回の件で新規追加されました(他の環境では \n  CONFIG['arch'] と同じ)\n\n  ((<Win32ネイティブ版>)) の脚注も参照\n\n: ENV[\"PATH\"]    [ruby], [bug?]\n\n  Windows などのプラットフォームで環境変数名 PATH (セキュリティチェッ\n  ク時などに判断)の大文字と小文字を区別しないようになりました。\n  ((<ruby-dev:20374>))\n\n: 双方向パイプ (win) [compat]\n\n  Win32用の双方向パイプサポートのパッチが取り込まれたのだそうです \n  ((<ruby-win32:185>))\n\n: ((<Process/Process.kill>))    [compat]\n\n  ((<mswin32>)), ((<mingw32>)) でも、Process.kill(9, pid) でプロセスを\n  強制終了(TerminateProcess) できます。(Process.kill(\"KILL\", pid) とは\n  できないようです・・・2002-08-28 その後 \"KILL\" で指定できるようになっ\n  たようです)\n\n: win32: map OS error to errno. [change]\n\n: cygwin\n\n  cygwinでは常にバイナリモードになりました(((<ruby-dev:19583>)))\n\n: ((<File/File.dirname>)) [CHANGE]\n: ((<File/File.expand_path>)) [CHANGE]\n: ((<File/File.join>)) [CHANGE]\n\n  DOSISHなプラットフォームでのドライブレター対応が強化されました。\n  ((<DOSISH 対応>))を参照。\n\n: ((<Process/Process.pid>)) (win) [change]\n\n  mswin32 版と mingw32 版で、ruby 内部はプロセスIDを常に正の値に変換して\n  扱うようになりました。\n  NT系のOSでは従来と違いはありませんが、Win9x系のOSでは、OSの保持する\n  プロセスIDが負値なので、符号変換して扱うようになります。((<ruby-dev:18263>))\n\n== 廃止された(される予定の)機能\n\n: ((<組み込み変数/$defout>)) [obsolete]\n: ((<組み込み変数/$deferr>)) [obsolete]\n\n  $stdout, $stderr を使用してください。\n\n: ((<String#=~|String/=~>)) [obsolete]\n: ((<String#~|String/~>))  [obsolete]\n  string =~ string に対して警告が出るようになりました。明示的に string\n  =~ regexp あるいは regexp =~ string を使うことが推奨されます。\n  (1.8.1 以降使用できなくなるかもしれません) ((<ruby-list:37662>))\n\n  String#=~ の変更と同様にString#~ で警告が出るようになりました。\n  (1.8.1 以降使用できなくなるかもしれません)\n\n: ((<Object#id|Object/id>))\n: ((<Object#type|Object/type>)) [obsolete]\n\n  使うと警告が出るようになりました。代わりに Object#object_id,\n  Object#class を使用してください。\n\n: ((<Object#to_a|Object/to_a>)) [obsolete]\n\n  警告メッセージが出るようになりました。(((<obsolete>)) になるのだそうです)\n\n: ((<Range#size|Range/size>))     [obsolete]\n: ((<Range#length|Range/length>)) [obsolete]\n\n  このメソッドはなくなりました。\n  ((<ruby-talk:64479>)), ((<ruby-talk:72133>))\n\n  Range の要素数を得るには\n\n        p((\"a\"..\"z\").to_a.size)\n\n  などとする必要があります。\n\n: ((<Array/indexes>))\n: ((<Array/indicies>))\n\n  (((<Array>)), ((<Hash>)), ((<ENV>))) のメソッド、indexes, indicies \n  は values_at という名前に変わりました。\n\n: ((<Array#filter|Array/filter>))\n\n  なくなりました。\n\n: Time.times\n\n  ((<Process/Process.times>)) に移動しました。\n\n: NotImplementError             [obsolete]\n\n  旧称は削除されました。((<NotImplementedError>))を使ってください\n\n: ((<Proc#yield|Proc/yield>))\n\n  なくなりました。((<ruby-dev:20180>))\n\n== ライブラリ\n\n: ((<tmpdir>)) [new]\n\n  テンポラリディレクトリを取得するためのライブラリが追加されました。\n  Windows などで利用されるライブラリは、/tmp をハードコードせずに(ま\n  た 環境変数 TEMP などを参照せずに)このライブラリを使用するべきです。\n  (tempfile などが tmpdir を使用するようになりました。\n  ((*tmp*))dir と ((*temp*))file というのがまたなんとも・・・)\n\n\n: ((<Timeout/Timeout.timeout>)) [lib] [new]\n: ((<Timeout::Error|Timeout/Error>)) [lib] [new]\n\n  timeout に Timeout モジュールが定義されました。((<RCR#121>))\n\n  関数 ((<timeout/timeout>)) は、モジュール関数 Timeout.timeout の別名に、\n  例外 ((<TimeoutError>)) は Timout::Error の別名になりました。\n\n: ((<erb>))           [lib] [new]\n\n  追加\n\n: ((<\"io/wait\">))     [lib] [new]\n\n  追加\n\n: ((<mkmf>)) [lib] [new]\n\n  新しい判定メソッド have_type(), check_sizeof() が追加されました。\n\n: ((<pathname>))        [lib] [new]\n\n  追加\n\n: ((<resolv>))       [lib] [compat]\n\n  Win32 に対応しました。\n\n: ((<webrick>))      [lib] [new]\n\n  追加\n\n: ((<openssl>))      [lib] [new]\n\n  追加\n\n: ((<win32ole|WIN32OLE>)) [lib] [new]\n\n  追加\n\n: ((<un>)) [lib] [new]\n\n  追加\n\n: ((<csv>)) [lib], [new]\n\n  追加。\n\n: ((<tk|tk>)) [lib], [change]\n\n  Ruby/Tk に多数の修正が入りました。((<ruby-list:37798>))\n\n: ((<drb>)) [lib] [new]\n\n  dRuby 追加。((<ruby-dev:20363>))\n\n: ((<rexml>)) [lib],[new]\n\n  追加\n\n: ((<yaml|YAML>)) [new]\n\n  追加。YAML は、YAML Ain't Markup Language だそうです。\n  ((<URL:http://yaml4r.sourceforge.net/>))\n  ((<URL:http://yaml.org/>))\n\n: ((<zlib>)) [lib] [new]\n\n  追加\n\n: ((<bigdecimal>)) [lib] [new]\n\n  追加\n\n: ((<\"test/unit\"|Test::Unit>)) [new]\n\n  Test::Unit 追加\n\n: ((<\"win32/registry\">)) [new]\n  Win32でレジストリにアクセスするためのライブラリが追加されました。\n\n: ((<profiler>)) [lib] [new]\n\n  追加。((<profile>)) の実体として分離されました。\n\n: ((<open-uri>)) [lib] [new]\n\n  追加\n\n: ((<set>)) [lib] [new]\n\n  追加\n\n: ((<\"net/ftp\">)) [new]\n\n  メソッド set_socket 追加\n\n: ((<dl>)) [lib] [new]\n\n  追加\n\n: 添付ライブラリ [lib] [new]\n\n  以下のライブラリが新たに追加されました。\n  ((<iconv>)), ((<tsort>)), ((<StringIO>)), ((<strscan>)),\n  ((<fileutils>)), racc/*\n\n: ((<benchmark>)) [new]\n  added\n\n: Curses        [lib] [compat]\n\n  Updated.  New methods and constants for using the mouse, character\n  attributes, colors and key codes have been added.\n\n: Complex#to_i          [lib] [obsolete]\n: Complex#to_f          [lib] [obsolete]\n: Complex#to_r          [lib] [obsolete]\n\n  Complex#to_i, #to_f, #to_r はなくなりました。\n  ((<ruby-bugs-ja:PR#102>)), ((<rubyist:0879>))\n\n: ((<gdbm>))    [lib] [change]\n: ((<dbm>))     [lib] [change]\n: ((<sdbm>))    [lib] [change]\n\n  ((*ドキュメント未反映*))\n  ((<ruby-dev:16126>))\n\n: ((<mkmf>)), extmk [lib] [compat]\n\n  extmk と mkmf をマージする作業が開始されました。extmk は \n  mkmf を利用するようになりました。mkmf もこれに伴い変更が行われ\n  ています。((<ruby-dev:18109>))\n\n: ((<\"net/ftp\">)) [compat]\n\n  getbinaryfile() の第二引数(ローカルファイル名)が省略可能になりました。\n  メソッド get(), put(), binary(), binary = 追加\n\n: ((<\"net/http\">)) [compat]\n  Net::HTTP のクラスメソッドで ((<URI>)) オブジェクトが使えるようになった。\n\n      Net::HTTP.get_print(URI.parse('http://www.ruby-lang.org/ja/'))\n\n  インスタンスメソッドでは使えないので注意。\n\n: ((<readline>))                [change]\n\n  Readline.readline 実行中に Ctrl-C により中断した後でも、端末状態を\n  復帰するようにしました。((<ruby-dev:14574>))\n\n== 拡張ライブラリAPI\n: rb_define_alloc_func() [api] [new]\n: rb_undef_alloc_func() [api] [new]\n\n  追加。((<Class/allocate>)) メソッドの定義に使用します。\n  ((<ruby-dev:19116>))\n\n: rb_enable_super() [api]\n: rb_disable_super() [api]\n\n  ChangeLog によると、これらの関数は必要なくなったようです。\n\n  (rb_enable_super() を呼ぶと warning が出ます)。以前は、拡張ライブラ\n  リのレベルで、rb_call_super() (Ruby の super にあたる) を呼ぶメソッ\n  ドは rb_enable_super() しておかなければなりませんでした。\n\n: STR2CSTR() [api] [new]\n\n    拡張ライブラリの API である STR2CSTR() は、与えられたオブジェクト\n    が文字列でなくかつ to_str メソッドを持つ場合、内部で to_str を呼び\n    出して暗黙の型変換を行います。この場合、変換結果が保持する文字列ポ\n    インタを返しますが、このAPIでは暗黙の型変換結果のオブジェクトがど\n    こからも参照されないため、型変換結果が GC される可能性があります。\n    ((<ruby-dev:12731>))\n\n    version 1.7 以降では代わりに StringValuePtr() を使用します。こちら\n    は、引数の参照先が暗黙の型変換の結果に置き換わるため変換結果が GC \n    されません。(version 1.7 では、STR2CSTR() は、obsolete です)\n\n    もう一つ新しく StringValue() という API が用意されています。こちら\n    は、引数が to_str による暗黙の型変換を期待する場合に使用します。\n    引数が文字列なら何もしません。\n    文字列を受け取るメソッドの最初の方で読んでおくと便利です。\n\n    なお、今のところ str2cstr() (Cポインタと文字列長を返す)の代わりに\n    なる安全な API は用意されていません。(((<ruby-dev:15644>))で提案は\n    ありました)\n\n== バグ修正\n\n: ((<組み込み関数/load>)) [bug]\n\n  ((<組み込み関数/load>)) がスレッドセーフになりました。((<ruby-dev:20490>))\n\n: ((<組み込み関数/syscall>)) [bug]\n\n  第二引数以降に文字列か Fixnum しか受け付けないために、long の範囲の\n  数値を指定することができませんでした。((<ruby-talk:72257>))\n\n        syscall(1, 2**30)\n\n        => -:1:in `syscall': wrong argument type Bignum (expected String) (TypeError)\n                from -:1\n           ruby 1.6.8 (2002-12-24) [i586-linux]\n\n\n: ((<組み込み関数/trap>))       [bug]\n: ((<組み込み関数/trace_var>))  [bug]\n\n  第二引数に汚染された文字列を渡すと例外 ((<SecurityError>)) が\n  起こるようになりました。1.6 では、汚染された文字列をセーフレ\n  ベル4で評価するようになっていました。\n  ((<ruby-list:32215>))\n\n: ((<Array#collect|Array/collect>))   [bug]\n: ((<Array#map|Array/map>))       [bug]\n\n  Array#collect がブロックを伴わない場合に self.dup を返していました。\n  そのため、Array 以外を返すことがありました((<ruby-list:30480>))。\n\n    Foo = Class.new Array\n\n    a = Foo.new\n    p a.map.class\n    p a.collect.class\n\n    => ruby 1.7.1 (2001-06-12) [i586-linux]\n       Array\n       Foo\n\n    => ruby 1.7.1 (2001-07-31) [i586-linux]\n       Array\n       Array\n\n: ((<Bignum>)) [bug]\n\n  -2147483648 より小さい数値の2進、8進、16進の表記がおかしくなっていました\n  ((<ruby-list:34828>))\n\n    p \"%b\" % -2147483648\n    p \"%b\" % -2147483649\n    p \"%b\" % -2147483650\n\n    => ruby 1.6.7 (2002-03-01) [i586-linux]\n       \"..10000000000000000000000000000000\"\n       \"..1\"\n       \"..10\"\n\n    => ruby 1.7.2 (2002-04-11) [i586-linux]\n       \"..10000000000000000000000000000000\"\n       \"..101111111111111111111111111111111\"\n       \"..101111111111111111111111111111110\"\n\n: ((<File/File.open>))       [bug]\n\n  第2引数を数値(File::RDONLY|File::CREATとか)で指定した場合に限り、第3\n  引数を用いていましたが、第3引数が与えられれば常に有効にするように\n  しました。\n  ((<ruby-bugs-ja:PR#54>))\n\n: ((<IO>)) (win32) [bug]\n\n  mswin32・mingw32で、更新モード(w+,r+)でオープンされたファイルに対する\n  読み書きの切り替えがうまくいっていなかった問題が修正されました。\n  bccwin32にも同様の問題がありますが、こちらは未修正です。\n  ((<ruby-dev:19299>))\n\n: ((<IO#putc|IO/putc>)) [bug]\n\n  出力メソッドのうち putc だけが write メソッドを使用していませんでした。\n  ((<ruby-dev:18038>))\n\n: IO#read, gets ..., etc. [bug]\n\n  File::NONBLOCK を指定した IO の読み込みで EWOULDBLOCK が発生すると、\n  途中まで読んだデータが失われることがありました。\n  ((<ruby-dev:17855>))\n\n  Thread を使ったプログラムで、ファイルからデータを読み込んでソケットに\n  書き出していると、ごく稀に Socket#write が Errno::EINTR になってしまう\n  ことがありました。((<ruby-dev:17878>)), ((<ruby-core:00444>))\n\n\n: ((<Proc>)) [bug]\n\n  $SAFE が、1 or 2 のとき\n  汚染された Proc は、ブロックにできなくなりました ((<ruby-dev:15682>))\n  ((-あらい 2003-08-06: できてる・・・？-))\n\n        $SAFE = 1\n        proc = proc {}\n        proc.taint\n        p proc.tainted?\n        def foo(&b)\n          p b.tainted?\n        end\n        foo(&proc)\n\n        => ruby 1.6.8 (2003-08-03) [i586-linux]\n           true\n           true\n        => ruby 1.8.0 (2003-08-04) [i586-linux]\n           true\n           true\n\n: ((<String#split|String/split>))    [bug]\n\n  空文字列に対する split が空文字列を要素に持つ配列を返していました。\n\n        p \"\".split(//)\n        p \"\".split(//, 0)\n        p \"\".split(//, 1)\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           []\n           []\n           [\"\"]\n        => ruby 1.8.0 (2003-07-25) [i586-linux]\n           []\n           []\n           []\n\n: ((<String#split|String/split>)) [bug]\n\n  以下の例のように、第一引数に ' ' (awk split)を指定してかつ、第二引数\n  を指定した場合に最後の要素の先頭に余分な空白が残っていました。\n\n        p \"a  b  c\".split(' ',3)\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           [\"a\", \"b\", \" c\"]\n        => ruby 1.8.0 (2003-07-03) [i586-linux]\n           [\"a\", \"b\", \"c\"]\n\n: ((<String#split|String/split>)) [bug]\n\n  String#split で第2引数が -1 のとき、空文字列に対して空文字列を要素と\n  する配列を返すバグが修正されました。((<ruby-bugs-ja:PR#426>))\n\n        p \"\".split(//)\n        p \"\".split(//, -1)\n\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           []\n           [\"\"]\n        => ruby 1.8.0 (2003-04-25) [i586-linux]\n           []\n           []\n\n: ((<String#rindex|String/rindex>)) [bug]\n\n  文字コード \\0 が文字列末尾にマッチしていました。\n\n        p \"abc\".rindex(0)\n        p \"abc\".index(0)\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           3\n           nil\n        => ruby 1.8.0 (2003-07-03) [i586-linux]\n           nil\n           nil\n\n: ((<String#upto|String/upto>)) [bug]\n\n  String#upto の範囲チェックが辞書順だったバグが修正されました。\n  現在は、((<String/succ>)) の動作と一致します。\n\n        p(('a'..'aa').to_a)\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           [\"a\"]\n        => ruby 1.8.0 (2003-07-03) [i586-linux]\n           [\"a\", \"b\", \"c\", ..., \"y\", \"z\", \"aa\"]\n\n        'a'.upto('aa') {|c| p c}\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           \"a\"\n        => ruby 1.8.0 (2003-07-03) [i586-linux]\n           \"a\"\n           \"b\"\n           \"c\"\n            :\n           \"y\"\n           \"z\"\n           \"aa\"\n\n  以前の実装では以下が 'aa' を含まないとか\n\n        'a'.upto('b') {|c| p c}\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           \"a\"\n           \"b\"\n        => ruby 1.8.0 (2003-07-03) [i586-linux]\n           \"a\"\n           \"b\"\n\n  以下の結果と順序関係が一致していませんでした。\n\n        p(('a'..'zz').to_a)\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           [\"a\", \"b\", \"c\", ..., \"x\", \"y\", \"z\", \"aa\", ..., \"zx\", \"zy\", \"zz\"]\n        => ruby 1.8.0 (2003-07-03) [i586-linux]\n           [\"a\", \"b\", \"c\", ..., \"x\", \"y\", \"z\", \"aa\", ..., \"zx\", \"zy\", \"zz\"]\n\n  なお、<=> の順序は辞書順であることに注意する必要があります。\n        p 'a' < 'b'    # => true\n        p 'aa' < 'b'   # => true\n\n: ((<Thread#wakeup|Thread/wakeup>)) [bug]\n: ((<Thread#run|Thread/run>)) [bug]\n  終了中(aborting)のスレッドに対して実行するとスレッドが生き返る\n  バグが修正されました。\n  ((<rubyist:1282>))\n\n: [bug]\n\n  ((<ruby-talk:73481>))\n\n        p 'mike stok' =~ /^(?i-mx:mike) (?i-mx:stok)$/\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           nil\n        => ruby 1.8.0 (2003-06-16) [i586-linux]\n           0\n\n  ((<ruby-talk:73549>))\n\n        p \"Mike\" =~ /(?-i)[Mm]ike/\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           nil\n        => ruby 1.8.0 (2003-06-16) [i586-linux]\n           0\n\n: ((<セキュリティモデル>)), ((<組み込み変数/$SAFE>)) [bug], [change]\n\n  ((<終了処理>))直前に $SAFE が 0 になるように変更されました。\n  ((<ruby-core:01119>))\n\n        $SAFE = 1\n        END { p $SAFE }\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           1\n        => ruby 1.8.0 (2003-06-09) [i586-linux]\n           0\n\n: ruby interpreter [bug]\n\n  以下のバグが修正されました((<ruby-list:37677>))\n  (イテレータの中で block を他のメソッドに & で渡した時のそのメソッド\n  の引数のコンテキストの扱い？)\n\n        def foo\n          p(block_given?)\n          p(block_given?,&proc)\n          p(yield,&proc)\n        end\n\n        foo { }\n\n        => ruby 1.6.8 (2002-12-24) [i586-linux]\n           true\n           false\n           -:4: [BUG] Segmentation fault\n           ruby 1.6.8 (2002-12-24) [i586-linux]\n\n        => ruby 1.6.8 (2003-05-15) [i586-linux]\n           true\n           false\n           -:4:in `foo': no block given (LocalJumpError)\n                from -:7\n\n        => ruby 1.8.0 (2003-05-17) [i586-linux]\n           true\n           true\n           nil\n\n: ((<\"||=\"|演算子式>)) [bug]\n\n  未定義の変数に対して ||= で値を代入したときに、グローバル変数で警告\n  が出ていました。また、クラス変数はエラーになっていました。\n  ((<ruby-dev:18278>))\n\n        local ||= 1\n        @instance ||= 1\n        $global ||= 1\n        @@class ||= 1\n\n        => -:3: warning: global variable `$global' not initialized\n           -:4: uninitialized class variable @@class in Object (NameError)\n           ruby 1.6.7 (2002-03-01) [i586-linux]\n        => ruby 1.7.3 (2002-09-13) [i586-linux]\n\n: large file [bug]\n\n  large file(サイズが 4G bytes 以上のファイル)を正しく扱うようになりま\n  した(？)\n  ((<ruby-talk:35316>)), ((<ruby-talk:35470>))\n\n: alias         [bug]\n\n  グローバル変数のエイリアスが効いていませんでした。\n  ((<ruby-dev:14922>))\n\n        $g2 = 1\n        alias $g1 $g2\n        p [$g1, $g2]\n        $g2 = 2\n        p [$g1, $g2]\n        => ruby 1.6.5 (2001-09-19) [i586-linux]\n           [1, 1]\n           [1, 2]\n\n        => ruby 1.7.1 (2001-10-19) [i586-linux]\n           [1, 1]\n           [2, 2]\n\n=== サポートプラットフォームの追加\n\n: WindowsCE [platform]\n\n  ((<WindowsCE>)) のサポートパッチが取り込まれました。\n\n: Borland C++ サポート [platform]\n\n  bcc で ruby インタプリタをコンパイルするためのパッチがマージされまし\n  た。\n\n: ((<VMS>)) support [platform]\n\n  ((<VMS>)) のサポートパッチが取り込まれました。",
          "snippets": []
        }
      ],
      "related_entries": []
    },
    {
      "signature": "NEWS for Ruby 3.0.0",
      "score": 811,
      "metadata": {
        "type": "document",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "NEWS for Ruby 3.0.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/doc/news=2f3_0_0.html",
          "description": "NEWS for Ruby 3.0.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストはリンク先を参照してください。\n\n== 言語仕様の変更\n\n  * Keyword arguments are now separated from positional arguments.\n    Code that resulted in deprecation warnings in Ruby 2.7 will now\n    result in ArgumentError or different behavior. 14183\n  * Procs accepting a single rest argument and keywords are no longer\n    subject to autosplatting.  This now matches the behavior of Procs\n    accepting a single rest argument and no keywords.\n    16166\n\n//emlist[][ruby]{\npr = proc{|*a, **kw| [a, kw]}\n\npr.call([1])\n# 2.7 => [[1], {}]\n# 3.0 => [[[1]], {}]\n\npr.call([1, {a: 1}])\n# 2.7 => [[1], {:a=>1}] # and deprecation warning\n# 3.0 => a=>1}, {}]\n//}\n\n  * Arguments forwarding (`...`) now supports leading arguments.\n    16378\n\n//emlist{\ndef method_missing(meth, ...)\n  send(:\"do_#{meth}\", ...)\nend\n//}\n\n    * Pattern matching (`case/in`) is no longer experimental. 17260\n    * One-line pattern matching is redesigned.  [EXPERIMENTAL]\n        * `=>` is added. It can be used like a rightward assignment.\n          17260\n      * `in` is changed to return `true` or `false`. 17371\n\n//emlist{\n0 => a\np a #=> 0\n\n{b: 0, c: 1} => {b:}\np b #=> 0\n//}\n\n//emlist{\n# version 3.0\n0 in 1 #=> false\n\n# version 2.7\n0 in 1 #=> raise NoMatchingPatternError\n//}\n\n  * Find-pattern is added.  [EXPERIMENTAL]\n    16828\n\n//emlist{\ncase [\"a\", 1, \"b\", \"c\", 2, \"d\", \"e\", \"f\", 3]\nin [*pre, String => x, String => y, *post]\n  p pre  #=> [\"a\", 1]\n  p x    #=> \"b\"\n  p y    #=> \"c\"\n  p post #=> [2, \"d\", \"e\", \"f\", 3]\nend\n//}\n\n  * Endless method definition is added.  [EXPERIMENTAL]\n    16746\n\n//emlist{\ndef square(x) = x * x\n//}\n\n  * Interpolated String literals are no longer frozen when\n    `# frozen-string-literal: true` is used. 17104\n  * Magic comment `shareable_constant_value` added to freeze constants.\n    See {Magic Comments}[rdoc-ref:doc/syntax/comments.rdoc@Magic+Comments] for more details.\n    17273\n  * A {static analysis}[rdoc-label:label-Static+analysis] foundation is\n    introduced.\n      * {RBS}[rdoc-label:label-RBS] is introduced. It is a type definition\n        language for Ruby programs.\n      * {TypeProf}[rdoc-label:label-TypeProf] is experimentally bundled. It is a\n        type analysis tool for Ruby programs.\n  * Deprecation warnings are no longer shown by default (since Ruby 2.7.2).\n    Turn them on with `-W:deprecated` (or with `-w` to show other warnings too).\n    16345\n  * `$SAFE` and `$KCODE` are now normal global variables with no special behavior.\n    C-API methods related to `$SAFE` have been removed.\n    16131 17136\n  * yield in singleton class definitions in methods is now a SyntaxError\n    instead of a warning. yield in a class definition outside of a method\n    is now a SyntaxError instead of a LocalJumpError.  15575\n  * When a class variable is overtaken by the same definition in an\n    ancestor class/module, a RuntimeError is now raised (previously,\n    it only issued a warning in verbose mode).  Additionally, accessing a\n    class variable from the toplevel scope is now a RuntimeError.\n    14541\n  * Assigning to a numbered parameter is now a SyntaxError instead of\n    a warning.\n\n== Command line options\n\n=== `--help` option\n\nWhen the environment variable `RUBY_PAGER` or `PAGER` is present and has\na non-empty value, and the standard input and output are tty, the `--help`\noption shows the help message via the pager designated by the value.\n16754\n\n=== `--backtrace-limit` option\n\nThe `--backtrace-limit` option limits the maximum length of a backtrace.\n8661\n\n== Core classes updates\n\nOutstanding ones only.\n\n  * Array\n    * The following methods now return Array instances instead of subclass instances when called on subclass instances: 6087\n      * Array#drop\n      * Array#drop_while\n      * Array#flatten\n      * Array#slice!\n      * Array#slice / Array#[]\n      * Array#take\n      * Array#take_while\n      * Array#uniq\n      * Array#*\n    * Can be sliced with Enumerator::ArithmeticSequence\n\n//emlist[][ruby]{\ndirty_data = ['--', 'data1', '--', 'data2', '--', 'data3']\ndirty_data[(1..).step(2)] # take each second element\n# => [\"data1\", \"data2\", \"data3\"]\n//}\n\n  * Binding\n    * Binding#eval when called with one argument will use `\"(eval)\"` for `__FILE__` and `1` for `__LINE__` in the evaluated code. 4352 17419\n  * ConditionVariable\n    * ConditionVariable#wait may now invoke the `block`/`unblock` scheduler hooks in a non-blocking context. 16786\n  * Dir\n    * Dir.glob and Dir.[] now sort the results by default, and accept the `sort:` keyword option.  8709\n  * ENV\n    * ENV.except has been added, which returns a hash excluding the given keys and their values.  15822\n    * Windows: Read ENV names and values as UTF-8 encoded Strings 12650\n  * Encoding\n    * Added new encoding IBM720.  16233\n    * Changed default for Encoding.default_external to UTF-8 on Windows 16604\n  * Fiber\n    * Fiber.new(blocking: true/false) allows you to create non-blocking execution contexts. 16786\n    * Fiber#blocking? tells whether the fiber is non-blocking. 16786\n    * Fiber#backtrace and Fiber#backtrace_locations provide per-fiber backtrace. 16815\n    * The limitation of Fiber#transfer is relaxed. 17221\n  * GC\n    * GC.auto_compact= and GC.auto_compact have been added to control when compaction runs.  Setting `auto_compact=` to `true` will cause compaction to occur during major collections.  At the moment, compaction adds significant overhead to major collections, so please test first!  17176\n  * Hash\n    * Hash#transform_keys and Hash#transform_keys! now accept a hash that maps keys to new keys.  16274\n    * Hash#except has been added, which returns a hash excluding the given keys and their values.  15822\n  * IO\n    * IO#nonblock? now defaults to `true`. 16786\n    * IO#wait_readable, IO#wait_writable, IO#read, IO#write and other related methods (e.g. IO#puts, IO#gets) may invoke the scheduler hook `#io_wait(io, events, timeout)` in a non-blocking execution context. 16786\n  * Kernel\n    * Kernel#clone when called with the `freeze: false` keyword will call `#initialize_clone` with the `freeze: false` keyword. 14266\n    * Kernel#clone when called with the `freeze: true` keyword will call `#initialize_clone` with the `freeze: true` keyword, and will return a frozen copy even if the receiver is unfrozen. 16175\n    * Kernel#eval when called with two arguments will use `\"(eval)\"` for `__FILE__` and `1` for `__LINE__` in the evaluated code. 4352\n    * Kernel#lambda now warns if called without a literal block. 15973\n    * Kernel.sleep invokes the scheduler hook `#kernel_sleep(...)` in a non-blocking execution context. 16786\n  * Module\n    * Module#include and Module#prepend now affect classes and modules that have already included or prepended the receiver, mirroring the behavior if the arguments were included in the receiver before the other modules and classes included or prepended the receiver. 9573\n    * Module#public, Module#protected, Module#private, Module#public_class_method, Module#private_class_method, toplevel \"private\" and \"public\" methods now accept single array argument with a list of method names. 17314\n    * Module#attr_accessor, Module#attr_reader, Module#attr_writer and Module#attr methods now return an array of defined method names as symbols. 17314\n    * Module#alias_method now returns the defined alias as a symbol. 17314\n\n//emlist[][ruby]{\nclass C; end\nmodule M1; end\nmodule M2; end\nC.include M1\nM1.include M2\np C.ancestors #=> [C, M1, M2, Object, Kernel, BasicObject]\n//}\n\n  * Mutex\n    * `Mutex` is now acquired per-`Fiber` instead of per-`Thread`. This change should be compatible for essentially all usages and avoids blocking when using a scheduler. 16792\n  * Proc\n    * Proc#== and Proc#eql? are now defined and will return true for separate Proc instances if the procs were created from the same block. 14267\n  * Queue / SizedQueue\n    * Queue#pop, SizedQueue#push and related methods may now invoke the `block`/`unblock` scheduler hooks in a non-blocking context. 16786\n  * Ractor\n    * New class added to enable parallel execution. See rdoc-ref:ractor.md for more details.\n  * Random\n    * `Random::DEFAULT` now refers to the `Random` class instead of being a `Random` instance, so it can work with `Ractor`. 17322\n    * `Random::DEFAULT` is deprecated since its value is now confusing and it is no longer global, use `Kernel.rand`/`Random.rand` directly, or create a `Random` instance with `Random.new` instead. 17351\n  * String\n    * The following methods now return or yield String instances instead of subclass instances when called on subclass instances: 10845\n      * String#*\n      * String#capitalize\n      * String#center\n      * String#chomp\n      * String#chop\n      * String#delete\n      * String#delete_prefix\n      * String#delete_suffix\n      * String#downcase\n      * String#dump\n      * String#each_char\n      * String#each_grapheme_cluster\n      * String#each_line\n      * String#gsub\n      * String#ljust\n      * String#lstrip\n      * String#partition\n      * String#reverse\n      * String#rjust\n      * String#rpartition\n      * String#rstrip\n      * String#scrub\n      * String#slice!\n      * String#slice / String#[]\n      * String#split\n      * String#squeeze\n      * String#strip\n      * String#sub\n      * String#succ / String#next\n      * String#swapcase\n      * String#tr\n      * String#tr_s\n      * String#upcase\n  * Symbol\n    * Symbol#to_proc now returns a lambda Proc.  16260\n    * Symbol#name has been added, which returns the name of the symbol if it is named.  The returned string is frozen.  16150\n  * Fiber\n    * Introduce Fiber.set_scheduler for intercepting blocking operations and Fiber.scheduler for accessing the current scheduler. See rdoc-ref:fiber.md for more details about what operations are supported and how to implement the scheduler hooks. 16786\n    * Fiber.blocking? tells whether the current execution context is blocking. 16786\n    * Thread#join invokes the scheduler hooks `block`/`unblock` in a non-blocking execution context. 16786\n  * Thread\n    * Thread.ignore_deadlock accessor has been added for disabling the default deadlock detection, allowing the use of signal handlers to break deadlock. 13768\n  * Warning\n    * Warning#warn now supports a category keyword argument. 17122\n\n== Stdlib updates\n\nOutstanding ones only.\n\n  * BigDecimal\n    * Update to BigDecimal 3.0.0\n    * This version is Ractor compatible.\n  * Bundler\n    * Update to Bundler 2.2.3\n  * CGI\n    * Update to 0.2.0\n    * This version is Ractor compatible.\n  * CSV\n    * Update to CSV 3.1.9\n  * Date\n    * Update to Date 3.1.1\n    * This version is Ractor compatible.\n  * Digest\n    * Update to Digest 3.0.0\n    * This version is Ractor compatible.\n  * Etc\n    * Update to Etc 1.2.0\n    * This version is Ractor compatible.\n  * Fiddle\n    * Update to Fiddle 1.0.5\n  * IRB\n    * Update to IRB 1.2.6\n  * JSON\n    * Update to JSON 2.5.0\n    * This version is Ractor compatible.\n  * Set\n    * Update to set 1.0.0\n    * SortedSet has been removed for dependency and performance reasons.\n    * Set#join is added as a shorthand for `.to_a.join`.\n    * Set#<=> is added.\n  * Socket\n    * Add :connect_timeout to TCPSocket.new 17187\n  * Net::HTTP\n    * Net::HTTP#verify_hostname= and Net::HTTP#verify_hostname have been added to skip hostname verification.  16555\n    * Net::HTTP.get, Net::HTTP.get_response, and Net::HTTP.get_print can take the request headers as a Hash in the second argument when the first argument is a URI.  16686\n  * Net::SMTP\n    * Add SNI support.\n    * Net::SMTP.start arguments are keyword arguments.\n    * TLS should not check the host name by default.\n  * OpenStruct\n    * Initialization is no longer lazy. 12136\n    * Builtin methods can now be overridden safely. 15409\n    * Implementation uses only methods ending with `!`.\n    * Ractor compatible.\n    * Improved support for YAML. 8382\n    * Use officially discouraged. Read OpenStruct@Caveats section.\n  * Pathname\n    * Ractor compatible.\n  * Psych\n    * Update to Psych 3.3.0\n    * This version is Ractor compatible.\n  * Reline\n    * Update to Reline 0.1.5\n  * RubyGems\n    * Update to RubyGems 3.2.3\n  * StringIO\n    * Update to StringIO 3.0.0\n    * This version is Ractor compatible.\n  * StringScanner\n    * Update to StringScanner 3.0.0\n    * This version is Ractor compatible.\n\n== Compatibility issues\n\nExcluding feature bug fixes.\n\n  * Regexp literals and all Range objects are frozen. 8948 16377 15504\n\n//emlist[][ruby]{\n/foo/.frozen? #=> true\n(42...).frozen? # => true\n//}\n\n  * EXPERIMENTAL: Hash#each consistently yields a 2-element array. 12706\n    * Now `{ a: 1 }.each(&->(k, v) { })` raises an ArgumentError due to lambda's arity check.\n  * When writing to STDOUT redirected to a closed pipe, no broken pipe error message will be shown now.  14413\n  * `TRUE`/`FALSE`/`NIL` constants are no longer defined.\n  * Integer#zero? overrides Numeric#zero? for optimization.  16961\n  * Enumerable#grep and Enumerable#grep_v when passed a Regexp and no block no longer modify Regexp.last_match. 17030\n  * Requiring 'open-uri' no longer redefines `Kernel#open`. Call `URI.open` directly or `use URI#open` instead. 15893\n  * SortedSet has been removed for dependency and performance reasons.\n\n== Stdlib compatibility issues\n\n  * Default gems\n    * The following libraries are promoted to default gems from stdlib.\n      * English\n      * abbrev\n      * base64\n      * drb\n      * debug\n      * erb\n      * find\n      * net-ftp\n      * net-http\n      * net-imap\n      * net-protocol\n      * open-uri\n      * optparse\n      * pp\n      * prettyprint\n      * resolv-replace\n      * resolv\n      * rinda\n      * set\n      * securerandom\n      * shellwords\n      * tempfile\n      * tmpdir\n      * time\n      * tsort\n      * un\n      * weakref\n    * The following extensions are promoted to default gems from stdlib.\n      * digest\n      * io-nonblock\n      * io-wait\n      * nkf\n      * pathname\n      * syslog\n      * win32ole\n  * Bundled gems\n    * net-telnet and xmlrpc have been removed from the bundled gems. If you are interested in maintaining them, please comment on your plan to https://github.com/ruby/xmlrpc or https://github.com/ruby/net-telnet.\n  * SDBM has been removed from the Ruby standard library. 8446\n    * The issues of sdbm will be handled at https://github.com/ruby/sdbm\n  * WEBrick has been removed from the Ruby standard library. 17303\n    * The issues of WEBrick will be handled at https://github.com/ruby/webrick\n\n== C API updates\n\n  * C API functions related to `$SAFE` have been removed. 16131\n  * C API header file `ruby/ruby.h` was split. https://github.com/ruby/ruby/pull/2991 This should have no impact on extension libraries, but users might experience slow compilations.\n  * Memory view interface [EXPERIMENTAL]\n    * The memory view interface is a C-API set to exchange a raw memory area, such as a numeric array or a bitmap image, between extension libraries. The extension libraries can share also the metadata of the memory area that consists of the shape, the element format, and so on. Using these kinds of metadata, the extension libraries can share even a multidimensional array appropriately. This feature is designed by referring to Python's buffer protocol. 13767 14722\n  * Ractor related C APIs are introduced (experimental) in \"include/ruby/ractor.h\".\n\n== Implementation improvements\n\n  * New method cache mechanism for Ractor. 16614\n    * Inline method caches pointed from ISeq can be accessed by multiple Ractors in parallel and synchronization is needed even for method caches. However, such synchronization can be overhead so introducing new inline method cache mechanisms, (1) Disposable inline method cache (2) per-Class method cache and (3) new invalidation mechanism. (1) can avoid per-method call synchronization because it only uses atomic operations. See the ticket for more details.\n  * The number of hashes allocated when using a keyword splat in a method call has been reduced to a maximum of 1, and passing a keyword splat to a method that accepts specific keywords does not allocate a hash.\n  * `super` is optimized when the same type of method is called in the previous call if it's not refinements or an attr reader or writer.\n\n=== JIT\n\n  * Performance improvements of JIT-ed code\n    * Microarchitectural optimizations\n        * Native functions shared by multiple methods are deduplicated on JIT compaction.\n        * Decrease code size of hot paths by some optimizations and partitioning cold paths.\n    * Instance variables\n        * Eliminate some redundant checks.\n        * Skip checking a class and a object multiple times in a method when possible.\n        * Optimize accesses in some core classes like Hash and their subclasses.\n    * Method inlining support for some C methods\n        * `Kernel`: `#class`, `#frozen?`\n        * `Integer`: `#-@`, `#~`, `#abs`, `#bit_length`, `#even?`, `#integer?`, `#magnitude`, `#odd?`, `#ord`, `#to_i`, `#to_int`, `#zero?`\n        * `Struct`: reader methods for 10th or later members\n    * Constant references are inlined.\n    * Always generate appropriate code for `==`, `nil?`, and `!` calls depending on a receiver class.\n    * Reduce the number of PC accesses on branches and method returns.\n    * Optimize C method calls a little.\n  * Compilation process improvements\n    * It does not keep temporary files in /tmp anymore.\n    * Throttle GC and compaction of JIT-ed code.\n    * Avoid GC-ing JIT-ed code when not necessary.\n    * GC-ing JIT-ed code is executed in a background thread.\n    * Reduce the number of locks between Ruby and JIT threads.\n\n== Static analysis\n\n=== RBS\n\n  * RBS is a new language for type definition of Ruby programs. It allows writing types of classes and modules with advanced types including union types, overloading, generics, and _interface types_ for duck typing.\n  * Ruby ships with type definitions for core/stdlib classes.\n  * `rbs` gem is bundled to load and process RBS files.\n\n=== TypeProf\n\n  * TypeProf is a type analysis tool for Ruby code based on abstract interpretation.\n    * It reads non-annotated Ruby code, tries inferring its type signature, and prints the analysis result in RBS format.\n    * Though it supports only a subset of the Ruby language yet, we will continuously improve the coverage of language features, analysis performance, and usability.\n\n//emlist[][ruby]{\n# test.rb\ndef foo(x)\n  if x > 10\n    x.to_s\n  else\n    nil\n  end\nend\n\nfoo(42)\n//}\n\n//emlist{\n$ typeprof test.rb\n# Classes\nclass Object\n  def foo : (Integer) -> String?\nend\n//}\n\n== Miscellaneous changes\n\n  * Methods using `ruby2_keywords` will no longer keep empty keyword splats, those are now removed just as they are for methods not using `ruby2_keywords`.\n  * When an exception is caught in the default handler, the error message and backtrace are printed in order from the innermost. 8661\n  * Accessing an uninitialized instance variable no longer emits a warning in verbose mode. 17055",
          "snippets": [
            "NEWS for Ruby<span class=\"keyword\"> 3.0.0</span> \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリス",
            " Warning#warn now supports a category keyword argument. 17122\n\n== Stdlib updates\n\nOutstanding ones only.\n\n  * BigDecimal\n    * Update to BigDecimal<span class=\"keyword\"> 3.0.0</span>\n    * This version is Ractor compatible.\n  * Bundler\n    * Update to Bundler 2.2.3\n  * CGI\n    * Update to 0.2.0\n    * This version is Ractor comp",
            "e.\n  * CSV\n    * Update to CSV 3.1.9\n  * Date\n    * Update to Date 3.1.1\n    * This version is Ractor compatible.\n  * Digest\n    * Update to Digest<span class=\"keyword\"> 3.0.0</span>\n    * This version is Ractor compatible.\n  * Etc\n    * Update to Etc 1.2.0\n    * This version is Ractor compatible.\n  * Fiddle\n    * Update to Fid"
          ]
        }
      ],
      "related_entries": []
    },
    {
      "signature": "IO#read(length = nil, outbuf = \"\") -> String | nil",
      "score": 781,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "length バイト読み込んで、その文字列を返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/IO/i/read.html",
          "description": "length バイト読み込んで、その文字列を返します。\n\n引数 length が指定された場合はバイナリ読み込みメソッド、そうでない場合はテキスト読み込みメソッドとして\n動作します。\n既に EOF に達していれば nil を返します。\nただし、length に nil か 0 が指定されている場合は、空文字列 \"\" を返します。\n例えば、open(空ファイル) {|f| f.read } は \"\" となります。\n\n@param length 読み込むサイズを整数で指定します。\n              nil が指定された場合、EOF までの全てのデータを読み込んで、その文字列を返します。\n\n@param outbuf 出力用のバッファを文字列で指定します。IO#read は読み込んだ\n              データをその文字列オブジェクトに上書きして返します。指定し\n              た文字列オブジェクトがあらかじめ length 長の領域であれば、\n              余計なメモリの割当てが行われません。指定した文字列の長さが\n              length と異なる場合、その文字列は一旦 length 長に拡張(ある\n              いは縮小)されたあと、実際に読み込んだデータのサイズになります。\n\n@raise IOError 自身が読み込み用にオープンされていなければ発生します。\n\n@raise Errno::EXXX データの読み込みに失敗した場合に発生します。\n\n@raise ArgumentError length が負の場合に発生します。\n\n第二引数を指定した read の呼び出しでデータが空であった場合\n(read が nil を返す場合)、outbuf は空文字列になります。\n\n  outbuf = \"x\" * 20;\n  io = File.open(\"/dev/null\")\n  p io.read(10,outbuf)\n  p outbuf\n  => nil\n     \"\"",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "IO",
          "label": "IO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:IO/"
        }
      ]
    },
    {
      "signature": "IO.read(path, length = nil, offset = 0, opt = {}) -> String | nil",
      "score": 736,
      "metadata": {
        "type": "singleton-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "path で指定されたファイルを offset 位置から\nlength バイト分読み込んで返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/IO/s/read.html",
          "description": "path で指定されたファイルを offset 位置から\nlength バイト分読み込んで返します。\n\n既に EOF に達している場合は nil を返します。ただし、length に nil か 0 が指定されている場合は、空文字列 \"\" を返します。例えば、IO.read(空ファイル) は \"\" を返します。\n\n引数 length が指定された場合はバイナリ読み込みメソッド、そうでない場合はテキスト読み込みメソッドとして\n動作します。\n\nKernel.#open と同様 path の先頭が \"|\" ならば、\"|\" に続くコマンドの出力を読み取ります。\n\n@param path ファイル名を表す文字列か \"|コマンド名\" を指定します。\n\n@param length 読み込む長さを整数で指定します。nil であるか省略した場合には、EOF まで読み込みます。\n\n@param offset 読み込みを始めるオフセットを整数で指定します。\n\n@param opt ファイル path を open する時に使われるオプションを Hash で指定します。\n\n@raise Errno::EXXX path のオープン、offset 位置への設定、ファイルの読み込みに失敗した場合に発生します。\n\n@raise ArgumentError length が負の場合に発生します。\n\n引数 opt で有効なキーと値は以下のとおりです。\nキーはいずれも Symbol オブジェクトです。\n\n: :encoding\n  \n  読み込んだ文字列のエンコーディングを指定します。\n  読み込む長さを指定した場合はこれは無視されます。\n\n: :mode\n  \n  IO.open のモードを指定します。\n  \"r\" で始まる文字列である必要があります。\n\n: :open_args\n  \n  IO.open に渡される引数を配列で指定します。\n\nこれらの他、 :external_encoding など\nIO.open のオプション引数が指定できます。\n\n@see IO.binread\n\n例:\n\n  IO.read(empty_file)             #=> \"\"\n  IO.read(empty_file, 1)          #=> nil\n  IO.read(one_byte_file, 0, 10)   #=> \"\"\n  IO.read(one_byte_file, nil, 10) #=> \"\" \n  IO.read(one_byte_file, 1, 10)   #=> nil",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "IO",
          "label": "IO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:IO/"
        }
      ]
    },
    {
      "signature": "IO.read(path, length = nil, opt = {}) -> String | nil",
      "score": 736,
      "metadata": {
        "type": "singleton-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "path で指定されたファイルを offset 位置から\nlength バイト分読み込んで返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/IO/s/read.html",
          "description": "path で指定されたファイルを offset 位置から\nlength バイト分読み込んで返します。\n\n既に EOF に達している場合は nil を返します。ただし、length に nil か 0 が指定されている場合は、空文字列 \"\" を返します。例えば、IO.read(空ファイル) は \"\" を返します。\n\n引数 length が指定された場合はバイナリ読み込みメソッド、そうでない場合はテキスト読み込みメソッドとして\n動作します。\n\nKernel.#open と同様 path の先頭が \"|\" ならば、\"|\" に続くコマンドの出力を読み取ります。\n\n@param path ファイル名を表す文字列か \"|コマンド名\" を指定します。\n\n@param length 読み込む長さを整数で指定します。nil であるか省略した場合には、EOF まで読み込みます。\n\n@param offset 読み込みを始めるオフセットを整数で指定します。\n\n@param opt ファイル path を open する時に使われるオプションを Hash で指定します。\n\n@raise Errno::EXXX path のオープン、offset 位置への設定、ファイルの読み込みに失敗した場合に発生します。\n\n@raise ArgumentError length が負の場合に発生します。\n\n引数 opt で有効なキーと値は以下のとおりです。\nキーはいずれも Symbol オブジェクトです。\n\n: :encoding\n  \n  読み込んだ文字列のエンコーディングを指定します。\n  読み込む長さを指定した場合はこれは無視されます。\n\n: :mode\n  \n  IO.open のモードを指定します。\n  \"r\" で始まる文字列である必要があります。\n\n: :open_args\n  \n  IO.open に渡される引数を配列で指定します。\n\nこれらの他、 :external_encoding など\nIO.open のオプション引数が指定できます。\n\n@see IO.binread\n\n例:\n\n  IO.read(empty_file)             #=> \"\"\n  IO.read(empty_file, 1)          #=> nil\n  IO.read(one_byte_file, 0, 10)   #=> \"\"\n  IO.read(one_byte_file, nil, 10) #=> \"\" \n  IO.read(one_byte_file, 1, 10)   #=> nil",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "IO",
          "label": "IO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:IO/"
        }
      ]
    },
    {
      "signature": "OpenSSL::Buffering#read(length=nil, buf=nil) -> String | nil",
      "score": 679,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "文字列を通信路から読み込み、返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/OpenSSL=3a=3aBuffering/i/read.html",
          "description": "文字列を通信路から読み込み、返します。\n\n読み込みが終端に到達している場合は nil を返します。\n\nlength で読み込むバイト数を指定します。\nlength に 0 を渡した場合は空文字列を返します。\nlength に nil を渡した場合(省略した場合)は最後\nまでのデータを読み込みます。\n\nbufに文字列を渡した場合はその領域が出力用のバッファとして利用されます。\n\nIO#read と同様です。\n\n@param length 読み込むバイト数\n@param buf 読み込みバッファ",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "OpenSSL::Buffering",
          "label": "OpenSSL::Buffering",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:OpenSSL%3A%3ABuffering/"
        }
      ]
    },
    {
      "signature": "ARGF.class#read(length = nil, str = nil) -> String | nil",
      "score": 673,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "ARGVに指定されたファイルを先頭のファイルからlengthバイト読み込み、\nその文字列をstrに出力します。読み込んだ文字列を返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/ARGF=2eclass/i/read.html",
          "description": "ARGVに指定されたファイルを先頭のファイルからlengthバイト読み込み、\nその文字列をstrに出力します。読み込んだ文字列を返します。\n\n@param length 読み込むバイト数を指定します。nilの場合はARGVのすべてのファ\n              イルを読み込みます。\n\n@param str 出力先の文字列。内容は上書きされます。\n\n  $ echo \"small\" > small.txt\n  $ echo \"large\" > large.txt\n  $ ruby glark.rb small.txt large.txt\n\n  ARGF.read      # => \"small\\nlarge\"\n  ARGF.read(200) # => \"small\\nlarge\"\n  ARGF.read(2)   # => \"sm\"\n  ARGF.read(0)   # => \"\"\n\n@see IO#read",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "ARGF.class",
          "label": "ARGF.class",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:ARGF.class/"
        }
      ]
    },
    {
      "signature": "IO.binread(path, length = nil, offset = 0) -> String | nil",
      "score": 673,
      "metadata": {
        "type": "singleton-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "path で指定したファイルを open し、offset の所まで seek し、\nlength バイト読み込みます。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/IO/s/binread.html",
          "description": "path で指定したファイルを open し、offset の所まで seek し、\nlength バイト読み込みます。\n\nlength を省略するとファイルの末尾まで読み込みます。\n\nファイルを開くときの mode は \"rb:ASCII-8BIT\" です。\n\n//emlist[例][ruby]{\nIO.write(\"testfile\", \"This is line one\\nThis is line two\\nThis is line three\\nAnd so on...\\n\")\nIO.binread(\"testfile\")           # => \"This is line one\\nThis is line two\\nThis is line three\\nAnd so on...\\n\"\nIO.binread(\"testfile\", 20)       # => \"This is line one\\nThi\"\nIO.binread(\"testfile\", 20, 10)   # => \"ne one\\nThis is line \"\n//}\n\n@see IO.read",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "IO",
          "label": "IO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:IO/"
        }
      ]
    },
    {
      "signature": "MatchData#[](start, length) -> [String]",
      "score": 664,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "start 番目から length 個の要素を含む部分配列を返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/MatchData/i/=5b=5d.html",
          "description": "start 番目から length 個の要素を含む部分配列を返します。\n\n//emlist[例][ruby]{\n/(foo)(bar)/ =~ \"foobarbaz\"\np $~[0, 3]      # => [\"foobar\", \"foo\", \"bar\"]\n//}\n\n@see Array#[]",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "MatchData",
          "label": "MatchData",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:MatchData/"
        }
      ]
    },
    {
      "signature": "OpenSSL::SSL::SSLSocket#sysread(length, buf=nil) -> String",
      "score": 661,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "データをバッファを経由せずに暗号化通信路から読み込み、\n読み込んだデータを文字列で返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/OpenSSL=3a=3aSSL=3a=3aSSLSocket/i/sysread.html",
          "description": "データをバッファを経由せずに暗号化通信路から読み込み、\n読み込んだデータを文字列で返します。\n\n基本的にはこのメソッドは使わず、OpenSSL::Buffering の\nメソッドを使ってデータを読み込むべきです。\n\nlength で読み込むバイト数を指定します。\n\nbufに文字列を指定するとその文字列のメモリ領域にデータを直接書き込み、\nその String オブジェクトを返します。\n\nIO#sysread と同様です。\n\n@param length 読み込むバイト数を指定します\n@param buf データを書き込むバッファ\n@raise EOFError 入力が終端に逹した場合に発生します\n@raise OpenSSL::SSL::SSLError 読み込みに失敗した場合に発生します",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "OpenSSL::Buffering",
          "label": "OpenSSL::Buffering",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:OpenSSL%3A%3ABuffering/"
        },
        {
          "key": "OpenSSL::SSL::SSLSocket",
          "label": "OpenSSL::SSL::SSLSocket",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:OpenSSL%3A%3ASSL%3A%3ASSLSocket/"
        }
      ]
    },
    {
      "signature": "Kernel.#caller(start, length) -> [String] | nil",
      "score": 631,
      "metadata": {
        "type": "module-function",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "start 段上の呼び出し元の情報を $@\nの形式のバックトレース(文字列の配列)として返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Kernel/m/caller.html",
          "description": "start 段上の呼び出し元の情報を $@\nの形式のバックトレース(文字列の配列)として返します。\n\nトップレベルでは空の配列を返します。caller の戻り値を $@ に代入することで\n例外の発生位置を設定できます。\n\n引数で指定した値が範囲外の場合は nil を返します。\n\n@param start long の範囲を超えない正の整数でスタックレベルを指定します。\n@param length 取得するスタックの個数を指定します。\n\n@param range 取得したいスタックの範囲を示す Range オブジェクトを指定します。\n\n@see Kernel.#set_trace_func,Kernel.#raise,\n     Kernel.#caller_locations\n\n    def foo\n      p caller(0)\n      p caller(1)\n      p caller(2)\n      p caller(3)\n      p caller(4)\n    end\n\n    def bar\n      foo\n    end\n\n    bar\n\n    #=> [\"-:2:in `foo'\", \"-:10:in `bar'\", \"-:13:in `<main>'\"]\n    #   [\"-:10:in `bar'\", \"-:13:in `<main>'\"]\n    #   [\"-:13:in `<main>'\"]\n    #   []\n    #   nil\n\n以下の関数は、caller の要素から [ファイル名, 行番号, メソッド名]\nを取り出して返します。\n\n    def parse_caller(at)\n      if /^(.+?):(\\d+)(?::in `(.*)')?/ =~ at\n        file = $1\n        line = $2.to_i\n        method = $3\n        [file, line, method]\n      end\n    end\n\n    def foo\n      p parse_caller(caller.first)\n    end\n\n    def bar\n      foo\n      p parse_caller(caller.first)\n    end\n\n    bar\n    p parse_caller(caller.first)\n\n    #=> [\"-\", 15, \"bar\"]\n    #   [\"-\", 19, nil]\n    #   nil\n\n以下は、$DEBUG が真の場合に役に立つ debug 関数\nのサンプルです。\n\n    $DEBUG = true\n\n    def debug(*args)\n      p [caller.first, *args] if $DEBUG\n    end\n\n    debug \"debug information\"\n\n    #=> [\"-:7\", \"debug information\"]",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:Kernel/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Range/"
        }
      ]
    },
    {
      "signature": "Gem::Package::TarReader::Entry#read(length = nil) -> String",
      "score": 625,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "自身から指定されたバイト数読み込みます。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Gem=3a=3aPackage=3a=3aTarReader=3a=3aEntry/i/read.html",
          "description": "自身から指定されたバイト数読み込みます。\n\n@param length 読み込むバイト数を指定します。\n              省略すると全てを読み込みます。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Gem::Package::TarReader::Entry",
          "label": "Gem::Package::TarReader::Entry",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:Gem%3A%3APackage%3A%3ATarReader%3A%3AEntry/"
        }
      ]
    },
    {
      "signature": "Zlib::GzipReader#read(length = nil) -> String | nil",
      "score": 625,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "IO クラスの同名メソッドIO#readと同じです。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Zlib=3a=3aGzipReader/i/read.html",
          "description": "IO クラスの同名メソッドIO#readと同じです。\n\n但し、gzip ファイル中に\nエラーがあった場合 Zlib::Error 例外や\nZlib::GzipFile::Error 例外が発生します。\n\ngzip ファイルのフッターの処理に注意して下さい。\ngzip ファイルのフッターには圧縮前データのチェックサムが\n記録されています。GzipReader オブジェクトは、次の時に展開した\nデータとフッターの照合を行い、エラーがあった場合は\nZlib::GzipFile::NoFooter, Zlib::GzipFile::CRCError,\nZlib::GzipFile::LengthError 例外を発生させます。\n\n  * EOF (圧縮データの最後) を越えて読み込み要求を受けた時。\n    すなわち Zlib::GzipReader#read,\n    Zlib::GzipReader#gets メソッド等が nil を返す時。\n  * EOF まで読み込んだ後、Zlib::GzipFile#close メソッドが\n    呼び出された時。\n  * EOF まで読み込んだ後、Zlib::GzipReader#unused メソッドが\n    呼び出された時。\n\n@param length 読み込む文字列の文字数を整数で指定します。\n              省略した場合は、全てのデータを読み込みます。\n\n@raise Zlib::Error Zlib::Error を参照\n@raise Zlib::GzipFile::Error Zlib::GzipFile::Errorを参照\n@raise Zlib::GzipFile::NoFooter Zlib::GzipFile::NoFooterを参照\n@raise Zlib::GzipFile::CRCError Zlib::GzipFile::CRCErrorを参照\n@raise Zlib::GzipFile::LengthError Zlib::GzipFile::LengthErrorを参照\n\n  require 'zlib'\n\n  =begin\n  # hoge.gz がない場合は下記で作成できる。\n  Zlib::GzipWriter.open('hoge.gz') { |gz|\n    gz.puts 'hoge_fuga'\n  }\n  =end\n\n  Zlib::GzipReader.open('hoge.gz') { |gz|\n    p gz.read(4)  #=> \"hoge\"\n    p gz.read     #=> \"_fuga\\n\"\n    p gz.read(1)  #=> nil\n  }\n\n@see IO#read",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Zlib::Error",
          "label": "Zlib::Error",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Zlib%3A%3AError/"
        },
        {
          "key": "Zlib::GzipFile::CRCError",
          "label": "Zlib::GzipFile::CRCError",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Zlib%3A%3AGzipFile%3A%3ACRCError/"
        },
        {
          "key": "Zlib::GzipFile::Error",
          "label": "Zlib::GzipFile::Error",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Zlib%3A%3AGzipFile%3A%3AError/"
        },
        {
          "key": "Zlib::GzipFile::LengthError",
          "label": "Zlib::GzipFile::LengthError",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Zlib%3A%3AGzipFile%3A%3ALengthError/"
        },
        {
          "key": "Zlib::GzipFile::NoFooter",
          "label": "Zlib::GzipFile::NoFooter",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Zlib%3A%3AGzipFile%3A%3ANoFooter/"
        },
        {
          "key": "Zlib::GzipReader",
          "label": "Zlib::GzipReader",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:Zlib%3A%3AGzipReader/"
        }
      ]
    },
    {
      "signature": "CGI::HtmlExtension#file_field(name = \"\", size = 20, maxlength = nil) -> String",
      "score": 607,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "タイプが file である input 要素を生成します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/CGI=3a=3aHtmlExtension/i/file_field.html",
          "description": "タイプが file である input 要素を生成します。\n\n@param name name 属性の値を指定します。\n\n@param size size 属性の値を指定します。\n\n@param maxlength maxlength 属性の値を指定します。\n\n例:\n   file_field(\"name\")\n     # <INPUT TYPE=\"file\" NAME=\"name\" SIZE=\"20\">\n\n   file_field(\"name\", 40)\n     # <INPUT TYPE=\"file\" NAME=\"name\" SIZE=\"40\">\n\n   file_field(\"name\", 40, 100)\n     # <INPUT TYPE=\"file\" NAME=\"name\" SIZE=\"40\" MAXLENGTH=\"100\">",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "CGI::HtmlExtension",
          "label": "CGI::HtmlExtension",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:CGI%3A%3AHtmlExtension/"
        }
      ]
    },
    {
      "signature": "CGI::HtmlExtension#password_field(name = \"\", value = nil, size = 40, maxlength = nil) -> String",
      "score": 607,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "タイプが password である input 要素を生成します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/CGI=3a=3aHtmlExtension/i/password_field.html",
          "description": "タイプが password である input 要素を生成します。\n\n@param name name 属性の値を指定します。\n\n@param value 属性の値を指定します。\n\n@param size size 属性の値を指定します。\n\n@param maxlength maxlength 属性の値を指定します。\n\n例:\n  password_field(\"name\")\n    # <INPUT TYPE=\"password\" NAME=\"name\" SIZE=\"40\">\n\n  password_field(\"name\", \"value\")\n    # <INPUT TYPE=\"password\" NAME=\"name\" VALUE=\"value\" SIZE=\"40\">\n\n  password_field(\"password\", \"value\", 80, 200)\n    # <INPUT TYPE=\"password\" NAME=\"name\" VALUE=\"value\" SIZE=\"80\" MAXLENGTH=\"200\">",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "CGI::HtmlExtension",
          "label": "CGI::HtmlExtension",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:CGI%3A%3AHtmlExtension/"
        }
      ]
    },
    {
      "signature": "CGI::HtmlExtension#text_field(name = \"\", value = nil, size = 40, maxlength = nil) -> String",
      "score": 607,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "タイプが text である input 要素を生成します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/CGI=3a=3aHtmlExtension/i/text_field.html",
          "description": "タイプが text である input 要素を生成します。\n\n@param name name 属性の値を指定します。\n\n@param value 属性の値を指定します。\n\n@param size size 属性の値を指定します。\n\n@param maxlength maxlength 属性の値を指定します。\n\n例:\n  text_field(\"name\")\n    # <INPUT TYPE=\"text\" NAME=\"name\" SIZE=\"40\">\n  \n  text_field(\"name\", \"value\")\n    # <INPUT TYPE=\"text\" NAME=\"name\" VALUE=\"value\" SIZE=\"40\">\n  \n  text_field(\"name\", \"value\", 80)\n    # <INPUT TYPE=\"text\" NAME=\"name\" VALUE=\"value\" SIZE=\"80\">\n  \n  text_field(\"name\", \"value\", 80, 200)\n    # <INPUT TYPE=\"text\" NAME=\"name\" VALUE=\"value\" SIZE=\"80\" MAXLENGTH=\"200\">",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "CGI::HtmlExtension",
          "label": "CGI::HtmlExtension",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:CGI%3A%3AHtmlExtension/"
        }
      ]
    },
    {
      "signature": "IO.read(path, opt = {}) -> String | nil",
      "score": 436,
      "metadata": {
        "type": "singleton-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "path で指定されたファイルを offset 位置から\nlength バイト分読み込んで返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/IO/s/read.html",
          "description": "path で指定されたファイルを offset 位置から\nlength バイト分読み込んで返します。\n\n既に EOF に達している場合は nil を返します。ただし、length に nil か 0 が指定されている場合は、空文字列 \"\" を返します。例えば、IO.read(空ファイル) は \"\" を返します。\n\n引数 length が指定された場合はバイナリ読み込みメソッド、そうでない場合はテキスト読み込みメソッドとして\n動作します。\n\nKernel.#open と同様 path の先頭が \"|\" ならば、\"|\" に続くコマンドの出力を読み取ります。\n\n@param path ファイル名を表す文字列か \"|コマンド名\" を指定します。\n\n@param length 読み込む長さを整数で指定します。nil であるか省略した場合には、EOF まで読み込みます。\n\n@param offset 読み込みを始めるオフセットを整数で指定します。\n\n@param opt ファイル path を open する時に使われるオプションを Hash で指定します。\n\n@raise Errno::EXXX path のオープン、offset 位置への設定、ファイルの読み込みに失敗した場合に発生します。\n\n@raise ArgumentError length が負の場合に発生します。\n\n引数 opt で有効なキーと値は以下のとおりです。\nキーはいずれも Symbol オブジェクトです。\n\n: :encoding\n  \n  読み込んだ文字列のエンコーディングを指定します。\n  読み込む長さを指定した場合はこれは無視されます。\n\n: :mode\n  \n  IO.open のモードを指定します。\n  \"r\" で始まる文字列である必要があります。\n\n: :open_args\n  \n  IO.open に渡される引数を配列で指定します。\n\nこれらの他、 :external_encoding など\nIO.open のオプション引数が指定できます。\n\n@see IO.binread\n\n例:\n\n  IO.read(empty_file)             #=> \"\"\n  IO.read(empty_file, 1)          #=> nil\n  IO.read(one_byte_file, 0, 10)   #=> \"\"\n  IO.read(one_byte_file, nil, 10) #=> \"\" \n  IO.read(one_byte_file, 1, 10)   #=> nil",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "IO",
          "label": "IO",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:IO/"
        }
      ]
    },
    {
      "signature": "Net::HTTPHeader#fetch(key) -> String",
      "score": 400,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "key ヘッダフィールドを返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Net=3a=3aHTTPHeader/i/fetch.html",
          "description": "key ヘッダフィールドを返します。\n\nたとえばキー 'content-length' に対しては  '2048'\nのような文字列が得られます。キーが存在しなければ nil を返します。\n\n該当するキーが登録されてい\nない時には、引数 default が与えられていればその値を、ブロッ\nクが与えられていればそのブロックを評価した値を返します。\n\n一種類のヘッダフィールドが一つのヘッダの中に複数存在する\n場合にはそれを全て \", \" で連結した文字列を返します。\nkey は大文字小文字を区別しません。\n\n@param key ヘッダフィール名を文字列で与えます。\n@param default 該当するキーが登録されていない時の返り値を指定します。\n@raise IndexError 引数defaultもブロックも与えられてない時、キーの探索に 失敗すると発生します。\n\n//emlist[例 key のみ指定。key が存在する][ruby]{\nrequire 'net/http'\n\nuri = URI.parse('http://www.example.com/index.html')\nreq = Net::HTTP::Get.new(uri.request_uri)\nreq.fetch(\"user-agent\") # => \"Ruby\"\n//}\n\n//emlist[例 key のみ指定。key が存在しない][ruby]{\nrequire 'net/http'\n\nbegin\n  req.fetch(\"content-length\")\nrescue => e\n  e # => #<KeyError: key not found: \"content-length\">\nend\n//}\n\n//emlist[例 key , default を指定][ruby]{\nrequire 'net/http'\n\nuri = URI.parse('http://www.example.com/index.html')\nreq = Net::HTTP::Get.new(uri.request_uri)\nreq.fetch(\"content-length\", \"default\") # => \"default\"\n//}\n\n//emlist[例 key とブロックを指定][ruby]{\nrequire 'net/http'\n\nuri = URI.parse('http://www.example.com/index.html')\nreq = Net::HTTP::Get.new(uri.request_uri)\nreq.fetch(\"content-length\") { |e| 99 } # => 99\n//}\n\n@see Net::HTTPHeader#[]",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Net::HTTPHeader",
          "label": "Net::HTTPHeader",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:Net%3A%3AHTTPHeader/"
        }
      ]
    },
    {
      "signature": "Net::HTTPHeader#fetch(key) {|hash| .... } -> String",
      "score": 400,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "key ヘッダフィールドを返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Net=3a=3aHTTPHeader/i/fetch.html",
          "description": "key ヘッダフィールドを返します。\n\nたとえばキー 'content-length' に対しては  '2048'\nのような文字列が得られます。キーが存在しなければ nil を返します。\n\n該当するキーが登録されてい\nない時には、引数 default が与えられていればその値を、ブロッ\nクが与えられていればそのブロックを評価した値を返します。\n\n一種類のヘッダフィールドが一つのヘッダの中に複数存在する\n場合にはそれを全て \", \" で連結した文字列を返します。\nkey は大文字小文字を区別しません。\n\n@param key ヘッダフィール名を文字列で与えます。\n@param default 該当するキーが登録されていない時の返り値を指定します。\n@raise IndexError 引数defaultもブロックも与えられてない時、キーの探索に 失敗すると発生します。\n\n//emlist[例 key のみ指定。key が存在する][ruby]{\nrequire 'net/http'\n\nuri = URI.parse('http://www.example.com/index.html')\nreq = Net::HTTP::Get.new(uri.request_uri)\nreq.fetch(\"user-agent\") # => \"Ruby\"\n//}\n\n//emlist[例 key のみ指定。key が存在しない][ruby]{\nrequire 'net/http'\n\nbegin\n  req.fetch(\"content-length\")\nrescue => e\n  e # => #<KeyError: key not found: \"content-length\">\nend\n//}\n\n//emlist[例 key , default を指定][ruby]{\nrequire 'net/http'\n\nuri = URI.parse('http://www.example.com/index.html')\nreq = Net::HTTP::Get.new(uri.request_uri)\nreq.fetch(\"content-length\", \"default\") # => \"default\"\n//}\n\n//emlist[例 key とブロックを指定][ruby]{\nrequire 'net/http'\n\nuri = URI.parse('http://www.example.com/index.html')\nreq = Net::HTTP::Get.new(uri.request_uri)\nreq.fetch(\"content-length\") { |e| 99 } # => 99\n//}\n\n@see Net::HTTPHeader#[]",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Net::HTTPHeader",
          "label": "Net::HTTPHeader",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:Net%3A%3AHTTPHeader/"
        }
      ]
    },
    {
      "signature": "Net::HTTPHeader#fetch(key, default) -> String",
      "score": 400,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "key ヘッダフィールドを返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Net=3a=3aHTTPHeader/i/fetch.html",
          "description": "key ヘッダフィールドを返します。\n\nたとえばキー 'content-length' に対しては  '2048'\nのような文字列が得られます。キーが存在しなければ nil を返します。\n\n該当するキーが登録されてい\nない時には、引数 default が与えられていればその値を、ブロッ\nクが与えられていればそのブロックを評価した値を返します。\n\n一種類のヘッダフィールドが一つのヘッダの中に複数存在する\n場合にはそれを全て \", \" で連結した文字列を返します。\nkey は大文字小文字を区別しません。\n\n@param key ヘッダフィール名を文字列で与えます。\n@param default 該当するキーが登録されていない時の返り値を指定します。\n@raise IndexError 引数defaultもブロックも与えられてない時、キーの探索に 失敗すると発生します。\n\n//emlist[例 key のみ指定。key が存在する][ruby]{\nrequire 'net/http'\n\nuri = URI.parse('http://www.example.com/index.html')\nreq = Net::HTTP::Get.new(uri.request_uri)\nreq.fetch(\"user-agent\") # => \"Ruby\"\n//}\n\n//emlist[例 key のみ指定。key が存在しない][ruby]{\nrequire 'net/http'\n\nbegin\n  req.fetch(\"content-length\")\nrescue => e\n  e # => #<KeyError: key not found: \"content-length\">\nend\n//}\n\n//emlist[例 key , default を指定][ruby]{\nrequire 'net/http'\n\nuri = URI.parse('http://www.example.com/index.html')\nreq = Net::HTTP::Get.new(uri.request_uri)\nreq.fetch(\"content-length\", \"default\") # => \"default\"\n//}\n\n//emlist[例 key とブロックを指定][ruby]{\nrequire 'net/http'\n\nuri = URI.parse('http://www.example.com/index.html')\nreq = Net::HTTP::Get.new(uri.request_uri)\nreq.fetch(\"content-length\") { |e| 99 } # => 99\n//}\n\n@see Net::HTTPHeader#[]",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Net::HTTPHeader",
          "label": "Net::HTTPHeader",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:Net%3A%3AHTTPHeader/"
        }
      ]
    },
    {
      "signature": "OpenURI.open_uri(name, mode = 'r', perm = nil, options = {}) -> StringIO",
      "score": 391,
      "metadata": {
        "type": "singleton-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "URI である文字列 name のリソースを取得して StringIO オブジェクト\nとして返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/OpenURI/s/open_uri.html",
          "description": "URI である文字列 name のリソースを取得して StringIO オブジェクト\nとして返します。\n\nブロックを与えた場合は StringIO オブジェクトを引数としてブロックを\n評価します。ブロックの終了時に StringIO は close されます。nil を返します。\n\n  require 'open-uri'\n  sio = OpenURI.open_uri('http://www.example.com')\n  p sio.last_modified\n  puts sio.read\n\n  OpenURI.open_uri('http://www.example.com'){|sio| sio.read }\n\noptions には Hash を与えます。理解するハッシュの\nキーは以下のシンボル、\n * :proxy\n * :progress_proc\n * :content_length_proc\n * :http_basic_authentication\n * :proxy_http_basic_authentication\n * :read_timeout\n * :ssl_ca_cert\n * :ssl_verify_mode\n * :ftp_active_mode\n * :redirect\nです。\n「:content_length_proc」と「:progress_proc」はプログレスバーに\n利用されることを想定しています。\n\n  require 'open-uri'\n  sio = OpenURI.open_uri('http://www.example.com',\n                         { :proxy => 'http://proxy.example.com:8000/',\n                           :http_basic_authentication => [username, password] })\n\n: :proxy\n プロクシの設定をします。\n 値には以下のいずれかを与えます。\n//emlist{\n   文字列:           \"http://proxy.example.com:8000/\" のようなプロクシの URI。\n   URI オブジェクト: URI.parse(\"http://proxy.example.com:8000/\") のようなプロクシの URI オブジェクト。\n   true:             Proxy を環境変数などから見つけようとする。使う環境変数は schema に応じて\n                     http_proxy, https_proxy, ftp_proxy が使われる。\n   false:            Proxy を用いない。\n   nil:              Proxy を用いない。\n//}\n\n: :http_basic_authentication\n  HTTP の Basic 認証のためのユーザ名とパスワードを、文字列の配列 [\"user\", \"password\"] として与えます。\n\n: :content_length_proc\n 値にはブロックを与えます。ブロックは対象となる URI の\n Content-Length ヘッダの値を引数として、実際の転送が始まる前に評価されます。Redirect された場合は、\n 実際に転送されるリソースの HTTP ヘッダを利用します。Content-Length ヘッダがない場合は、nil を\n 引数としてブロックを評価します。ブロックの返り値は特に利用されません。\n\n: :progress_proc\n 値にはブロックを与えます。ブロックは対象となる URI からデータの\n 断片が転送されるたびに、その断片のサイズを引数として評価されます。ブロックの返り値は特に\n 利用されません。\n\n: :proxy_http_basic_authentication\n パスワード付きプロクシの設定を与えます。\n 設定には3要素の配列を渡します。\n 最初の要素はプロクシのURIで、文字列かURIオブジェクトを指定します。\n 2番目にはプロクシのユーザ名、3番目にはプロクシのパスワードを指定します。\n\n :proxy と :proxy_http_basic_authentication を同時に指定すると\n ArgumentError が発生します。\n\n 使い方:\n//emlist{\n   :proxy_http_basic_authentication =>\n     [\"http://proxy.example.com:8000/\", \"proxy-user\", \"proxy-password\"]\n   :proxy_http_basic_authentication =>\n     [URI.parse(\"http://proxy.example.com:8000/\"), \"proxy-user\", \"proxy-password\"]\n//}\n\n: :read_timeout\n http コネクションのタイムアウト秒数を指定します。nil でタイムアウトなしを\n 指定できます。\n\n: :ssl_ca_cert\n SSL の CA 証明書を指定します。これを指定した場合は OpenSSL がデフォルトで使う\n CA 証明書は使われません。\n\n 証明書のファイル名、証明書のディレクトリ名を指定できます。\n 詳しくは\n OpenSSL::X509::Store#add_file、\n OpenSSL::X509::Store#add_path\n を参照してください。デフォルトの証明書については\n OpenSSL::X509::Store#set_default_paths\n を参照してください。\n\n: :ssl_verify_mode\n SSL の証明書の検証のモードを指定します。\n 詳しくは OpenSSL::SSL::SSLContext#verify_mode= を参照してください。\n\n: :ftp_active_mode\n ftp を active mode で使うかどうかを指定します。\n デフォルトは false (passive mode) です。\n\n: :redirect\n HTTP でサーバがリダイレクトを指示してきたとき、\n 対応するかどうかを指定します。\n デフォルトは true (リダイレクトする) です。\n\n HTTP と FTP の間のリダイレクトもこれで指定します。\n\n\n@param name オープンしたいリソースを文字列で与えます。\n\n@param mode モードを文字列で与えます。Kernel.#open と同じです。\n\n@param perm 無視されます。\n\n@param options ハッシュを与えます。\n\n@return 返り値である StringIO オブジェクトは OpenURI::Meta モジュールで extend されています。\n\n@raise OpenURI::HTTPError 対象となる URI のスキームが http であり、\n                          かつリソースの取得に失敗した時に発生します。\n\n@raise Net::FTPError 対象となる URI のスキームが ftp であり、かつリソースの取得に失敗した時に\n                     Net::FTPError のサブクラスが発生します。詳しくは net/ftp\n                     を参照して下さい。\n\n@raise ArgumentError 与えられた mode が読み込みモードでなかった場合に発生します。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "ArgumentError",
          "label": "ArgumentError",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:ArgumentError/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Hash/"
        },
        {
          "key": "OpenURI",
          "label": "OpenURI",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:OpenURI/"
        },
        {
          "key": "OpenURI::Meta",
          "label": "OpenURI::Meta",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:OpenURI%3A%3AMeta/"
        },
        {
          "key": "StringIO",
          "label": "StringIO",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:StringIO/"
        }
      ]
    },
    {
      "signature": "CGI#header(options = \"text/html\") -> String",
      "score": 376,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "HTTP ヘッダを options に従って生成します。 CGI#out と違い、標準出力には出力しません。\nCGI#out を使わずに自力で HTML を出力したい場合などに使います。\nこのメソッドは文字列エンコーディングを変換しません。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/CGI/i/header.html",
          "description": "HTTP ヘッダを options に従って生成します。 CGI#out と違い、標準出力には出力しません。\nCGI#out を使わずに自力で HTML を出力したい場合などに使います。\nこのメソッドは文字列エンコーディングを変換しません。\n\nヘッダのキーとしては以下が利用可能です。\n\n: type\n  Content-Type ヘッダです。デフォルトは \"text/html\" です。\n: charset\n  ボディのキャラクタセットを Content-Type ヘッダに追加します。\n: nph\n  真偽値を指定します。真ならば、HTTP のバージョン、ステータスコード、\n  Date ヘッダをセットします。また Server と Connection の各ヘッダにもデフォルト値をセットします。\n  偽を指定する場合は、これらの値を明示的にセットしてください。\n: status\n  HTTP のステータスコードを指定します。\n  このリストの下に利用可能なステータスコードのリストがあります。\n: server\n  サーバソフトウェアの名称指定します。Server ヘッダに対応します。\n: connection\n  接続の種類を指定します。Connection ヘッダに対応します。\n: length\n  送信するコンテンツの長さを指定します。Content-Length ヘッダに対応します。\n: language\n  送信するコンテンツの言語を指定します。Content-Language ヘッダに対応します。\n: expires\n  送信するコンテンツの有効期限を Time のインスタンスで指定します。\n  Expires ヘッダに対応します。\n: cookie\n  クッキーとして文字列か CGI::Cookie のインスタンス、またはそれらの配列かハッシュを指定します。\n  一つ以上の Set-Cookie ヘッダに対応します。\n\nstatus パラメータには以下の文字列が使えます。\n\n        \"OK\"                  --> \"200 OK\"\n        \"PARTIAL_CONTENT\"     --> \"206 Partial Content\"\n        \"MULTIPLE_CHOICES\"    --> \"300 Multiple Choices\"\n        \"MOVED\"               --> \"301 Moved Permanently\"\n        \"REDIRECT\"            --> \"302 Found\"\n        \"NOT_MODIFIED\"        --> \"304 Not Modified\"\n        \"BAD_REQUEST\"         --> \"400 Bad Request\"\n        \"AUTH_REQUIRED\"       --> \"401 Authorization Required\"\n        \"FORBIDDEN\"           --> \"403 Forbidden\"\n        \"NOT_FOUND\"           --> \"404 Not Found\"\n        \"METHOD_NOT_ALLOWED\"  --> \"405 Method Not Allowed\"\n        \"NOT_ACCEPTABLE\"      --> \"406 Not Acceptable\"\n        \"LENGTH_REQUIRED\"     --> \"411 Length Required\"\n        \"PRECONDITION_FAILED\" --> \"412 Rrecondition Failed\"\n        \"SERVER_ERROR\"        --> \"500 Internal Server Error\"\n        \"NOT_IMPLEMENTED\"     --> \"501 Method Not Implemented\"\n        \"BAD_GATEWAY\"         --> \"502 Bad Gateway\"\n        \"VARIANT_ALSO_VARIES\" --> \"506 Variant Also Negotiates\"\n\n@param options Hash か文字列で HTTP ヘッダを生成するための情報を指定します。\n\n例：\n        header\n          # Content-Type: text/html\n\n        header(\"text/plain\")\n          # Content-Type: text/plain\n\n        header({\"nph\"        => true,\n                \"status\"     => \"OK\",  # == \"200 OK\"\n                  # \"status\"     => \"200 GOOD\",\n                \"server\"     => ENV['SERVER_SOFTWARE'],\n                \"connection\" => \"close\",\n                \"type\"       => \"text/html\",\n                \"charset\"    => \"iso-2022-jp\",\n                  # Content-Type: text/html; charset=iso-2022-jp\n                \"language\"   => \"ja\",\n                \"expires\"    => Time.now + 30,\n                \"cookie\"     => [cookie1, cookie2],\n                \"my_header1\" => \"my_value\",\n                \"my_header2\" => \"my_value\"})\n\n例：\n        cgi = CGI.new('html3')\n        print cgi.header({\"charset\" => \"shift_jis\", \"status\" => \"OK\"})\n        print \"<html><head><title>TITLE</title></head>\\r\\n\"\n        print \"<body>BODY</body></html>\\r\\n\"\n\n@see 35911",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "CGI",
          "label": "CGI",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:CGI/"
        },
        {
          "key": "CGI::Cookie",
          "label": "CGI::Cookie",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:CGI%3A%3ACookie/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Hash/"
        },
        {
          "key": "Time",
          "label": "Time",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Time/"
        }
      ]
    },
    {
      "signature": "Net::HTTPHeader#delete(key) -> String | nil",
      "score": 376,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "key ヘッダフィールドを削除します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Net=3a=3aHTTPHeader/i/delete.html",
          "description": "key ヘッダフィールドを削除します。\n\n@param key 削除するフィールド名\n@return 取り除かれたフィールドの値を返します。\n        key ヘッダフィールドが存在しなかった場合には\n        nil を返します。\n\n//emlist[例][ruby]{\nrequire 'net/http'\n\nuri = URI.parse('http://www.example.com/index.html')\nreq = Net::HTTP::Get.new(uri.request_uri)\nreq.content_length = 10\nreq.content_length  # => 10\nreq.delete(\"Content-Length\")\nreq.content_length  # => nil\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Net::HTTPHeader",
          "label": "Net::HTTPHeader",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:Net%3A%3AHTTPHeader/"
        }
      ]
    },
    {
      "signature": "Kernel.#caller(range) -> [String] | nil",
      "score": 331,
      "metadata": {
        "type": "module-function",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "start 段上の呼び出し元の情報を $@\nの形式のバックトレース(文字列の配列)として返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Kernel/m/caller.html",
          "description": "start 段上の呼び出し元の情報を $@\nの形式のバックトレース(文字列の配列)として返します。\n\nトップレベルでは空の配列を返します。caller の戻り値を $@ に代入することで\n例外の発生位置を設定できます。\n\n引数で指定した値が範囲外の場合は nil を返します。\n\n@param start long の範囲を超えない正の整数でスタックレベルを指定します。\n@param length 取得するスタックの個数を指定します。\n\n@param range 取得したいスタックの範囲を示す Range オブジェクトを指定します。\n\n@see Kernel.#set_trace_func,Kernel.#raise,\n     Kernel.#caller_locations\n\n    def foo\n      p caller(0)\n      p caller(1)\n      p caller(2)\n      p caller(3)\n      p caller(4)\n    end\n\n    def bar\n      foo\n    end\n\n    bar\n\n    #=> [\"-:2:in `foo'\", \"-:10:in `bar'\", \"-:13:in `<main>'\"]\n    #   [\"-:10:in `bar'\", \"-:13:in `<main>'\"]\n    #   [\"-:13:in `<main>'\"]\n    #   []\n    #   nil\n\n以下の関数は、caller の要素から [ファイル名, 行番号, メソッド名]\nを取り出して返します。\n\n    def parse_caller(at)\n      if /^(.+?):(\\d+)(?::in `(.*)')?/ =~ at\n        file = $1\n        line = $2.to_i\n        method = $3\n        [file, line, method]\n      end\n    end\n\n    def foo\n      p parse_caller(caller.first)\n    end\n\n    def bar\n      foo\n      p parse_caller(caller.first)\n    end\n\n    bar\n    p parse_caller(caller.first)\n\n    #=> [\"-\", 15, \"bar\"]\n    #   [\"-\", 19, nil]\n    #   nil\n\n以下は、$DEBUG が真の場合に役に立つ debug 関数\nのサンプルです。\n\n    $DEBUG = true\n\n    def debug(*args)\n      p [caller.first, *args] if $DEBUG\n    end\n\n    debug \"debug information\"\n\n    #=> [\"-:7\", \"debug information\"]",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:Kernel/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Range/"
        }
      ]
    },
    {
      "signature": "Kernel.#caller(start = 1) -> [String] | nil",
      "score": 331,
      "metadata": {
        "type": "module-function",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "start 段上の呼び出し元の情報を $@\nの形式のバックトレース(文字列の配列)として返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Kernel/m/caller.html",
          "description": "start 段上の呼び出し元の情報を $@\nの形式のバックトレース(文字列の配列)として返します。\n\nトップレベルでは空の配列を返します。caller の戻り値を $@ に代入することで\n例外の発生位置を設定できます。\n\n引数で指定した値が範囲外の場合は nil を返します。\n\n@param start long の範囲を超えない正の整数でスタックレベルを指定します。\n@param length 取得するスタックの個数を指定します。\n\n@param range 取得したいスタックの範囲を示す Range オブジェクトを指定します。\n\n@see Kernel.#set_trace_func,Kernel.#raise,\n     Kernel.#caller_locations\n\n    def foo\n      p caller(0)\n      p caller(1)\n      p caller(2)\n      p caller(3)\n      p caller(4)\n    end\n\n    def bar\n      foo\n    end\n\n    bar\n\n    #=> [\"-:2:in `foo'\", \"-:10:in `bar'\", \"-:13:in `<main>'\"]\n    #   [\"-:10:in `bar'\", \"-:13:in `<main>'\"]\n    #   [\"-:13:in `<main>'\"]\n    #   []\n    #   nil\n\n以下の関数は、caller の要素から [ファイル名, 行番号, メソッド名]\nを取り出して返します。\n\n    def parse_caller(at)\n      if /^(.+?):(\\d+)(?::in `(.*)')?/ =~ at\n        file = $1\n        line = $2.to_i\n        method = $3\n        [file, line, method]\n      end\n    end\n\n    def foo\n      p parse_caller(caller.first)\n    end\n\n    def bar\n      foo\n      p parse_caller(caller.first)\n    end\n\n    bar\n    p parse_caller(caller.first)\n\n    #=> [\"-\", 15, \"bar\"]\n    #   [\"-\", 19, nil]\n    #   nil\n\n以下は、$DEBUG が真の場合に役に立つ debug 関数\nのサンプルです。\n\n    $DEBUG = true\n\n    def debug(*args)\n      p [caller.first, *args] if $DEBUG\n    end\n\n    debug \"debug information\"\n\n    #=> [\"-:7\", \"debug information\"]",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:Kernel/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Range/"
        }
      ]
    },
    {
      "signature": "ruby 1.9 feature",
      "score": 325,
      "metadata": {
        "type": "document",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "ruby 1.9 feature \nruby version 1.9.0 は開発版です。\n以下にあげる機能は将来削除されたり互換性のない仕様変更がなされるかもしれません。\n1.9.1 以降は安定版です。\nバグ修正がメインになります。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/doc/news=2f1_9_0.html",
          "description": "ruby 1.9 feature \nruby version 1.9.0 は開発版です。\n以下にあげる機能は将来削除されたり互換性のない仕様変更がなされるかもしれません。\n1.9.1 以降は安定版です。\nバグ修正がメインになります。\n\n記号について(特に重要なものは大文字(主観))\n\n* カテゴリ\n  * [ruby]: ruby インタプリタの変更\n  * [api]: 拡張ライブラリ API\n  * [lib]: ライブラリ\n  * [parser]: 文法の変更\n  * [regexp]: 正規表現の機能拡張\n  * [marshal]: Marshal ファイルのフォーマット変更\n* レベル\n  * [bug]: バグ修正\n  * [new]: 追加されたクラス／メソッドなど\n  * [compat]: 変更されたクラス／メソッドなど(互換性のある変更) (only backward-compatibility) (影響の範囲が小さいと思われる変更もこちら)\n  * [change]: 変更されたクラス／メソッドなど(互換性のない変更)\n  * [experimental]: 変更の中でも特に実験的なもの(将来再考して欲しいもの？)\n  * [obsolete]: 廃止された(される予定の)機能\n  * [platform]: 対応プラットフォームの追加\n\n== 1.9.0\n\n=== 2006-09-16\n\n: Struct#inspect\n\n=== 2006-09-14\n\n: digest.rb\n: Digest::Base.file\n\n=== 2006-09-13\n\n: Hash#compare_by_identity\n: Hash#compare_by_identity?\n: Hash#identical\n: Hash#identical?\n\n=== 2006-09-12\n\n: Hash#compare_by_identity\n: Hash#compare_by_identity?\n\n=== 2006-09-11\n\n: Hash#identical\n: Hash#identical?\n\n=== 2006-08-31\n\n: Array#shuffle\n: Array#shuffle!\n\n  追加\n\n=== 2006-07-26\n\n: __send\n: __send!\n\n  追加\n\n: invoke_method\n: invoke_functional_method\n\n  削除\n\n=== 2006-07-21\n\n: Module#attr\n\n  オプショナル引数の assignable がなくなり、attr_reader 相当になりました\n  [RCR#331]\n\n=== 2006-06-22\n\n: Module#name\n\n  無名モジュールに対しては nil を返すようになりました\n  [ruby-talk:198440]\n\n=== 2006-06-17\n\n: BasicObject#invoke_method\n: BasicObject#invoke_functional_method\n\n  追加\n  ((<ruby-talk:197512>))\n\n=== 2006-06-13\n\n: IPsocket\n: TCPsocket\n: SOCKSsocket\n: TCPserver\n: UDPsocket\n: UNIXsocket\n: UNIXserver\n\n  削除\n\n=== 2006-06-11\n\n: __callee__ [new]\n: __method__ [new]\n\n  ((<URL:http://www.dm4lab.to/~usa/ruby/d/200606a.html#id20060610_P1_7>))\n\n: Symbol#to_proc\n\n=== 2006-06-10\n\n* 新機能\n  : BasicObject が導入されました [new]\n  : local という visibility および Module#local, Module#local_methods というメソッドが導入されました [new]\n#: VIS_MASK が 16\n  : ancestors にモジュールが複数回挿入できるようになりました\n  : Math#log2 追加 ((<ruby-talk:191237>)) [new]\n  : Math#log にオプショナルな第2引数 base 追加 ((<ruby-talk:191308>)) [compat]\n  : Array#flatten, Array#flatten! がオプショナルな level 引数を受け取るようになりました [compat]\n  : String#unpack(\"M\") で CRLF を単独の LF と同様に無視するようになりました ((<ruby-dev:28601>)) [compat]\n\n* M17N\n  : 以下、ここでいう「1文字」は 1byte のことです\n  : String#ord という、１文字の文字列に対し、その文字のコードを返すメソッドが追加されました\n  : string[integer] が 1文字の String を返すようになりました\n  : string.slice(integer) が 1文字の String を返すようになりました\n  : ?c が 1文字の String を返すようになりました\n  : sprintf の %c が 1文字の String を受け付けるようになりました\n  : String#[]= が右辺の整数を受け付けなくなりました\n  : String#chr という先頭の１文字を返すメソッドが追加されました\n  : IO#getc が 1文字の String を返すようになりました\n#: IO#readchar が 1文字の String を返すようになりました\n  : IO#ungetc が 1バイトの String を受け付けるになりました\n#: ARGF.getc が 1文字の String を返すようになりました\n\n* 多重代入、引数渡し\n  : 多重代入や yield の何かが変わりました\n  : Proc#yield が導入されました\n  : nil.yield が導入されました。no block given (LocalJumpError) という例外を生成します\n  : 仮引数で、* の後にも必須引数をとれるようになりました\n  : 実引数にいくつでも * を使えるようになりました\n  : [] メソッドの実引数で、通常のメソッド呼び出しの実引数に使える記法が全て使えるようになりました\n\n* obsolete 要素、実験要素除去\n  : 実験中だった meth -> { ... } という -> が除去されました (lambda のかわりの -> { ... } は残っています)\n  : 実験中だった ;; が除去されました\n  : いくらか obsolete な構文が除去されました\n  : Values はなくなりました\n\n* その他\n  : 文字列のハッシュに FNV-1a hash を使用するようになりました\n  : Regexp#initialize でリテラルの正規表現を変更できなくなりました\n  : $SAFE=4 では Regexp#initialize で taint でない正規表現を変更できなくなりました\n  : Dir で $SAFE のセキュリティ検査を行うようになりました\n  : メソッド呼出し時のセキュリティ検査の対象がひろがりました\n  : メソッドを alias した場合、メソッドの定義時の $SAFE に加えて現在の $SAFE も加味されるようになりました\n  : Bignum#pow で結果が大きすぎる場合にはすぐにエラーが出るようになりました ((<ruby-talk:187984>))\n  : set_trace_func のバグが修正されました ((<ruby-core:07928>))\n  : エラー表示で、true/false/nil が self の場合の表示が変わりました\n  : UnboundMethod#bind で生成したものでも Method#inspect でちゃんとなるようになりました ((<ruby-dev:28636>))\n  : 丸めエラー修正 ((<ruby-core:07896>))\n  : divmod 修正 ((<ruby-dev:28589>))\n  : jcode の String#tr_s 修正 ((<ruby-list:42090>))\n  : Solaris 対応修正 ((<ruby-dev:28443>)), ((<ruby-dev:28440>))\n  : rubygems がある場合には ri で考慮するようになりました\n  : スレッド死亡時のエラーメッセージをちゃんと表示するようスレッドスケジューリングが調整されました\n  : Socket.gethostbyname 修正 ((<ruby-core:07691>))\n  : strtod 精度改善 ((<ruby-dev:28619>)), ((<ruby-core:07796>))\n  : 新しい autoconf 対応\n  : RUNIT::Assert 独自の定義を RUNIT::AssertMixin に分離し、RUNIT::TestCase では RUNIT::Assert でなく RUNIT::AssertMixin を使うようになりました\n  : constification\n  : core dump bug fix ((<ruby-dev:28327>)), ((<ruby-dev:28632>)), ((<ruby-core:07833>)), ((<ruby-dev:28614>)), ((<ruby-dev:28585>)), ((<ruby-dev:28582>)), ((<ruby-talk:185438>)), ((<ruby-core:07414>))\n\n((<URL:http://www.atdot.net/~ko1/w3ml/w3ml.cgi/ruby-cvs/msg/16833>))\n\n((<URL:http://eigenclass.org/hiki.rb?Changes+in+Ruby+1.9+update+4>))\n\n=== 2006-05-22\n\n: accept\n\n  ((<ruby-core:7917>))\n\n=== 2006-03-21\n\n: MatchData#[] [compat]\n\n  名前による参照\n  ((<ruby-dev:28446>))\n\n=== 2006-03-03\n\n: FileUtils.cp_r [lib] [compat]\n\n  remove_destination オプションの追加\n  ((<ruby-dev:28417>))\n\n=== 2006-02-15\n\n: instance_eval\n\n  ((<ruby-core:7365>))\n\n=== 2006-02-03\n\n: Integer#upto  [compat]\n: Integer#downto  [compat]\n: Integer#doitems  [compat]\n\n  ブロックがなければ enumerator を返す\n\n: Enumerable#group_by   [new]\n: Enumerable#first      [new]\n\n  追加\n\n=== 2006-01-26\n\n: ((<BasicSocket/BasicSocket.do_not_reverse_lookup>))  [compat]\n\n  do_not_reverse_lookup のデフォルトが true になりました。\n\n=== 2006-01-10\n: ((<GC/GC.stress>))    [new]\n: ((<GC/GC.stress=>))   [new]\n\n  GC.stress = true とすると、GC を行えるすべての機会で GC を行います。\n\n=== 2005-12-15\n\n: sub           [obsolete]\n: gsub          [obsolete]\n: sub!          [obsolete]\n: gsub!         [obsolete]\n: chop          [obsolete]\n: chop!         [obsolete]\n: chomp         [obsolete]\n: chomp!        [obsolete]\n: split         [obsolete]\n: scan          [obsolete]\n\n  削除\n\n=== 2005-10-21\n: funcall       [new]\n\n  fcall から改名\n\n: Module#instance_exec  [new]\n: Module#module_exec    [new]\n\n  追加\n\n=== 2005-09-16\n: ((<Dir/Dir.glob>)) [compat]\n: ((<Dir/Dir.[]>))   [compat]\n\n  Dir.glob に配列を渡して複数のパターンを指定できるようになりました。\n  また、Dir[] は、複数の引数を渡すことで複数のパターンを指定できるよう\n  になりました。((<ruby-dev:27110>))\n\n    p Dir.glob([\"f*\",\"b*\"])  # => [\"foo\", \"bar\"]\n    p Dir[\"b*\",\"b*\"]  # => [\"foo\", \"bar\"]\n\n  以前のバージョンでも、パターンを \"\\0\" で区切ったり、{} パターンを使\n  用することで同様のことはできます。\n\n    p Dir.glob(\"f*\\0b*\")   # => [\"foo\", \"bar\"]\n    p Dir.glob(\"{f*,b*}\")  # => [\"foo\", \"bar\"]\n\n=== 2005-09-05\n: fcall [new]\n\n  追加\n\n=== 2005-08-30\n: Object#send, Object#__send__ [ruby][change]\n  レシーバを指定した呼び出しではprivateメソッドを呼び出せなくなりました。\n\n=== 2005-06-09\n: ENV.[]= [change]\n\n  ENV[key] = nil で要素を削除する機能は失われ、TypeError になるようになりました。\n\n  ((<ruby-list:40865>))\n\n=== 2005-06-08\n: Array#nitems [compat]\n\n  Array#nitems にブロックを渡せるようになり、ブロックが真になる要素の個数を返すように\n  なりました。\n\n    [1,2,3].nitems{|i| i % 2 != 0} #=> 2\n\n  ((<ruby-talk:134083>))\n\n=== 2005-06-02\n: proc [ruby][parser][experimental]\n\n  以前のローカル変数に括弧を付けると call が呼び出される変更は取り消されて、\n  (({(expr)(args...)})) で (({expr.call(args...)})) が呼ばれるようになりました。\n  この機能は実験的なものです。\n\n    x = proc {|a| p a}\n    (x)(7) # => 7\n\n=== 2005-05-08\n\n: Hash#hash [obsolete]\n: Hash#eql? [obsolete]\n\n  削除\n\n  ((<ruby-dev:26132>))\n\n=== 2005-04-02\n\n: ENV.key [new]\n: ENV.index [obsolete]\n\n  ((<ruby-dev:25974>))\n\n=== 2005-03-09\n\n: Ruby 2.0 ブロックローカル変数\n\n  ((<URL:http://www.rubyist.net/~matz/20050309.html#p03>))\n\n=== 2005-03-04\n\n: Time.strptime  [lib][new]\n: ParseDate.strptime  [lib][new]\n\n  time ライブラリ, parsedate ライブラリに追加  ((<ruby-talk:132815>))\n\n=== 2005-03-04\n\n1.9.0 からメソッドと括弧の間にスペースを入れると常に警告がでるようになっていましたが、\nその警告はデバッグモード・冗長モードでしかでなくなりました。\n\n   % ruby -e 'p (\"\")' \n   \"\"\n   % ruby -de 'p (\"\")'\n   -e:1: warning: (...) interpreted as grouped expression\n   \"\"\n\n=== 2005-03-02\n: proc [ruby][experimental]\n\n  {|a| ...} や (do ... end) が proc として解釈されるようになりました。この機能は\n  実験的なものです。((<ruby-dev:25780>))\n\n    x = {|a| p a}\n    x.call(4) # => 4\n    x = (do |a| p a end)\n    x.call(9) # => 9\n\n=== 2005-02-04\n\n: RSS Parser/Maker [lib] [new]\n\n  ((<Imageモジュール|URL:http://web.resource.org/rss/1.0/modules/image/>))のサポート\n\n=== 2005-02-03\n\n: RSS::Element#convert(value) [lib] [new]\n   valueのエンコーディングを変換するメソッドを公開。\n   \n   valueのエンコーディングは要素の内部エンコーディングからoutput_encoding=で設定したエンコーディングへ変換されます。\n\n=== 2005-02-02\n: ((<ripper/Ripper.slice>)) [ruby] [experimental]\n  追加。((<URL:http://i.loveruby.net/d/20050201.html#p02>))\n\n=== 2005-01-15\n\n: RSS::VERSION [lib]\n\n  0.1.2 -> 0.1.3\n\n: RSS::Parser [lib] [bug]\n\n  継承するとエラーになるバグを修正。 ((<ruby-talk:126104>))\n\n=== 2005-01-01\n\n: ARGF.readpartial [new]\n\n  追加 ((<ruby-dev:25381>))\n\n: FileUtils.copy_stream(src, dst) [lib] [compat]\n\n  src として ARGF も受け付けるようになりました。\n  ((<ruby-dev:25369>))\n\n=== 2004-12-26\n\n: Net::IMAP::PlainAuthenticator [lib] [new]\n\n=== 2004-12-14\n\n: FileUtils.chown [lib] [new]\n: FileUtils.chown_R [lib] [new]\n\n=== 2004-12-07\n\n: IO#read [change]\n\n  read(0) は常に \"\" を返すようになりました。\n  また、nonblocking mode でも動作が変わらなくなりました。\n  ((<ruby-dev:25101>))\n\n: Hash#hash [new]\n\n  追加 ((<ruby-talk:122482>))\n\n=== 2004-12-03\n: method(:y).to_proc.call{ p :ok }\n  Method#to_proc で作った ((<Proc>)) オブジェクトからメソッド y へと\n  ブロックが引き渡されるようになりました。((<ruby-dev:25031>))\n\n=== 2004-11-14\n\n: Process.getrlimit(resource) [new]\n: Process.setrlimit(resource, cur_limit, max_limit) [new]\n: Process::RLIM_INFINITY\n: Process::RLIM_SAVED_MAX\n: Process::RLIM_SAVED_CUR\n: Process::RLIMIT_CORE\n: Process::RLIMIT_CPU\n: Process::RLIMIT_DATA\n: Process::RLIMIT_FSIZE\n: Process::RLIMIT_NOFILE\n: Process::RLIMIT_STACK\n: Process::RLIMIT_AS\n: Process::RLIMIT_MEMLOCK\n: Process::RLIMIT_NPROC\n: Process::RLIMIT_RSS\n: Process::RLIMIT_SBSIZE\n\n  追加 ((<ruby-dev:24834>))\n\n  ((<ruby 1.8.5 feature>)): 1.8.5 に backport ((<ruby-dev:28729>))\n\n=== 2004-10-30\n\n: Array#[]= [change]\n\n  a[n,m]=nil は要素の削除ではなくなり、要素の並びを nil に入れ換えるようになりました。\n  ((<zw-kdoo(2004-10-24)|URL:http://yowaken.dip.jp/tdiary/20041024.html#c02>))\n\n=== 2004-10-20\n\n: Proc#dup [new]\n\n  追加 ((<ruby-talk:116915>))\n\n: require [change]\n\n  feature が $\" に追加されるタイミングが load された後に変わりました。\n  ((<ruby-list:40085>))\n\n=== 2004-10-05\n\n: Array#index {|x| ... } [new]\n: Array#rindex {|x| ... } [new]\n\n  追加 ((<ruby-talk:113069>))\n\n=== 2004-09-26\n\n: Time#to_time [lib][new]\n: Time#to_date [lib][new]\n: Time#to_datetime [lib][new]\n: Date#to_time [lib][new]\n: Date#to_date [lib][new]\n: Date#to_datetime [lib][new]\n: DateTime#to_time [lib][new]\n: DateTime#to_date [lib][new]\n: DateTime#to_datetime [lib][new]\n\n  追加 ((<ruby-dev:24250>))\n\n=== 2004-09-22\n\n: KeyError [new]\n: Hash#key [new]\n: Hash#index [obsolete]\n\n  ((<ruby-talk:113279>))\n  ((<URL:http://www.rubyist.net/~matz/20040922.html#p01>))\n\n=== 2004-09-20\n\n: Zlib::GzipReader#readpartial(maxlen[, outbuf])  [lib][new]\n\n  追加 ((<ruby-dev:24070>))\n\n=== 2004-09-13\n\n: ripper [new]\n\n  追加 ((<ruby-dev:24255>))\n\n=== 2004-08-27\n\n: StringIO#readpartial(maxlen[, outbuf])  [lib][new]\n\n  追加。((<ruby-dev:24061>))\n\n=== 2004-08-19\n\n: Binding#eval(expr[, fname[, lineno=1]])       [new]\n\n  追加。((<RCR#251>))\n\n: String#clear  [new]\n\n  追加。((<ruby-dev:24104>))\n\n=== 2004-08-17\n\n: Process.daemon(nochdir=nil,noclose=nil)       [new]\n\n  追加。((<ruby-dev:24030>))\n\n=== 2004-08-12\n\n: IO#readpartial(maxlen[, outbuf])     [new]\n\n  追加。((<ruby-dev:22945>)), ((<ruby-dev:23247>)), ((<ruby-dev:24055>))\n\n=== 2004-07-17\n\n: Regexp#match(str, [pos])      [compat]\n: String#match(re, [pos])       [compat]\n\n  省略可能な第二引数 pos が追加されました。マッチの開始位置を指定しま\n  す。((<ruby-core:03203>)), ((<ruby-core:03205>))\n\n        p(/(.)/.match(\"foobar\", 4).captures)\n        # => ruby 1.9.0 (2004-07-17) [i586-linux]\n             [\"a\"]\n\n  マッチ位置は文字列の先頭から数えられます。\n\n        p(/(.)/.match(\"foobar\", 4).offset(0))\n        # => ruby 1.9.0 (2004-07-17) [i586-linux]\n             [4, 5]\n\n=== 2004-07-16\n\n: File::Stat#dev_major [new]\n: File::Stat#dev_minor [new]\n\n  追加。((<ruby-core:03195>))\n\n=== 2004-07-14\n\n: Enumerable#max_by     [new]\n: Enumerable#min_by     [new]\n\n  ブロックの結果を大小比較し、その最大値、最小値を示す要素を返します。\n\n        p [1,2,3,4,5].max_by {|v| -v}\n        # => ruby 1.9.0 (2004-07-17) [i586-linux]\n             1\n\n        p [1,2,3,4,5].min_by {|v| -v}\n        # => ruby 1.9.0 (2004-07-17) [i586-linux]\n             5\n\n=== 2004-05-25\n: allow passing a block to a Proc [ruby] [change]\n  ((<ruby-dev:23533>)) ((-よくわからない-))\n\n=== 2004-05-14\n\n: Time [marshal]\n\n  Marshal.dump により、タイムゾーンの情報を保持するようになりました。\n\n=== 2004-04-15\n\n: Dir.glob [bug]\n  三重以上入れ子になった { } が動くようになりました。\n  ((<ruby-dev:23376>))\n\n       p Dir.glob('{{{ruby}}}')\n       #=> ruby 1.8.2 (2004-12-24) [i386-mswin32]\n           []\n       #=> ruby 1.9.0 (2004-04-25) [i386-mswin32]\n           [\"ruby\"]\n\n: Dir.glob [bug]\n  { } の中で '{' や '}' や ',' をエスケープできるようになりました。\n  ((<ruby-dev:23376>))\n\n       p Dir.glob('{\\,}')\n       #=> ruby 1.8.2 (2004-12-24) [i386-mswin32]\n           []\n       #=> ruby 1.9.0 (2004-04-25) [i386-mswin32]\n           [\",\"]\n\n       p Dir.glob('{\\{}')\n       #=> ruby 1.8.2 (2004-12-24) [i386-mswin32]\n           []\n       #=> ruby 1.9.0 (2004-04-25) [i386-mswin32]\n           [\"{\"]\n\n=== 2004-04-08\n: Iconv.list [lib] [compat]\n  ((<ruby-dev:23063>))\n\n=== 2004-04-06\n: Kernel#open [ruby] [change]\n  可能なら最初の引数に対して to_open を呼ぶようになりました。\n\n: Exception#to_str [ruby] [obsolete]\n\n=== 2004-03-31\n: Array#pack [ruby] [change]\n  pack(\"U\") 時に、ユニコードとして不適切な値が来ているときは\n  RangeError を投げるようになりました。\n  ((<ruby-dev:23281>))\n\n=== 2004-03-24\n: Module#class_variable_get [ruby] [new]\n\n=== 2004-03-19\n: {sym: val} [ruby] [new]\n  {:sym => val} を {sym: val} のように書くことができるようになりました。\n\n=== 2004-03-12\n\n: File.fnmatch [change]\n  File::FNM_PATHNAME がセットされている場合、**/ が */ の繰り返しとして働くようになりました。\n  ((<ruby-dev:22901>))\n\n: File.fnmatch, Dir.glob [change]\n  Windows, DJGPP, EMX でも '\\' をパスセパレータとして解釈せず、常にエスケープ文字として解釈するようになりました。\n  ((<ruby-dev:22974>)) ((<ruby-list:39337>))\n\n: WEBrick::Config::General [lib] [new]\n  オプション :DoNotReverseLookup 追加。\n\n=== 2004-03-10\n\n: ((<組み込み変数/$-W>))        [ruby] [new]\n  追加\n\n=== 2004-03-07\n: Net::HTTPHeader#add_header [lib] [new]\n: Net::HTTPHeader#get_fields [lib] [new]\n: Net::HTTPHeader#content_length= [lib] [new]\n: Net::HTTPHeader#content_type [lib] [new]\n: Net::HTTPHeader#main_type [lib] [new]\n: Net::HTTPHeader#sub_type [lib] [new]\n: Net::HTTPHeader#type_params [lib] [new]\n: Net::HTTPHeader#content_type= [lib] [new]\n: Net::HTTPHeader#set_content_type [lib] [new]\n\n: Net::HTTPRequest#body(=)        [lib] [new]\n: Net::HTTPRequest#body_stream(=) [lib] [new]\n\n=== 2004-03-05\n: net/http [lib] [new]\n  support WebDAV methods, PROPPATCH, LOCK, UNLOCK, OPTIONS, PROPFIND, \n  DELETE, MOVE, COPY, MKCOL.\n\n: Net::HTTPResponse#response [lib] [obsolete]\n: Net::HTTPResponse#header [lib] [obsolete]\n: Net::HTTPResponse#read_header [lib] [obsolete]\n\n=== 2004-02-16\n\n: Iconv.list [lib] [new]\n\n: ((<IO/IO.popen>))             [compat]\n\n  ((<組み込み関数/system>)) 等と同様、第一引数に配列でコマンドを指定し\n  た場合にシェルを経由せずに子プロセスを実行できるようになりました。\n  ((<ruby-dev:22877>))\n\n: ((<組み込み関数/spawn>))       [new]\n: ((<Process/Process.spawn>))    [new]\n\n  追加。((<ruby-dev:22877>))\n\n: ((<組み込み関数/system>))     [change]\n\n  コマンドを実行できないときに例外が発生するようになりました。\n\n        p system(\"hogehoge\")\n\n        # => ruby 1.8.2 (2004-07-17) [i586-linux]\n             false\n        # => ruby 1.9.0 (2004-07-17) [i586-linux]\n             -:1:in `system': No such file or directory - hogehoge (Errno::ENOENT)\n                from -:1\n\n        p system(\"/tmp\")\n\n        # => ruby 1.8.2 (2004-07-17) [i586-linux]\n             false\n        # => ruby 1.9.0 (2004-07-17) [i586-linux]\n             -:1:in `system': Permission denied - /tmp (Errno::EACCES)\n                from -:1\n\n  シェルを経由する場合は、これまでどおりです。\n\n        p system(\"hogehoge ''\")\n        # => ruby 1.9.0 (2004-07-17) [i586-linux]\n             sh: line 1: hogehoge: command not found\n             false\n\n=== 2004-02-06\n: BasicSocket#do_not_reverse_lookup [new]\n: BasicSocket#do_not_reverse_lookup= [new]\n\n  個々のソケットごとに逆引きの設定ができるようになりました。\n  ((<ruby-core:2346>))\n\n=== 2004-01-29\n: File.fnmatch [ruby] [change]\n  Windows（のNT系列？）で File::FNM_CASEFOLD が指定された場合、全角英文字の大文字・小文字も区別しなくなりました。\n\n: Dir.glob [ruby] [change]\n  Windows, DJGPP, EMX では、常に大文字・小文字を区別しなくなりました。また、File::FNM_CASEFOLD は指定できなくなりました。\n  ((<ruby-dev:22761>))\n\n=== 2004-01-23\n: Array#pack [ruby] [compat]\n  U 以外のサイズのある整数指定子に大きな数を与えた場合 RangeError を\n  投げなくなりました。((<ruby-dev:22654>))\n\n    $ ruby -e 'p [2**32].pack(\"i\")'    \n    \"\\000\\000\\000\\000\"\n    \n    $ ruby -e 'p [2**32].pack(\"U\")'\n    -e:1:in `pack': bignum too big to convert into `long' (RangeError)\n           from -e:1\n\n=== 2004-01-22\n\n: ((<組み込み定数/VERSION>))    [obsolete]\n: ((<組み込み定数/RELEASE_DATE>))    [obsolete]\n: ((<組み込み定数/PLATFORM>))   [obsolete]\n\n  削除されました。((<ruby-dev:22643>))\n\n=== 2004-01-17\n: NameError [ruby] \n  ((<ruby-dev:22604>))\n\n=== 2004-01-14\n: SystemStackError [ruby] [change]\n  SystemStackError が StandardError ではなく Exception の直下になりました。\n  ((<ruby-talk:89782>))\n\n=== 2004-01-13\n: Pathname#world_readable?  [lib] [new]\n: Pathname#world_writable?  [lib] [new]\n\n: File::Stat#world_readable? [ruby] [new]\n: File::Stat#world_writable? [ruby] [new]\n\n=== 2004-01-12\n: File.world_readable?  [ruby] [new]\n: File.world_writable?  [ruby] [new]\n\n=== 2004-01-10\n: Dir#inspect [ruby] [new]\n\n  パスを含む \"#<Dir:path>\" というような文字列を返します。\n\n  ((<ruby-dev:22562>))\n\n=== 2004-01-06 \n: Logger#msg2str [lib] [change]\n  to_str を使わなくなりました。\n\n=== 2004-01-05\n: Dir.glob [ruby] [change]\n  Windowsで **/ がリパースポイントを辿らなくなりました。（シンボリックリンクと同じ扱い）\n  ((<ruby-dev:22486>))\n\n=== 2004-01-02\n: File.fnmatch, Dir.glob [ruby] [change]\n  Windows, DJGPP, EMX でマルチバイト文字に対応しました。\n  ((<ruby-dev:22476>))\n\n      p File.fnmatch('?', 'あ')\n      #=> ruby 1.8.2 (2004-12-24) [i386-mswin32]\n          false\n      #=> ruby 1.9.0 (2004-04-25) [i386-mswin32]\n          true\n\n      p File.fnmatch('?T', 'サ')\n      #=> ruby 1.8.2 (2004-12-24) [i386-mswin32]\n          true\n      #=> ruby 1.9.0 (2004-04-25) [i386-mswin32]\n          false\n\n== 参考\n\n* ((<Changes in Ruby 1.9|URL:http://eigenclass.org/hiki.rb?Changes+in+Ruby+1.9>))",
          "snippets": []
        }
      ],
      "related_entries": []
    },
    {
      "signature": "Net::HTTPHeader#[](key) -> String|nil",
      "score": 322,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "key ヘッダフィールドを返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Net=3a=3aHTTPHeader/i/=5b=5d.html",
          "description": "key ヘッダフィールドを返します。\n\nたとえばキー 'content-length' に対しては  '2048'\nのような文字列が得られます。キーが存在しなければ nil を返します。\n\n//emlist[例][ruby]{\nrequire 'net/http'\n\nuri = URI.parse('http://www.example.com/index.html')\nreq = Net::HTTP::Get.new(uri.request_uri)\nreq['user-agent'] # => Ruby\n//}\n\n一種類のヘッダフィールドが一つのヘッダの中に複数存在する\n場合にはそれを全て \", \" で連結した文字列を返します。\nkey は大文字小文字を区別しません。\n\n@param key ヘッダフィール名を文字列で与えます。\n\n@see Net::HTTPHeader#[]=,\n     Net::HTTPHeader#add_field,\n     Net::HTTPHeader#get_fields",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Net::HTTPHeader",
          "label": "Net::HTTPHeader",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:Net%3A%3AHTTPHeader/"
        }
      ]
    },
    {
      "signature": "Net::HTTPHeader#get_fields(key) -> [String]",
      "score": 322,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "key ヘッダフィールドの値 (文字列) を配列で返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Net=3a=3aHTTPHeader/i/get_fields.html",
          "description": "key ヘッダフィールドの値 (文字列) を配列で返します。\n\nたとえばキー 'content-length' に対しては ['2048'] のような\n文字列が得られます。一種類のヘッダフィールドが一つのヘッダの中\nに複数存在することがありえます。\nkey は大文字小文字を区別しません。\n\n@param key ヘッダフィール名を文字列で与えます。\n\n//emlist[例][ruby]{\nrequire 'net/http'\n\nuri = URI.parse('http://www.example.com/index.html')\nres = Net::HTTP.get_response(uri)\nres.get_fields('accept-ranges') # => [\"none\"]\n//}\n\n@see Net::HTTPHeader#[] , Net::HTTPHeader#[]=,\n     Net::HTTPHeader#add_field",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Net::HTTPHeader",
          "label": "Net::HTTPHeader",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:Net%3A%3AHTTPHeader/"
        }
      ]
    },
    {
      "signature": "Readline.#readline(prompt = \"\", add_hist = false) -> String | nil",
      "score": 322,
      "metadata": {
        "type": "module-function",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "prompt を出力し、ユーザからのキー入力を待ちます。\nエンターキーの押下などでユーザが文字列を入力し終えると、\n入力した文字列を返します。\nこのとき、add_hist が true であれば、入力した文字列を入力履歴に追加します。\n何も入力していない状態で EOF(UNIX では ^D) を入力するなどで、\nユーザからの入力がない場合は nil を返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Readline/m/readline.html",
          "description": "prompt を出力し、ユーザからのキー入力を待ちます。\nエンターキーの押下などでユーザが文字列を入力し終えると、\n入力した文字列を返します。\nこのとき、add_hist が true であれば、入力した文字列を入力履歴に追加します。\n何も入力していない状態で EOF(UNIX では ^D) を入力するなどで、\nユーザからの入力がない場合は nil を返します。\n\n本メソッドはスレッドに対応しています。\n入力待ち状態のときはスレッドコンテキストの切替えが発生します。\n\n入力時には行内編集が可能で、vi モードと Emacs モードが用意されています。\nデフォルトは Emacs モードです。\n\n@param prompt カーソルの前に表示する文字列を指定します。デフォルトは\"\"です。\n@param add_hist 真ならば、入力した文字列をヒストリに記録します。デフォルトは偽です。\n\n@raise IOError 標準入力が tty でない、かつ、標準入力をクローズしている\n               (isatty(2) の errno が EBADF である。) 場合に発生します。\n\n例:\n\n  require \"readline\"\n\n  input = Readline.readline\n  (プロンプトなどは表示せずに、入力待ちの状態になります。\n   ここでは「abc」を入力後、エンターキーを押したと想定します。)\n  abc\n\n  p input # => \"abc\"\n\n  input = Readline.readline(\"> \")\n  (\">\"を表示し、入力待ちの状態になります。\n   ここでは「ls」を入力後、エンターキーを押したと想定します。)\n  > ls\n\n  p input # => \"ls\"\n\n  input = Readline.readline(\"> \", true)\n  (\">\"を表示し、入力待ちの状態になります。\n   ここでは「cd」を入力後、エンターキーを押したと想定します。)\n  > cd\n\n  p input # => \"cd\"\n\n  input = Readline.readline(\"> \", true)\n  (\">\"を表示し、入力待ちの状態になります。\n   ここで、カーソルの上キー、または ^P を押すと、\n   先ほど入力した「cd」が表示されます。\n   そして、エンターキーを押したと想定します。)\n  > cd\n\n  p input # => \"cd\"\n\n本メソッドには注意事項があります。\n入力待ちの状態で ^C すると ruby インタプリタが終了し、端末状態を復帰しません。\nこれを回避するための例を2つ挙げます。\n\n例: ^CによるInterrupt例外を捕捉して、端末状態を復帰する。\n\n  require 'readline'\n\n  stty_save = `stty -g`.chomp\n  begin\n    while buf = Readline.readline\n        p buf\n    end\n  rescue Interrupt\n    system(\"stty\", stty_save)\n    exit\n  end\n\n例: INTシグナルを捕捉して、端末状態を復帰する。\n\n  require 'readline'\n\n  stty_save = `stty -g`.chomp\n  trap(\"INT\") { system \"stty\", stty_save; exit }\n\n  while buf = Readline.readline\n    p buf\n  end\n\nまた、単に ^C を無視する方法もあります。\n\n  require 'readline'\n\n  trap(\"INT\", \"SIG_IGN\")\n\n  while buf = Readline.readline\n    p buf\n  end\n\n入力履歴 Readline::HISTORY を使用して、次のようなこともできます。\n\n例: 空行や直前の入力と同じ内容は入力履歴に残さない。\n\n  require 'readline'\n\n  while buf = Readline.readline(\"> \", true)\n    # p Readline::HISTORY.to_a\n    Readline::HISTORY.pop if /^\\s*$/ =~ buf\n \n    begin\n      if Readline::HISTORY[Readline::HISTORY.length-2] == buf\n        Readline::HISTORY.pop\n      end\n    rescue IndexError\n    end\n \n    # p Readline::HISTORY.to_a\n    print \"-> \", buf, \"\\n\"\n  end\n\n@see Readline.vi_editing_mode、Readline.emacs_editing_mode、\n     Readline::HISTORY",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Readline",
          "label": "Readline",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:Readline/"
        }
      ]
    },
    {
      "signature": "WEBrick::HTTPResponse#to_s -> String",
      "score": 322,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "実際にクライアントに送られるデータを文字列として返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/WEBrick=3a=3aHTTPResponse/i/to_s.html",
          "description": "実際にクライアントに送られるデータを文字列として返します。\n\n  require 'webrick'\n  include WEBrick\n  res = HTTPResponse.new( { :HTTPVersion => \"1.1\" } )\n  res.body = 'hoge'\n  print res.to_s\n\n  #=> 出力結果\n  HTTP/1.1 200 OK\n  Connection: Keep-Alive\n  Date: Sat, 27 Oct 2007 08:58:49 GMT\n  Server:\n  Content-Length: 4\n  \n  hoge",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "WEBrick::HTTPResponse",
          "label": "WEBrick::HTTPResponse",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:WEBrick%3A%3AHTTPResponse/"
        }
      ]
    },
    {
      "signature": "MatchData#[](n) -> String | nil",
      "score": 319,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "n 番目の部分文字列を返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/MatchData/i/=5b=5d.html",
          "description": "n 番目の部分文字列を返します。\n\n0 はマッチ全体を意味します。\nn の値が負の時には末尾からのインデックスと見倣します(末尾の\n要素が -1 番目)。n 番目の要素が存在しない時には nil を返します。\n\n@param n 返す部分文字列のインデックスを指定します。\n\n//emlist[例][ruby]{\n/(foo)(bar)(BAZ)?/ =~ \"foobarbaz\"\np $~.to_a       # => [\"foobar\", \"foo\", \"bar\", nil]\np $~[0]         # => \"foobar\"\np $~[1]         # => \"foo\"\np $~[2]         # => \"bar\"\np $~[3]         # => nil        (マッチしていない)\np $~[4]         # => nil        (範囲外)\np $~[-2]        # => \"bar\"\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "MatchData",
          "label": "MatchData",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:MatchData/"
        }
      ]
    },
    {
      "signature": "MatchData#[](name) -> String | nil",
      "score": 319,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "name という名前付きグループにマッチした文字列を返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/MatchData/i/=5b=5d.html",
          "description": "name という名前付きグループにマッチした文字列を返します。\n\n@param name 名前(シンボルか文字列)\n@raise IndexError 指定した名前が正規表現内に含まれていない場合に発生します\n\n//emlist[例][ruby]{\n/\\$(?<dollars>\\d+)\\.(?<cents>\\d+)/.match(\"$3.67\")[:cents] # => \"67\"\n/(?<alpha>[a-zA-Z]+)|(?<num>\\d+)/.match(\"aZq\")[:num] # => nil\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "MatchData",
          "label": "MatchData",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:MatchData/"
        }
      ]
    },
    {
      "signature": "MatchData#[](range) -> [String]",
      "score": 319,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "Range オブジェクト range の範囲にある要素からなる部分配列を返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/MatchData/i/=5b=5d.html",
          "description": "Range オブジェクト range の範囲にある要素からなる部分配列を返します。\n\n@param range start..end 範囲式。\n\n//emlist[例][ruby]{\n/(foo)(bar)/ =~ \"foobarbaz\"\np $~[0..2]      # => [\"foobar\", \"foo\", \"bar\"]\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "MatchData",
          "label": "MatchData",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:MatchData/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Range/"
        }
      ]
    },
    {
      "signature": "ruby 1.8.2 feature",
      "score": 307,
      "metadata": {
        "type": "document",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "ruby 1.8.2 feature \nruby 1.8.2 での ruby 1.8.1 からの変更点です。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/doc/news=2f1=2e8=2e2.html",
          "description": "ruby 1.8.2 feature \nruby 1.8.2 での ruby 1.8.1 からの変更点です。\n\n掲載方針\n\n*バグ修正の影響も含めて動作が変わるものを収録する。\n*単にバグを直しただけのものは収録しない。\n*ライブラリへの単なる定数の追加は収録しない。\n\n以下は各変更点に付けるべきタグです。\n\n*カテゴリ\n  * [ruby]: ruby インタプリタの変更\n  * [api]: 拡張ライブラリ API\n  * [lib]: ライブラリ\n*レベル\n  * [bug]: バグ修正\n  * [new]: 追加されたクラス／メソッドなど\n  * [compat]: 変更されたクラス／メソッドなど\n    * 互換性のある変更\n    * only backward-compatibility\n    * 影響の範囲が小さいと思われる変更\n  * [change]: 変更されたクラス／メソッドなど(互換性のない変更)\n  * [experimental]: 変更の中でも特に実験的なもの(将来再考して欲しいもの？)\n  * [obsolete]: 廃止された(される予定の)機能\n  * [platform]: 対応プラットフォームの追加\n\n== 1.8.1 (2003-12-25) -> 1.8.2 (2004-12-25) \n\n* cgi/session においてクライアントからセッション ID を指定できてしまうバグが\n  修正されました。\n* cgi/session においてセッション情報を保存するファイル名にセッション ID が\n  使われるバグが修正されました。\n* cgi の無限ループに陥る可能性のあるバグが修正されました。\n  ((<URL:http://www.debian.org/security/2004/dsa-586>))\n* 一連の core dumps バグが修正されました。\n  ((<URL:https://magazine.rubyist.net/articles/0002/0002-RubyCore.html>))\n* tk の変更点は \n  ((<URL:https://magazine.rubyist.net/articles/0003/0003-RubyTkMovement.html>))\n  を参照して下さい。\n* soap, wsdl の変更点は\n  ((<URL:http://rrr.jin.gr.jp/projects/soap4r/wiki/Changes-ruby181_ruby182>))\n  を参照して下さい。\n* rss, rdoc, yaml の変更点は収録していません。\n\n\n=== 日時未詳\n: CGI#server_port [lib] [bug]\n  常に 0 を返すバグが修正されました。\n\n=== 2004-12-19\n\n: OpenSSL::X509::Store#time=           [lib] [new]\n: OpenSSL::X509::StoreContext#time=    [lib] [new]\n  追加。\n\n: OpenSSL::X509::Name::RFC2253DN       [lib] [new]\n  module for RFC2253 DN format.\n\n: OpenSSL::X509::Name.parse_rfc2253    [lib] [new]\n  new method to parse RFC2253 DN format.\n\n=== 2004-12-18\n\n: Object#id [ruby] [obsolete]\n  常に警告がでるようになりました。Object#object_id を使って下さい。\n\n=== 2004-12-17\n: CGI::Session#initialize [lib] [compat]\n  'no_hidden' オプションを指定できるようになりました。((<ruby-talk:123850>))\n\n=== 2004-12-16\n\n: Hash#eql? [ruby] [obsolete]\n: Hash#hash [ruby] [obsolete]\n\n  削除\n  ((<ruby-dev:25206>))?\n\n=== 2004-12-14\n: CGI::Session.initialize [lib] [change]\n  存在しないセッション ID がクライアントから送られてきた場合\n  例外を投げずに新しいセッションを作成するようになりました。\n  ((<ruby-list:40368>))\n\n=== 2004-12-09\n: eval('Foo #@ bar'.inspect) [ruby] [bug]\n  シンタックスエラーにならないように修正しました。\n  ((<ruby-core:03922>))\n\n: String#inspect [ruby] [bug]\n  式展開になる '#'がエスケープされるようになりました。 \n  ((<ruby-core:03922>))\n    $ ruby1.8.1 -e \"puts '# #{}'.inspect\"\n    \"# #{}\"\n\n    $ ruby1.8.2 -e \"puts '# #{}'.inspect\"\n    \"# \\#{}\"\n\n: String#dump [ruby] [bug]\n  式展開にならない '#'がエスケープされないようになりました。 \n  ((<ruby-core:03922>))\n    $ ruby1.8.1 -e \"puts '# #{}'.dump\"\n    \"\\# \\#{}\"\n\n    $ ruby1.8.2 -e \"puts '# #{}'.dump\"\n    \"# \\#{}\"\n\n=== 2004-12-08\n: rss/rss [lib] [obsolete]\n  #item=/#set_item and so on are obsolete.\n\n=== 2004-12-06 \n: Hash#hash [ruby] [new]\n\n  追加\n\n  ((<ruby-talk:122482>))\n\n  Hash#hash は 2004-12-16 に削除されました。\n  ((<ruby-dev:25206>))?\n\n: OpenSSL::PKey::RSA.public_encrypt   [lib] [compat]\n: OpenSSL::PKey::RSA.public_decrypt   [lib] [compat]\n: OpenSSL::PKey::RSA.private_encrypt  [lib] [compat]\n: OpenSSL::PKey::RSA.private_decrypt  [lib] [compat]\n\n  パディングを指定出来るようになりました。((<ruby-talk:122539>))。PKCS1_PADDING, SSLV23_PADDING, NO_PADDING and PKCS1_OAEP_PADDING under OpenSSL::PKey::RSA.\n\n=== 2004-12-05\n: OptionParser::Completion#complete [lib] [compat]\n  new parameter to direct case insensitiveness.\n\n: OptionParser#order!               [lib] [change]\n  ((<ruby-dev:25048>))\n\n=== 2004-12-04\n: NKF.guess [lib] [compat]\n  NKF.guess は NKF.guess2 の alias になりました。 従来のものを使いたい場合は\n  NKF.guess1 を使って下さい。\n\n=== 2004-11-20\n: ext/nkf/nkf-utf8/  [lib] [new]\n  utf8 対応 nkf (nkf 2.x) の追加。\n\n: kconv [lib] [new]\n: Kconv.guess_old(str)\n: Kconv.toutf8(str)\n: Kconv.toutf16(str)\n: String#toutf8,\n: String#toutf16\n: String#iseuc\n: String#issjis\n: String#isutf8\n\n=== 2004-11-18\n: StringIO.new   [lib] [compat]\n  StringIO.newの第二引数にIO.newと同様、Fixnum も指定できるようになりました。\n  ((<ruby-dev:24896>))\n\n=== 2004-11-16\n: Test::Unit::AutoRunner.options [lib] [compat]\n  add new option --exclude (-x). ((<ruby-dev:24865>))\n\n: CGI::Session.initialize [lib] [compat]\n  'sufix' オプションを設定できるようになりました。\n\n=== 2004-11-10\n: Array#pack [ruby] [change]\n  P 指定子以外では nil を 0 に変換しなくなりました。\n\n    $ ruby-1.8.1 -e 'p [nil].pack(\"L\")'\n    \"\\000\\000\\000\\000\"\n    \n    $ ruby-1.8.2 -e 'p [nil].pack(\"L\")'\n    -e:1:in `pack': cannot convert nil into Integer (TypeError)\n        from -e:1\n    \n    $ ruby-1.8.2 -e 'p [nil].pack(\"P\")'\n    \"\\000\\000\\000\\000\"\n\n=== 2004-10-27\n: CGI [lib] [bug]\n  無限ループに陥る可能性のあるバグを修正しました。\n  ((<URL:http://www.debian.org/security/2004/dsa-586>))\n\n=== 2004-10-21\n: PStore#transaction  [lib] [compat]\n  PStore.new に指定したファイルがまだ存在しない場合に、PStore#transaction(true) を呼\n  び出しても例外 Errno::ENOENT が発生しなくなりました。((<ruby-dev:24561>))\n\n=== 2004-10-20\n\n: Proc#dup [new]\n\n  追加 ((<ruby-talk:116915>))\n\n=== 2004-10-19\n\n: ARGF [change]\n\n  コマンドライン引数に与えたファイルを読んだ後には標準入力を読まなくなりました。\n  ((<ruby-dev:24452>))\n\n: IO#gets [ruby] [bug]\n  \"\\377\" を引数に受け取っても適切に振舞うようになりました。((<ruby-dev:24460>))\n\n: Dir.glob [change]\n  ブロックを渡したとき、false ではなく nil を返すようになりました。また、readdir しながらブロックを呼ぶのではなく、全部を配列に貯めてから each するようになりました。((<ruby-dev:24528>))\n\n=== 2004-10-18\n\n: WEBrick::HTTPRequest [lib] [new]\n  new methods. accept, accept_charset, accept_encoding, accept_language, \n  content_length and content_type.\n\n: WEBrick::HTTPResponse#content_length= [lib] [new]\n: WEBrick::HTTPResponse#content_type= [lib] [new]\n: WEBrick::HTTPUtils.parse_qvalues [lib] [new]\n: WEBrick::HTTPServer#virtual_host [lib] [new]\n: WEBrick::HTTPServer#lookup_server [lib] [new]\n: WEBrick::HTTPServlet::FileHandler#get_servlet [lib] [new]\n\n=== 2004-09-03\n: Struct.new  [ruby] [bug]\n  同じ名前で二度定義したときのバグを修正しました。((<ruby-dev:24210>))\n\n=== 2004-08-24\n: CGI::Session::FileStore#initialize [lib] [bug]\n  セッションを保存するファイル名にセッション ID が使われるバグを修正しました。\n\n=== 2004-08-23\n: OpenSSL::SSL#pending [lib] [new]\n\n=== 2004-08-14\n: FileUtils.copy_entry [lib] [new]\n: FileUtils::DryRun [lib] [new]\n  追加。\n: FileUtils.mv [lib] [compat]\n  mv が :force オプションを受け付けるようになりました。\n\n=== 2004-08-07\n: Zlib::GzipReader#read(0) [lib] [compat]\n  Zlib::GzipReader#read(0) が nil ではなく \"\" を返すようになりました。\n\n=== 2004-07-28\n: CGI::CGI_PARAMS [lib] [obsolete]\n: CGI::CGI_COOKIES [lib] [obsolete]\n  常に警告がでるようになりました。\n\n=== 2004-07-23\n: Net::IMAP#disconnected? [lib] [new]\n\n: CGI::Session::FileStore#update [lib] [compat]\n  セッションを保存するファイルの mode をデフォルトで 0600 に\n  セットするようになりました。\n\n=== 2004-07-16\n\n: ((<SystemExit#success?|SystemExit/success?>)) [ruby] [new]\n\n  追加。((<ruby-dev:23912>))\n\n: File::Stat#dev_major [ruby] [new]\n: File::Stat#dev_minor [ruby] [new]\n  ((<ruby-core:03195>))\n\n=== 2004-07-05\n\n: Kernel#URI    [lib] [new]\n\n  uri で追加。((<ruby-dev:23784>))\n\n=== 2004-07-01\n: OpenSSL::Cipher::Cipher#pkcs5_keyivgen  [lib] [new]\n: OpenSSL::Cipher::Cipher#key_len=        [lib] [new]\n  new methods.\n\n: OpenSSL::PKey::DH                       [lib] [new]\n: OpenSSL::PKey::DSA                      [lib] [new]\n  many new methods. p, p=, g, g=, pub_key, pub_key=, priv_key, priv_key=.\n\n=== 2004-07-01\n: PStore [lib] [change]\n  データベースの更新が成功したらバックアップファイルを残さず削除するようになりました。\n  ファイル名に \"~\" が付いたバックアップファイルは残されません。((<ruby-list:39102>))\n\n=== 2004-06-29\n\n: misc\n  $SAFEが保存されない問題を修正しました。((<ruby-dev:23829>))\n\n=== 2004-06-23\n: net/imap [lib] [new]\n  added new option --ssl\n\n=== 2004-06-16\n\n: object.c     [ruby] [bug]\n  特異クラスが特異オブジェクトのクラスを継承していると見なされて\n  いるバグを修正しました。((<ruby-dev:23690>))\n\n    $ ruby1.8.1 -e 'class X;end; x=X.new; class << x;p self < X; end' \n    true\n\n    $ ruby1.8.2 -e 'class X;end; x=X.new; class << x;p self < X; end' \n    nil\n\n=== 2004-06-04\n\n: IO#gets, $_ [ruby] [change]\n  gets の返り値が nil でも、$_ に nil がセットされるようになりました。\n  ((<ruby-dev:23663>))\n\n=== 2004-05-27\n\n: CSV.parse  [lib] [change]\n  引数としてファイル名を受け付けなくなりました。\n  文字列が渡されると、それをパースすべき文字列だと解釈します。\n\n    CSV.parse(\"1,2\\n3,r\") #=> [['1', '2'], ['3', 'r']]\n  \n: CSV::Row   [lib] [obsolete]\n: CSV::Cell  [lib] [obsolete]\n  CSV::Row と CSV::Cell が deprecated になりました。\n\n: CSV.open, CSV.parse, and CSV,generate \n  必要ならばユーザが binmode をセットしなければならなくなりました。\n\n: CSV.read      [lib] [new]\n: CSV.readlines [lib] [new]\n  追加。\n\n: Marshal.dump [ruby] [bug]\n  特異メソッドを定義されていないオブジェクトを dump できない場合があったのを\n  修正しました。 ((<ruby-dev:22631>))\n\n: Marshal.dump [ruby] [bug]\n  特異クラス内のクラスを dump するとエラーになるようになりました。\n  ((<ruby-dev:22588>))\n\n=== 2004-05-16\n\n: DBM.open              [lib] [compat]\n: DBM::READER           [lib] [new]\n: DBM::WRITER           [lib] [new]\n: DBM::WRCREAT          [lib] [new]\n: DBM::NEWDB            [lib] [new]\n\n  DBM.open に第3引数を追加し、DBM::READER,\n  DBM::WRITER, DBM::WRCREAT, DBM::NEWDB を指定できるようになりました。  \n  ((<ruby-dev:23520>))\n\n=== 2004-05-13\n\n: Net::Telnet#login    [lib] [compat]\n  \"options\" でログインプロンプトとパスワードプロンプトのための正規表現を\n  指定できるようになりました。\n\n: String#unpack [ruby] [change]\n  Z* が最初の null までしかマッチしないようになりました。((<ruby-talk:98281>))\n\n    $ ruby1.8.1 -e 'p \"abc\\000def\\000\".unpack(\"Z*Z*\")' \n    [\"abc\\000def\", \"\"]\n\n    $ ruby1.8.2 -e 'p \"abc\\000def\\000\".unpack(\"Z*Z*\")' \n    [\"abc\", \"def\"]\n\n=== 2004-05-10\n: superclass mismatch [ruby] [change]\n  親クラスの違う同じ名前のクラスを再定義した時  TypeError を投げるようになりました。\n  ((<ruby-list:39567>))\n\n    $ ruby-1.8.2 -e '\n    class Foo\n      Bar = 1\n    end\n    \n    class Foo < String\n      Baz = 2\n    end\n    '\n    -e:6: superclass mismatch for class Foo (TypeError)\n\n=== 2004-04-19\n\n: Hash#==   [change]\n: Hash#eql? [new]\n\n  Hash#== は内容が一致していれば真に、Hash#eql? は、さらに \n  ハッシュのデフォルト値が同じ(==)なら真になるよう定義されました。\n\n        h1 = Hash.new(\"a\")\n        h2 = Hash.new(\"a\")\n        h3 = Hash.new(\"b\")\n\n        p h1 == h2\n        p h1.eql?(h2)\n\n        p h1 == h3\n        p h1.eql?(h3)\n\n        # => ruby 1.8.1 (2003-12-25) [i586-linux]\n             true\n             false\n             false\n             false\n        # => ruby 1.8.2 (2004-07-17) [i586-linux]\n             true\n             true\n             true\n             false\n        # => ruby 1.9.0 (2004-07-17) [i586-linux]\n             true\n             true\n             true\n             false\n\n  ((<ruby-talk:97559>))\n\n  Hash#eql? は 2004-12-16 に削除されました。\n  ((<ruby-dev:25206>))?\n\n=== 2004-04-16\n: String#== [lib] [change]\n  nil を返さず、常に false か true を返すようになりました。((<ruby-dev:23404>))\n\n    $ ruby1.8.1 -e 'p \"a\" == :a'\n    nil\n\n    $ ruby1.8.2 -e 'p \"a\" == :a'\n    false\n\n=== 2004-04-15\n\n: GDBM::READER          [lib] [new]\n: GDBM::WRITER          [lib] [new]\n: GDBM::WRCREAT         [lib] [new]\n: GDBM::NEWDB           [lib] [new]\n\n  GDBM に read only などで access できるようになりました。((<ruby-dev:23381>))\n\n: Process::Status#success? [ruby][new]\n  ((<ruby-dev:23385>))\n\n=== 2004-04-11\n\n: ruby.c    [ruby] [bug]\n\n  オプション --with-static-linked-ext 付きでコンパイルした時の、\n  -r オプションのエラーメッセージを修正。((<ruby-dev:23357>))\n\n=== 2004-03-8\n: WEBrick::Config::HTTP [lib] [change]\n  オプション :RequestHander は :RequestCallback に名前が変わりました。\n  オプション :ServerAlias が追加されました。\n\n=== 2004-02-24\n: OpenSSL::Config#each [lib] [new]\n\n: Dir.glob [ruby] [change]\n  File::FNM_DOTMATCH がセットされない限り Dir.glob('test/**/') は 'test/.test/' などに\n  マッチしなくなりました。((<ruby-dev:23014>))\n\n=== 2004-02-20\n: irb [lib] [new]\n  -I オプションが使えるようになりました。((<ruby-list:39243>))\n\n=== 2004-02-18\n: StringScanner#peep [lib] [obsolete]\n  $VERVOSE が設定されている時に警告がでるようになりました。use #peek.\n: StringScanner#empty? [lib] [obsolete]\n  $VERVOSE が設定されている時に警告がでるようになりました。use #eos?.\n: StringScanner#clear [lib] [obsolete] \n  $VERVOSE が設定されている時に警告がでるようになりました。use #terminate.\n: StringScanner#getbyte [lib] [obsolete] \n  $VERVOSE が設定されている時に警告がでるようになりました。use #get_byte.\n: StringScanner#restsize [lib] [obsolete]\n  $VERVOSE が設定されている時に警告がでるようになりました。use #rest_size.\n: StringScanner#matchedsize [lib] [obsolete]\n  $VERVOSE が設定されている時に警告がでるようになりました。use #matched_size.\n: ScanError  [lib] [obsolete]\n  use StringScanner::Error.\n\n=== 2004-02-10\n\n: ((<String#~|String/~>))  [obsolete]\n: ((<String#=~|String/=~>)) [obsolete]\n\n  String#~ は削除されました。また、str =~ str を実行すると例外\n  が発生するようになりました。\n  ((<ruby 1.8 feature/2003-07-19>)), ((<ruby 1.8 feature/2003-05-26>))、\n  ((<ruby-dev:22851>))\n\n=== 2004-02-09\n: File.fnmatch  [ruby] [bug]\n  適切にマッチしないバグを修正しました。\n  ((<ruby-dev:22815>)) ((<ruby-dev:22819>))\n\n=== 2004-02-06\n: PrettyPrint#first? [lib] [obsolete]\n\n=== 2004-02-05\n: PrettyPrint#seplist [lib] [new]\n\n=== 2004-01-29\n: OpenSSL::X509::Name#add_entry [lib] [new]\n\n=== 2004-01-26\n: Regexp.new [ruby] [obsolete]\n\n  「{,m}」表記の場合と「{n,m}」の n,m が数字でない場合に警告を出力するようになりました。((<ruby-dev:22626>))\n\n  文字「}」がエスケープされていない場合に警告を出力するようになりました。 ((<ruby-dev:22627>))\n\n=== 2004-01-08\n: OpenSSL::PKey::DH#to_der [lib] [new]\n: OpenSSL::PKey::DSA#to_der [lib] [new]\n: OpenSSL::PKey::RSA#to_der [lib] [new]\n\n\n=== 2003-12-31\n: ARGF.each_byte [ruby] [compat]\n  nil ではなく ARGF を返すようになりました。((<ruby-dev:22465>))\n\n=== 2003-12-27\n: ruby -i.bak [ruby] [compat]\n  inplace edit mode で標準入力から読み込んだ時常に警告を\n  出力するようになりました。\n\n=== 2003-12-26\n: ARGF.read(nil)\n  引数に nil を許すようになりました。((<ruby-dev:22433>))",
          "snippets": []
        }
      ],
      "related_entries": []
    },
    {
      "signature": "ruby 1.8.4 feature",
      "score": 289,
      "metadata": {
        "type": "document",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "ruby 1.8.4 feature \nruby 1.8.4 での ruby 1.8.3 からの変更点です。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/doc/news=2f1=2e8=2e4.html",
          "description": "ruby 1.8.4 feature \nruby 1.8.4 での ruby 1.8.3 からの変更点です。\n\n掲載方針\n\n*バグ修正の影響も含めて動作が変わるものを収録する。\n*単にバグを直しただけのものは収録しない。\n*ライブラリへの単なる定数の追加は収録しない。\n\n以下は各変更点に付けるべきタグです。\n\n記号について(特に重要なものは大文字(主観))\n\n# * カテゴリ\n#   * [ruby]: ruby インタプリタの変更\n#   * [api]: 拡張ライブラリ API\n#   * [lib]: ライブラリ\n* レベル\n  * [bug]: バグ修正\n  * [new]: 追加されたクラス／メソッドなど\n  * [compat]: 変更されたクラス／メソッドなど\n    * 互換性のある変更\n    * only backward-compatibility\n    * 影響の範囲が小さいと思われる変更もこちら\n  * [change]: 変更されたクラス／メソッドなど(互換性のない変更)\n  * [obsolete]: 廃止された(される予定の)機能\n  * [platform]: 対応プラットフォームの追加\n\n== 目次\n\n* ((<ruby 1.8.4 feature/Ruby本体>))\n  * ((<ruby 1.8.4 feature/Symbol [bug]>))\n  * ((<ruby 1.8.4 feature/Symbol [bug]>))\n  * ((<ruby 1.8.4 feature/super [bug]>))\n  * ((<ruby 1.8.4 feature/正規表現 [bug]>))\n  * ((<ruby 1.8.4 feature/シグナル [bug]>))\n* ((<ruby 1.8.4 feature/組み込みライブラリ>))\n  * ((<ruby 1.8.4 feature/UnboundMethod#bind [bug]>))\n  * ((<ruby 1.8.4 feature/set_trace_func [bug]>))\n  * ((<ruby 1.8.4 feature/set_trace_func [change]>))\n  * ((<ruby 1.8.4 feature/printf [bug]>))\n  * ((<ruby 1.8.4 feature/Hash [bug]>))\n  * ((<ruby 1.8.4 feature/test [bug]>))\n  * ((<ruby 1.8.4 feature/File.identical? [new]>))\n  * ((<ruby 1.8.4 feature/FileTest.identical? [new]>))\n  * ((<ruby 1.8.4 feature/File.split [change]>))\n  * ((<ruby 1.8.4 feature/File.basename [change]>))\n  * ((<ruby 1.8.4 feature/File.dirname [change]>))\n  * ((<ruby 1.8.4 feature/Dir.glob (Win全般) [bug]>))\n  * ((<ruby 1.8.4 feature/File.basename (Win全般) [change]>))\n  * ((<ruby 1.8.4 feature/File.dirname (Win全般) [bug]>))\n  * ((<ruby 1.8.4 feature/File::Stat#pipe? [bug]>))\n  * ((<ruby 1.8.4 feature/Array#fill [bug]>))\n  * ((<ruby 1.8.4 feature/String#scan [bug]>))\n  * ((<ruby 1.8.4 feature/File.join [bug]>))\n  * ((<ruby 1.8.4 feature/Thread#pass [bug]>))\n  * ((<ruby 1.8.4 feature/Module#const_missing [bug]>))\n  * ((<ruby 1.8.4 feature/IO [bug]>))\n* ((<ruby 1.8.4 feature/添付ライブラリ>))\n  * ((<ruby 1.8.4 feature/\"Ruby/Tk\">))\n  * ((<ruby 1.8.4 feature/REXML [compat]>))\n  * ((<ruby 1.8.4 feature/TCPSocket#initialize [bug]>))\n  * ((<ruby 1.8.4 feature/TCPServer#initialize [bug]>))\n  * ((<ruby 1.8.4 feature/\"optparse\">))\n  * ((<ruby 1.8.4 feature/\"find\">))\n  * ((<ruby 1.8.4 feature/Iconv>))\n  * ((<ruby 1.8.4 feature/WEBrick::Config::FileHandler [compat]>))\n  * ((<ruby 1.8.4 feature/WEBrick>))\n  * ((<ruby 1.8.4 feature/WEBrick::HTTPRequest#query_string= [new]>))\n  * ((<ruby 1.8.4 feature/Readline [bug]>))\n  * ((<ruby 1.8.4 feature/Syck [bug]>))\n  * ((<ruby 1.8.4 feature/irb [bug]>))\n  * ((<ruby 1.8.4 feature/RDoc [bug]>))\n  * ((<ruby 1.8.4 feature/Win32API [bug]>))\n  * ((<ruby 1.8.4 feature/Rinda [bug]>))\n  * ((<ruby 1.8.4 feature/Iconv [compat]>))\n  * ((<ruby 1.8.4 feature/cgi [bug]>))\n  * ((<ruby 1.8.4 feature/DL [bug]>))\n  * ((<ruby 1.8.4 feature/fileutils [bug]>))\n  * ((<ruby 1.8.4 feature/extmk, mkmf [compat]>))\n  * ((<ruby 1.8.4 feature/mkmf: find_executable() [compat]>))\n* ((<ruby 1.8.4 feature/拡張ライブラリAPI>))\n  * ((<ruby 1.8.4 feature/rb_funcall2() [bug]>))\n  * ((<ruby 1.8.4 feature/rb_respond_to() [change]>))\n  * ((<ruby 1.8.4 feature/rb_obj_respond_to() [new]>))\n* ((<ruby 1.8.4 feature/プラットフォーム固有>))\n  * ((<ruby 1.8.4 feature/bccwin32 [bug]>))\n  * ((<ruby 1.8.4 feature/cygwin [bug]>))\n  * ((<ruby 1.8.4 feature/BeOS [bug]>))\n  * ((<ruby 1.8.4 feature/Sun [bug]>))\n  * ((<ruby 1.8.4 feature/IA64 [bug]>))\n\n== Ruby本体\n\n: Symbol [bug]\n\n#       * parse.y (dsym): prohibit empty symbol literal by interpolation.\n#         fixed: [ruby-talk:166529]\n\n    式展開で空のSymbolを作ることができたバグの修正。 ((<ruby-talk:166529>))\n\n        p :\"\"\n\n        # => ruby 1.8.3 (2005-09-21) [i686-linux]\n             -:1: empty symbol literal\n        # => ruby 1.8.4 (2005-12-16) [i686-linux]\n             -:1: empty symbol literal\n\n        p :\"#{\"\"}\"\n\n        # => ruby 1.8.3 (2005-09-21) [i686-linux]\n             :\n        # => ruby 1.8.4 (2005-12-16) [i686-linux]\n             -:1: empty symbol literal\n\n: Symbol [bug]\n\n#Sat Oct 22 13:26:57 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * object.c (sym_inspect), parse.y (parser_yylex, rb_symname_p): check\n#         if valid as a symbol name more strictly.  [ruby-dev:27478]\n#\n#       * test/ruby/test_symbol.rb: tests for [ruby-core:03573].\n\n    Symbolに適合する文字列を厳密にした。((<ruby-core:03573>)),((<ruby-dev:27478>))\n\n        1) alias :\"foo\" :\"bar\"\n\n            def bar; p \"bar\"; end\n            alias :\"foo\" :\"bar\"\n            foo\n\n            # => ruby 1.8.4 (2005-12-22) [i686-linux]\n                 -:2: syntax error, unexpected tSTRING_CONTENT\n                     alias :\"foo\" :\"bar\"\n                                ^\n                 -:2: warning: unused literal ignored\n            # => ruby 1.9.0 (2005-12-10) [i686-linux]\n                 \"bar\"\n\n\n        2) Symbol#inspect sometimes returns invalid symbol representations:\n\n            puts :\"!\".inspect\n            puts :\"=\".inspect\n            puts :\"0\".inspect\n            puts :\"$1\".inspect\n            puts :\"@1\".inspect\n            puts :\"@@1\".inspect\n            puts :\"@\".inspect\n            puts :\"@@\".inspect\n\n            # => ruby 1.8.3 (2005-09-21) [i686-linux]\n                 :!\n                 :=\n                 :0\n                 :$1\n                 :@1\n                 :@@1\n                 :@\n                 :@@\n            # => ruby 1.8.4 (2005-12-22) [i686-linux]\n                 :\"!\"\n                 :\"=\"\n                 :\"0\"\n                 :$1\n                 :\"@1\"\n                 :\"@@1\"\n                 :\"@\"\n                 :\"@@\"\n\n        3) Symbol#inspect sometimes returns suboptimal symbol representations:\n            puts :foo!.inspect\n            puts :bar?.inspect\n\n            # => ruby 1.8.3 (2005-09-21) [i686-linux]\n                 :\"foo!\"\n                 :\"bar?\"\n            # => ruby 1.8.4 (2005-12-22) [i686-linux]\n                 :foo!\n                 :bar?\n\n        4) :$- always treats next character literally:\n\n            p eval(\":$-\\n\") # => :\"$-\\n\"\n            p :$-( # => :\"$-(\"\n            p :$-  # => :\"$- \"\n            p :$-#.object_id # => 3950350\n\n            # => ruby 1.8.3 (2005-09-21) [i686-linux]\n                 :\"$-\\n\"\n                 :\"$-(\"\n                 :\"$- \"\n                 2631438\n\n            # => ruby 1.8.4 (2005-12-22) [i686-linux]\n                 -:2: syntax error, unexpected '(', expecting $end\n\n#Tue Nov  1 14:20:11 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * eval.c (rb_call_super): should call method_missing if super is\n#         called from Kernel method.\n#\n#       * eval.c (exec_under): frame during eval should preserve external\n#         information.\n\n: super [bug]\n\n    Kernelのメソッド内でsuperを呼んだ時に、存在しないsuperclass\n    にアクセスしようとするバグの修正。\n\n        module Kernel\n          def foo\n            super\n          end\n        end\n\n        foo\n\n        # => ruby 1.8.3 (2005-09-21) [i686-linux]\n             -:3:in `foo': method `foo' called on terminated object (0xb7e06970) (NotImplementedError)\n                from -:7\n        # => ruby 1.8.4 (2005-12-22) [i686-linux]\n             -:3:in `foo'-:3: warning: too many arguments for format string\n             : super: no superclass method `foo' (NoMethodError)\n                from -:7\n\n: 正規表現 [bug]\n\n#Wed Oct 19 01:27:07 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * regex.c (re_compile_pattern): numeric literal inside character class\n#         disabled succeeding backtrack.  fixed: [ruby-list:41328]\n\n    文字コードの形で正規表現の文字クラスを指定すると、それ以降の\n    バックトラックが効かなくなるバグの修正。((<ruby-list:41328>))\n\n        p(/^[a-z]+x[0-9]+$/ =~ \"hogex111\")\n        p(/^[\\x61-\\x7a]+x[0-9]+$/ =~ \"hogex111\")\n\n        # => ruby 1.8.3 (2005-09-21) [i686-linux]\n             0\n             nil\n        # => ruby 1.8.4 (2005-12-22) [i686-linux]\n             0\n             0\n\n: シグナル [bug]\n\n#Sun Oct 16 03:38:07 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * rubysig.h (CHECK_INTS): prevent signal handler to run during\n#         critical section.  [ruby-core:04039]\n\n    シグナルハンドラの実行はクリティカルセクションが終了するまで\n    遅延されるようになりました。((<ruby-core:04039>))\n\n== 組み込みライブラリ\n\n#Thu Dec  8 02:07:19 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * eval.c (umethod_bind): adjust invoking class for module method.\n#         [ruby-dev:27964]\n\n: UnboundMethod#bind [bug]\n\n    UnboundMethod#bindされたモジュールのインスタンスメソッド中で\n    superを使えなかったバグを修正しました。((<ruby-dev:27964>))\n\n        module Foo\n          def initialize\n            super\n          end\n        end\n\n        class Bar\n          include Foo\n          def initialize\n            Foo.instance_method(:initialize).bind(self).call\n          end\n        end\n\n        Bar.new\n\n        # => ruby 1.8.3 (2005-09-21) [i686-linux]\n             -:3:in `initialize': method `initialize' called on terminated object (0xb7dd2bec) (NotImplementedError)\n                from -:10:in `initialize'\n                from -:14\n        # => ruby 1.8.4 (2005-12-16) [i686-linux]\n\n: set_trace_func [bug]\n\n#Thu Dec  8 00:40:52 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * eval.c (call_trace_func): klass parameter should be a\n#         class/module that defines calling method.  [ruby-talk:169307]\n#\n\n    クラスメソッドの実行時に、定義されたクラスではなくメタクラスが\n    traceに渡されていたバグの修正。((<ruby-talk:169307>))\n\n: set_trace_func [change]\n\n#Mon Sep 26 22:32:13 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * eval.c (set_trace_func): add rb_secure(4) to prevent adding\n#         tracing function.\n\n    $SAFE=4でtrace_funcの追加を禁止。\n\n: printf [bug]\n\n#Wed Dec  7 15:31:35 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * sprintf.c (rb_str_format): integer overflow check added.\n#\n#       * sprintf.c (GETASTER): ditto.\n\n    printfのフォーマット指定子にinteger overflowのバグがありました。\n    perl のそれとは違い、セキュリティバグはないそうです。\n    ((<URL:http://www.rubyist.net/~matz/20051207.html#p01>))\n\n        # ruby 1.8.4 (2005-12-01) [i686-linux]\n\n        # ArgumentError\n        printf(\"%2147483648$d\\n\")       # -e:1:in `printf': invalid index - -2147483648$ (ArgumentError)\n        printf(\"%2147483649$d\\n\")       # -e:1:in `printf': invalid index - -2147483647$ (ArgumentError)\n        printf(\"%4294967296$d\\n\")       # -e:1:in `printf': invalid index - 0$ (ArgumentError)\n\n        # overflow\n        printf(\"%4294967297$d\\n\", 1)    # 1\n        printf(\"%4294967298$d\\n\", 1, 2) # 2\n\n        # 1.8.4 では、上記例はすべて以下のエラーになります。\n        # %xx$ に指定できる最大値は 2147483647 です。\n        # -e:1:in `printf': width too big (ArgumentError)\n\n: Hash [bug]\n\n#Wed Nov 23 03:40:49 2005  Guy Decoux  <ts@moulon.inra.fr>\n#\n#       * re.c (KR_REHASH): should cast to unsigned for 64bit CPU.\n#         [ruby-core:06721]\n\n    sizeof(long) > sizeof(int) な環境で、ハッシュ関数のオーバー\n    フローのためにStringをキーとしたHashの検索が失敗していたバグの修正。\n    ((<ruby-core:06721>))\n\n: test [bug]\n\n#Wed Nov 23 01:22:57 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * file.c (test_identical): test if two files are identical.\n#\n#       * file.c (rb_f_test): support DOSISH systems where st_ino is not\n#         reliable.  fixed: [ruby-core:06672]\n#\n#       * win32.h, win32.c (rb_w32_osid): check the running platform.\n\n    i-nodeを持たないシステム(Windows等)でtest(?-, ...)が常にtrueを返し\n    ていたバグを修正。((<ruby-core:06672>))\n\n: File.identical? [new]\n: FileTest.identical? [new]\n\n    test(?-, ...) の代替メソッドとして追加。\n\n: File.split [change]\n: File.basename [change]\n: File.dirname [change]\n\n#Tue Nov 22 14:46:57 2005  NAKAMURA Usaku  <usa@ruby-lang.org>\n#\n#       * file.c (rb_file_s_basename): skip slashes just after UNC top slashes.\n#\n#       * test/ruby/test_path.rb (test_dirname, test_basename): follow new\n#         spec. and add new tests.\n\n    UNCパスに対するFile.dirname・File.basename・File.splitの仕様\n    を変更した(UNCをサポートするプラットフォームのみ)。\n\n      File.split(\"//aaa\")      #=> old: [\"//\", \"aaa\"]  new:[\"//aaa\", \"/\"]\n      File.split(\"//aaa/\")     #=> old: [\"//\", \"aaa\"]  new:[\"//aaa\", \"/\"]\n      File.split(\"//aaa/bbb\")  #=> old:[\"//aaa\", \"bbb\"]  new:[\"//aaa/bbb\", \"/\"]\n      File.split(\"//aaa/bbb/\") #=> old:[\"//aaa\", \"bbb\"]  new:[\"//aaa/bbb\", \"/\"]\n      File.split(\"///aaa\")     #=> old:[\"//\", \"aaa\"]  new:[\"//aaa\", \"/\"]\n\n: Dir.glob (Win全般) [bug]\n\n#Tue Nov 22 13:18:32 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * win32/win32.c (rb_w32_stat): Dir.chdir('//server/shared');\n#         p Dir.glob('*') should work on WinNT. (implemented our own\n#         stat(2) on WinNT) [ruby-list:41552] [ruby-dev:27711]\n#\n\n    共有フォルダの共有名に対する Dir.glob が失敗していたのを修正。（こ\n    れはWinNT における、ランタイムライブラリの stat のバグだと思う）自\n    前で stat を実装することで回避した。((<ruby-list:41552>)),((<ruby-dev:27711>))\n\n: File.basename (Win全般) [change]\n\n#Tue Nov 22 01:45:21 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * file.c (rb_file_s_basename): DOSISH_UNC is defined on cygwin but\n#         DOSISH is not.  fixed: [ruby-dev:27797]\n\n    不完全なUNCを分割しないようにした。((<ruby-dev:27797>))\n\n: File.dirname (Win全般) [bug]\n\n#Fri Nov 18 17:26:06 2005  NAKAMURA Usaku  <usa@ruby-lang.org>\n#\n#       * file.c (rb_file_s_dirname): added checks for some patterns with drive\n#         letter. fixed: [ruby-dev:27738]\n#\n#       * test/ruby/test_path.rb (test_dirname): added tests for above\n#         patterns.\n\n    ドライブレターを含むパスに対するFile.dirnameの問題を修正した\n    (ドライブレターをサポートするプラットフォームのみ)。((<ruby-dev:27738>))\n\n      File.dirname(\"C:a/b\")  #=> old: \"C:a.\"  new: \"C:a\"\n      File.dirname(\"C:a///\") #=> old: \"C:a///\"  new: \"C:a\"\n\n: File::Stat#pipe? [bug]\n\n#Fri Nov 18 12:18:02 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * win32/win32.h (S_IFIFO): r,w = IO.pipe; r.stat.pipe? now\n#         returns true on VisualC++6.\n\n    VisualC++ 6 では S_IFIFO がなく _S_IFIFO しか定義されていないため、\n    パイプに対する stat.pipe? が false を返していたのを修正。\n\n: Array#fill [bug]\n\n#Tue Nov 15 14:39:16 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * array.c (rb_ary_fill): should adjust array length correctly when\n#         an array is expanded in the fill process.  [ruby-core:06625]\n\n    Arrayに対してfillとpopを繰り返すとSEGVするバグを修正しました。((<ruby-core:06625>))\n\n: String#scan [bug]\n\n#Thu Oct 27 16:45:31 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * string.c (scan_once): wrong condition to use mbclen2().\n#         [ruby-dev:27535]\n\n    String#scanで、全角文字に「*」(0回以上の繰り返し)を付けると、空\n    文字列にマッチしたときの次の文字が多バイト文字のときにマッチの\n    開始位置がずれることがあるバグの修正。((<ruby-dev:27535>))\n# であってるのかな?\n\n: File.join [bug]\n\n#Wed Oct 19 08:28:32 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * file.c (rb_file_join): elements may contain null pointer strings.\n#         report and fixed by Lloyd Zusman (hippoman): [ruby-core:06326]\n\n    NULLポインタを持つStringを渡すとFile.joinがSEGVすることがあった\n    バグの修正。((<ruby-core:06326>))\n\n: Thread#pass [bug]\n\n#Sun Oct 16 03:38:07 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * eval.c (load_wait): need not to call rb_thread_schedule()\n#         explicitly.  [ruby-core:04039]\n#\n#       * eval.c (rb_thread_schedule): clear rb_thread_critical.\n#         [ruby-core:04039]\n\n    Thread#passを呼ぶとThread.criticalがクリアされるようになりました。\n    ((<ruby-core:04039>))\n\n: Module#const_missing [bug]\n\n#Thu Sep 29 00:57:35 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * eval.c (ev_const_get), variable.c (rb_const_get_0): retry only when\n#         autoload succeeded.\n#\n#       * variable.c (rb_autoload_load): now return true if autoload\n#         succeeded.  fixed: [ruby-dev:27331]\n\n    const_missingが再定義されていて実行を継続した場合にSEGVする可能性\n    があったバグの修正。((<ruby-dev:27331>))\n\n: IO [bug]\n\n#Wed Sep 28 08:12:18 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * io.c (read_buffered_data): check if reached EOF.  fixed: [ruby-dev:27334]\n\n    Solaris(64bit?)などでEOF後にゴミを読み出すことがあったバグを修正。\n    ((<ruby-dev:27334>))\n\n== 添付ライブラリ\n\n: Ruby/Tk\n\n    * 対応バージョン\n\n       Tcl7.6/Tk4.2, Tcl/Tk8.0 〜 8.4.12, Tcl/Tk8.5a1 〜 a3\n\n       Tcl/Tk 拡張ライブラリについては\n\n          ActiveTcl8.4.12.0 またはそれ以前\n          ( beta 版 は ActiveTcl8.5.0.0b4 またはそれ以前 )\n\n       に含まれるものに対応しています．\n\n       対応している Tcl/Tk 拡張の種類とバージョンとは\n          ext/tk/lib/tkextlib/SUPPPORT_STATUS\n            または\n          <installed lib dir>/tkextlib/SUPPORT_STATUS\n       を参照してください．\n\n       ただし，Tcl/Tk 拡張のバージョンの記述は，対応を行った最新の\n       ものを示していますので，記述された以前のバージョンであっても，\n       極端に古くない限りは対応できているはずです．\n\n       各ライブラリへの対応のための変更履歴は\n          ext/tk/ChangeLog.tkextlib\n       を参照してください．\n\n    * サンプルスクリプト\n\n       : ext/tk/sample/scrollframe.rb [new]\n\n          配置したウィジェットの表示範囲をスクロールすることが\n          できるようなスクロールバー付きフレームウィジェットク\n          ラスのサンプル兼ライブラリ\n\n#Wed Dec  7 01:02:04 2005  Hidetoshi NAGAI  <nagai@ai.kyutech.ac.jp>\n#\n#       * ext/tk/README.macosx-aqua: [new document] tips to avoid the known\n#         bug on platform specific dialogs of Tcl/Tk Aqua on MacOS X.\n\n    MacOS X 上で Aqua 版の Tcl/Tk を用いた際，Aqua 特有のダイアログ表示で\n    フリーズしてしまうという known bug の回避策を記載したドキュメント\n    (ext/tk/README.macosx-aqua) が追加されました．\n\n#Wed Dec  7 01:02:04 2005  Hidetoshi NAGAI  <nagai@ai.kyutech.ac.jp>\n#\n#       * ext/tk/tcltklib.c: fix bug on switching threads and waiting on the\n#         deleted interpreter on vwait and tkwait command.\n\n    削除された Tk インタープリタに対して vwait や tkwait での処理待ちを\n    終了せずに待ち続けてしまう可能性があるというバグを修正しました．\n\n#\n#       * ext/tk/lib/multi-tk.rb: kill the meaningless loop for the deleted Tk\n#         interpreter.\n\n    MultiTkIp で生成した Tk インタープリタを削除した後も，\n    不要となったはずのスレッドが動き続けるバグを修正しました．\n\n#Wed Nov 23 20:59:01 2005  Hidetoshi NAGAI  <nagai@ai.kyutech.ac.jp>\n#\n#       * ext/tk/lib/tk.rb: add Tk.pkgconfig_list and Tk.pkgconfig_get\n#         [Tk8.5 feature].\n#\n#       * ext/tk/lib/tk/text.rb: supports new indices modifiers on a Text\n#         widget [Tk8.5 feature].\n#\n\n    Tcl/Tk8.5a3 への対応のため，Tk.pkgconfig_list および Tk.pkgconfig_get\n    が追加されました．\n    同様に Tcl/Tk8.5a3 への対応のため，テキストウィジェット上のインデック\n    ス指定における新しい modifier である indices に対応しました．\n\n#       * ext/tk/lib/tk/virtevent.rb: add TkNamedVirtualEvent.\n#\n\n    Tcl/Tk 上で名前が規定されている仮想イベントの指定した仮想イベントオブ\n    ジェクトの生成を少し容易にするため，TkNamedVirtualEvent が別名として\n    定義されました．\n\n#       * ext/tk/lib/tk/event.rb: add :data key for virtual events [Tk8.5\n#         feature].\n#\n\n    Tcl/Tk8.5 への対応のため，仮想イベントのイベント情報の一つである data\n    キーの情報を :data で指定できるようになりました．\n\n#Fri Nov 18 17:35:09 2005  Hidetoshi NAGAI  <nagai@ai.kyutech.ac.jp>\n#\n#       * ext/tk/lib/multi-tk.rb: add restriction to access the entried\n#         command table and manipulate other IPs (for reason of security).\n#         Now, a IP object can be controlled by only its master IP or the\n#         default IP.\n#\n#       * ext/tk/lib/remote-tk.rb: add restriction to manipulate.\n#\n#       * ext/tk/tcltklib.c (ip_is_slave_of_p): add TclTkIp#slave_of?(ip)\n#         to check manipulability.\n#\n\n    セキュリティ上の問題を回避するため，MultiTkIp において IP オブジェクト\n    上での操作が許可されるのは，その操作を呼び出した環境 (スレッド) の IP \n    オブジェクトがデフォルトの IP オブジェクト (デフォルトのスレッドグルー\n    プに属するもの．require 'multi-tk' の際に生成される) であるか，操作し\n    ようとしている IP オブジェクトが自らの直接の slave IP であるかの場合に\n    限られるようになりました．\n\n    この修正により，IP オブジェクトの入手に成功することで，ある IP が権限\n    を持たないはずの他の IP を操作できてしまう危険を減少させます．ただし，\n    ObjectSpace にアクセスし，直接に TclTkIp オブジェクトを取り出して操作\n    されることは回避できませんので，ご注意ください。\n\n#       * ext/tk/lib/tk.rb: bug fix on handling of Tcl's namespaces.\n#\n#       * ext/tk/lib/tk/namespace.rb: ditto.\n#\n\n    Tcl/Tk 上の namespace の扱いが正常に行えないというバグを修正しました．\n\n#Wed Nov  2 20:14:53 2005  Hidetoshi NAGAI  <nagai@ai.kyutech.ac.jp>\n#\n#       * ext/tcltklib: merge into ext/tk and remove.\n#\n\n    Ruby のソース上で tcltklib と tk とを Ruby 1.9 系と同様に一体化しました． \n    これにより，tcltklib の生成に失敗した環境で，動くはずのない tk のライ\n    ブラリファイル群がインストールされてしまうことが避けられます．\n    今後はソースに含まれる tcltklib 関連のドキュメントを参照する場合には\n    ext/tk ディレクトリの下を見てください．\n\n#Wed Nov  2 19:03:06 2005  Hidetoshi NAGAI  <nagai@ai.kyutech.ac.jp>\n#\n#       * ext/tcltklib/tcltklib.c (ip_rbUpdateObjCmd,\n#         ip_rb_threadUpdateObjCmd): passed improper flags to DoOneEvent().\n#\n#       * ext/tk/tkutil.c: use rb_obj_respond_to() instead of rb_respond_to().\n#\n\n    update 処理が不適切であるために，一部の環境で menubar のメニュー項目に\n    登録した処理が実行されない場合があるというバグ (ruby-1.8.3 で enbug し\n    ていたもの) を修正しました．\n\n#       * ext/tk/lib/tk.rb, ext/tk/lib/tk/canvas.rb, ext/tk/lib/tk/entry.rb,\n#         ext/tk/lib/tk/frame.rb, ext/tk/lib/tk/image.rb,\n#         ext/tk/lib/tk/itemconfig.rb, ext/tk/lib/tk/labelframe.rb,\n#         ext/tk/lib/tk/listbox.rb, ext/tk/lib/tk/menu.rb,\n#         ext/tk/lib/tk/radiobutton.rb, ext/tk/lib/tk/scale.rb,\n#         ext/tk/lib/tk/spinbox.rb, ext/tk/lib/tk/text.rb,\n#         ext/tk/lib/tk/toplevel.rb: improve conversion of option values.\n#\n#       * ext/tk/lib/tkextlib/*: ditto.\n#\n\n    ウィジェットオブジェクトの属性参照をした場合に属性値として返すオブジェ\n    クトをより適切なものにするように改善しました．その方がより便利であろう\n    と思いますが，一部の属性において，返されるのが文字列であることを期待し\n    てスクリプトを書いている場合には修正が必要になる場合があります．\n\n    例えば bool 値を返す属性については true または false を返すようになり\n    ます．よって，戻り値が \"1\", \"0\" の文字列，あるいは 1, 0 の数値であるこ\n    とを期待している場合には修正が必要となります．本来，Tcl/Tk の真偽値は\n    他にも \"true\", \"false\", \"yes\", \"no\" などもありますので，値の真偽判定は\n    TkComm.bool (TkUtil.bool) メソッドを使って判定することを推奨します．\n\n    また，Tcl/Tk 上の変数が割り当てられている属性において，属性値として\n    Tcl/Tk 上の変数名の文字列ではなく TkVariable オブジェクトが返されるよ\n    うになります．返された値を別のウィジェットの属性値とするなどでそのまま\n    Tk インタープリタに渡している場合や TkVarAccess.new(val) で TkVariable\n    オブジェクト化している場合 (val である TkVariable オブジェクトがそのま\n    ま返されます) には互換性が保たれますが，返された値をそのまま文字列と比\n    較しているような場合には非互換となります．\n\n: REXML [compat]\n\n#Fri Dec  9 23:31:02 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * lib/rexml/encoding.rb (encoding=): give priority to particular\n#         conversion to iconv.  [ruby-core:06520]\n\n    日本語のエンコーディング変換にiconvよりもnkfを優先して使用するようにし\n    ました。((<ruby-list:41325>)), ((<ruby-core:06520>))\n\n: TCPSocket#initialize [bug]\n: TCPServer#initialize [bug]\n\n#Mon Nov 28 18:55:43 2005  NAKAMURA Usaku  <usa@ruby-lang.org>\n#\n#       * ext/socket/socket.c (init_inetsock_internal): remove setting\n#         SO_REUSEADDR option on server socket on Cygwin.\n#         fixed: [ruby-core:6765] ([ ruby-Bugs-2872 ])\n#\n\n    Cygwinの場合のみ、使用中socketに対する再acceptがErrno::EADDRINUSE \n    例外になっていなかった。((<ruby-core:6765>)),((<ruby-bugs:2872>)),((<ruby-dev:27818>))\n\n: optparse\n\n#Tue Nov 22 23:52:06 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * lib/optparse.rb: match incomplete (in current enconding) multibyte\n#         string.  http://inamode6.tokuhirom.dnsalias.org/show/1551\n\n    $KCODEで無効なマルチバイト文字列や、改行を含む文字列を引数に渡\n    すと切り捨てられていたバグの修正。\n\n        require \"optparse\"\n\n        puts \"[#{ARGV * ', '}]\"\n        ARGV.options do |opt|\n          opt.on(\"-n NODE\") {|v| puts v }\n          opt.parse!\n        end\n\n        >ruby -v -Ku a.rb -n 時間\n        ruby 1.8.2 (2004-12-25) [i386-mswin32]\n        [-n, 時間]\n        時\n\n        >ruby -v -Ku a.rb -n 時間\n        ruby 1.8.4 (2005-12-16) [i686-linux]\n        [-n, 時間]\n        時間\n\n: find\n\n#Tue Nov 15 23:46:35 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * lib/find.rb (Find::find): should not ignore symbolic links to\n#         non-existing files.  [ruby-talk:165866]\n\n    broken symbolic link(存在しないファイルに対するシンボリックリン\n    ク)も返すようになりました。((<ruby-talk:165866>))\n\n: Iconv\n\n#Sun Nov  6 23:39:13 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * ext/iconv/iconv.c (Iconv::BrokenLibrary): exception when detected a\n#         bug of underlying library.\n\n    errnoが正しくセットされなかったときの例外を追加(Windowsで\n    iconv.dllの使用するMSVC runtime DLLのバージョンが、ruby本体が使\n    用するものと一致していない場合も含む)\n\n    これはrubyやext/iconv自身のバグではなくて、実行時の環境に問題が\n    ある場合の回避策です。\n\n#: OpenSSL\n#Wed Nov 23 07:26:44 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * ext/openssl/extconf.rb: check for X509V3_EXT_nconf_nid.\n#\n#       * ext/openssl/ossl_x509ext.c (MakeX509ExtFactory): should use\n#         OPENSSL_malloc to allocate X509V3_CTX.\n#\n#       * ext/openssl/ossl_x509ext.c (ossl_x509extfactory_create_ext): use\n#         X509V3_EXT_nconf_nid to avoid SEGV (and to build extensions which\n#         values are placed in separate section).\n#\n#       * test/openssl/test_x509ext.rb: new file.\n#\n# ？\n\n#Tue Nov 01 10:50:17 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * ext/openssl/extconf.rb: should check ERR_peek_last_error().\n#         [ruby-dev:27597]\n#\n#       * ext/openssl/ossl.c (ossl_raise): ditto.\n#\n# ？\n\n#Mon Oct 31 05:49:23 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * ext/openssl/ossl_cipher.c (ossl_cipher_update): input data must\n#         not be empty. [ruby-talk:161220]\n#\n#       * test/openssl/test_cipher.rb: add test for Cipher#update(\"\").\n#\n# ？\n\n#Wed Oct 12 12:52:57 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * ext/openssl/ossl.c (Init_openssl): should call\n#         OpenSSL_add_ssl_algorithms().\n#\n# ？\n\n#: WEBrick\n#Mon Oct 31 05:37:20 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/webrick/httpservlet/cgihandler.rb\n#         (WEBrick::HTTPServlet::CGIHandler#do_GET): the value of Set-Cookie:\n#         header field should be splited into each cookie.  [ruby-Bugs:2199]\n#\n#       * lib/webrick/cookie.rb (WEBrick::Cookie.parse_set_cookie): new method\n#         to parse the value of Set-Cookie: header field.\n#\n#       * test/webrick/test_cookie.rb, test/webrick/test_cgi.rb,\n#         test/webrick/webrick.cgi: add some test for cookie.\n#\n# ？\n\n: WEBrick::Config::FileHandler [compat]\n\n#Fri Oct 14 16:57:32 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/webrick/config.rb (Config::FileHandler): :UserDir should be nil.\n#         It is harmful to permit the access to ~/public_html by default.\n#         suggested by Hiroyuki Iwatsuki.\n\n    WEBrick::Config::FileHandler[:UserDir]のデフォルト値が \n    \"public_html\"からnilになり、意図せずにユーザディレクトリ\n    (/~user/public_html)以下が公開されることがなくなりました。\n    [webrickja:148]\n\n: WEBrick\n\n#Wed Sep 28 15:14:19 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/webrick/cgi.rb (WEBrick::CGI#start): req.query_string should\n#         refer the value of QUERY_STRING. [ruby-list:41186]\n\n    WEBrick::CGI#startでreq.query_stringがオリジナルの\n    QUERY_STRINGを指すように。\n\n: WEBrick::HTTPRequest#query_string= [new]\n\n#Wed Sep 28 15:14:19 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/webrick/httprequest.rb (WEBrick::HTTPRequest#query_string=):\n#         add new method.\n\n    メソッド追加。\n\n: Readline [bug]\n\n#Mon Oct 31 03:19:36 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * ext/readline/readline.c (readline_readline): type check.\n#         [ruby-core:6089]\n\n    IO以外を$stdoutにセットするとreadlineでSEGVしていたバグの修正。((<ruby-core:6089>))\n\n: Syck [bug]\n\n#Tue Dec 20 13:11:59 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * ext/syck/rubyext.c: fixed GC problem (backported HEAD 1.55 - 1.62)\n#         [ruby-dev:27839]\n#\n#       * ext/syck/syck.h (S_FREE): small hack. no need to check if pointer is\n#         NULL or not before S_FREE.\n#\n#       * st.c: uses malloc instead of xmalloc to avoid GC. syck uses st_insert\n#         in gram.c to insert node from rb_syck_bad_anchor_handler into\n#         SyckParser's hash table. if GC occurs in st_insert, it's not under\n#         SyckParser's mark system yet. so RString can be released wrongly.\n#         [ruby-dev:28057]\n\n#Wed Oct 26 09:27:27 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * ext/syck/implicit.c (syck_type_id_to_uri): should return\n#         newly allocated memory. otherwise, type_id will be freed\n#         twice. [ruby-dev:27384] [ruby-core:6385]\n\n    syck のメモリバグを修正。((<ruby-dev:27384>)), ((<ruby-core:6385>)) ((<ruby-dev:27839>))\n\n: irb [bug]\n\n#Tue Oct 25 15:32:00 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * lib/irb.rb (IRB::Irb::eval_input): handle prompts with newlines\n#         in irb auto-indentation mode.  [ruby-core:06358]\n\n    irbのプロンプトに改行文字が含まれているときにオートインデントが\n    ずれるバグの修正。((<ruby-core:06358>))\n\n: RDoc [bug]\n\n#Tue Oct 25 02:12:08 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * lib/rdoc/markup/simple_markup.rb (SM::SimpleMarkup::LABEL_LIST_RE):\n#         reduce redundant backtrack.  [ruby-talk:161771]\n\n    正規表現のバックトラックが深くなりすぎて失敗することがあったバグを修正。\n    ((<ruby-talk:161771>))\n\n: Win32API [bug]\n\n#Mon Oct 24 20:49:45 2005  NAKAMURA Usaku  <usa@ruby-lang.org>\n#\n#       * ext/Win32API/lib/win32/resolv.rb (get_info): support multiple DNS.\n#         fixed: [ruby-list:40058], [ruby-dev:27479]\n#\n\n    DNSを手動で複数設定した場合に正しく動作していなかったバグを修正。\n    ((<ruby-list:40058>)), ((<ruby-dev:27496>))\n\n: Rinda [bug]\n\n#Sun Oct 16 14:30:05 2005  Masatoshi SEKI  <m_seki@mva.biglobe.ne.jp>\n#\n#       * lib/rinda/rinda.rb (Rinda::Tuple#initialize): check remote hash\n#         tuple. fixed: [ruby-list:41227]\n#\n#       * test/rinda/test_rinda.rb: test it.\n\n    Hash全体がdumpできないオブジェクトとして扱われていました。\n    ((<ruby-list:41227>))\n\n: Iconv [compat]\n\n#Sat Oct  8 20:04:40 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * ext/iconv/charset_alias.rb: parse config.charset_alias file directly.\n\n    iconv/charset_alias において、Windows上でもencoding名の別名テー\n    ブルを生成するようにした。\n\n    iconv/charset_alias は、エンコーディング名のプラットフォームに\n    よる違いを吸収するためのユーティリティです。詳細は、((<iconv>)) 参照。\n\n: cgi [bug]\n\n#Fri Oct  7 09:54:00 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * lib/cgi.rb (CGI::Cookie::parse): Cookies from Nokia devices may\n#         not be parsed correctly.  A patch from August Z. Flatby\n#         (augustzf) in [ruby-Patches-2595].  [ruby-core:06183]\n\n    NOKIAの携帯(?)からのCookieを正しくパースできなかった問題の修正。\n    ((<ruby-Patches:2595>)), ((<ruby-core:06183>))\n\n# : xmlrpc\n\n#Wed Oct 05 04:42:38 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/xmlrpc/server.rb (XMLRPC::Server#initialize): should mount the\n#         servlet on \"/\".\n#\n# ？\n\n#Wed Oct 05 03:59:09 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/xmlrpc/server.rb (XMLRPC::Server#serve): delete wrong call\n#         of \"join\".\n#\n# ？\n\n: DL [bug]\n\n#Thu Sep 29 10:26:18 2005  Tanaka Akira  <akr@m17n.org>\n#\n#       * ext/dl/dl.c (rb_io_to_ptr): abolish sizeof(FILE).\n#         [ruby-dev:27317]\n\n    FILEが不完全型としてしか定義されない環境に対応。((<ruby-dev:27317>))\n\n: fileutils [bug]\n\n#Sat Sep 24 08:38:07 2005  Minero Aoki  <aamine@loveruby.net>\n#\n#       * lib/fileutils.rb: fix visibility of FileUtils::NoWrite, Verbose,\n#         DryRun (backported from trunk, rev 1.66). [ruby-core:05954]\n#\n#       * test/fileutils/test_nowrite.rb: test it.\n#\n#       * test/fileutils/test_dryrun.rb: new file.\n#\n#       * test/fileutils/test_verbose.rb: new file.\n\n    FileUtils::NoWrite, Verbose, DryRun のメソッドが呼べなくなっていた\n    のを修正しました。((<ruby-core:05954>))\n\n: extmk, mkmf [compat]\n\n#Sat Oct 22 23:54:07 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * ext/extmk.rb, lib/mkmf.rb (with_config): support --with-extension\n#         options.  [ruby-dev:27449]\n#\n\n    --with-extension オプション追加。((<ruby-dev:27449>))\n\n: mkmf: find_executable() [compat]\n\n#Thu Sep 22 23:36:24 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * lib/mkmf.rb (find_executable0): default path if environment is not\n#         set.  [ruby-dev:27281]\n\n  実行ファイルを探索するときに環境変数 PATH がセットされてい\n  ない場合を考慮しました。((<ruby-dev:27281>))\n\n  PATH がセットされていない場合は、\n    /usr/local/bin:/usr/ucb:/usr/bin:/bin\n  をPATHの代わりに利用してここからコマンドを探索します。\n\n== 拡張ライブラリAPI\n\n: rb_funcall2() [bug]\n\n#Thu Dec  1 00:50:33 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * eval.c (rb_funcall2): allow to call protected methods.\n#         fixed: [ruby-dev:27890]\n\n    拡張ライブラリ(C言語)からRubyメソッドを呼ぶ関数\n    rb_funcall2() が (private メソッドを呼べるのに) protected メソッド\n    を呼べない不具合を修正しました。((<ruby-dev:27890>))\n\n: rb_respond_to() [change]\n\n#Tue Oct 11 21:41:58 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * eval.c (rb_obj_respond_to): check if obj responds to the given\n#         method with the given visibility.  [ruby-dev:27408]\n#\n#       * eval.c (rb_respond_to): conform to Object#respond_to?.  [ruby-dev:27411]\n\n    rb_respond_to()をObject#respond_to?のデフォルトの動作と同じ(public \n    メソッドにしか反応しない)にした。((<ruby-dev:27411>))\n\n: rb_obj_respond_to() [new]\n\n    追加。rb_respond_to() と異なり可視性を指定できる。((<ruby-dev:27408>))\n\n== プラットフォーム固有\n\n: bccwin32 [bug]\n\n#Mon Nov 28 13:08:54 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * win32/win32.c (rb_w32_strerror): remove all CR and LF. (avoid broken\n#         error message on bccwin32 + winsock)\n\n    bccwin32 で winsock のエラーを表示するとき、strerror の返すエラー\n    メッセージの途中に改行が入るために、ruby の出力するエラーメッセー\n    ジが壊れていたのを修正。\n\n: cygwin [bug]\n\n#Sat Nov 26 19:57:45 2005  WATANABE Hirofumi  <eban@ruby-lang.org>\n#\n#       * dln.c (conv_to_posix_path): should initialize posix.\n\n    cygwin環境で、RUBYLIB環境変数が空だと、$LOAD_PATHにゴミが入る。\n    ((<ruby-dev:27830>))\n\n: BeOS [bug]\n\n#Fri Nov 11 07:44:18 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * configure.in: undef HAVE_LINK on BeOS. (link(2) always returns\n#         EINVAL, and this causes error in test/fileutils.)\n#\n#       * file.c: overwride chown(2) and fchown(2) on BeOS. (these functions\n#         should not change user/group id if -1 is passed as corresponding\n#         argument, and this causes error in test/fileutils too)\n#         [ruby-dev:27672]\n#\n#       * file.c (rb_file_s_link): checks HAVE_LINK.\n\n    BeOS でのいくつかのテスト失敗に対処。link(2) が定義されていながら\n    常に失敗するので test/fileutils が誤動作していたのに対処。BeOS に\n    は link(2) は存在しないと見なすようにした。chown、fchown に id と\n    して -1 を渡した場合は、POSIX 的には id を変更すべきでないが、BeOS \n    では (unsigned) -1 に変更してしまっていた。これに対処。((<ruby-dev:27672>))\n\n: Sun [bug]\n\n#Mon Oct 31 17:34:46 2005  Yukihiro Matsumoto  <matz@ruby-lang.org>\n#\n#       * configure.in: use proper option for Sun linker. A patch from\n#         Shinya Kuwamura <kuwa@labs.fujitsu.com>.  [ruby-dev:27603]\n#\n\n    Sunのコンパイラで拡張ライブラリをリンクできなかった問題の修正。((<ruby-dev:27603>))\n\n: IA64 [bug]\n\n#Wed Oct 26 09:04:51 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * ruby.h (Qfalse, Qtrue, Qnil, Qundef): make sure these immediate\n#         values have VALUE type. there is an environment where sizeof(VALUE)\n#         != sizeof(int) like IA64. if 32bit integer (Qtrue) is passed to ANYARGS\n#         and received by 64bit integer (VALUE), upper bits may have garbage value.\n#         [ruby-dev:27513]\n\n    IA64 で、Qtrue Qfalse Qnil が 64bit 整数でなく 32bit 整数として定\n    義されていたため、ANYARGS を通して Qtrue を渡し、VALUE で受けると、\n    サイズの違いから値が壊れることのあった問題を修正。((<ruby-dev:27513>))\n\n# == 不要\n#\n#Mon Nov 28 09:21:49 2005  Hirokazu Yamamoto  <ocean@m2.ccsnet.ne.jp>\n#\n#       * lib/mkmf.rb (create_makefile): should not change sodir with\n#         dir.gsub!. (bccwin32 failed to install third party exntesions)\n#         [ruby-dev:27834]\n#\n#なんとなく不要かな？\n#\n#    EXTOUT を使わず、extconf.rb で外部拡張ライブラリをインストールする\n#    時に、make ターゲット名が意図せず改変されていたため、bccwin32 で拡\n#    張ライブラリがインストールできなくなっていたのを修正。\n\n#Sun Nov 27 00:56:13 2005  NAKAMURA, Hiroshi  <nahi@ruby-lang.org>\n#\n#       * lib/wsdl/xmlSchema/complexContent.rb: missing\n#         ComplexContent#elementformdefault method.\n#\n# ？\n\n#Tue Nov  8 15:32:27 2005  GOTOU Yuuzou  <gotoyuzo@notwork.org>\n#\n#       * lib/drb/ssl.rb (DRb::SSLConfig#accept): fixed typo.\n#         [ruby-dev:27560] [ruby-core:4627]\n#\n# ？\n\n#Sat Oct  8 20:04:40 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * eval.c (Init_Binding): add Binding#dup method.  [yarv-dev:666]\n#\n# メソッドの追加。不要。\n\n#Sat Oct  8 20:04:40 2005  Nobuyoshi Nakada  <nobu@ruby-lang.org>\n#\n#       * parse.y (rb_parser_malloc, rb_parser_free): manage parser stack on\n#         heap.  [ruby-list:41199]\n#\n# Bison 2.0対応",
          "snippets": []
        }
      ],
      "related_entries": []
    },
    {
      "signature": "Ruby用語集",
      "score": 253,
      "metadata": {
        "type": "document",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "Ruby用語集 \nA　B　C　D　E　F　G　I　J　M　N　O　R　S　Y",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/doc/glossary.html",
          "description": "Ruby用語集 \nA　B　C　D　E　F　G　I　J　M　N　O　R　S　Y\n\na　ka　sa　ta　na　ha　ma　ya　ra　wa\n\n=== 記号・数字\n: %記法\n: % notation\n  「%」記号で始まる多種多様なリテラル記法の総称。\n\n  参照：d:spec/literal#percent\n\n: 0 オリジン\n: zero-based\n  番号が 0 から始まること。\n\n  例えば、\n  Array や Vector、Matrix などの要素の番号、\n  String における文字の位置、\n  といったものは 0 オリジンである。\n\n: 1 オリジン\n: one-based\n  番号が 1 から始まること。\n\n  例えば、\n  エラーメッセージにおける行番号、\n  正規表現検索におけるキャプチャーの番号、\n  Ruby 2.7 で導入された番号指定ブロックパラメーター、\n  といったものは 1 オリジンである。\n\n===[a:A] A\n\n: AWK\n  テキスト処理に適したプログラミング言語。\n  名称は、開発者である Aho（エイホ）、Weinberger（ワインバーガー）、Kernighan（カーニハン）\n  の頭文字を取ったもので、「オーク」と読む。\n\n  AWK のプログラムは、文字列パターンとそれに対応する処理（アクション）の組を必要な数だけ\n  記述する。\n  テキストデータはレコードセパレーター（改行など）で区切られたレコードに分けられ、レコードごと\n  にパターンマッチングが行われる。\n  パターンマッチングの前に実行する前処理と後に実行する後処理も記述できる。\n\n===[a:B] B\n\n: Bignum\n  Ruby 2.3 系までは、即値で実装されない絶対値の大きな整数オブジェクトが属す\n  クラスだった。Ruby 2.4 で Fixnum と共に Integer に一本化された。\n  このとき Bignum は形式的には残されたが単なる Integer のエイリアスとなった。\n\n: blade\n  Ruby の各種メーリングリストのアーカイブ。\n\n  http://blade.nagaokaut.ac.jp/ruby/\n\n: bundled gem\n  標準添付ライブラリーの gem のうち、アンインストールできるもの。\n\n  → default gem、標準添付ライブラリー\n\n: Bundler\n  特定の Ruby アプリケーションで使用する gem とそのバージョンを Gemfile\n  および Gemfile.lock という\n  ファイルで管理するツール。gem を新規作成するときの雛形を生成する機能もある。\n  コマンド名は bundle。\n\n  Bundler 自体も gem として配布されているが、Ruby 2.6 で標準添付\n  ライブラリーに追加された。\n\n===[a:C] C\n\n: Coerce\n  異なるクラスの値同士の演算を効率よく実装するための手法の一つ。\n\n  例えば新しい数値クラス N を定義し、Integer と N の演算を可能にしたいとする。\n  Integer と N の加算を行うと、Integer 側では相手が未知のため、自身を引数に\n  まず相手側の N#coerce を呼ぶ。N#coerce では self と引数を、既に加算が定義された\n  オブジェクトのペアに変換して返す。Integer 側ではそれらの加算を行う。\n  この方法では、N#coerce さえ適切に定義しておけば、Integer 側を変更せずに N という\n  数値クラスを定義できる。\n\n  参照：Numeric#coerce\n\n: CRuby\n  Ruby の処理系の一つ。C で実装されているのでこの名がある。\n\n  Matz により開発が始められた。\n  Matz Ruby とか MRI（Matz’ Ruby Implementation）とも呼ばれる。\n\n: Crystal\n  Ruby によく似たオブジェクト指向プログラミング言語。\n  型推論を持った静的型付け言語であり、処理系はコンパイラーである。\n\n  https://ja.crystal-lang.org/\n\n: CSI 方式\n  CSI は Code Set Independent の頭字語。\n  プログラミング言語の処理系が文字列を扱う際のエンコーディングに関する方針の一つ。\n  与えられた文字列を単一の内部エンコーデイングに変換するのではなく、さまざまな\n  エンコーディングを対等に扱う。そのため、文字列自身がエンコーディングの情報を\n  持っている。\n\n  Ruby はバージョン 1.9 以降、CSI 方式である。それまでの Ruby では、文字列は\n  エンコーディング情報をもたないバイト列であった。\n\n  →エンコーディング\n\n===[a:D] D\n\n: default gem\n  標準添付ライブラリーの gem のうち、アンインストールできないもの。\n\n  → bundled gem、標準添付ライブラリー\n\n: dRuby\n  標準添付ライブラリー drb によって提供される分散オブジェクトプログラミングの\n  ための仕組み。\n  何らかの通信手段（TCPSocket や UNIXSocket など）を介して異なるプロセスやマシンの\n  間でオブジェクトにアクセスできる。\n\n===[a:E] E\n\n: ENV\n  環境変数にアクセスするためのオブジェクト。\n  Hash に似たインターフェースを持つ。キーも値も文字列である。\n  ENV で環境変数を変更すると Ruby の子プロセスにも引き継がれる。\n\n  参照：ENV\n\n: eRuby\n  テンプレートシステムおよびそのフォーマットの名称。\n  任意のテキストに Ruby のコードを埋め込むことができる。\n  名称は embedded Ruby から。\n\n  テンプレートファイルの標準の拡張子は .erb。\n\n  標準添付ライブラリー erb で提供される ERB がテンプレートエンジン\n  となる。これ以外にもサードパーティーのテンプレートエンジンが複数ある。\n\n: European Ruby Conference\n  https://euruko.org/\n\n===[a:F] F\n\n: FFI: Foreign function interface\n\n  他言語関数インターフェース。\n  二つのプログラミング言語間で相手の関数を呼び出したりするための仕組み。\n\n  Ruby ではライブラリーの C 拡張部分の機能を呼び出すのに使われたりする。\n  相手側は、FFI に対応していれば C である必要はなく、例えば Rust で\n  書くこともできる。\n\n: Fixnum\n  Ruby 2.3 系までは、整数は即値で実装されるものが Finxnum のインスタンスであり、\n  そうでないものは Bignum のインスタンスであった。Integer はこれらをまとめる\n  抽象クラスだった。\n  Ruby 2.4 でこれらが Integer に統合され、Fixnum と Bignum は Integer の\n  単なるエイリアスとなった。\n\n: flonum\n  CRuby において、Float が表す浮動小数点数のうち、即値として実装されているもの。\n\n  演算が高速で省メモリーという特長がある。\n\n===[a:G] G\n\n: GC\n  ＝ガーベジコレクション\n\n: gem\n  RubyGems の仕組みでパッケージされたライブラリー。\n\n  また、RubyGems のコマンドの名前でもある。\n\n  参照：rubygems\n\n===[a:I] I\n\n: irb\n  組込みの対話型 Ruby 実行環境およびそのコマンド名。\n\n  irb コマンドで起動し、Ruby の式を入力すればその場で評価して結果を表示する。\n  名称は interactive Ruby から。\n\n  参照：irb\n\n: is-a 関係\n  Ruby では Object#is_a? で確認できる関係。\n\n  たとえば、配列オブジェクトは Array クラスや Enumerable モジュール、Object クラス\n  などに対して is_a? の関係にある。\n\n: ISO/IEC 30170\n  JIS X 3017 の原規格。\n\n===[a:J] J\n\n: JIS X 3017\n  日本工業規格「プログラム言語 Ruby」。ISO/IEC 30170 を JIS 化したもの。\n  2011 年制定、2013 年改正。\n\n: JRuby\n  Java で実装された Ruby の処理系。\n  Ruby スクリプトから Java のクラスを利用したり、Java プログラムから Ruby を\n  呼ぶなど、Ruby と Java が容易に連携できるという特長がある。\n\n  https://www.jruby.org/\n\n===[a:M] M\n\n: Matz\n  Ruby の作者、まつもとゆきひろ（松本行弘）氏。\n\n: Matz Ruby\n  ＝CRuby\n\n: mix-in\n  ＝ミックスイン\n\n: MRI: Matz’ Ruby Implementation\n  ＝CRuby\n\n: mruby\n  組込み向けの Ruby 仕様および処理系。省メモリー性など、機器組み込みや\n  アプリケーションソフト組込みに適した特徴を持つ。\n\n  https://mruby.org/\n\n: main\n  トップレベルにおける self。Object クラスのインスタンスである。\n\n===[a:N] N\n\n: nil\n  NilClass の唯一のインスタンス。また、そのオブジェクトを指す擬似変数の名前。\n  論理値としては偽である。\n\n  Ruby の仕様上はただのオブジェクトの一つであり、特定の意味付けをもたないが、\n  しばしば「何かが無い」ことや「何かが失敗した」ことなどを表すのに用いられる。\n\n===[a:O] O\n\n: Opal\n  Ruby のコードを JavaScript に変換するソフトウェア。\n\n  https://opalrb.com/\n\n  ウェブ上で Ruby コードが試せる TryRuby は、バージョン 4 で Opal を\n  採用し、ブラウザー上でコードを動作させるようになった。\n\n  https://try.ruby-lang.org/\n\n===[a:R] R\n\n: Rake\n  Ruby 標準添付のビルドツール。\n  Rakefile というファイルにタスクを記述する。\n  コマンド名は rake。\n\n  Rakefile を記述する言語はドメイン特化言語（DSL）であるが、いわゆる\n  内部 DSL であり、Ruby のコードである。\n\n  参照：rake\n\n: rbenv\n  複数バージョンの Ruby をインストールし、切り替えて使うための\n  ツールの一つ。Linux、macOS などで動作する。\n\n  https://github.com/rbenv/rbenv\n\n: RD（Ruby Document format）\n  Ruby スクリプト中に記述することを念頭に作られたドキュメントフォーマット。\n\n: RDoc\n  Ruby スクリプトからそのスクリプトのドキュメントを生成するシステム。\n\n  クラス、モジュール、メソッドの情報を抜き出し、またそこに所定の方法で記述された\n  コメントを抽出して処理し、合わせてドキュメントの HTML を生成する。\n\n  参照：rdoc\n\n: refinement\n  既存のクラスやモジュールを特定のスコープでのみ改変する仕組み。\n\n  参照：Module#refine、Module#using、main.using\n\n: Ruby Central\n  Rubyのサポートと世界の Ruby コミュニティーの支援を専門とする非営利組織。\n  RubyConf（International Ruby Conference）と RailsConf を開催している。\n\n  https://rubycentral.org/\n\n: RubyConf\n  2001 年から年次開催されている Ruby の祭典。\n\n  https://www.rubyconf.org/\n\n: RubyGems\n  gem のインストール、アンインストール、アップグレードなどの管理を行う\n  ライブラリーであり、ツール。\n  Ruby 1.8 までは外部ライブラリーであったが、Ruby 1.9 で取り込まれた。\n\n  参照：rubygems\n\n: RubyGems.org\n  gem のホスティングサービス。\n\n  https://rubygems.org/\n\n: Rubyist\n  Ruby 使用者。\n\n: Rubyist Magazine\n  日本 Ruby の会が 2004 年から不定期に刊行する Rubyist のためのウェブマガジン。\n  愛称「るびま」。\n\n  https://magazine.rubyist.net/\n\n: RubyKaigi\n  2006 年に始まった日本で年次開催されるイベント。\n\n  https://rubykaigi.org/\n\n: Ruby アソシエーション\n  Ruby の普及と発展のための日本の非営利団体（一般財団法人）。2011 年設立。\n\n  https://www.ruby.or.jp/ja/\n\n: Ruby ビジネス・コモンズ\n  https://www.facebook.com/rubybizcommons\n\n===[a:S] S\n\n: safe navigation operator\n  ＝安全参照演算子\n\n: self\n  現在のコンテキストにおいて、暗黙のレシーバーとなるオブジェクト。\n\n  また、そのオブジェクトを指す擬似変数の名前。\n\n: shebang\n  シバンまたはシェバンと読む。\n  一般に Unix 系 OS のスクリプトにおいて、第 1 行に配置される #! で始まる行をいう。\n  スクリプトを処理すべき処理系やそのコマンドラインオプションを指定するのに\n  用いられる。\n\n  Ruby スクリプトでのコマンドラインオプションの指定は非 Unix 系の OS でも\n  有効である。\n\n===[a:Y] Y\n\n: YARD\n  Ruby 用ドキュメント生成ツール。\n\n  https://yardoc.org/\n\n\n===[a:a] あ\n\n: アクセッサー\n: accessor\n  オブジェクトの特定のインスタンス変数について、その値を読み出すメソッドと\n  その値を設定するメソッドの総称。\n\n  メソッド名はインスタンス変数の識別子と同じものを使う習慣がある。\n  例えば @foo の値を読み出すメソッドは foo とし、@foo に値を設定する\n  メソッドは foo= とする。\n\n: 浅い複製\n: shallow copy\n  配列を dup メソッドで複製したとき、配列の要素オブジェクトまでは複製されない。\n  ハッシュも同様である。このような複製をいう。\n\n  ↔深い複製\n\n: アリティー\n: arity\n  メソッドやそれをオブジェクト化した Method オブジェクトの仮引数の数、および\n  ブロックやそれをオブジェクト化した Proc オブジェクトの\n  ブロックパラメーターの数。\n\n  Method#arity や Proc#arity で得ることができる。\n\n  引数などの数が 1 個、2 個、3 個であることをそれぞれ unary、binary、\n  ternary と呼ぶことから作られた語。\n\n: アンコメント\n: uncomment\n  コメントアウトを解除すること。非コメント化。\n\n  →コメントアウト\n\n: 安全参照演算子\n: safe navigation operator\n  メソッド呼び出し構文においてレシーバーとメソッド名を結ぶ演算子の一つ「&.」。\n  「.」と違う点は、レシーバーが nil のとき引数の評価もメソッド呼び出しも行わずに nil を\n  返す、ということだけである。\n  Ruby 2.3 で導入された。\n  俗に「ぼっち演算子」とも呼ばれる。\n\n: 安定ソート\n: stable sort\n  同順位となる二つの要素の順序がソート前後で保たれるソート。\n\n  Enumerable#sort などのメソッドは非安定ソート（unstable sort）である。\n\n: 委譲\n: delegation\n  あるオブジェクトのメソッドの実際の処理を他のオブジェクトに\n  ゆだねること。\n\n  例えばハッシュ的なインターフェースを持つクラスの設計では、インスタンス変数\n  に保持したハッシュに呼び出しを丸投げすることで実装が簡素化できる。\n\n  標準添付ライブラリーには、委譲を支援する delegate や\n  forwardable がある。\n\n: イテレーター\n: iterator\n  一般には繰り返し（反復）を抽象化する仕組み全般を指す広い概念であるが、\n  Ruby 用語としては、もっぱら繰り返し処理のためのブロック付きメソッドの\n  ことを指す。\n\n  繰り返しのためのブロック付きメソッドでは、一回のメソッド呼び出しに\n  よって、メソッドがブロックを繰り返し実行する。メソッド自体が反復を\n  行うので内部イテレーターに分類される。\n\n  一方、Fiber を使って繰り返し処理を行うオブジェクトを作る\n  ことができるが、こちらは一回のメソッド呼び出しで一回分の反復を行う\n  ので外部イテレーターに分類される。\n\n: インスタンス\n: instance\n  あるクラスに属すオブジェクトをそのクラスのインスタンスという。\n\n  あるオブジェクトがあるクラスのインスタンスであるかどうかは Object#instance_of? で\n  確認できる。\n\n  なお、あるクラスの子孫クラスのインスタンスをも元のクラスの\n  インスタンスと呼ぶ場合があるので注意が必要である。\n\n: インスタンス変数\n: instance variable\n  オブジェクト固有の変数。識別子の前に @ が一つだけ付いた形式の名前を持つ。\n\n  同じクラスのインスタンスの同名の変数でもインスタンスが異なれば別の変数である。\n\n  メソッド定義の中など、そのオブジェクトが self となるような場所では\n  参照・代入が可能である。そうでない場所では、メソッドを使って\n  間接的に参照・代入できる。\n\n  →アクセッサー\n\n  参照：d:spec/variables#instance\n\n: インスタンスメソッド\n: instance method\n  クラスやモジュールに定義されるメソッドは、定義方法により、そのクラスや\n  モジュール自身をレシーバーとするものと、インスタンスをレシーバーとする\n  ものに分けられる。\n  前者をクラスメソッド、後者をインスタンスメソッドと呼ぶ。\n  （ここでいうインスタンスは、当該のクラスやその子孫クラス、あるいは当該の\n  モジュールを include したクラスやその子孫クラスのインスタンスを指す）\n\n  特異メソッドは特異クラスから見ればインスタンスメソッドである。\n  クラスメソッドはクラス（やモジュール）の特異メソッドであるから、\n  そのクラス（やモジュール）の特異クラスから見ればインスタンスメソッドと言える。\n\n  つまり、インスタンスメソッドやクラスメソッドという用語は、何かクラスや\n  モジュールを念頭に置き、そこから見た用語である。\n\n: 宇宙船演算子\n: spaceship operator\n  Comparable モジュールが利用する、二つのオブジェクトの順序関係を表す\n  演算子 <=> の俗称。\n\n: 埋め込みドキュメント\n: embedded document\n  ソースコード中の =begin 行から =end 行まで。コメントとみなされ実行されない。\n\n  その名の通り、この部分にコードのドキュメントを記述することが\n  期待されている。\n\n  参照：d:spec/lexical#embed\n\n: エイリアス\n: alias\n  ＝別名\n\n: エンコーディング\n: encoding\n  何らかの情報を何らかの記号体系で表現することを指す非常に広い概念だが、\n  Ruby で単に「エンコーディング」と言ったときには文字列のエンコーディングを\n  指すことが多い。\n  これは文字の並びをどのようにバイト列で表現するか、という方法のこと。\n  たとえばおなじ「あ」という文字でも、UTF-8 と UTF-16LE と Shift_JIS と\n  では全く異なるバイト列になる。これがエンコーディングの違いである。\n\n  Ruby の文字列オブジェクトはエンコーディング情報を持つ。つまり自身が\n  何のエンコーディングであるかを知っている。\n  エンコーディング情報は Encoding オブジェクトで表される。\n\n  スクリプトも何らかのエンコーディングに基づいて記述されているが、これは\n  スクリプトエンコーディングと呼ばれる。\n\n  ファイルなど外部とテキストのやり取りをする際、エンコーディングを指定する\n  ことができる。\n\n  →文字コード\n\n: 演算子\n: operator\n  演算子はプログラムの構文上の要素で、項とともに式を構成する。\n\n  Ruby の演算子には多様なものが含まれる。\n  「x + y」の「+」のような算術演算子や「x == y」の「==」のような\n  関係演算子は、メソッド呼び出しの構文糖衣であり、再定義もできる。\n  「x and y」「x || y」の and や || はメソッド呼び出しとは関係が\n  なく、再定義もできない。\n  代入式「n = 1」における「=」は代入演算子である。\n  「str.size」「user&.name」といったメソッド呼び出しにおける\n  「.」「&.」も演算子である。\n  「[*0..9]」におけるいわゆる splat 展開の * や、\n  Proc オブジェクトをブロックとして渡す「strs.map(&:length)」に\n  おける & も演算子である。\n  defined? のように、見た目がメソッドのような演算子もある。\n\n  参照：spec/operator\n\n: 汚染\n: taint\n  Ruby のオブジェクトは「汚染されているか否か」という状態を持ち、\n  Ruby のセキュリティー機構はこの汚染状態によってメソッド呼び出し等に\n  制限を課していた。\n  しかし、Ruby 2.7 でこの機構は実質的に無効化された。\n\n  参照：spec/safelevel\n\n: 鬼雲\n: Onigmo\n  Ruby 2.0 以降採用されている正規表現エンジン。鬼車のフォーク。\n\n  参照：spec/regexp\n\n: 鬼車\n: Oniguruma\n  Ruby 1.9.x で採用されていた正規表現エンジン。\n\n: オーバーライド\n: override\n  Ruby では上位クラスや include したモジュールで定義されているメソッドを\n  再定義することを「オーバーライドする」という。\n  オーバーライドしたメソッドからは super によって元のメソッドを呼び出すことができる。\n\n: オブジェクト\n: object\n  Ruby ではすべてのデータはオブジェクトである。\n  すべてのオブジェクトは何らかのクラスに属し、メソッド呼び出しに\n  反応する。\n\n  しかし、メソッド、ブロック、変数・定数、式、演算子、識別子、コンテキスト、\n  スコープ、名前空間、プログラム（スクリプト）といったものは\n  オブジェクトではない。\n\n  ただし、メソッド、ブロックはそれぞれオブジェクト化できる。\n\n  なお、「String オブジェクト」のような、クラス名＋「オブジェクト」の\n  形の表現は、そのクラスのインスタンスを指す。\n\n: オブジェクト ID\n: object id\n  Ruby ではすべてのオブジェクトは自身を一意に特定する整数を持つ。\n  これをオブジェクト ID と呼ぶ。\n  Object#object_id メソッドで得られる。\n  オブジェクトが同一であることとオブジェクト ID が一致していることは等価である。\n\n: オブジェクト空間\n: object space\n  オブジェクトが漂っている仮想的な空間。処理系の実装に関する概念ではなく、\n  そういうメモリー空間があるわけではない。\n  即値で実装されたオブジェクトも、概念的にはオブジェクト空間内に存在する。\n\n  オブジェクト空間に関する情報は ObjectSpace クラスで得ることが\n  できる。\n\n: オープンクラス\n: open class\n  組込みのクラスが再定義可能であること。\n  Ruby は String や Integer といった基本的なクラスも自由に改変できる。\n\n  しかし、既存のクラスやモジュールをむやみに改変することは思わぬバグを\n  生みやすい。\n  そのため、改変の効果を局所化する refinement という機構がある。\n\n  → refinement\n\n: オペランド\n: operand\n  演算子式において演算の対象となる式。式 a + b * c において、+ の\n  オペランドは a と b * c の二つである。\n\n  被演算子ともいう。\n\n  Ruby の演算子式の中にはメソッド呼び出しに還元されるものがあり、その場合、\n  オペランドはメソッドのレシーバーや実引数となる。\n\n  演算子はオペランドの数によって単項演算子、二項演算子、三項演算子に\n  分類される。\n\n: 親クラス\n  ＝スーパークラス\n\n===[a:ka] か\n\n: 下位クラス\n: subclass\n  ＝サブクラス\n\n: 返り値\n: return value\n  メソッドが呼び出し側に返すオブジェクトのこと。戻り値ともいう。\n\n  また、式の評価値のことを式の返り値と呼ぶこともある。\n\n: 可視性（メソッドの）\n: method visibility\n  メソッドの呼び出し可能性。Ruby のメソッド可視性は public、private、protected の\n  三種類があるが、Java における private、protected とは全く異なるので注意が\n  必要である。\n\n  参照：d:spec/def#limit\n\n: 型\n: type\n  →データ型\n\n: ガーベジコレクション\n: garbage collection\n  オブジェクトがどこからも参照されなくなったとき、そのオブジェクトが占める\n  メモリー領域はガーベジ、つまりゴミと呼ばれる。\n  ガーベジがたまると、やがて新たなオブジェクトが生成できなくなってしまう。\n  そうなる前にゴミを集めてメモリーを解放してやるのがガーベジコレクションである。\n  GC と略す。\n\n  GC モジュールでガーベジコレクションが制御できる。\n\n: 可変長引数\n: variadic\n  メソッドに与えられる実引数の数が固定でないこと。\n  「可変個引数」と呼ぶほうが内容に合っているが、「可変長引数」という用語の\n  ほうが普及している。\n\n  英語の variadic は形容詞である。\n\n: 空\n: empty\n  Array や Hash、Struct のような要素を持つクラスでは、要素が無いことを\n  「空（から）」と呼ぶ。\n\n  また、String クラスでは、長さが 0 のインスタンスを「空文字列」と呼ぶ。\n\n  空であることを確認するメソッドの名前にしばしば empty? が使われる。\n\n: 仮引数\n: formal argument\n  メソッド定義において、メソッド呼び出しで与えられた実引数を\n  受け取る一種の変数。\n\n  「引数」は「いんすう」よりも「ひきすう」と読まれることが多い。\n\n  スコープはローカル変数と同じであり、再代入もできる。\n  仮引数に代入を行っても呼び出し側には影響を与えない。\n\n  →実引数\n\n: 環境変数\n: environment variable\n  OS がその上で動作するプロセスに対して提供する文字列型のデータ共有機能。\n  名前と値の組からなる。\n\n  Ruby では ENV というハッシュに似たオブジェクトで環境変数の\n  参照・変更・追加ができる。\n\n  → ENV\n\n: 関数\n: function\n  Ruby には文法上、関数という概念は無い。\n  ただし、①レシーバーの状態に依らずに動作し、かつ②レシーバーを変更しないメソッドを「関数的」と呼ぶことがある。\n\n  →モジュール関数\n\n: キーワード引数\n: keyword argument\n  記述順ではなくキーワードによって特定される引数。\n\n: 組み込みクラス\n: built-in class\n  Array、String など Ruby 処理系に組み込まれているクラス。\n  ライブラリーを require することなく使うことができる。\n\n  参照：_builtin\n\n: 組み込みライブラリー\n: built-in library\n  Ruby 本体に組み込まれているライブラリー。require せずに使うことができる。\n\n: クラス\n: class\n  オブジェクトを生み出し、そのオブジェクトの振る舞いを規定するもの。\n  Ruby ではクラスも Class クラスのオブジェクトである。\n\n  Class クラスは Module クラスの下位クラスであり、モジュールとしての性質も\n  おおむね受け継いでいる。ただし、一部のメソッドが未定義にされているうえ、\n  他のクラスやモジュールに include するといったこともできない。\n  つまり、Module と Class の間にはリスコフの置換原則は成り立っていない。\n\n: クラスインスタンス変数\n: class instance variable\n  クラスもオブジェクトであるから、当然インスタンス変数を持ちうる。\n  これがクラスインスタンス変数である。\n\n  クラス変数とは異なる。\n\n: クラス変数\n: class variable\n  識別子の前に「@@」が付いた形式の名前を持つ変数。\n\n  クラスに属し、サブクラスや include したモジュールと共有される。\n\n  当該のクラスやそのサブクラス、あるいは include したモジュール\n  の定義の中で参照・代入できるほか、インスタンスメソッドの定義中\n  でも参照・代入できる。\n\n  クラスインスタンス変数とは異なる。\n\n  参照：d:spec/variables#class\n\n: クラス名\n: class name\n  クラスの名前。クラスを定義すると、同名の定数が定義され、そのクラスが\n  代入される。\n\n: クラスメソッド\n: class method\n  クラスの特異メソッドをそのクラスのクラスメソッドと呼ぶ。\n\n  →特異メソッド\n\n: グローバル変数\n: global variable\n  グローバルスコープを持つ変数。\n  $ で始まる名前を持つ。\n\n  ただし、特殊変数（すべて名前が $ で始まる）の\n  中にはグローバルスコープでないものもある。\n\n  参照：d:spec/variables#global\n\n: 継承\n: inheritance\n  クラスの機能（メソッドなど）が下位クラスに受け継がれること。\n  Ruby のクラスはただ一つのスーパークラスしか持ち得ないため、とくに\n  「単一継承」と呼ばれる。\n  継承とは別に、モジュールの機能を引き継ぐミックスインという仕組みがある。\n\n  クラス C2 がクラス C1 の下位クラスであるとき、「C2 は C1 を継承している」と\n  いう。クラス間のこのような関係を「継承関係」と呼ぶ。\n\n  →サブクラス、ミックスイン\n\n: ゲッター\n: getter\n  インスタンス変数の値を取り出すメソッド。\n  インスタンス変数名から「@」を削除したメソッド名とする習慣がある。\n\n  →アクセッサー\n\n: 子クラス\n: subclass\n  ＝サブクラス\n\n: コーディング規約\n: coding convention\n  プログラムの書き方についての取り決め。\n  複数人での開発ではコーディング規約を設けることが多い。\n  スペースや改行の入れ方、1 行の最大文字数、コメントの記法、プログラム要素の配列順、といった\n  見た目に関すること、変数・メソッドなどの命名方針、ファイルパスなど。\n\n: コメントアウト\n: comment out\n  コメント化。プログラムの一部分を（コメント化記号の挿入により）コメントにすること。\n  不要になった処理を記録して残しておきたい場合や、デバッグ目的などで行われる。\n  元に戻すことはアンコメントと呼ばれる。\n\n  →アンコメント\n\n: コレクション\n: collection\n  配列、ハッシュ、集合（Set オブジェクト）など、\n  要素の集まりを表すオブジェクト。コンテナーとも呼ばれる。\n\n: コロン記法（ハッシュの）\n  ハッシュ式においてキーがシンボルである場合に、キーと値のペアを key: value の\n  形式で表す記法。ロケット演算子による記法と混在させることもできる。\n\n  参照：d:spec/literal#hash\n\n  →ロケット演算子\n\n: コンテナー\n: container\n  ＝コレクション\n\n===[a:sa] さ\n\n: 再定義\n: redefinition\n  既に定義されているメソッドなどを改めて定義すること。\n\n: サブクラス\n: subclass\n  クラス A から継承によって新しいクラス B が作られたとき、\n  B を A のサブクラスと呼ぶ。\n  「子クラス」「下位クラス」「派生クラス」と呼ぶこともある。\n\n  サブクラスのサブクラスなど継承の連鎖の先のクラスをすべて含めて「サブクラス」と\n  呼ぶ場合もあるが、この場合は「子孫クラス」という用語が使える。\n\n  ↔スーパークラス\n\n  →継承\n\n: 式展開\n: string interpolation\n  文字列などのリテラルの中に決まった書式で式を記述すると、式を評価した値が\n  文字列化されて埋め込まれること。\n\n  文字列リテラル、ヒアドキュメント、シンボルリテラル、文字列配列リテラル、\n  シンボル配列リテラル、正規表現リテラルなどで使える。\n\n  参照：spec/literal\n\n: 識別子\n: identifier\n  プログラム中に書かれる変数・定数・メソッド・クラス・モジュールなどの名前。\n\n: 自己代入\n: self assignment\n  代入の一種で、他の値との演算結果を代入するもの。\n  自己代入式 a += 1 における += のように、演算子と = をつなげた形の\n  自己代入演算子を使う。\n  変数・定数などへの代入のほか、代入メソッドでも自己代入が書ける。\n\n: 実引数\n: actual argument\n  メソッド呼び出しにおいてメソッドに与えられる値。\n\n  「引数」は「いんすう」よりも「ひきすう」と読まれることが多い。\n\n  実引数には式を与える。すべての式が評価されてからメソッドが呼び出される。\n\n  →仮引数\n\n: 集合オブジェクト\n  Set クラスのインスタンス。\n\n: 述語メソッド\n: predicate method\n  返り値を真偽値として用いるためのメソッド。\n  メソッド名の末尾に ? を付ける習慣がある。\n\n  true/false を返すとは限らず、真である場合に、true 以外のオブジェクトを\n  返すことで、単なる真偽を越えた情報を与えるものもある。\n\n: 上位クラス\n: superclass\n  ＝スーパークラス\n\n: 条件演算子\n: conditional operator\n  条件式・真式・偽式の三つの項を取り、条件式の値が真のときは真式を評価して\n  その値を返し、条件式の値が偽のときは偽式を評価してその値を返す。\n\n  条件式 ? 真式 : 偽式 の形で記述する。\n\n  Ruby では三つの項を取る演算子は他にないため、しばしば「三項演算子」とも\n  呼ばれる。\n\n: 条件式\n  値を真偽値として用いる式。if、unless、while、until のあとなどに書かれる。\n\n: 初期化\n: initialize\n  オブジェクトが生成されるとき、initialize という名の private メソッドが\n  呼ばれる。このメソッドで行う処理をオブジェクトの初期化と呼ぶ。\n\n  また、変数・定数に初めて値を代入することをその変数・定数の初期化と呼ぶ。\n\n: 処理系\n  ある言語のプログラムを読み込み、解釈し、実行するプログラムをその言語の処理系という。\n  その言語の「実装」と呼ぶこともある。\n\n  Ruby の処理系は CRuby を代表として、いくつかある。\n\n: 真偽値\n: Boolean value\n  Ruby ではどんなオブジェクトも真または偽である。\n  nil と false だけが偽であり、空文字列、空配列も含め、他のすべての\n  オブジェクトは真である。\n\n  Ruby では、値の型・種類に関わりなく、値の真偽性を利用するときにその値を\n  真偽値と呼ぶ。この用語集では「真偽値」をこの意味でのみ用いている。\n\n  しかし、「真偽値」を true と false に限って用いる場合もあるので注意が\n  必要である。\n\n: シンタックスシュガー\n: syntax sugar\n  ある構文に対し、プログラムの意味論上同じものを、より分かりやすい（あるいは読み書き\n  しやすい、あるいは簡素な）別の構文で記述できるようにしたとき、元の構文のシンタックス\n  シュガーと呼ぶ。\n\n  例えば Ruby では加算もメソッド呼び出しであるが、x.+(y) という通常のメソッド呼び出し\n  構文のほかに、より親しみやすい x + y という構文がシンタックスシュガーとして\n  用意されている。\n\n  構文糖衣、構文糖、糖衣構文とも呼ばれる。\n\n: シンボル\n: symbol\n  文字列と一対一に対応する、Ruby の処理系内部で整数により管理されるオブジェクト。\n\n  イミュータブルであり、同じ内容であれば必ず同一である。\n\n  シンボルのリテラルは文字列のリテラルと似ている。\n\n  Ruby の処理系内部では、効率上の理由からメソッド・変数・定数・クラス・モジュール\n  などの名前を整数で管理しているが、この整数がまさにシンボルのもつ整数値である。\n\n  参照：Symbol\n\n: シンボル配列\n  要素がシンボル（Symbol オブジェクト）だけからなる配列。\n  配列式としては % 記法で書くこともできる。\n\n  参照：d:spec/literal#percent\n\n: 数値オブジェクト\n  Numeric クラスのサブクラスのインスタンス。\n\n: スクリプト\n: script\n  いわゆる軽量言語のプログラムをこう呼ぶことが多い。\n\n  また、平仮名、片仮名、漢字、ラテン文字、アラビア文字、といった\n  文字体系もスクリプトと呼ぶ。この意味では「用字系」という用語も\n  使われる。\n\n: スクリプト言語\n: scripting language\n  最近は境界が曖昧になっているが、簡易なテキスト処理などを念頭において\n  作られたプログラミング言語のことをこう呼んだ。\n  Ruby は現代ではさまざまな用途に使われているが、当初は AWK や Perl などの\n  ようなスクリプト言語として設計された。\n  このことは作者による 1999 年の書籍のタイトル\n  『オブジェクト指向スクリプト言語Ruby』にも表れている。\n\n: スクリプトエンコーディング\n: script encoding\n  そのスクリプトファイル自体のエンコーディング。\n\n  →エンコーディング\n\n: スクリプト探索パス\n  ＝ロードパス\n\n: スコープ\n: scope\n  変数・定数・メソッドなどが参照（・代入）可能な、コード上の範囲。\n\n  Ruby の定数やグローバル変数はプログラムのどこからでも参照・代入\n  できるため、\n  グローバルスコープと呼ばれる。インスタンス変数はそのインスタンスが\n  self となるような場所であればどこででも参照・代入できる。\n  一方、ローカル変数はローカルスコープという極めて局所的なスコープを\n  持つが、これはコードの見た目だけで決まるレキシカルスコープである。\n\n  →レキシカルスコープ\n\n: スタックトレース\n: stack trace\n  プログラム実行のある時点において、そこに至るメソッド呼び出し元情報を遡るデータ。\n  バックトレースともいう。\n\n  Kernel.#caller_locations、Kernel.#caller で現時点までの\n  スタックトレースを得ることができる。\n\n  また、例外オブジェクトは例外が発生した時点までのスタックトレースを保持しており、\n  Exception#backtrace や Exception#backtrace_locations で\n  取り出すことができる。\n\n: スーパークラス\n: superclass\n  クラス B がクラス A のサブクラスであるとき、A を B のスーパークラス\n  と呼ぶ。\n  「親クラス」「上位クラス」と呼ぶこともある。\n\n  Ruby では BasicObject を除くすべてのクラスがただ一つの\n  スーパークラスを持つ（BasicObject はスーパークラスを持たない）。\n  スーパークラスは Class#superclass で得られる。\n\n  スーパークラスのスーパークラスなど継承の連鎖を遡るクラスをすべて含めて\n  「スーパークラス」と呼ぶ場合もあるが、この場合は「祖先クラス（または先祖クラス）」\n  という用語が使える。\n\n  ↔サブクラス\n\n  →継承\n\n: スレッド\n: thread\n  同時に存在して並行的に実行されうる制御の流れ。スレッド間でメモリーは共有される。\n\n  参照：spec/thread\n\n: スレッドセーフ\n: thread safe\n  複数のスレッドが並行に実行されても問題が起きないこと。\n\n: スレッドローカル\n: thread local\n  変数のスコープなどがスレッドごとに別々であること。\n\n  例えば特殊変数のうち $0（現在実行中のスクリプトのファイル名）は\n  グローバルスコープであり、どのスレッドから参照しても同じ値であるのに\n  対し、\n  ＄1（正規表現検索における 1 番目のキャプチャー文字列）はスレッドローカル\n  であり、スレッドごとに別である。\n\n: 正規表現\n: regular expression\n  文字列のパターンを表現する言語。\n  また、その言語で記述されたもの。\n\n  Ruby は正規表現を表すクラス Regexp があり、正規表現リテラルがある。\n\n  参照：spec/regexp\n\n: 整数\n: integer\n  Ruby の用語として「整数」を使うときは、数学用語の整数ではなく Integer\n  クラスのインスタンスを指すことが多いので注意。\n\n  例えば 1.0（Float）、1r（Rational）、1+0i（Complex）はいずれも\n  数学的には 1 を表しており、整数であるが、Integer オブジェクトではない。\n\n  「Integer オブジェクト」と表現すれば誤解が無い。\n\n: セーフレベル\n  オブジェクトの汚染状態に基づき、行える操作に制限を加える仕組み。\n\n  参照：spec/safelevel\n\n: セッター\n: setter\n  オブジェクトのインスタンス変数に値を代入するためのメソッド。\n  インスタンス変数名から「@」を削除し、末尾に「=」を付けたメソッド名とする習慣がある。\n\n: 即値\n: immediate value\n  オブジェクトの実装方法上の概念。参照でなく値そのものをビット列で表現する。\n  CRuby では nil、true、false のほか Integer の一部、Float の一部の値が\n  即値で実装されている。\n\n  なお、言語によっては「即値」という用語を「リテラル」の意味で使うので注意されたい。\n\n: ソフトウェアテスト\n: software testing\n  プログラムの正しさや性能を調べること。単に「テスト」ともいう。\n  狭義にはテスト用プログラム（テストコード）によって行う自動テストを指す。\n  さらに、性能ではなく正しさの検証に限って使われることもある。\n\n  →ユニットテスト、ベンチマークテスト\n\n===[a:ta] た\n\n: 大域脱出\n: non-local exit\n  Ruby においては、例外の発生もしくは Kernel.#throw によって\n  処理の実行が中断されること。\n  例外の場合は begin/rescue によって、throw の場合は\n  Kernel.#catch によって捕捉されるまで、制御構造やメソッド\n  呼び出しの階層もすべて抜ける。\n\n  捕捉されなかった場合はプログラムの実行が終了する。\n\n: 大クラス主義\n  クラス設計において一つのクラスにさまざまな機能を盛り込む方針。\n  Ruby の Array は、配列、リスト、タプル、集合、スタック（LIFO）、\n  キュー（FIFO）などの機能を兼ね備えており、大クラス主義的と言える。\n\n: ダイナミックローカル変数\n: dynamic local variable\n  定義箇所（最初の代入式の出現箇所）で作成されるローカル変数。\n\n  ローカル変数は静的スコープであり、プログラムの実行前にスコープが\n  確定している。\n  ブロックの外で定義されているローカル変数はプログラムの実行開始前に\n  作成されるが、ブロックの中に定義箇所があるローカル変数はスレッド\n  ごとに独立とするためブロックの評価のたびに新たに作成されるように\n  なっている。後者がダイナミックローカル変数である。\n\n: 代入\n: assignment\n  Ruby では、変数への代入はオブジェクトを変数に割り当てること。\n  一つのオブジェクトを複数の変数に代入することもできる。\n  しかし、逆に一つの変数に複数のオブジェクトを同時に割り当てる\n  ことはできない。\n\n  変数・定数への代入とは別に、代入メソッドにより値をレシーバー中に\n  格納することも代入と呼ぶ。\n\n  また、代入式によらず、メソッド呼び出し時に仮引数にオブジェクトが\n  割り当てられることや、ブロックの評価時にブロックパラメーターに\n  オブジェクトが割り当てられることも代入と呼ぶ。\n\n: 代入演算子\n: assignment operator\n  Ruby では代入も式であり、= は代入演算子と呼ばれる。\n\n: 代入式\n: assignment expression\n  Ruby では代入も式であり、代入された値がその評価値となる。\n\n: 代入メソッド\n: assignment method\n  メソッド名の末尾に = が付いたメソッド。メソッド呼び出しが代入式として書ける。\n\n: 多重継承\n: multiple inheritance\n  あるクラスが複数のクラスの下位クラスになっていること。\n  Ruby ではこれを禁止し、多重継承にまつわる問題が起きないようになっている。\n  代わりにモジュールの mix-in という仕組みがある。\n\n  →ミックスイン\n\n: 単項演算子\n: unary operator\n  単一の項に働く演算子。+ - ! not などが該当する。\n\n: 単体テスト\n: unit testing\n  ＝ユニットテスト\n\n: 短絡評価\n: short-circuit evaluation\n  論理式の評価において、真偽を確定するための最小限の項の評価しか\n  行わないやり方。\n  例えば ex1 and ex2 の場合、ex1 の評価値が偽のとき ex2 を評価\n  しなくても全体が偽であることが確定するので、ex2 は評価しない。\n\n  Ruby の &&、and、||、or の評価は短絡評価である。\n\n  参照：d:spec/operator#and、d:spec/operator#or\n\n: 抽象クラス\n: abstract class\n  Ruby には言語仕様として抽象クラスはないが、\n  直接のインスタンスを持つことを目的とせず、自身のサブクラスに\n  インスタンスを持たせるようなクラスを抽象クラスと呼ぶことがある。\n\n  この意味で Numeric は抽象クラスである。\n  実際の計算に用いる数値オブジェクトはみな\n  Numeric のサブクラスのインスタンスである。\n\n: 定数\n: constant\n  Ruby における定数は、クラスかモジュールに属し、変数のようにオブジェクトを\n  指すもの。\n  再代入すると警告が出るため定数と呼ばれる。\n  オブジェクトとの紐付けが固定的ということであって、指しているオブジェクトが\n  不変であることを意味しない。\n\n  定数のスコープはグローバルである。\n  ただし、定数の属すモジュールまたはクラスの階層と参照元の位置関係によっては\n  Foo::Bar::BAZ といったパスを書く必要がある。\n\n  参照：spec/variables\n\n: テスト\n: testing\n  →ソフトウェアテスト\n\n: テスト駆動開発\n: TDD: test-driven development\n  テストコードを先に記述してから機能を実装するプログラミング手法。\n\n: テストファースト\n: test-first programming\n  テスト駆動開発において、まず最初にテストコードを記述すること。\n\n: データ型\n: data type\n  一般には「データがどのようなものであるか」というデータの種類をいう。\n  プログラミング言語によるが、整数型、文字列型、配列型といったものが\n  考えられる。\n  また、データそのものではなく、データを取り扱う変数や仮引数にもデータ型\n  を考えることができる。\n\n  データ型を単に「型」と呼ぶことも多い。\n\n  Ruby では変数・定数・仮引数・ブロックパラメーターには型の制限がなく、\n  どんな種類のオブジェクトも受け入れる。\n\n  Ruby の仕様には「データ型」という概念はなく、「〜は○○型である」という\n  表現もあまりされないが、オブジェクトが属すクラスはデータ型を表していると\n  考えられる。\n  たとえば文字列オブジェクトは String 型、浮動小数点数オブジェクト\n  は Float 型であると言える。\n\n  クラスには継承関係があるため、浮動小数点数は Float 型であると\n  同時に Numeric 型であるとも言える。\n\n  また、クラスに include されているモジュールもまた、データを特徴\n  づけるものであり、データ型を表していると考えることができる。\n  たとえば Float、Integer、Rational のような数値クラスや\n  String、Time といった クラスには Comparable モジュール\n  が include されており、大小比較に基づくさまざまなメソッドが使える。\n  これらのクラスのインスタンスを Comparable 型であると言っても差し支え\n  ないだろう。\n\n  同様に、Array、Enumerator、Hash といったクラスの\n  インスタンスは Enumerable 型であると言うことができる。\n\n  このような意味でオブジェクトが特定のクラスやモジュールの表す型に\n  属すことは Object#is_a? メソッドで確認できる。\n\n  さらには、特定の名前のメソッド（群）が呼び出し可能であることを型と\n  みなす考え方もあり「ダックタイピング（duck typing）」と呼ばれる。\n  特定の名前のメソッドが呼び出し可能であることは\n  Object#respond_to? メソッドで確認できる。\n\n  Ruby 2.7 で試験的に導入された case/in 式では、オブジェクトの\n  パターンという概念が出てくる。オブジェクトのパターンは、たとえば\n  「第 1 要素が Integer であり、第 2 要素がキー :name を持つ Hash で\n  ある配列」といった、コンテナーオブジェクトの内部に立ち入った複雑な\n  ありさまをも表すことができる。\n  このオブジェクトのパターンも一種の型であると考えられる。\n\n: デバッガー\n: debugger\n  プログラムのデバッグを支援するツール。\n\n  あらかじめ設定した地点（ブレークポイント）でプログラムの実行を\n  一時停止させたり、1 行ずつ実行させたりしながら、\n  対話的に式の値を表示させることができる。\n\n  →ブレークポイント\n\n: 同一性\n: identity\n  Ruby における値の同一性は、それらの値が同じオブジェクトである（つまり\n  オブジェクト ID が一致する）ことを意味する。\n  Object#equal? メソッドで判定できる。\n\n  →オブジェクト ID\n\n  →同値性\n\n: 同値性\n  同一性よりもゆるい概念であり、二つの値が何らかの意味で同じであること。\n  関係演算子 == で判定される関係。\n\n  == はメソッドであり、その同値性判定は左辺のオブジェクトのクラスにより\n  規定される。\n\n  String オブジェクト同士では、同じエンコーディングで同じ文字の\n  並びなら同値である（エンコーディングが違っても同値となる場合はある）。\n\n  また、1 と 1.0 と 1r は、クラスは違うが同値である。\n  これは「同じ数を表す数値オブジェクトは同値」という原理で各数値クラスが\n  設計されているからである。\n\n  なお、ここでは == による同値性について述べたが、これとは別に、\n  eql? メソッドによる同値性もある。これはハッシュのキーとして同じと\n  みなすことを意味する。1.eql?(1.0) は false であり、ハッシュの\n  キーとして 1 と 1.0 は区別される。\n\n  →同一性\n\n: 特異クラス\n: singleton class\n  すべてのオブジェクトには自身が属すクラスとは別に、オブジェクト固有の\n  クラスがあり、特異クラスと呼ばれる。\n\n  参照：Object#singleton_class\n\n: 特異メソッド\n: singleton method\n  オブジェクト固有のメソッド。\n  オブジェクトの特異クラスのインスタンスメソッドである。\n\n: トップレベル\n: top level\n  スクリプトの一番外側のコンテキスト。つまり、すべてのモジュール定義、\n  クラス定義、メソッド定義の外側である。\n\n  トップレベルでは main が self となる。\n\n===[a:na] な\n\n: 名前空間\n: namespace\n  メソッドや定数の名前の衝突を避ける仕組み。\n  クラスやモジュールは一つの名前空間を作る。\n\n: 名前重要\n  プログラミングでは、変数名、メソッド名、クラス名、などを決める「命名」の機会が多い。\n  「名前重要」は、機能にふさわしい名前を付けることをとりわけ重要視する方針。\n  Matz はこれを設計上の座右の銘としている。\n\n  参照：https://ja.wikisource.org/wiki/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%8C%E7%9F%A5%E3%82%8B%E3%81%B9%E3%81%8D97%E3%81%AE%E3%81%93%E3%81%A8/%E5%90%8D%E5%89%8D%E9%87%8D%E8%A6%81\n\n: 日本Rubyの会\n  Ruby の開発者・利用者の支援を行っている一般社団法人。\n\n  https://ruby-no-kai.org/\n\n: ヌル文字\n: null character\n  ASCII（ISO/IEC 646）や Unicode などに含まれる制御文字の一つ。\n  ASCII では 0x00 が、Unicode では U+0000 がこれに当たる。\n  「ナル文字」とか、ASCII での略号を用いた「NUL」「NUL 文字」とも表現される。\n\n  ヌル文字の役割や意味はシステムやプログラミング言語などによりさまざまである。\n  Ruby では、他の文字と同じように文字列中に含めることができ、文字列を構成する\n  文字としては特別扱いされない。\n  ただしパス名には使えず、ヌル文字を含んだ文字列を File.open や\n  Pathname.new に与えると ArgumentError が発生する。\n\n  他の言語では文字列の終端を意味することがあるので、文字列データをやりとり\n  するうえで注意が必要である。\n\n: ネスト\n: nesting\n  制御構造、ブロックや、クラス・モジュール・メソッドなどの定義の入れ子。\n\n===[a:ha] は\n\n: 破壊的\n: destructive\n  レシーバーに影響を与えるメソッドは「破壊的」であると呼ばれる。\n\n  例えば文字列オブジェクトについて、そのオブジェクト自身の文字の\n  並びを変更することは破壊的といえる。\n\n  配列オブジェクトの場合、ある要素を別のオブジェクトに取り換える操作は\n  破壊的であるが、要素に破壊的操作を行うことは配列に対する破壊的操作\n  に該当しない。したがって、配列オブジェクトを凍結しただけでは\n  その配列から算出される結果を固定することはできない。\n\n: 派生クラス\n  ＝サブクラス\n\n: バックトレース\n: backtrace\n  ＝スタックトレース\n\n: ハッシュ\n: hash\n  キーに値を対応させたコレクション。言語によっては連想配列とか辞書などと呼ばれる。\n\n  キーとそれに対応する値の組をハッシュの要素と呼ぶ。\n\n  ハッシュは一般には要素の順序が不定だが、Ruby のハッシュは順序が保存される。\n\n  参照：Hash\n\n: ハッシュ値\n: hash value\n  一般に、データの同一性検証や検索などを目的として、任意のデータからハッシュ関数によって\n  作られる小さなデータを元のデータのハッシュ値と呼ぶ。\n\n  Ruby では、任意のオブジェクトに対して Integer のハッシュ値を返す\n  Object#hash があり、\n  Hash クラスの実装に用いられている。\n\n  ハッシュ値とハッシュ（Hash オブジェクト）を混同してはならない。\n\n  なお、標準添付ライブラリー digest で提供されるメッセージダイジェストは\n  一種のハッシュ関数である。\n\n: パラダイム\n: paradigm\n  プログラムやその動作をどのように捉えるかという思考の枠組み。\n  とくにプログラミングパラダイムともいう。\n  プログラミング言語はしばしば何かしら一つ以上のパラダイムに基づいて\n  設計される。\n\n  Ruby はオブジェクト指向プログラミングのパラダイムをよりどころとしている。\n\n: 番号指定ブロックパラメーター\n: numbered block parameter\n  Ruby 2.7 で導入されたブロックパラメーターの記法。\n  ブロックパラメーターの宣言をせずに _1、_2 などで第一、第二ブロック\n  パラメーターを参照する。\n\n: ヒアドキュメント\n: here document\n  文字列リテラルの一種で、「<<識別子」のような形の式を含む行の次行から、その\n  識別子だけの行の直前までに記述された文字列を「<<識別子」の値とする。\n  書き方によって、式展開、バックスラッシュ表記なども可能で、終端の識別子の\n  置き方が変えられたりする。\n\n  参照：d:spec/literal#here\n\n: 引数\n: argument\n  →仮引数、実引数\n\n: 評価\n: evaluation\n  式の値を実際に求めること。\n  得られた値をとくに評価値ともいう。\n\n  また、ブロックを実行することも評価と呼ぶ。\n  ブロックの評価で最後に評価された式の値がそのブロックの評価値となる。\n\n: 標準添付ライブラリー\n: standard library\n  Ruby 本体と一緒に配布される、組込みではないライブラリー。\n  インストールせずに使うことができる。\n  gem 形式になっているものとなっていないものがあるが、\n  なっているものは standard gem と呼ばれ、Ruby 本体のバージョンとは独立して\n  アップデートすることができる。\n  standard gem はさらに、アンインストールのできない default gem と\n  アンインストールできる bundled gem に分けられる。\n\n  →gem\n\n: ファイバー\n: fiber\n  Fiber オブジェクトで表す軽量スレッド。\n  外部からのメソッド呼び出しで実行の継続を制御する。\n  ファイバーを用いて外部イテレーターを構成できる。\n\n: 深い複製\n: deep copy\n  配列、ハッシュなどのコンテナーオブジェクトの複製で、その要素についても\n  再帰的に複製するような複製。\n\n  ↔浅い複製\n\n: 浮動小数点数\n: floating point number\n  実数を符号・仮数部・指数部によって表す表現形式。\n  仮数部が表す小数の小数点の位置を指数部の値によって動かしていることに\n  なるのでこの名がある。\n\n  Ruby では Float クラスおよび BigDecimal クラスで\n  実装されている。\n\n: 振舞い駆動開発（ビヘイビア駆動開発）\n: BDD: behavior driven development\n  テスト駆動開発から派生したプログラミング手法。\n  プログラムの仕様を表現したテストコードを元に開発を進める。\n\n  Ruby の振舞い駆動開発を支援するテストフレームワークとして\n  RSpec がある。\n\n: ブレークポイント\n: breakpoint\n  デバッガーを用いる際、プログラムの実行を一時停止するよう設定\n  されたコード上の地点。\n\n  →デバッガー\n\n: ブロック\n: block\n  メソッドに与えられるコードの塊。\n\n  メソッドを呼び出す際、オブジェクトは実引数として与え、処理は\n  ブロックとして渡すことができる。ブロックは一つしか与えることが\n  できない。\n\n  イテレーターメソッドでは繰り返したい処理をブロックで与える。\n  また、Enumerable#sort_by、Enumerable#group_by、\n  Enumerable#max_by などのように、要素に対する「評価関数」\n  としてブロックを要求するメソッドもある。\n  Kernel.#open メソッドは、ブロックを与えて呼び出した場合、\n  ファイルをオープンしてブロックを評価し、ファイルをクローズする。\n  クローズが自動的に行われるのでクローズ忘れが防げる。\n  ブロック内で例外が発生してもクローズは行われる。\n  このように、必ず実行しなければならない終了処理を自動で行うように\n  設計されたブロック付きメソッドもある。\n\n  ブロック自体はオブジェクトではないが、ブロックを Proc オブジェクトとして\n  オブジェクト化することはできる。\n\n  DSL 用途では、必要なタイミングで呼び出されるべき処理をブロックで\n  与えて登録させるメソッドが使われることもある。\n\n: ブロック付きメソッド呼び出し\n  メソッドを呼び出す際、実引数の他にブロックを与えることができる。\n  このようなメソッド呼び出しをいう。\n\n: ブロックパラメーター\n: block parameter\n  ブロックが持つ一種の仮引数。JIS X 3017 では「ブロック仮引数」と呼ぶ。\n\n  ブロック引数とは全くの別物である。\n\n: ブロック引数\n: block argument\n  メソッドに与えられたブロックを Proc オブジェクトとして受け取るため & 付きで\n  記述された仮引数。\n\n  ブロックパラメーターとは全くの別物である。\n\n: ブロックローカル変数\n  ブロックの | | の中で、セミコロンの後に識別子を書いて宣言した変数。\n\n  ブロックローカル変数のスコープは文字どおりブロック内であり、また、ブロックの\n  評価のたびに nil で初期化される。\n\n: 別名\n: alias\n  メソッドやグローバル変数は別名を持つことができる。\n\n  Ruby の組み込みメソッドには、Enumerable#map と Enumerable#collect の\n  ように別名を持つものが多数ある。\n\n  参照：d:spec/def#alias\n\n: 変数\n: variable\n  Ruby の変数はオブジェクトに紐付けられた名札のようなもの。\n  オブジェクトを入れる箱ではない。\n  変数にオブジェクトを紐付けることを代入という。\n\n  複数の変数に一つのオブジェクトを紐付けることもできるが、一つの変数に\n  紐付けられるオブジェクトは一つだけである。\n\n  ローカル変数、グローバル変数、インスタンス変数、クラス変数がある。\n  変数とよく似たものとして、定数がある。\n\n  →代入\n\n: ベンチマークテスト\n: benchmark test\n  プログラムの速度性能を調べるソフトウェアテスト。\n  ベンチマークテストを行うため、各種の専用ライブラリーがある。\n\n: ぼっち演算子\n  ＝安全参照演算子\n\n: ポリモルフィズム\n: polymorphism\n  Ruby においては、同じ名前のメソッドの呼び出しでもレシーバーの属す\n  クラスなどによって実行されるメソッドが違いうること。\n\n  原語の発音に近い「ポリモーフィズム」と呼ばれたり、日本語で「多態」とか\n  「多相性」などと呼ばれたりもする。\n\n===[a:ma] ま\n\n: マジックコメント\n: magic comment\n  スクリプトの先頭に（shebang があればそれに続けて）記述し、Ruby の処理系\n  に何かを伝えるもの。\n  記述したスクリプトのみで有効であり、そこからロードされたスクリプトには\n  適用されない。\n\n  スクリプトエンコーディングを示すもの（encoding）、\n  文字列リテラルを凍結するかどうかを指定するもの（frozen_string_literal）、\n  インデント不整合の警告を出すかどうかを指定するもの（warn_indent）\n  がある。\n\n  参照：d:spec/m17n#magic_comment\n\n: ミックスイン\n: mix-in\n  モジュールやクラスに対し、他のモジュールの機能を組み込むこと。\n\n  参照：Module#include\n\n: 未定義化（メソッドの）\n  メソッドの定義を取り消すこと。d:spec/def#undef 式もしくは\n  Module#undef_method メソッドによって行う。\n\n  Module#remove_method メソッドによるメソッドの削除とは\n  異なることに注意。\n\n: メソッド\n: method\n  クラスやモジュールに定義され、名前を持ち、引数やブロックを与えられて\n  呼び出され、一連の処理を行って値を返すもの。\n  メソッド自体はオブジェクトではないが、Method オブジェクトとして\n  オブジェクト化できる。\n\n: メソッドシグネチャ\n: method signature\n  メソッドの名前や取りうる引数などについての情報。\n\n: メソッド探索\n  あるオブジェクトのあるメソッドが呼ばれたとき、メソッド名をたよりに実際の\n  メソッド定義を探索すること。\n\n: メソッド・チェーン\n: method chaining\n  メソッドの返り値に対しさらにメソッド呼び出しをつなげること。\n\n: メタプログラミング\n: metaprogramming\n  実行中にクラスやメソッドなどを作成・変更するようなプログラミング手法。\n  柔軟な処理が書ける反面、デバッグしづらくなる恐れもある。\n\n  →リフレクション\n\n: 文字コード\n: character code\n  文字の集合の各要素（文字）に番号やビット列などの記号を割り振る体系。\n  文字符号とか符号化文字集合（coded character set）ともいう。\n  具体的なビット列の与え方は符号化方式（encoding）と呼ぶ。\n  JIS コードや Unicode は一つの文字コードについて複数の符号化方式がある。\n\n  →エンコーディング\n\n: モジュール\n: module\n  大まかにはクラスからインスタンス生成の機能を省いたもの。\n  また、クラスと違い、ミックスインによって他のモジュールやクラスに自身の\n  機能を提供することもできる。\n\n  →クラス、ミックスイン\n\n: モジュール関数\n: module function\n  モジュールのインスタンスメソッドおよび特異メソッドとして二重に定義されている\n  メソッド。Math モジュールのメソッドなどがこれにあたる。\n\n  Module#module_function を使って簡単に定義できる。\n\n: 文字列\n: string\n  String クラスのインスタンス。\n  Ruby の文字列は自分自身のエンコーディングを知っている。\n\n  →エンコーディング\n\n: 文字列配列\n  要素が文字列（String オブジェクト）だけからなる配列。\n  配列式としては % 記法で書くこともできる。\n\n  参照：d:spec/literal#percent\n\n: 戻り値\n: return value\n  ＝返り値\n\n\n===[a:ya] や\n\n: 優先順位（演算子の）\n: operator precedence\n  たとえば 2 + 3 * 4 という式は 2 + (3 * 4) と解釈されることになっている。これは\n  演算子に結合の優先順位があり、+ よりも * のほうが順位が上だからである。\n\n  参照：spec/operator\n\n: 有理数\n: rational number\n  数学的には「整数分の整数」の形の分数（分母は非零）で表せる数のことだが、\n  Ruby で「有理数」といった\n  場合、Rational クラスのインスタンスを指すことが多い。\n\n  例えば 1（Integer）、1.0（Float）、1+0i（Complex）は数学的にはすべて 1 を\n  表しており、有理数である（整数でもある）が、Rational オブジェクトではない。\n\n: ユニットテスト\n: unit test\n  メソッドなど、プログラムの小さな単位で行われるソフトウェアテスト。\n  単体テストともいう。\n  コードの中身には立ち入らず、入力に対する振る舞いをテストコードによって検証する。\n\n  →ソフトウェアテスト\n\n: 予約語\n: reserved word\n  識別名の形を持ちながら、構文上特別な意味を持つため、\n  変数・定数・メソッドなどの名前として自由に使えない文字列。\n  if、do、begin、end、nil、__FILE__ といったものが該当する。\n\n  メソッド名の場合、def のあとに書いたり、レシーバーを明示して\n  呼び出すなど、構文上、メソッド名であることが明らかな場面では使える場合もある。\n  実際 Range クラスには begin、end というインスタンスメソッドが定義されている。\n  また、インスタンス変数、クラス変数、グローバル変数は識別名の前に記号が\n  付いているため、識別名に予約語を用いることができる。\n\n  参照：d:spec/lexical#reserved\n\n===[a:ra] ら\n\n: ラッパーライブラリー\n: wrapper library\n  C 言語などで作られたライブラリーを Ruby から使えるようにするために\n  作られた拡張ライブラリーを、元のライブラリーのラッパーライブラリーと呼ぶ。\n  単にラッパーと呼ぶことも多い。\n\n  画像処理、数値計算、形態素解析といった分野で、さまざまなライブラリーに対して\n  Ruby 用ラッパーライブラリーが作られている。\n\n  また、他のライブラリーを異なる API で使用するために作られたライブラリーを\n  こう呼ぶこともある。この場合、元のライブラリーが何の言語で実装されているかは\n  問わない。\n\n: リスコフの置換原則\n: Liskov substitution principle\n  オブジェクト指向プログラミングにおいては、「下位クラスのインスタンスは上位クラスの\n  インスタンスの持つ性質をすべて持っていなければならない」とする規則。\n  Barbara Liskov らによって提唱された。\n\n  Ruby ではあえてこの原則を破ったクラス設計も行われる。\n  たとえば Class クラスは Module クラスのサブクラスだが、Module が持つメソッドの\n  いくつかは未定義にされている。\n\n: リテラル\n: literal\n  プログラム中に直接記述された値のこと。3.14 や \"foo\" や /\\d+/ はリテラル\n  だが、1 + 2 はリテラルではない。\n  Math::PI も定数参照なのでリテラルではない。\n\n  文字列リテラルが式展開を含む場合、実行時まで値が確定しないため、プログラム中に\n  値が直接記述されているとは言えないが、\n  便宜的にリテラルの一種として扱うことがある。\n\n  なお、これとは別に、正規表現においてメタ文字ではない文字のことをリテラルと呼ぶ。\n\n  参照：spec/literal\n\n: リフレクション\n: reflection\n  プログラムの実行中にプログラムについての情報（クラス、モジュール、メソッド、\n  変数などについての情報）を得たり、プログラムやその動作を変化させたりすること。\n  Ruby では Object#methods でメソッド名の一覧を得たり、\n  Module#define_method で動的にメソッドを定義したり、といったことが\n  できる。\n\n  プログラムでプログラムを扱う、という意味で「メタプログラミング」とも\n  呼ばれる。\n  しかし、Ruby では構文を追加・変更するようなメタプログラミングは行えない。\n\n: るびま\n  →Rubyist Magazine\n\n: るりま\n: rurema\n  Ruby の公式日本語リファレンスマニュアルである Ruby Reference\n  Manual の愛称。\n\n: 例外\n: exception\n  Exception クラス（やその子孫クラス）のインスタンス。\n\n: レキシカルスコープ\n: lexical scope\n  ソースコード上の見た目だけで決まるスコープ。静的スコープとも言う。\n\n  ローカル変数のスコープはレキシカルスコープであるが、インスタンス\n  変数はそのインスタンスが self であるような場所ではどこでも同じ\n  変数が読み書きできるため、レキシカルスコープではない。\n\n: レシーバー\n: receiver\n  メソッドは何らかの特定のオブジェクトについて呼び出される。\n  このオブジェクトをそのメソッド呼び出しのレシーバーと呼ぶ。\n  メソッド呼び出しには、レシーバーを明示的に書くやり方と書かないやり方がある。\n  後者では、そのコンテキストの self がレシーバーとなる。\n\n: 連想配列\n: associative array\n  Ruby ではこの用語は使われず、もっぱら「ハッシュ」と呼ばれる。\n\n  ＝ハッシュ\n\n: ローカル変数\n: local variable\n  ローカル変数スコープと呼ばれるスコープを持つ変数。\n  ローカル変数の参照は、見た目では、引数が無く ( ) も伴わないメソッド呼び出し\n  と区別が付かない。\n  ローカル変数スコープは、メソッド定義、クラス定義、モジュール定義、\n  ブロック、トップレベルの中で最初の代入が現れる位置から末尾までである。\n  最初の代入位置以降であっても、メソッド定義、クラス定義、モジュール定義の\n  中はスコープ外となる。\n\n  参照：d:spec/variables#local\n\n: ロケット演算子\n: rocket operator\n  演算子「=>」の俗称。\n  ハッシュ式の記法でキーと値をつないだり、rescue で\n  例外オブジェクトを捉えたりするのに用いる。\n\n  Ruby 2.7 以降では case/in の As パターンでも使う。\n\n  参照：d:spec/literal#hash\n\n: ロードパス\n  スクリプトを require、load などで読み込む（ロードする）とき、\n  ファイルの位置を絶対パスで与えなくても、ファイル名（拡張子は略せる）や\n  どこかからの相対パス、を与えるだけでよい。\n  その際、ファイルを探すべき場所が予め設定されている。\n  この場所のパスをロードパスという。\n  スクリプト探索パスとも言う。\n\n  ロードパスは $LOAD_PATH で参照・変更できる。\n  探す場所は普通は複数あるので、ロードパスも配列で与えられている。\n\n  参照：Kernel.#load\n\n===[a:wa] わ\n\n: ワンライナー\n: one-liner\n  コマンドライン上で、プログラムを処理系の呼び出しまで含めて 1 行で\n  表現したもの。\n\n  Ruby では ruby コマンドに -e オプションで Ruby スクリプトを与えることで\n  ワンライナーが書ける。\n\n  また、プログラム（だけ）が 1 行で書かれたものもワンライナーと呼ぶことが\n  ある。\n\n  参照：d:spec/rubycmd#cmd_option",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "ArgumentError",
          "label": "ArgumentError",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:ArgumentError/"
        },
        {
          "key": "Array",
          "label": "Array",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Array/"
        },
        {
          "key": "BasicObject",
          "label": "BasicObject",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:BasicObject/"
        },
        {
          "key": "BigDecimal",
          "label": "BigDecimal",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:BigDecimal/"
        },
        {
          "key": "Class",
          "label": "Class",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Class/"
        },
        {
          "key": "Comparable",
          "label": "Comparable",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Comparable/"
        },
        {
          "key": "ENV",
          "label": "ENV",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:ENV/"
        },
        {
          "key": "ERB",
          "label": "ERB",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:ERB/"
        },
        {
          "key": "Encoding",
          "label": "Encoding",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Encoding/"
        },
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Enumerable/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Enumerator/"
        },
        {
          "key": "Exception",
          "label": "Exception",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Exception/"
        },
        {
          "key": "Fiber",
          "label": "Fiber",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Fiber/"
        },
        {
          "key": "Float",
          "label": "Float",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Float/"
        },
        {
          "key": "GC",
          "label": "GC",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:GC/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Hash/"
        },
        {
          "key": "Integer",
          "label": "Integer",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Integer/"
        },
        {
          "key": "Matrix",
          "label": "Matrix",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Matrix/"
        },
        {
          "key": "Method",
          "label": "Method",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Method/"
        },
        {
          "key": "Module",
          "label": "Module",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Module/"
        },
        {
          "key": "NilClass",
          "label": "NilClass",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:NilClass/"
        },
        {
          "key": "Numeric",
          "label": "Numeric",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Numeric/"
        },
        {
          "key": "Object",
          "label": "Object",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Object/"
        },
        {
          "key": "ObjectSpace",
          "label": "ObjectSpace",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:ObjectSpace/"
        },
        {
          "key": "Proc",
          "label": "Proc",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Proc/"
        },
        {
          "key": "Range",
          "label": "Range",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Range/"
        },
        {
          "key": "Rational",
          "label": "Rational",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Rational/"
        },
        {
          "key": "Regexp",
          "label": "Regexp",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Regexp/"
        },
        {
          "key": "Set",
          "label": "Set",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Set/"
        },
        {
          "key": "String",
          "label": "String",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:String/"
        },
        {
          "key": "Struct",
          "label": "Struct",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Struct/"
        },
        {
          "key": "Symbol",
          "label": "Symbol",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Symbol/"
        },
        {
          "key": "Time",
          "label": "Time",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Time/"
        },
        {
          "key": "Vector",
          "label": "Vector",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Vector/"
        },
        {
          "key": "_builtin",
          "label": "_builtin",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:_builtin/"
        },
        {
          "key": "delegate",
          "label": "delegate",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:delegate/"
        },
        {
          "key": "digest",
          "label": "digest",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:digest/"
        },
        {
          "key": "drb",
          "label": "drb",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:drb/"
        },
        {
          "key": "erb",
          "label": "erb",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:erb/"
        },
        {
          "key": "forwardable",
          "label": "forwardable",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:forwardable/"
        },
        {
          "key": "irb",
          "label": "irb",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:irb/"
        },
        {
          "key": "rake",
          "label": "rake",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:rake/"
        },
        {
          "key": "rdoc",
          "label": "rdoc",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:rdoc/"
        },
        {
          "key": "rubygems",
          "label": "rubygems",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:rubygems/"
        },
        {
          "key": "spec/literal",
          "label": "spec/literal",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:spec%2Fliteral/"
        },
        {
          "key": "spec/operator",
          "label": "spec/operator",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:spec%2Foperator/"
        },
        {
          "key": "spec/regexp",
          "label": "spec/regexp",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:spec%2Fregexp/"
        },
        {
          "key": "spec/safelevel",
          "label": "spec/safelevel",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:spec%2Fsafelevel/"
        },
        {
          "key": "spec/thread",
          "label": "spec/thread",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:spec%2Fthread/"
        },
        {
          "key": "spec/variables",
          "label": "spec/variables",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:spec%2Fvariables/"
        }
      ]
    },
    {
      "signature": "NEWS for Ruby 2.1.0",
      "score": 163,
      "metadata": {
        "type": "document",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "NEWS for Ruby 2.1.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/doc/news=2f2_1_0.html",
          "description": "NEWS for Ruby 2.1.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストは ChangeLog ファイルか bugs.ruby-lang.org の issue を参照してください。\n\n== 2.0.0 以降の変更\n\n=== 言語仕様の変更\n\n  * キーワード引数のデフォルト値が省略可能になりました。これらの「必須キーワード引数」は呼び出し時に明示的に与えなければなりません。\n\n  * 整数や小数のリテラルの末尾に'r','i','ri'という接尾辞を付けられるようになりました\n//emlist{\n    # r を付けると有理数になる\n    42r  # => Rational(42, 1)\n    3.14 # => 3.14.rationalize\n    6.022e+23r # 指数形式と一緒には使えない\n\n    # i を付けると虚数単位 i を掛けた数になる\n    42i  # => Complex(0, 42)\n    3.14i # => Complex(0, 3.14)\n\n    # ri を付けると複素数の虚部が有理数になる\n    42ri   # => Complex(0, 42r)\n    3.14ri # => Complex(0, 3.14r)\n//}\n\n  * def によるメソッド定義式は nil の代わりにメソッド名をシンボルで返します\n\n=== 組み込みクラスの更新\n\n  * Array\n    * 追加: Array#to_h キーと値のペアの配列をハッシュに変換します。\n\n  * Binding\n    * 追加: Binding#local_variable_get\n    * 追加: Binding#local_variable_set\n    * 追加: Binding#local_variable_defined?\n\n  * Enumerable\n    * 追加: Enumerable#to_h キーと値のペアのリストをハッシュに変換します。\n\n  * Exception\n    * 追加: Exception#cause 一つ前の例外を新しい例外を返します。\n      例外を rescue して raise しなおしたときに元の例外が一つ前の例外としてセットされています。\n\n  * GC\n    * 改良: RGenGC として知られている世代別GCが導入しました\n    * 追加した環境変数\n      * RUBY_GC_HEAP_INIT_SLOTS\n      * RUBY_GC_HEAP_FREE_SLOTS\n      * RUBY_GC_HEAP_GROWTH_FACTOR\n      * RUBY_GC_HEAP_GROWTH_MAX_SLOTS\n      * RUBY_GC_MALLOC_LIMIT_MAX\n      * RUBY_GC_MALLOC_LIMIT_GROWTH_FACTOR\n      * RUBY_GC_OLDMALLOC_LIMIT\n      * RUBY_GC_OLDMALLOC_LIMIT_MAX\n      * RUBY_GC_OLDMALLOC_LIMIT_GROWTH_FACTOR\n    * 廃止した環境変数\n      * RUBY_FREE_MIN (RUBY_GC_HEAP_FREE_SLOTS を代わりに使います)\n      * RUBY_HEAP_MIN_SLOTS (RUBY_GC_HEAP_INIT_SLOTS を代わりに使います)\n\n  * Integer\n    * 追加: Fixnum#bit_length\n    * 追加: Bignum#bit_length\n    * Bignum の性能向上\n      * GMP をいくつかの操作で使えるときは使います。\n        乗算、除算、基数変換、GCD\n\n  * IO\n    * 拡張: IO#seek SEEK_DATA と SEEK_HOLE を whence としてサポートしました？？\n    * 拡張: IO#seek 第2引数としてシンボルを受け付けるようになりました (:CUR, :END, :SET, :DATA, :HOLE)\n    * 拡張: IO#read_nonblock シンボルを返すためにキーワード引数 `exception: false` を受け付けるようになりました\n    * 拡張: IO#write_nonblock シンボルを返すためにキーワード引数 `exception: false` を受け付けるようになりました\n\n  * Kernel\n    * 追加: Kernel#singleton_method(Object#singleton_method)\n\n  * Module\n    * 追加: Module#using, which activates refinements of the specified module only\n      in the current class or module definition.\n    * 追加: Module#singleton_class? レシーバーが特異クラスであれば true を返します。\n      レシーバーが通常のクラスやモジュールであれば false を返します。\n    * 拡張: Module#refine はもはや実験的な機能でなくなりました\n    * 拡張: Module#include と Module#prepend はパブリックメソッドになりました\n\n  * Mutex\n    * Mutex#owned? はもはや実験的な機能ではありません。\n\n  * Numeric\n    * 拡張: Numeric#step limit が省略可能になり無限数列を作れるようになりました。\n      キーワード引数の to と by を使いやすさのために導入しました。\n      by に 0 を指定すると無限に同じ数値を生成することができます。\n\n  * Process\n    * 追加: Process.#argv0 オリジナルの $0 の値を返します。\n    * 追加: Process.#setproctitle $0 に影響を与えずにプロセス名をセットできます。\n    * 追加: Process.#clock_gettime\n    * 追加: Process.#clock_getres\n\n  * String\n    * \"literal\".freeze は同じオブジェクトを返すように最適化されました。\n    * 追加: String#scrub, String#scrub! 不正なバイト列を検証して修正します。\n      古いバージョンのRubyと一緒に使いたいときは string-scrub gem を使います。\n\n  * Symbol\n    * 全てのシンボルは freeze されるようになりました\n\n  * pack/unpack (Array/String)\n    * プラットフォームが対応していれば Q! と q! は long long 型を表します\n\n  * toplevel\n    * main.using はもはや実験的な機能ではありません。\n      The method activates refinements in the ancestors of the argument module to\n      support refinement inheritance by Module#include\n\n=== 組み込みクラスの互換性 (機能追加とバグ修正を除く)\n\n  * Hash\n   * 非互換: Hash#reject は将来のバージョンでは単なるハッシュオブジェクトを返すようにする予定です。\n     サブクラス、インスタンス変数、デフォルト値、汚染フラグはコピーされなくなります。\n     そのようなハッシュに対してこのメソッドを呼び出すと警告するようになりました。\n\n  * IO\n    * 非互換: IO.open は外部エンコーディングが ASCII-8BIT のとき内部エンコーディングを無視します。\n\n  * Kernel.#eval, Kernel.#instance_eval, Module#module_eval\n    元の環境のスコープ情報をコピーするようになりました。これは、引数なしの\n    private, protected, public, module_function を文字列として eval しても\n    その外側には影響を与えないという意味です。\n    以下のコードは Foo#foo をプライベートにしません。\n//emlist{\n    class Foo\n      eval \"private\"\n      def foo\n      end\n    end\n//}\n\n  * Object#untrusted?,Object#untrust,Object#trust\n    * これらのメソッドは非推奨になりました。$VERBOSE が true のときは警告を表示します。\n      Object#tainted?,Object#taint,Object#untaint とそれぞれ同じ動作です。\n\n  * Module#ancestors\n    * 特異クラスの祖先はそれ自身を含みます。\n      The ancestors of a singleton class now include singleton classes,\n      in particular itself.\n\n  * Module#define_method Object#define_singleton_method\n    * 定義したメソッドの名前をシンボルで返すようになりました。メソッドオブジェクトではありません。\n\n  * Numeric#quo\n    * レシーバーが to_r メソッドを持たないとき ArgumentError ではなく TypeError を発生させるようになりました。\n\n  * Proc\n    * Returning from lambda proc now always exits from the Proc, not from the\n      method where the lambda is created.  Returning from non-lambda proc exits\n      from the method, same as the former behavior.\n\n  * String\n    * 以下のコードでレシーバーのエンコーディングと変換後のエンコーディングが同一でも\n      不正なバイト列を置き換えるようになりました。\n//emlist{\n    include_invalid_byte_string.encode(\"UTF-8\", invalid: :replace)\n//}\n\n=== 標準添付ライブラリの更新 (優れたもののみ)\n\n  * cgi/util\n    * 全てのクラスメソッドをモジュールに移動しました\n\n  * digest\n    * 拡張: Digest::Class.file コンストラクタのためにオプショナル引数を取れるようになりました\n\n  * matrix\n    * 追加: Vector#cross_product\n\n  * net/smtp\n    * 追加: Net::SMTP#rset RSET コマンドに対応している\n\n  * objspace\n    * 追加: ObjectSpace.#trace_object_allocations\n    * 追加: ObjectSpace.#trace_object_allocations_start\n    * 追加: ObjectSpace.#trace_object_allocations_stop\n    * 追加: ObjectSpace.#trace_object_allocations_clear\n    * 追加: ObjectSpace.#allocation_sourcefile\n    * 追加: ObjectSpace.#allocation_sourceline\n    * 追加: ObjectSpace.#allocation_class_path\n    * 追加: ObjectSpace.#allocation_method_id\n    * 追加: ObjectSpace.#allocation_generation\n    * 追加: ObjectSpace.#reachable_objects_from_root\n    * 追加: ObjectSpace.#dump\n    * 追加: ObjectSpace.#dump_all\n\n  * OpenSSL::BN\n    * 拡張: OpenSSL::BN.new Fixnum や Bignum を引数として取れるようになりました。\n\n  * open-uri\n    * 複数フィールドに同じ名前を使うことをサポートしました (Set-Cookieのように)\n\n  * Pathname\n    * 追加: Pathname#write\n    * 追加: Pathname#binwrite\n\n  * rake\n    * 10.1.0 に更新しました。古い名前空間を削除しました。また、古い rake の機能も削除しました。\n      http://rake.rubyforge.org/doc/release_notes/rake-10_1_0_rdoc.html\n      http://rake.rubyforge.org/doc/release_notes/rake-10_0_3_rdoc.html\n\n  * rbconfig\n    * 追加: RbConfig::SIZEOF C の型のサイズを提供するために追加しました。\n\n  * rdoc\n    * 4.1.0 に更新。主にデフォルトのテンプレートとアクセシビリティを改善しました。\n      https://github.com/ruby/rdoc/blob/v4.1.0.preview.1/History.rdoc\n\n  * resolv\n    * 追加: Resolv::DNS.fetch_resource\n    * One-shot multicast DNS support\n    * Support LOC resources\n\n  * rexml\n    * REXML::Parsers::SAX2Parser\n      * entitydecl イベントの引数が間違っている問題を修正しました。\n        ドキュメントにはエンティティ定義の配列を渡すと書いてあるのに、\n        実装は2つ以上の引数を渡すようになっていた。これは実装のバグだったが、\n        修正したことで後方互換性が壊れました。\n    * REXML::Parsers::StreamParser\n      * entityイベントをサポート\n    * REXML::Text\n      * REXML::Text#<< 'text << \"XXX\" << \"YYY\"' のようなメソッドチェインをサポート\n      * REXML::Text#<< \"raw\" でないモードをサポート\n\n  * rinda\n    * Rinda::RingServer, Rinda::RingFinger\n      * マルチキャストソケットをサポート\n\n  * rubygems\n    * 2.2.0 に更新。  Notable new features include:\n      * Gemfile or gem.deps.rb support including Gem.file.lock (experimental)\n      * Improved, iterative resolver (compared to RubyGems 2.1 and earlier)\n      * Support for a sharing a GEM_HOME across ruby platforms and versions\n      * https://github.com/rubygems/rubygems/tree/master/History.txt\n\n  * set\n    * 追加: Set#intersect?\n    * 追加: Set#disjoint?\n\n  * socket\n    * 追加: Socket.getifaddrs\n\n  * strscan\n    * StringScanner#[]  名前付きキャプチャをサポートしました\n\n  * syslog/logger\n    * ファイリティを追加\n\n  * tempfile\n    * 追加: Tempfile.create\n\n  * timeout\n    * 明示的に例外クラスを指定しない限り、ブロックを抜けるための例外はブロック内部で rescue されなくなりました。\n\n  * tsort\n    * 追加: TSort#tsort\n    * 追加: TSort#tsort_each\n    * 追加: TSort#strongly_connected_components\n    * 追加: TSort#each_strongly_connected_component\n    * 追加: TSort#each_strongly_connected_component_from\n\n  * webrick\n    * レスポンスボディは readpartial や read をサポートする StringIO か他の IO のようなオブジェクトになりました。\n\n  * xmlrpc\n    * XMLRPC::Client\n      * 追加: XMLRPC::Client#http クライアントのために Net::HTTP のインスタンスを返します。\n        通常、それは必要ありません。HTTP クライアントのオプションを少し変更したいときに便利です。\n        HTTPクライアントの主要なオプションを変更するときは XMLRPC::Client のメソッドを使うべきです。\n\n=== 標準添付ライブラリの互換性 (機能追加とバグ修正を除く)\n\n  * set\n    * 非互換: Set#to_set はコピーを生成して返す代わりに self を返すようになりました\n\n  * uri\n    * 非互換: URI.decode_www_form は現在の WHATWG による URL 標準に従います。\n      文字列エンコーディングを指定するために、エンコーディング引数を取ります。\n      いい加減なパーセントエンコードされた文字列を受け入れますが、セパレータにセミコロンは拒否します。\n    * 非互換: URI.decode_www_form は現在の WHATWG による URL 標準に従います。\n      パーセントエンコードする前に、エンコーディング引数を取ります。\n      デフォルトでは、パーセントエンコードする前にUTF-16文字列をUTF-8に変換しません。\n\n  * curses\n    * 削除。curses は gem になりました。\n      https://rubygems.org/gems/curses\n\n=== 組込みのグローバル変数の互換性に影響のある変更\n\n  * $SAFE\n    * $SAFE=4 は廃止されました。$SAFE に4以上の値をセットすると ArgumentError が発生します。\n\n=== C API の更新\n\n  * 非推奨: rb_gc_set_params() Ruby内部でのみ使います。\n\n  * 追加: rb_gc_count() GCが発生した回数を返します。\n\n  * 追加: rb_gc_stat() GC.stat が返す値にオーバーヘッドなしにアクセスできます。\n\n  * 追加: rb_gc_latest_gc_info() GC.latest_gc_info にアクセスできます。\n\n  * 追加: rb_postponed_job_register()  VMが一貫性のある状態になったときに呼ぶコールバック関数を引数に取ります。\n    例えば、Cのシグナルハンドラから実行するために使います。\n\n  * 追加: rb_profile_frames() コールスタックのプロファイルのために現在のRubyのスタックに\n    低コストでアクセスする機能を提供します。\n\n  * rb_tracepoint_new() C言語からアクセス可能な新しい内部的なイベントをサポートしました:\n    * RUBY_INTERNAL_EVENT_NEWOBJ\n    * RUBY_INTERNAL_EVENT_FREEOBJ\n    * RUBY_INTERNAL_EVENT_GC_START\n    * RUBY_INTERNAL_EVENT_GC_END_MARK\n    * RUBY_INTERNAL_EVENT_GC_END_SWEEP\n    * 内部的なイベントを通常のイベントと同時に使うことはできません。\n      (例: RUBY_EVENT_CALL と RUBY_EVENT_RETURN)",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "ArgumentError",
          "label": "ArgumentError",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:ArgumentError/"
        },
        {
          "key": "Array",
          "label": "Array",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Array/"
        },
        {
          "key": "Bignum",
          "label": "Bignum",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Bignum/"
        },
        {
          "key": "Binding",
          "label": "Binding",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Binding/"
        },
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Enumerable/"
        },
        {
          "key": "Exception",
          "label": "Exception",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Exception/"
        },
        {
          "key": "GC",
          "label": "GC",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:GC/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Hash/"
        },
        {
          "key": "IO",
          "label": "IO",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:IO/"
        },
        {
          "key": "Integer",
          "label": "Integer",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Integer/"
        },
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Kernel/"
        },
        {
          "key": "Module",
          "label": "Module",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Module/"
        },
        {
          "key": "Mutex",
          "label": "Mutex",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Mutex/"
        },
        {
          "key": "Net::HTTP",
          "label": "Net::HTTP",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Net%3A%3AHTTP/"
        },
        {
          "key": "Numeric",
          "label": "Numeric",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Numeric/"
        },
        {
          "key": "Pathname",
          "label": "Pathname",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Pathname/"
        },
        {
          "key": "Proc",
          "label": "Proc",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Proc/"
        },
        {
          "key": "Process",
          "label": "Process",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Process/"
        },
        {
          "key": "Rinda::RingFinger",
          "label": "Rinda::RingFinger",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Rinda%3A%3ARingFinger/"
        },
        {
          "key": "Rinda::RingServer",
          "label": "Rinda::RingServer",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Rinda%3A%3ARingServer/"
        },
        {
          "key": "String",
          "label": "String",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:String/"
        },
        {
          "key": "Symbol",
          "label": "Symbol",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Symbol/"
        },
        {
          "key": "TypeError",
          "label": "TypeError",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:TypeError/"
        },
        {
          "key": "cgi/util",
          "label": "cgi/util",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:cgi%2Futil/"
        },
        {
          "key": "digest",
          "label": "digest",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:digest/"
        },
        {
          "key": "matrix",
          "label": "matrix",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:matrix/"
        },
        {
          "key": "net/smtp",
          "label": "net/smtp",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:net%2Fsmtp/"
        },
        {
          "key": "objspace",
          "label": "objspace",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:objspace/"
        },
        {
          "key": "open-uri",
          "label": "open-uri",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:open-uri/"
        },
        {
          "key": "rake",
          "label": "rake",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:rake/"
        },
        {
          "key": "rbconfig",
          "label": "rbconfig",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:rbconfig/"
        },
        {
          "key": "rdoc",
          "label": "rdoc",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:rdoc/"
        },
        {
          "key": "resolv",
          "label": "resolv",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:resolv/"
        },
        {
          "key": "rexml",
          "label": "rexml",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:rexml/"
        },
        {
          "key": "rinda",
          "label": "rinda",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:rinda/"
        },
        {
          "key": "rubygems",
          "label": "rubygems",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:rubygems/"
        },
        {
          "key": "set",
          "label": "set",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:set/"
        },
        {
          "key": "socket",
          "label": "socket",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:socket/"
        },
        {
          "key": "strscan",
          "label": "strscan",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:strscan/"
        },
        {
          "key": "syslog/logger",
          "label": "syslog/logger",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:syslog%2Flogger/"
        },
        {
          "key": "tempfile",
          "label": "tempfile",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:tempfile/"
        },
        {
          "key": "timeout",
          "label": "timeout",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:timeout/"
        },
        {
          "key": "tsort",
          "label": "tsort",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:tsort/"
        },
        {
          "key": "uri",
          "label": "uri",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:uri/"
        },
        {
          "key": "webrick",
          "label": "webrick",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:webrick/"
        },
        {
          "key": "xmlrpc",
          "label": "xmlrpc",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:xmlrpc/"
        }
      ]
    },
    {
      "signature": "NEWS for Ruby 2.2.0",
      "score": 163,
      "metadata": {
        "type": "document",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "NEWS for Ruby 2.2.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/doc/news=2f2_2_0.html",
          "description": "NEWS for Ruby 2.2.0 \nこのドキュメントは前回リリース以降のバグ修正を除くユーザーに影響のある機能の変更のリストです。\n\nそれぞれのエントリーは参照情報があるため短いです。\n十分な情報と共に書かれた全ての変更のリストは ChangeLog ファイルか bugs.ruby-lang.org の issue を参照してください。\n\n== 2.1.0 以降の変更\n\n=== 言語仕様の変更\n\n  * nil/true/false\n    * nil/true/false はフリーズされました 8923\n\n  * Hash リテラル\n    * 後ろにコロンのあるシンボルをキーにしたときそれをクオートできるようになりました 4276\n\n  * デフォルト引数\n    * オプショナル引数にデフォルト値のセマンティクスでアクセスできないという長年のバグを修正しました。 9593\n\n=== 組み込みクラスの更新\n\n  * Binding\n    * 追加: Binding#local_variables\n    * 追加: Binding#receiver\n\n  * Dir\n    * 追加: Dir#fileno\n\n  * Enumerable\n    * 追加: Enumerable#slice_after\n    * 追加: Enumerable#slice_when\n    * 拡張: Enumerable#min, Enumerable#min_by, Enumerable#max, Enumerable#max_by\n      は複数の値を返すためのオプションをサポートしました\n\n\n  * Float\n    * 追加: Float#next_float\n    * 追加: Float#prev_float\n\n  * File\n    * 追加: File.birthtime\n    * 追加: File#birthtime\n\n  * File::Stat\n    * 追加: File::Stat#birthtime\n\n  * GC\n    * GC.latest_gc_info は現在のGCのステータスを再現するために :state を返すようになりました。\n    * 改善: メジャーGCにインクリメンタルマーキングを導入しました。 10137\n\n  * IO\n    * 改善: Windows上でパイプのための IO#read_nonblock, IO#write_nonblock をサポートしました。\n\n  * Kernel\n    * 追加: Kernel.#itself(Object#itself)\n    * 改善: Kernel.#throw は、対応する catch ブロックがないとき ArgumentError ではなく\n      ArgumentError のサブクラスである UncaughtThrowError を発生させるようになりました\n\n\n  * Process\n    * 拡張: Process.spawn のような外部プロセスを起動するメソッドは [:out, :err] からリダイレクト\n      されたファイルを書き込みモードで開くようになりました\n\n  * String\n    * 追加: String#unicode_normalize\n    * 追加: String#unicode_normalize!\n    * 追加: String#unicode_normalized?\n\n  * Symbol\n    * 改善: String#to_sym, String#intern によって返される多くのシンボルがGC可能になりました\n\n  * Method\n    * 追加: Method#curry([arity]) はカリー化された Proc オブジェクトを返します\n    * 追加: Method#super_method はスーパクラスの同名のメソッドの Method オブジェクトを返します。\n\n=== 組み込みクラスの互換性 (機能追加とバグ修正を除く)\n\n  * Enumerable\n    * Enumerable#slice_before の状態管理は非推奨になりました\n    * Enumerable#chunk の状態管理は非推奨になりました\n\n  * GC\n    * 非互換: GC.stat のエントリーの名前を変更しました 9924\n      https://docs.google.com/spreadsheets/d/11Ua4uBr6o0k-nORrZLEIIUkHJ9JRzRR0NyZfrhEEnc8/edit?usp=sharing\n\n  * Hash\n    * 非互換: 重複するキーの上書きに関するポリシーを変更しました 10315\n      { **hash1, **hash2 } は重複するキーについては hash2 の値を持ちます\n\n  * IO\n    * 非互換: IO#flush を使ったとき、ファイルのメタデータが即時更新されることを仮定できなくなりました。\n      いくつかのプラットフォーム(特にWindows)で、メタデータの更新はファイルシステムの負荷が下がるまで遅延されます。\n      メタデータが更新されることを保証したい場合は IO#fsync を使ってください。\n\n  * Math\n    * 非互換: Math.#log は 基底が 0 より小さいとき NaN を返すかわりに Math::DomainError を発生させます。\n      2つの引数に両方とも 0 が指定された場合、負の無限大ではなく NaN を返します。\n    * 非互換: Math.#atan2 は2の引数の両方に無限大が指定されたとき C99 で期待されるような値を返します。\n\n  * Proc\n    * 非互換: ArgumentError は発生しなくなりました。\n    * ArgumentError is no longer raised when lambda Proc is passed as a\n      block, and the number of yielded arguments does not match the formal\n      arguments of the lambda, if just an array is yielded and its length\n      matches.\n\n  * Process\n    * Process.spawn のようなプロセスを起動するようなメソッドは [:out, :err]\n      からリダイレクトされるファイルを書き込みモードで開きます。Ruby 2.2以前は読み込みモードで開いていました。\n\n=== 標準添付ライブラリの更新 (優れたもののみ)\n\n  * continuation\n    * callcc は廃止されました。Fiberを使ってください。\n\n  * digest\n    * Kernel.#Digest はスレッドセーフになりました。\n      マルチスレッド環境でオンデマンドローディングに関して問題がある場合は、\n      \"digest/*\" を事前にロードしておくか、Digest::* なクラスを参照するかわりにこのメソッドを呼び出します。\n    * 以前通知した通り Digest::HMAC を削除しました。\n\n  * DL\n    * DL は標準添付ライブラリから削除されました。fiddle を使ってください。\n\n  * etc\n    * 追加: Etc.#uname\n    * 追加: Etc.#sysconf\n    * 追加: Etc.#confstr\n    * 追加: IO#pathconf\n    * 追加: Etc.#nprocessors\n\n  * find, pathname\n    * 拡張: Find.#find は \"ignore_error\" というキーワード引数を受け付けるようになりました\n\n  * Matrix\n    * 追加: Matrix#first_minor\n    * 追加: Matrix#cofactor\n    * 追加: Matrix#adjugate\n    * 追加: Matrix#hstack, Matrix#vstack\n    * 追加: Matrix#laplace_expansion\n    * 追加: Vector.basis\n    * 追加: Vector#-@, Vector#+@, Matrix#-@, Matrix#+@\n    * 追加: Vector#cross_product\n    * 追加: Vector#dot\n    * 追加: Vector#angle_with\n    * 追加: Vector.independent?, Vector#independent?\n\n  * pathname\n    * Pathname#/ は Pathname#+ のエイリアスです\n    * 追加: Pathname#birthtime\n\n  * rake\n    * Rake 10.4.0 になりました。\n      http://docs.seattlerb.org/rake/History_rdoc.html#label-10.4.0\n\n  * rubygems\n    * RubyGems 2.4.2 になりました。リリースノートの全てはリンク先を参照してください。\n      http://docs.seattlerb.org/rubygems/History_txt.html#label-2.4.2+%2F+2014-10-01\n\n  * tsort\n    * TSort.tsort_each, TSort.each_strongly_connected_component,\n      TSort.each_strongly_connected_component_from はブロックを省略すると Enumerator を返すようになりました。\n\n  * xmlrpc\n    * LibXMLStreamParser という新しいパーサーを追加しました\n\n=== 標準添付ライブラリの互換性 (機能追加とバグ修正を除く)\n\n  * mathn\n    * 非推奨の警告を表示するようになりました 10169\n\n  * ext/date/lib/date/format.rb\n    * 空だったので削除されました\n\n  * digest\n    * Digest::HMAC は削除されました。OpenSSL::HMAC や外部のgemを使ってください。\n\n  * time\n    * Time.parse, Time.strptime, Time.rfc2822, Time.xmlschema may produce\n      fixed-offset Time objects.\n      It is happen when usual localtime doesn't preserve the offset from UTC.\n    * Time.httpdate は常にUTCのTimeオブジェクトを生成します。\n    * Time.strptime は引数が日付や時刻の情報を含まない場合、ArgumentErrorを発生させます。\n\n  * lib/rational.rb\n    * 2009年から非推奨だったので削除しました。\n\n  * lib/complex.rb\n    * 2009年から非推奨だったので削除しました。\n\n  * prettyprint\n    * PrettyPrint#first? は削除しました。\n\n  * lib/minitest/*.rb\n    * mintest 5 と衝突するので削除しました。9711\n\n  * lib/test/**/*.rb\n    * minitest 5 と衝突するので削除しました。minitest 4 の単なるラッパーだった。9711\n\n  * uri\n    * 3986 をサポートしました。 2542\n\n  * GServer\n    * gserver という gem に切り出しました。メンテナンスしていないコードでした。\n\n  * Logger\n    * Logger::Application は logger-application という gem に切り出しました。メンテナンスしていないコードでした。\n\n  * ObjectSpace (after requiring \"objspace\")\n    * ObjectSpace.#memsize_of(obj) は sizeof(RVALUE) を含むようになりました。\n      8984\n\n  * prime\n    * 非互換:\n      * Prime.prime? は負の数に対して false を返します。\n        このメソッドは数が合成数かどうか知るために使うべきではありません。 7395\n\n  * psych\n    * Psych::EngineManager を削除しました 8344\n\n=== 組込みのグローバル変数の互換性に影響のある変更\n\nなし\n\n=== C API の更新\n\n  * 非推奨のAPIを削除しました  9502\n    * Check_SafeStr -> SafeStringValue\n    * rb_check_safe_str -> SafeStringValue\n    * rb_quad_pack -> rb_integer_pack\n    * rb_quad_unpack -> rb_integer_unpack\n    * rb_read_check : access struct FILE internal. no replacement.\n    * rb_struct_iv_get : internal function. no replacement.\n    * struct rb_blocking_region_buffer : internal type. no replacement.\n    * rb_thread_blocking_region_begin -> rb_thread_call_without_gvl family\n    * rb_thread_blocking_region_end -> rb_thread_call_without_gvl family\n    * TRAP_BEG -> rb_thread_call_without_gvl family\n    * TRAP_END -> rb_thread_call_without_gvl family\n    * rb_thread_select -> rb_thread_fd_select\n    * struct rb_exec_arg : internal type. no replacement.\n    * rb_exec : internal function. no replacement.\n    * rb_exec_arg_addopt : internal function. no replacement.\n    * rb_exec_arg_fixup : internal function. no replacement.\n    * rb_exec_arg_init : internal function. no replacement.\n    * rb_exec_err : internal function. no replacement.\n    * rb_fork : internal function. no replacement.\n    * rb_fork_err : internal function. no replacement.\n    * rb_proc_exec_n : internal function. no replacement.\n    * rb_run_exec_options : internal function. no replacement.\n    * rb_run_exec_options_err : internal function. no replacement.\n    * rb_thread_blocking_region -> rb_thread_call_without_gvl family\n    * rb_thread_polling -> rb_thread_wait_for\n    * rb_big2str0 : internal function. no replacement.\n    * rb_big2ulong_pack -> rb_integer_pack\n    * rb_gc_set_params : internal function. no replacement.\n    * rb_io_mode_flags -> rb_io_modestr_fmode\n    * rb_io_modenum_flags -> rb_io_oflags_fmode\n\n  * struct RBignum は隠されました 6083\n    かわりに rb_integer_pack と rb_integer_unpack を使います\n\n  * struct RRational は隠されました  9513\n    かわりに rb_rational_num と rb_rational_den を使います\n\n  * rb_big_new と rb_big_resize は long のかわりに size_t を受け取ります\n\n  * rb_num2long は SIGNED_VALUE のかわりに long を返します\n\n  * rb_num2ulong は VALUE のかわりに unsigned long を返します\n\n  * st hash table は速度のために2のべき乗のサイズを使います。9425.\n    適切はハッシュ関数を使うと探索は10-25%速くなります。\n    しかしながら、ハッシュ分散の弱点はもはや素数サイズのテーブルにマスクされていない可能性があります。\n    なので、拡張ライブラリは良い分散を確保するためにハッシュ関数を微調整する必要があるかもしれません。\n\n  * rb_sym2str() を追加しました。`rb_id2str(SYM2ID(sym))` と大体同じですが、動的なシンボルを作成しません。\n\n  * rb_str_cat_cstr() を追加しました。`rb_str_cat2()` と同じです。\n\n  * 将来的に `rb_str_substr()` と `rb_str_subseq()` は文字列の真ん中を共有しますが、\n    文字列の末尾だけは共有しません。結局、処理された文字列はNULL終端されない可能性があるので、\n    NULL終端されたCの文字列を入手したいときは`StringValueCStr()`を呼ぶ必要があります。\n\n  * rb_tracepoint_new() はCからアクセス可能な新しい内部的なイベントをサポートしました。r47528\n    * RUBY_INTERNAL_EVENT_GC_ENTER\n    * RUBY_INTERNAL_EVENT_GC_EXIT\n\n  * rb_hash_delete() は与えられたブロックを評価しなくなりました。\n\n  * rb_extract_keywords() と rb_get_kwargs() はエクスポートされました。詳細は README.EXT を参照してください。\n\n=== ビルドシステムの更新\n\n  * ./configure のオプション --with-jemalloc を追加しました。\n    jemalloc はシステムの malloc が遅かったり、フラグメンテーションする傾向にある場合に適切かもしれません。9113\n\n=== 実装の変更\n\n  * GC\n    * String#to_sym や String#intern によって返されるほとんどのシンボルはGC可能になりました。9634\n    * メジャーGCにインクリメンタルマーキングを導入しました。10137\n    * malloc によって起きた GC で lazy sweep を有効にしました。\n\n  * VM\n      * Hash#[]  と Hash#[]= で変更不可能な文字列リテラルを使用するようにしました。\n      * キーワード引数が速くなりました 10440\n      * 巨大なスプラットされた配列を rest 引数として受け取れるようになりました10440\n\n  * Process\n      * spawn() のようなプロセスを生成するメソッドは vfork(2) システムコールを使うようになりました。\n        親プロセスがメモリを多く使用しているとき vfork(2) は fork(2) より速い。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "ArgumentError",
          "label": "ArgumentError",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:ArgumentError/"
        },
        {
          "key": "Binding",
          "label": "Binding",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Binding/"
        },
        {
          "key": "Dir",
          "label": "Dir",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Dir/"
        },
        {
          "key": "Enumerable",
          "label": "Enumerable",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Enumerable/"
        },
        {
          "key": "Enumerator",
          "label": "Enumerator",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Enumerator/"
        },
        {
          "key": "Fiber",
          "label": "Fiber",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Fiber/"
        },
        {
          "key": "File",
          "label": "File",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:File/"
        },
        {
          "key": "File::Stat",
          "label": "File::Stat",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:File%3A%3AStat/"
        },
        {
          "key": "Float",
          "label": "Float",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Float/"
        },
        {
          "key": "GC",
          "label": "GC",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:GC/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Hash/"
        },
        {
          "key": "IO",
          "label": "IO",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:IO/"
        },
        {
          "key": "Kernel",
          "label": "Kernel",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Kernel/"
        },
        {
          "key": "Math",
          "label": "Math",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Math/"
        },
        {
          "key": "Math::DomainError",
          "label": "Math::DomainError",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Math%3A%3ADomainError/"
        },
        {
          "key": "Method",
          "label": "Method",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Method/"
        },
        {
          "key": "OpenSSL::HMAC",
          "label": "OpenSSL::HMAC",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:OpenSSL%3A%3AHMAC/"
        },
        {
          "key": "Proc",
          "label": "Proc",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Proc/"
        },
        {
          "key": "Process",
          "label": "Process",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Process/"
        },
        {
          "key": "String",
          "label": "String",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:String/"
        },
        {
          "key": "Symbol",
          "label": "Symbol",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Symbol/"
        },
        {
          "key": "UncaughtThrowError",
          "label": "UncaughtThrowError",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:UncaughtThrowError/"
        },
        {
          "key": "continuation",
          "label": "continuation",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:continuation/"
        },
        {
          "key": "digest",
          "label": "digest",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:digest/"
        },
        {
          "key": "etc",
          "label": "etc",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:etc/"
        },
        {
          "key": "fiddle",
          "label": "fiddle",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:fiddle/"
        },
        {
          "key": "find",
          "label": "find",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:find/"
        },
        {
          "key": "pathname",
          "label": "pathname",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:pathname/"
        },
        {
          "key": "prettyprint",
          "label": "prettyprint",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:prettyprint/"
        },
        {
          "key": "prime",
          "label": "prime",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:prime/"
        },
        {
          "key": "psych",
          "label": "psych",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:psych/"
        },
        {
          "key": "rake",
          "label": "rake",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:rake/"
        },
        {
          "key": "rubygems",
          "label": "rubygems",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:rubygems/"
        },
        {
          "key": "time",
          "label": "time",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:time/"
        },
        {
          "key": "tsort",
          "label": "tsort",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:tsort/"
        },
        {
          "key": "uri",
          "label": "uri",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:uri/"
        },
        {
          "key": "xmlrpc",
          "label": "xmlrpc",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:xmlrpc/"
        }
      ]
    },
    {
      "signature": "ruby 1.8.3 feature",
      "score": 145,
      "metadata": {
        "type": "document",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "ruby 1.8.3 feature \n*((<ruby 1.8 feature>))\n*((<ruby 1.8.2 feature>))",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/doc/news=2f1=2e8=2e3.html",
          "description": "ruby 1.8.3 feature \n*((<ruby 1.8 feature>))\n*((<ruby 1.8.2 feature>))\n\nruby 1.8.2 から ruby 1.8.3 までの変更点です。\n\n掲載方針\n\n*バグ修正の影響も含めて動作が変わるものを収録する。\n*単にバグを直しただけのものは収録しない。\n*ライブラリへの単なる定数の追加は収録しない。\n\n以下は各変更点に付けるべきタグです。\n\n記号について(特に重要なものは大文字(主観))\n\n* カテゴリ\n  * [ruby]: ruby インタプリタの変更\n  * [api]: 拡張ライブラリ API\n  * [lib]: ライブラリ\n* レベル\n  * [bug]: バグ修正\n  * [new]: 追加されたクラス／メソッドなど\n  * [compat]: 変更されたクラス／メソッドなど\n    * 互換性のある変更\n    * only backward-compatibility\n    * 影響の範囲が小さいと思われる変更もこちら\n  * [change]: 変更されたクラス／メソッドなど(互換性のない変更)\n  * [obsolete]: 廃止された(される予定の)機能\n  * [platform]: 対応プラットフォームの追加\n\nbundled libraryである(rubyの一部ではない)soap4rの変更点については、以下を参考にしてください。\nsoap4r-1.5.3がruby-1.8.2、soap4r-1.5.5がruby-1.8.3にbundleされています。\n * ((<URL:http://dev.ctor.org/soap4r/wiki/Changes-154>))\n * ((<URL:http://dev.ctor.org/soap4r/wiki/Changes-155>))\n\n== 1.8.2 (2004-12-25) -> 1.8.3 (2005-09-21)\n\n=== 2005-09-19\n: FileUtils.remove_entry_secure [lib] [new]\n: FileUtils.remove_entry        [lib] [new]\n: FileUtils.chmod_R             [lib] [new]\n: FileUtils.chown               [lib] [new]\n: FileUtils.chown_R             [lib] [new]\n: FileUtils.commands            [lib] [new]\n: FileUtils.options             [lib] [new]\n: FileUtils.have_option?        [lib] [new]\n: FileUtils.options_of          [lib] [new]\n: FileUtils.collect_method      [lib] [new]\n\n  追加。\n\n: FileUtils.rm_r  [lib] [compat]\n: FileUtils.rm_rf [lib] [compat]\n: FileUtils.cd    [lib] [compat]\n: FileUtils.cp_r  [lib] [compat]\n\n  rm_f と rm_rf が :secure オプションを受け付けるようになりました。\n  cd が :noop オプションを受け付けなくなりました。\n  cp_r が :dereference_root オプションを受け付けるようになりました。\n\n=== 2005-09-16\n: File.join [ruby] [compat]\n\n  型チェックを厳密にするようになりました。\n\n    $ ruby-1.8.2 -e 'p File.join(1, 2)'\n    \"1/2\"\n    \n    $ ruby-1.8.3 -e 'p File.join(1, 2)'\n    -e:1:in `join': can't convert Fixnum into String (TypeError)\n            from -e:1\n\n=== 2005-09-16\n: File.extname [ruby] [compat]\n\n  与えられた pathname がピリオドで終る場合、ピリオドではなく空の文字列を返すようになりました。\n\n    $ ruby-1.8.2 -e 'p File.extname(\"a.\")'\n    \".\"\n    $ ruby-1.8.3 -e 'p File.extname(\"a.\")'\n    \"\"\n\n=== 2005-09-13\n: Logger#formatter  [lib] [new]\n: Logger#formatter= [lib] [new]\n: Logger::Formatter [lib] [new]\n\n  追加。\n\n=== 2005-09-13\n: Net::HTTP\n\n  https での Proxy 認証をサポートするようになりました。\n \n: Net::HTTP.post_form(url, params) [lib] [new]\n\n: Net::HTTPHeader#content_length=  [lib] [new]\n: Net::HTTPHeader#content_type     [lib] [new]\n: Net::HTTPHeader#main_type        [lib] [new]\n: Net::HTTPHeader#sub_type         [lib] [new]\n: Net::HTTPHeader#type_params      [lib] [new]\n: Net::HTTPHeader#content_type=    [lib] [new]\n: Net::HTTPHeader#set_content_type [lib] [new]\n\n: Net::HTTPRequest#body(=)         [lib] [new]\n: Net::HTTPRequest#body_stream(=)  [lib] [new]\n\n  追加。\n\n: Net::HTTPHeader#each_capitalized      [lib] [compat]\n: Net::HTTPHeader#each_capitalized_name [lib] [new]\n\n  Net::HTTPHeader#canonical_each は Net::HTTPHeader#each_capitalized\n  に名前が変わりました。canonical_each も each_capitalized の別名とし\n  て提供されます。\n\n: net/http [lib] [new]\n\n  WebDAV のメソッドをサポートするようになりました。\n  PROPPATCH, LOCK, UNLOCK, OPTIONS, PROPFIND, DELETE, MOVE, COPY, MKCOL。\n  \n: Net::HTTPRequest#body_exist?  [lib] [obsolete]\n: Net::HTTPResponse#response    [lib] [obsolete]\n: Net::HTTPResponse#header      [lib] [obsolete]\n: Net::HTTPResponse#read_header [lib] [obsolete]\n  \n  obsolete になりました。VERBOSE モードの時、警告が出ます。\n\n=== 2005-09-10\n: OpenSSL::PKCS7::RecipientInfo [lib] [new]\n: OpenSSL::PKCS7::SignerInfo    [lib] [compat]\n\n  新クラス、追加。OpenSSL::PKCS7::Signer が OpenSSL::PKCS7::SignerInfo に名前が変わりました。Signer も別名として\n  引続き提供されます。\n\n=== 2005-09-10\n: OpenSSL::Digest::SHA224\n: OpenSSL::Digest::SHA256\n: OpenSSL::Digest::SHA384\n: OpenSSL::Digest::SHA512\n\n  新クラス、追加。OpenSSL 0.9.8 以降とともにコンパイルされた時のみ。\n\n=== 2005-09-09\n: $SAFE [ruby] [compat]\n\n  メソッドが定義された時の $SAFE レベルを記憶するようになりました。\n  メソッドは定義された時の $SAFE レベルで実行されます。\n  $SAFE レベル 3 以上の環境下において定義されたメソッドを呼び出すことは、$SAFE レベル が 0 のとき\n  禁止されるようになりました。\n\n    $ cat mthd_taint.rb\n    th = Thread.new{\n      $SAFE = 3\n      class Hoge\n        def foo\n          puts \"safe level: #{$SAFE}\"\n        end\n      end\n    }    \n    th.join\n    p $SAFE\n    Hoge.new.foo\n\n    $ ruby-1.8.2 mthd_taint.rb\n    0\n    \"safe level: 0\"\n    \n    $ ruby-1.8.3 mthd_taint.rb\n    0\n    mthd_taint.rb:11:in `foo': calling insecure method: foo (SecurityError)\n            from mthd_taint.rb:11\n\n=== 2005-09-09\n: String#*  [ruby] [compat]\n: String#[] [ruby] [compat]\n  空文字にも taint が伝播するようになりました。((<ruby-dev:26900>)) ((<ruby-dev:27121>))\n    $ ruby-1.8.2 -e 'p (\"x\".taint * 0).tainted?'\n    false\n    \n    $ ruby-1.8.3 -e 'p (\"x\".taint * 0).tainted?'\n    true\n\n    $ ruby-1.8.2 -e 'p (\"x\".taint[1..-1]).tainted?'\n    false\n    \n    $ ruby-1.8.3 -e 'p (\"x\".taint[1..-1]).tainted?'\n    true\n\n  Range オブジェクトが taint されている場合、\"string\"[range] も taint されるようになりました。((<ruby-dev:27121>))\n\n    $ ruby-1.8.2 -e 'p (\"x\"[(0..-1).taint]).tainted?'\n    false\n    \n    $ ruby-1.8.3 -e 'p (\"x\"[(0..-1).taint]).tainted?'\n    true\n\n=== 2005-08-29\n: Time.parse [lib] [compat]\n\n  Time.parse が小数点以下の秒も扱えるようになりました。((<ruby-talk:153859>))\n\n    $ ruby-1.8.2 -r time -e 'p  Time.parse(\"23 Aug 2005 19:00:01.1\").to_f'\n    1124791201.0\n    \n    $ ruby-1.8.3 -r time -e 'p  Time.parse(\"23 Aug 2005 19:00:01.1\").to_f'\n    1124791201.1\n\n=== 2005-08-20\n: Logger [lib] [bug]\n  ファイルをシフト時のレースコンディションが修正されました。\n\n=== 2005-08-07\n: WIN32OLE_EVENT#on_event [lib] [bug]\n  最後に定義したイベントハンドラが有効になるように修正しました。\n\n=== 2005-07-27\n: Dir#each    [ruby] [bug]\n: Dir#entries [ruby] [bug]\n\n  1回メソッドを呼んでしまうと空になるバグを修正しました。\n\n    $ ruby-1.8.2 -e '\n    d = Dir.new(\"/\")\n    d.entries\n    p d.entries\n    '\n    []\n     \n    $ ruby-1.8.3 -e '\n    d = Dir.new(\"/\")\n    d.entries\n    p d.entries\n    '\n    [\".\", \"..\", \"dev\", \"home\", \"proc\", \"var\", \"tmp\", \"etc\", \"usr\", \"sbin\", \"bin\", \"boot\"]\n\n\n\n=== 2005-07-11\n: 正規表現 [ruby] [bug]\n\n  正規表現リテラル中で \\c\\\\ 表記があるとパースエラーになるバグを修正しました。\n\n    $ cat r.rb\n    p /[\\c\\\\]/ =~ \"\\c\\\\\"\n    p /\\c\\\\/ =~ \"\\c\\\\\"\n    \n    $ ruby-1.8.2 r.rb\n    r.rb:1: premature end of regular expression: /[\\c\\\\]/\n    r.rb:2: invalid regular expression; '\\' can't be last character: /\\c\\\\/\n    \n    $ ruby-1.8.3 r.rb\n    0\n    0\n\n=== 2005-06-30\n: Delegator [lib] [compat]\n\n  Delegator オブジェクトが生成された後に定義されたメソッドに関しても、適切に委譲するようになりました。\n  ((<ruby-talk:146776>)) ((<ruby-talk:146894>))\n    $ cat test_dlg.rb\n    foo = Object.new\n    foo2 = SimpleDelegator.new(foo)\n    def foo.bar\n      puts \"bar\"\n    end\n    foo2.bar  \n     \n    $ ruby-1.8.2 -r delegate test_dlg.rb\n    test_dlg.rb:6: undefined method `bar' for #<Object:0x4021b0a0> (NoMethodError)\n    \n    $ ruby-1.8.3 -r delegate test_dlg.rb\n    bar\n\n=== 2005-06-20\n: DBM#closed? [lib] [new]\n: GDBM#closed? [lib] [new]\n: SDBM#closed? [lib] [new]\n\n=== 2005-06-16\n\n: Time.parse [lib] [compat]\n\n  うるう秒 \"Fri Jan  1 08:59:60 +0900 1999\" をサポートしている環境において、Time.parse が\n  適切に振舞うようになりました。\n\n=== 2005-06-08\n: Curses.insertln [lib] [new]\n: Curses::Window.insertln [lib] [new]\n\n=== 2005-06-08\n: ext/socket [lib] [compat]\n\n  拡張ライブラリ socket が AIX 上でコンパイルされるようになりました。((<ruby-list:40832>))\n\n=== 2005-06-07\n: Module#class_variable_get [ruby] [new]\n: Module#class_variable_set [ruby] [new]\n  \n  クラスメソッドから((<変数と定数/クラス変数>))にアクセスするための\n  ((<Module#class_variable_get|Module/class_variable_get>)) と\n  ((<Module#class_variable_set|Module/class_variable_set>)) が\n  追加されました。((<ruby-talk:144741>))\n\n    class Fred\n      @@foo = 99\n      def foo\n        @@foo\n      end\n    end\n    \n    def Fred.foo\n      @@foo = 101      #=> @@foo は Fred クラスのクラス変数ではない。\n    end\n    \n    def Fred.foo_foo   \n      class_variable_set(:@@foo, 101)  # self が Fred クラス自身であることに注意。クラス変数 @@foo に値をセットする。\n    end\n    \n    Fred.foo           # メソッドを呼んでも、Fred クラスのクラス変数 @@foo は変わらない。\n    p Fred.new.foo     #=> 99 \n\n    Fred.foo_foo       # \n    p Fred.new.foo     #=> 101\n\n\n=== 2005-05-28\n: WEBrick::CGI::Socket#request_line [lib] [compat]\n\n  WEBrick を CGI 環境下で使う場合、\n  request_line メソッドは REQUEST_URI ヘッダがあればそちらを優先して使うようになりました。\n  ((<ruby-dev:26235>))\n\n=== 2005-05-27\n: mkmf [lib] [bug]\n  MSYS 環境下において、PATHの区切り値にセミコロンを使うよう修正しました。((<ruby-dev:26232>))\n\n=== 2005-05-24\n: getopts [lib] [obsolete]\n  getopts が deprecated になりました。deprecated であるという警告は、\n  オプションに -w を付けた時に出ます。((<ruby-dev:26201>))\n\n=== 2005-05-22\n: OpenSSL::SSL::SSLServer#initialize(svr, ctx, session_id=nil)\n  session_id を受け付けるようになりました。((<ruby-core:4663>))\n\n=== 2005-05-19\n: REXML::Encoding#decode_sjis [lib] [bug]\n: REXML::Encoding#encode_sjis [lib] [bug]\n  decode_sjis と encode_sjis が\n  逆に定義されていたバグを修正しました。((<ruby-core:4772>))\n\n=== 2005-05-16\n: singleton class [ruby] [change]\n  特異クラスは複製できなくなりました。((<ruby-talk:142749>))\n\n    $ ruby-1.8.3 -e 'class << \"str\"; self end.dup'\n    -e:1:in `initialize_copy': can't copy singleton class (TypeError)\n            from -e:1\n\n=== 2005-05-15\n: Pathname#unlink [lib] [compat]\n  ディレクトリへのシンボリックリンクも削除されるようになりました。((<ruby-core:4992>))\n\n=== 2005-05-14\n: NameError\n: SystemCallError\n: SystemExit\n  各例外クラスのインスタンスが生成される時に、親クラスのコンストラクタ\n  である Exception#initialize が呼ばれるようになりました。((<ruby-talk:142593>)) ((<ruby-dev:26177>))\n\n=== 2005-05-11\n: break [ruby] [bug]\n  メソッドを越えて break が有効になるバグを修正しました。((<ruby-list:40818>))\n    \n    $ cat brk.rb\n    def stop(n)\n      break  if n == 2\n    end\n    \n    (1..5).each do |i|\n      stop(i)\n      puts i\n    end\n    \n    $ ruby-1.8.2 brk.rb\n    1\n    \n    $ ruby-1.8.3 brk.rb\n    1\n    brk.rb:2:in `stop': unexpected break (LocalJumpError)\n            from brk.rb:6\n            from brk.rb:5\n\n=== 2005-05-11\n: WEBrick::CGI#[]     [lib] [new]\n: WEBrick::CGI#logger [lib] [new]\n: WEBrick::CGI#config [lib] [new]\n\n=== 2005-05-01\n: ruby -s option [ruby] [bug]\n  オプション -s でアクセスできないグローバル変数ができてしまうバグを修正\n  しました。- を _ に変換してグローバル変数を定義するようになりました。- 以外の\n  記号がふくまれる場合は、例外 NameError を投げます。\n  \n    $ ruby-1.8.2 -se 'puts global_variables.grep(/foo/)' -- --foo-bar\n    $-foo-bar\n    $ ruby-1.8.3 -se 'puts global_variables.grep(/foo/)' -- --foo-bar\n    $_foo_bar\n\n    $ ruby-1.8.3 -se 'puts global_variables.grep(/foo/)' -- --foo\\@bar    \n    -e: invalid name for global variable - --foo@bar (NameError)\n\n=== 2005-04-18\n: WIN32OLE.codepage [lib] [new]\n: WIN32OLE.codepage= [lib] [new]\n\n=== 2005-04-10\n: WIN32OLE#invoke [lib] [bug]\n  nil を VT_ERROR に変換して Invokeを呼び出して失敗するときには VT_EMPTYに変換して\n  再度 Invokeを呼び出すようにしました。\n    \n=== 2005-04-09\n: rss [lib][new][compat]\n\n  複数のDublin Coreの要素を扱えるようになりました。\n\n  このためdc_#{Dublin Coreの要素名の複数形}というメソッドが導入されました。\n\n  互換性のために以前のdc_#{Dublin Coreの要素名の単数形}というメソッドも残されています。\n\n=== 2005-03-07\n: String#<=> [ruby][compat]\n\n  比較できないものを渡された時に false ではなく nil を返すようになりました。\n  ((<ruby-dev:25811>))\n\n    $ ruby-1.8.2 -e 'p \"a\" <=> 1'\n    false \n    $ ruby-1.8.3 -e 'p \"a\" <=> 1'\n    nil\n\n\n=== 2005-03-06\n: HTTPHeader#get_fields [lib][new]\n: HTTPHeader#add_field [lib][new]\n\n  追加。((<ruby-list:40629>))\n\n=== 2005-02-23\n: local variable and method [ruby][bug]\n  レシーバを指定したメソッド呼び出しが、同名のローカル変数の有無によっ\n  て影響されるバグが修正されました。\n  ((<ruby-dev:25737>))\n  ((<URL:http://yowaken.dip.jp/tdiary/20050220.html#p01>))\n\n=== 2005-02-17\n: Open3.popen3 [lib] [compat]\n  Open3.popen3実行後の$?.exitstatusが0になるように修正されました。\n\n: ((<クラス／メソッドの定義/defined?>)) [ruby][bug]\n  (({defined?(@a = b)}))のような NODE_IASGN が nil ではなく\n  \"assignment\" を返すようになりました。\n  ((<\"[yarv-dev:418]\"|URL:http://www.atdot.net/mla/yarv-dev/418>))\n\n=== 2005-02-17\n: Test::Unit::AutoRunner.run [lib] [change]\n  第一引数の意味が変わりました。\n\n=== 2005-02-14\n\n: OpenSSL::SSL::SSLSocket#post_connection_check [lib][new]\n\n  追加 ((<ruby-dev:25690>))\n\n=== 2005-02-13\n\n: ERB::Util.html_escape [lib] [compat]\n: ERB::Util.url_encode [lib] [compat]\n\n  モジュール関数としても使えるようになりました。((<ruby-dev:25687>))\n\n=== 2005-02-12\n\n: open-uri [lib] [new]\n  https をサポートするようになりました。\n\n=== 2005-02-11\n\n: URI::HTTP#proxy_open [lib][new]\n\n  (({:http_basic_authentication})) オプションの追加\n  ((<ruby-core:4416>))\n\n: OpenSSL::X509::Store#set_default_paths [lib][new]\n\n  追加 ((<ruby-dev:25670>))\n\n=== 2005-02-06\n: Resolv::DNS::Resource::TXT#strings [lib] [new]\n: Resolv::DNS::Message::MessageEncoder#put_string_list [lib] [new]\n: Resolv::DNS::Message::MessageDecoder#get_string_list [lib] [new]\n  追加。((<ruby-talk:129732>))\n\n=== 2005-02-04\n\n: RSS Parser/Maker [lib] [new]\n\n  ((<Imageモジュール|URL:http://web.resource.org/rss/1.0/modules/image/>))のサポート\n\n=== 2005-02-03\n\n: RSS::Element#convert(value) [lib] [new]\n   valueのエンコーディングを変換するメソッドを公開。\n   \n   valueのエンコーディングは要素の内部エンコーディングからoutput_encoding=で設定したエンコーディングへ変換されます。\n\n: StringIO [lib] [compat]\n  close, close_read, close_write が ((<IO>)) と同じように、\n  nil を返すようになりました。((<ruby-dev:25623>))\n\n=== 2005-01-29\n\n: Resolv::DNS::Resource::IN::SRV [lib] [new]\n\n  追加\n  (RFC2782)\n\n=== 2005-01-26\n: File#flock [ruby] [bug]\n  Windows 上での File#flock(File::LOCK_UN) が正しく理解されないバグが\n  修正されました。((<ruby-dev:25574>)) \n\n=== 2005-01-25\n: RUBYOPT [ruby] [bug]\n  環境変数 RUBYOPT の -T オプションを適切に解釈するようになりました。\n  またハイフン - を省略できるようになりました。((<ruby-dev:25512>))\n\n    $ env RUBYOPT='Ke rnet/http' ruby  -e 'p Net::HTTP'  \n    Net::HTTP\n\n=== 2005-01-17\n: WEBrick::Config::SSL [lib] [compat]\n  オプション :SSLEnable のデフォルトが false になりました。\n\n: WEBrick::HTTPUtils#escape_path [lib] [new]\n\n=== 2005-01-15\n\n: RSS::VERSION [lib]\n\n  0.1.2 -> 0.1.3\n\n: RSS::Parser [lib] [bug]\n\n  継承するとエラーになるバグを修正。 ((<ruby-talk:126104>))\n\n=== 2005-01-12\n: Class#superclass [ruby] [bug]\n  特異クラスのメソッド superclass が特異クラスを返すように修正されました。\n  ((<ruby-list:40519>))\n\n=== 2005-01-09\n\n: IO#read [obsolete]\n: IO#readpartial [new]\n\n  nonblocking IO に対する IO#read の挙動は ruby 1.9 以降で変化します ((<ruby-dev:25101>))。そのため、\n  ruby 1.8.3 以降では、VERBOSE モードの時に IO#read がノンブロッキングモードで\n  データの読み込みに失敗して ((<Errno::EAGAIN|Errno::EXXX>)) エラーが発生した場合、\n  \"nonblocking IO#read is obsolete\" という警告が出るようになりました。\n  そして ruby 1.8 の nonblocking IO#read の移行先として\n  ruby 1.8.3 に IO#((<IO/readpartial>)) が追加されました。\n  ((<ruby-dev:25430>)) ((<ruby-dev:25443>))\n\n    $ ruby -e 'sleep 1; print \"hoge\"' | ruby-1.8.2 -rio/nonblock -we '\n                                          io = IO.open(0)\n                                          io.nonblock = true\n                                          p io.read(4)'\n    -e:4:in `read': Resource temporarily unavailable (Errno::EAGAIN)\n            from -e:4\n    \n    $ ruby -e 'sleep 1; print \"hoge\"' | ruby-1.8.3 -rio/nonblock -we '\n                                          io = IO.open(0)\n                                          io.nonblock = true\n                                          p io.read(4)'\n    -e:4: warning: nonblocking IO#read is obsolete; use IO#readpartial or IO#sysread\n    -e:4:in `read': Resource temporarily unavailable (Errno::EAGAIN)\n            from -e:4\n    \n    $ ruby -e 'sleep 1; print \"hoge\"' | ruby-1.8.3 -rio/nonblock -we '\n                                          io = IO.open(0)\n                                          io.nonblock = true\n                                          p io.readpartial(4)'\n    \"hoge\"\n\n    $ ruby -e 'sleep 1; print \"hoge\"' | ruby-1.9 -rio/nonblock -we '\n                                          io = IO.open(0)\n                                          io.nonblock = true\n                                          p io.read(4)'\n    \"hoge\"\n\n=== 2005-01-05\n\n: srand(bignum) [compat]\n\n  srand が引数として unsigned long よりも大きな値も受け付けるようになりました。\n\n: rand(bignum)  [bug]\n\n  負の ((<Bignum>)) を受け取っても 正の ((<Bignum>)) を返すようになりました。\n\n=== 2005-01-03\n\n: srand [compat]\n\n  引数を与えない場合、可能なら /dev/urandom を参照するようになりました。((<ruby-dev:25392>))",
          "snippets": []
        }
      ],
      "related_entries": []
    },
    {
      "signature": "CGI#out(options = \"text/html\") { .... }",
      "score": 127,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "HTTP ヘッダと、ブロックで与えられた文字列を標準出力に出力します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/CGI/i/out.html",
          "description": "HTTP ヘッダと、ブロックで与えられた文字列を標準出力に出力します。\n\nHEADリクエスト (REQUEST_METHOD == \"HEAD\") の場合は HTTP ヘッダのみを出力します。\n\ncharset が \"iso-2022-jp\"・\"euc-jp\"・\"shift_jis\" のいずれかで\nある場合は文字列エンコーディングを自動変換し、language を \"ja\"にします。\n\n@param options Hash か文字列で HTTP ヘッダを生成するための情報を指定します。\n\n例：\n        cgi = CGI.new\n        cgi.out{ \"string\" }\n          # Content-Type: text/html\n          # Content-Length: 6\n          #\n          # string\n\n        cgi.out(\"text/plain\"){ \"string\" }\n          # Content-Type: text/plain\n          # Content-Length: 6\n          #\n          # string\n\n        cgi.out({\"nph\"        => true,\n                 \"status\"     => \"OK\",  # == \"200 OK\"\n                 \"server\"     => ENV['SERVER_SOFTWARE'],\n                 \"connection\" => \"close\",\n                 \"type\"       => \"text/html\",\n                 \"charset\"    => \"iso-2022-jp\",\n                   # Content-Type: text/html; charset=iso-2022-jp\n                 \"language\"   => \"ja\",\n                 \"expires\"    => Time.now + (3600 * 24 * 30),\n                 \"cookie\"     => [cookie1, cookie2],\n                 \"my_header1\" => \"my_value\",\n                 \"my_header2\" => \"my_value\"}){ \"string\" }\n\n@see CGI#header",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "CGI",
          "label": "CGI",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:CGI/"
        },
        {
          "key": "Hash",
          "label": "Hash",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:Hash/"
        }
      ]
    },
    {
      "signature": "cgi",
      "score": 91,
      "metadata": {
        "type": "library",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "CGI プログラムの支援ライブラリです。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/library/cgi.html",
          "description": "CGI プログラムの支援ライブラリです。\n\nCGI プロトコルの詳細については以下の文書を参照してください。\n\n  * https://tools.ietf.org/html/draft-coar-cgi-v11-03\n  * 3875: The Common Gateway Interface (CGI) Version 1.1\n  * https://www.w3.org/CGI/\n\n=== 使用例\n\n==== フォームフィールドの値を得る\n\n  require \"cgi\"\n  cgi = CGI.new\n  values = cgi['field_name']   # <== 'field_name' の配列\n  # 'field_name' が指定されていなかったら、 \"\"を返す。\n  fields = cgi.keys            # <== field nameの配列\n\n  # フォームに 'field_name' というfield nameがあるときに真\n  cgi.has_key?('field_name')\n  cgi.include?('field_name')\n\n==== フォームフィールドの値をハッシュとして得る\n\nフォームの値をハッシュとして得るには CGI#params を使います。\n\n  例\n  require \"cgi\"\n  cgi = CGI.new\n  params = cgi.params\n\nまた CGI#params は毎回同じ Hash オブジェクトを返すので\n以下のような使いかたもできます。\n\n  cgi.params['new_field_name'] = [\"value\"]  # 新しいパラメータを加える\n  cgi.params['field_name'] = [\"new_value\"]  # パラメータの値を変える\n  cgi.params.delete('field_name')           # パラメータを消去\n  cgi.params.clear                          # 全パラメータを消去\n\n==== フォームフィールドの値をファイルに保存する\n\nPStore を使うのが最も簡単です。\n\n  # 保存\n  require 'pstore'\n  db = PStore.new(\"query.db\")\n  db.transaction do\n    db[\"params\"] = cgi.params\n  end\n\n  # 復帰\n  require 'pstore'\n  db = PStore.new(\"query.db\")\n  db.transaction do\n    cgi.params = db[\"params\"]\n  end\n\nただし、PStore は Ruby のバージョンによってデータ互換性が\nなくなることがあるので、長い期間データを保存することがある\n場合には検討が必要です。\n\nPStore も参照してください。\n\n==== マルチパートフィールドの値を取得する（ファイル送信）\n\n  require \"cgi\"\n  cgi = CGI.new\n  value = cgi.params['field_name'][0]   # TempFile オブジェクト（10240バイト未満の場合は StringIOオブジェクト）\n  value.read                            # 本文（送られてきたファイルの中身）\n  value.local_path                      # ローカルファイルのパス\n  value.original_filename               # 元の名前\n  value.content_type                    # content_type\n\n\n\n==== クライアントにクッキーを渡す\n\n  require \"cgi\"\n  cgi = CGI.new\n  for name, cookie in cgi.cookies\n    cookie.expires = Time.now + 30\n  end\n  cgi.out(\"cookie\" => cgi.cookies){\"string\"}\n\n  cgi.cookies # { \"name1\" => cookie1, \"name2\" => cookie2, ... }\n\n  require \"cgi\"\n  cgi = CGI.new\n  cgi.cookies['name'].expires = Time.now + 30\n  cgi.out(\"cookie\" => cgi.cookies['name']){\"string\"}\n\n==== クライアントからクッキーを得る\n\n  require \"cgi\"\n  cgi = CGI.new\n  values = cgi.cookies['name']  # values は name クッキーの値の配列。\n                                # name クッキーが存在しない場合は空配列を返す。\n  names = cgi.cookies.keys      # 全てのクッキーの名前の配列\n\n==== CGI に関連する環境変数の値を取得する\n\nCGI に関連する環境変数の値は直接 ENV から得る他に、\nCGI クラスのメソッドで得ることもできます。\n基本的には環境変数の名前を downcase したメソッドにマップされます。\n例えば AUTH_TYPE には CGI#auth_type が対応します。\n\n  require \"cgi\"\n  cgi = CGI.new\n  value = cgi.auth_type\n\nこのような環境変数には以下のものがあります。\n\n  * AUTH_TYPE\n  * CONTENT_LENGTH\n  * CONTENT_TYPE\n  * GATEWAY_INTERFACE\n  * PATH_INFO\n  * PATH_TRANSLATED\n  * QUERY_STRING\n  * REMOTE_ADDR\n  * REMOTE_HOST\n  * REMOTE_IDENT\n  * REMOTE_USER\n  * REQUEST_METHOD\n  * SCRIPT_NAME\n  * SERVER_NAME\n  * SERVER_PORT\n  * SERVER_PROTOCOL\n  * SERVER_SOFTWARE\n\n#content_length と #server_port\nは整数を、その他のメソッドは文字列を返します。\n\nHTTP_COOKIE と HTTP_COOKIE2 には\nそれぞれ raw_cookie と raw_cookie2 が対応します。\n\n  value = cgi.raw_cookie      # ENV[\"HTTP_COOKIE\"]\n  value = cgi.raw_cookie2     # ENV[\"HTTP_COOKIE2\"]\n\n最後に、以下の HTTP 関連の環境変数は HTTP_ を除いた部分を downcase\nしたメソッド名が定義されています。\n\n  例\n  value = cgi.accept              # ENV[\"HTTP_ACCEPT\"]\n  value = cgi.accept_charset      # ENV[\"HTTP_ACCEPT_CHARSET\"]\n\nこのような環境変数には以下のものがあります。\n\n  * HTTP_ACCEPT\n  * HTTP_ACCEPT_CHARSET\n  * HTTP_ACCEPT_ENCODING\n  * HTTP_ACCEPT_LANGUAGE\n  * HTTP_CACHE_CONTROL\n  * HTTP_FROM\n  * HTTP_HOST\n  * HTTP_NEGOTIATE\n  * HTTP_PRAGMA\n  * HTTP_REFERER\n  * HTTP_USER_AGENT\n\nCGI に関連する環境変数に関しては\nhttp://www.w3.org/CGI/ も参照してください。\n\n==== 標準出力に HTTP ヘッダと HTML を出力する\n\n  require \"cgi\"\n  cgi = CGI.new(\"html3\")  # HTML生成メソッドを追加\n  cgi.out() do\n    cgi.html() do\n      cgi.head{ cgi.title{\"TITLE\"} } +\n      cgi.body() do\n        cgi.form() do\n          cgi.textarea(\"get_text\") +\n          cgi.br +\n          cgi.submit\n        end +\n        cgi.pre() do\n          CGI.escapeHTML(\n            \"params: \" + cgi.params.inspect + \"\\n\" +\n            \"cookies: \" + cgi.cookies.inspect + \"\\n\" +\n            ENV.collect() do |key, value|\n              key + \" --> \" + value + \"\\n\"\n            end.join(\"\")\n          )\n        end\n      end\n    end\n  end\n\n  # HTML生成メソッドを追加\n  CGI.new(\"html3\")    # html3.2\n  CGI.new(\"html4\")    # html4.0 (Strict)\n  CGI.new(\"html4Tr\")  # html4.0 Transitional\n  CGI.new(\"html4Fr\")  # html4.0 Frameset\n\n==== ファイルのアップロード\n\n25399 を参照してください。\n\n=== オフラインモード\n\ncgi には、コマンドラインから CGI スクリプトを動かすための仕組み（オフラインモード）があります。\nコマンドラインから以下のように実行すると、\n\n  $ ruby -r cgi some_script.rb\n  (offline mode: enter name=value pairs on standard input)\n\nと聞いてくるので、\n\n  q=hoge&v=foo\n\nなどと入力して下さい。クエリーに入力された値がセットされて、スクリプトが実行されます。\n\nなお、Windows 環境の場合、ただ値を入力して Enter を押すだけでは実行されません。キーボードから Ctrl + Z を入力する必要があります。\n\n\n=== HTMLエレメント出力用メソッド\n新たな CGI オブジェクトを生成する際、引数として特定の文字列を与えることによって、そのオブジェクトに HTML 生成用のメソッドを追加することができます。これらのメソッドを利用することにより、「よりRuby的に」HTML 文書を出力することが可能になります。\n\n例:\n\n  cgi = CGI.new(\"html3\")  # HTML3.2に準拠したHTML生成メソッドを追加\n  cgi.h1\n    # <H1></h1>\n  cgi.h1{ \"content\" }\n    # <H1>content</H1>\n  cgi.h1({ \"class\" => \"foo\", \"attr\" => \"bar\" }){ \"content\" }\n    # <H1 class=\"foo\" attr=\"bar\">content</H1>\n\n  # HTML生成メソッドを追加\n  CGI.new(\"html3\")    # html3.2\n  CGI.new(\"html4\")    # html4.0 (Strict)\n  CGI.new(\"html4Tr\")  # html4.0 Transitional\n  CGI.new(\"html4Fr\")  # html4.0 Frameset\n\nHTML 生成メソッドの引数としては、基本的に Hash オブジェクトが与えられる（あるいは何も与えられない）べきです。\nただし以下に列挙されたメソッドでは、各メソッドの引数の形式に従って、 Hash オブジェクト以外のものを渡すこともできます。",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "cgi/cookie",
          "label": "cgi/cookie",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:cgi%2Fcookie/"
        },
        {
          "key": "cgi/core",
          "label": "cgi/core",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:cgi%2Fcore/"
        },
        {
          "key": "cgi/html",
          "label": "cgi/html",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:cgi%2Fhtml/"
        },
        {
          "key": "cgi/session",
          "label": "cgi/session",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:cgi%2Fsession/"
        },
        {
          "key": "cgi/session/pstore",
          "label": "cgi/session/pstore",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:cgi%2Fsession%2Fpstore/"
        },
        {
          "key": "cgi/util",
          "label": "cgi/util",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:cgi%2Futil/"
        }
      ]
    },
    {
      "signature": "Symbol#empty? -> bool",
      "score": 67,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "自身が :\"\" (length が 0 のシンボル)かどうかを返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Symbol/i/empty=3f.html",
          "description": "自身が :\"\" (length が 0 のシンボル)かどうかを返します。\n\n  :\"\".empty?  #=> true\n  :foo.empty? #=> false\n\n@see String#empty?",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Symbol",
          "label": "Symbol",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:Symbol/"
        }
      ]
    },
    {
      "signature": "Forwardable#delegate(hash) -> ()",
      "score": 55,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "メソッドの委譲先を設定します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Forwardable/i/delegate.html",
          "description": "メソッドの委譲先を設定します。\n\n@param hash 委譲先のメソッドがキー、委譲先のオブジェクトが値の\n            Hash を指定します。キーは Symbol、\n            String かその配列で指定します。\n\n\n例:\n\n  require 'forwardable'\n  class Zap\n     extend Forwardable\n     delegate :length => :@str\n     delegate [:first, :last] => :@arr\n     def initialize\n        @arr = %w/foo bar baz/\n        @str = \"world\"\n     end\n  end\n\n  zap = Zap.new\n  zap.length # => 5\n  zap.first  # => \"foo\"\n  zap.last   # => \"baz\"",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Forwardable",
          "label": "Forwardable",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:Forwardable/"
        }
      ]
    },
    {
      "signature": "Forwardable#instance_delegate(hash) -> ()",
      "score": 55,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "メソッドの委譲先を設定します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Forwardable/i/delegate.html",
          "description": "メソッドの委譲先を設定します。\n\n@param hash 委譲先のメソッドがキー、委譲先のオブジェクトが値の\n            Hash を指定します。キーは Symbol、\n            String かその配列で指定します。\n\n\n例:\n\n  require 'forwardable'\n  class Zap\n     extend Forwardable\n     delegate :length => :@str\n     delegate [:first, :last] => :@arr\n     def initialize\n        @arr = %w/foo bar baz/\n        @str = \"world\"\n     end\n  end\n\n  zap = Zap.new\n  zap.length # => 5\n  zap.first  # => \"foo\"\n  zap.last   # => \"baz\"",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Forwardable",
          "label": "Forwardable",
          "type": "module",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/module:Forwardable/"
        }
      ]
    },
    {
      "signature": "webrick/cgi",
      "score": 55,
      "metadata": {
        "type": "library",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "一般の CGI 環境で webrick ライブラリのサーブレットと同じように CGI スクリプトを書くための\nライブラリです。サーバが WEBrick でなくても使うことが出来ます。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/library/webrick=2fcgi.html",
          "description": "一般の CGI 環境で webrick ライブラリのサーブレットと同じように CGI スクリプトを書くための\nライブラリです。サーバが WEBrick でなくても使うことが出来ます。\n\n=== 使い方\n\nWEBrick のサーブレットを作成するのと同じように、WEBrick::CGI のサブクラスでメソッド\ndo_GET や do_POST を定義することによって CGI スクリプトを書きます。\n\nスクリプトの最後で WEBrick::CGI#start メソッドを呼ぶ必要があります。\nWEBrick::CGI#start メソッドは service メソッドを呼び出し、service メソッドはリクエストに応じて\ndo_XXX メソッドを呼び出します。このようにしてスクリプトは実行されます。\n\n例:\n\n #!/usr/local/bin/ruby\n require 'webrick/cgi'\n\n class MyCGI < WEBrick::CGI\n   def do_GET(req, res)\n     res[\"content-type\"] = \"text/plain\"\n     ret = \"hoge\\n\"\n     res.body = ret\n   end\n end\n \n MyCGI.new.start()\n\n==== do_XXX メソッド\n\ndo_XXX メソッドの XXX には GET, HEAD, POST, PUT, DELETE, OPTIONS が使用できます。\n\nWEBrick::CGI のサブクラスで定義された do_XXX メソッドは WEBrick::CGI#service メソッド\nから HTTP のリクエストに応じて自動的に呼び出されます。\nなので WEBrick::CGI のサブクラスはこれらのメソッドを適切に実装しなければなりません。\nこれらのメソッドの返り値は特に規定されていません。\n\nWEBrick::CGI のサブクラスでは、クライアントが使う可能性のある RFC で定義された HTTP の\nメソッドはすべて実装する必要があります。\nクライアントからのリクエストに使われないと分かっているメソッドは実装しなくてもかまいません。\n実装されていない HTTP メソッドであった場合、WEBrick::CGI#service メソッドが例外を発生させます。\n\ndo_XXX メソッドが呼ばれた時点では、クライアントからのリクエストに含まれる Entity Body の読み込みは\nまだ行われていません。WEBrick::HTTPRequest#query, WEBrick::HTTPRequest#body などの\nメソッドが読ばれた時点で読み込みが行われます。クライアントから巨大なデータが送られてくることを考慮して\nユーザはプログラミングを行うべきです。\n\ndo_XXX メソッドには二つの引数があります。\n第一引数は、クライアントからのリクエストを表す WEBrick::HTTPRequest オブジェクトです。\n第二引数は、クライアントへのレスポンスを表す WEBrick::HTTPResponse オブジェクトです。\n\n==== フォームフィールドの値を得る\n\nフォームフィールドの値は WEBrick::HTTPRequest#query メソッドが返す Hash オブジェクトに\n収納されています。\n\n require \"webrick/cgi\"\n class MyCGI < WEBrick::CGI\n   def do_GET(req, res)\n     req.query               #=> Hash を返します。\n     req.query['q']          \n     req.query['num']       \n   end\n end\n MyCGI.new.start()\n\n同じ名前のフィールドが複数ある場合、list メソッドや each_data メソッドを使います。\n\n require \"webrick/cgi\"\n class MyCGI < WEBrick::CGI\n   def do_GET(req, res)\n     req.query['q'].list     #=> フォームの値を保持した文字列の配列を返します。\n   end\n end\n MyCGI.new.start()\n\nquery メソッドが返す Hash オブジェクトのキーと値のうち値は WEBrick::HTTPUtils::FormData クラスの\nインスタンスになります。FormData クラスは String クラスのサブクラスです。\n\n\n==== マルチパートフィールドの値を取得する（ファイル送信）\n\n require \"webrick/cgi\"\n class MyCGI < WEBrick::CGI\n   def do_GET(req, res)\n     d = req.query['field_name']   #=> FormData クラスのインスタンス\n     d.name                        #=> \"field_name\"\n     d.filename                    #=> もしあればファイル名を返す。\n     d['content-type']             #=> ヘッダの値は [] メソッドで取得する\n     d                             #=> 送られてきたファイルの中身\n   end\n end\n MyCGI.new.start()\n\n\n==== クライアントにクッキーを渡す\n\n require \"webrick/cgi\"\n class MyCGI < WEBrick::CGI\n   def do_GET(req, res)\n     c1 = WEBrick::Cookie.new(\"name1\", \"val1\")\n     c1.expires = Time.now + 30\n     res.cookies << c1\n     \n     c2 = WEBrick::Cookie.new(\"name2\", \"val2\")\n     c2.expires = Time.now + 30\n     res.cookies << c2\n   end\n end\n MyCGI.new.start()\n\n==== クライアントからクッキーを得る\n\n require \"webrick/cgi\"\n class MyCGI < WEBrick::CGI\n   def do_GET(req, res)\n     req.cookies                                   #=> WEBrick::Cookie オブジェクトの配列\n     c = req.cookies.find{|c| c.name == \"name1\" }  #=> WEBrick::Cookie オブジェクト\n   end\n end\n MyCGI.new.start()\n\n\n==== CGI に関連する環境変数の値を取得する\n\nCGI に関連する環境変数の値は直接 ENV から得る他に、\nWEBrick::HTTPRequest オブジェクトの各メソッドから得ることができます。\n\n require \"webrick/cgi\"\n class MyCGI < WEBrick::CGI\n   def do_GET(req, res)\n     req.content_length\n     req.content_type\n     req.path_info\n     req.query_string\n     req.peeraddr\n     req.host\n     req.user\n     req.request_method\n     req.script_name\n     req.port\n   end\n end\n MyCGI.new.start()\n\n=== リンク\n\n * 3875",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "WEBrick::CGI",
          "label": "WEBrick::CGI",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:WEBrick%3A%3ACGI/"
        },
        {
          "key": "WEBrick::CGI::CGIError",
          "label": "WEBrick::CGI::CGIError",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:WEBrick%3A%3ACGI%3A%3ACGIError/"
        },
        {
          "key": "webrick/config",
          "label": "webrick/config",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:webrick%2Fconfig/"
        },
        {
          "key": "webrick/cookie",
          "label": "webrick/cookie",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:webrick%2Fcookie/"
        },
        {
          "key": "webrick/htmlutils",
          "label": "webrick/htmlutils",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:webrick%2Fhtmlutils/"
        },
        {
          "key": "webrick/httprequest",
          "label": "webrick/httprequest",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:webrick%2Fhttprequest/"
        },
        {
          "key": "webrick/httpresponse",
          "label": "webrick/httpresponse",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:webrick%2Fhttpresponse/"
        },
        {
          "key": "webrick/httpstatus",
          "label": "webrick/httpstatus",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:webrick%2Fhttpstatus/"
        },
        {
          "key": "webrick/httputils",
          "label": "webrick/httputils",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:webrick%2Fhttputils/"
        },
        {
          "key": "webrick/httpversion",
          "label": "webrick/httpversion",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:webrick%2Fhttpversion/"
        },
        {
          "key": "webrick/log",
          "label": "webrick/log",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:webrick%2Flog/"
        },
        {
          "key": "webrick/utils",
          "label": "webrick/utils",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:webrick%2Futils/"
        }
      ]
    },
    {
      "signature": "Encoding#dummy? -> bool",
      "score": 37,
      "metadata": {
        "type": "instance-method",
        "versions": [
          "3.0.0"
        ]
      },
      "summary": "自身がダミーエンコーディングである場合に true を返します。\nそうでない場合に false を返します。",
      "documents": [
        {
          "version": "3.0.0",
          "url": "https://docs.ruby-lang.org/ja/search/http://docs.ruby-lang.org/ja/3.0.0/method/Encoding/i/dummy=3f.html",
          "description": "自身がダミーエンコーディングである場合に true を返します。\nそうでない場合に false を返します。\n\nダミーエンコーディングとは Ruby が名前を知っているものの実質的には対応していないエンコーディングのことです。例えば、ダミーエンコーディングで符号化された文字列の場合、 String#length はマルチバイト文字を考慮せずにバイト列の長さを返します。\n\nダミーエンコーディングも IO の外部エンコーディングに指定できます。また\nRuby はサポートしていないが拡張ライブラリがサポートしているエンコーディングを扱う場合にも\n用います。\n\n//emlist[例][ruby]{\nEncoding::ISO_2022_JP.dummy?       #=> true\nEncoding::UTF_8.dummy?             #=> false\n//}",
          "snippets": []
        }
      ],
      "related_entries": [
        {
          "key": "Encoding",
          "label": "Encoding",
          "type": "class",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/class:Encoding/"
        },
        {
          "key": "IO",
          "label": "IO",
          "type": "query",
          "url": "https://docs.ruby-lang.org/ja/search/api:v1/query:IO/"
        }
      ]
    }
  ]
}
